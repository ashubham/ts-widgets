import { l as _, a as __decorate } from './chunk-1bec01b6.js';
import { c as createCommonjsModule, u as unwrapExports, a as commonjsGlobal } from './chunk-5732a1e2.js';

var blinkConstants = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.blinkConstants = {
    DEFAULT_DATA_BATCH_SIZE: 1000,
    DEFAULT_DEBOUNCING_TIME: 500,
    MAX_PICTURE_SIZE_POST_SCALE: 4,
    ACTIVE_SESSION_CHECK_TIME_PERIOD: 30 * 1000,
    URL_CAPTION_REGEX: /{caption}(.*){\/caption}/,
    METADATA_ANSWER_TYPE: 'answers',
    METADATA_PINBOARDS_TYPE: 'pinboards',
    METADATA_PAGE_SIZE: 20,
    ANSWER_TYPE: 'answer',
    IMPORTED_DATA_TYPE: 'imported-data',
    INSIGHT_TYPE: 'insight',
    SAVED_ANSWER_TYPE: 'saved-answer',
    PINBOARD_TYPE: 'pinboard',
    RELATED_LINK_TYPE: 'relatedLinkType',
    UNIVERSAL_SEARCH_TYPE: 'universal-search',
    VIEW_TYPE: 'view',
    WORKSHEET_TYPE: 'worksheet',
    ANSWER_DISPLAY_MODE_PREFERENCE_KEY: 'answer-display-mode-preference-key',
    FILE_TYPE: {
        CSV: 'csv',
        XLS: 'xls',
        PDF: 'pdf',
        XLSX: 'xlsx'
    },
    defaultAdminEmail: 'admin@thoughtspot.com',
    defaultProductName: 'ThoughtSpot',
    PieChartCardinalityThreshold: 50,
    LEFT_PANEL_GROUPING_THRESHOLD: 75,
    headline: {
        MAX_PIXEL_WIDTH_SUMMARY_VALUE: 100
    },
    schemaType: {
        TABLE: 'table',
        WORKSHEET: 'worksheet',
        ANSWER: 'answer'
    },
    chartScreen: {
        HD_MIN: 720,
        FHD_MIN: 1600,
        QHD_MIN: 1920,
        UHD_MIN: 2560
    },
    metadataListPage: {
        jobRunColId: {
            START_TIME: 'startTimeCol',
            END_TIME: 'endTimeCol',
            STATE: 'stateCol'
        },
        jobRunColClass: {
            START_TIME: 'bk-job-start-time',
            END_TIME: 'bk-job-end-time',
            STATE: 'bk-job-run-state'
        },
        jobColId: {
            STATE: 'stateCol',
            CRON_SCHEDULE: 'cronScheduleCol',
            RECIPIENT: 'recipientCol'
        },
        jobColClass: {
            STATE: 'bk-job-state',
            CRON_SCHEDULE: 'bk-job-cron-schedule',
            RECIPIENT: 'bk-job-recipient'
        },
        listColId: {
            NAME: 'nameCol',
            DISPLAYED_NAME: 'displayedNameCol',
            DESCRIPTION: 'descriptionCol',
            DATE: 'dateCol',
            CREATED_AT: 'dateCreatedCol',
            CONNECTION_ICON: 'connectionIconCol',
            CONNECTOR: 'connectorCol',
            MODIFIED: 'dateModifiedCol',
            MATERIALIZED: 'materializeStatusCol',
            AUTHOR: 'authorCol',
            PROVIDED_BY: 'providedByCol',
            STICKERS: 'stickersCol',
            SOURCE: 'sourceCol',
            DATA_SOURCE_TYPE: 'dataSourceTypeCol',
            DATA_SOURCE_SCHEDULED: 'dataSourceScheduledCol',
            DATA_SOURCE_LOAD_STATUS: 'dataSourceLoadStatusCol',
            STATUS_VIEWER_LOAD_STATUS: 'statusViewerLoadStatusCol',
            DATA_FILTER_TABLE: 'dataFilterTableCol',
            DATA_FILTER_COLUMN: 'dataFilterColumnCol',
            DATA_FILTER_CONDITION: 'dataFilterConditionCol',
            DATA_FILTER_TEXT: 'dataFilterTextCol',
            JOB_OPERATION: 'jobOperation',
            TRANSFORMATION_EDITOR_COLUMN: 'transformationEditorColumnCol',
            TRANSFORMATION_EDITOR_TABLE: 'transformationEditorTableCol',
            TRANSFORMATION_EDITOR_EXPRESSION: 'transformationEditorExpressionCol',
            A3_JOB_RESULT: 'a3JobResult',
            A3_JOB_RUN_RESULT: 'a3JobRunResult',
            A3_FEEDBACK: 'A3Feedback',
            A3_FEEDBACK_RATING: 'A3FeedbackRating',
            A3_WATCH_MGMT_CHART: 'A3WatchMgmtChart',
            A3_WATCH_MGMT_CHANGE: 'A3WatchMgmtChange',
            A3_WATCH_MGMT_LAST_RUN: 'A3WatchMgmtLastRun',
            A3_WATCH_MGMT_FOLLOWING: 'A3WatchMgmtFollowing',
            EMBRACE_TABLE_ICON: 'embraceTableIconCol',
            EMBRACE_TABLE_LAST_SYNC: 'embraceLastSyncCol',
            EMBRACE_SYNC_LIST_STATUS: 'embraceSyncListStatusCol',
            EMBRACE_SYNC_LIST_LAST_UPDATED: 'embraceSyncListLastUpdatedCol',
            EMBRACE_SYNC_LIST_TYPE: 'embraceSyncListTypeCol',
            EMBRACE_SYNC_LIST_ACTIONS: 'embraceSyncListActionsCol',
            EMBRACE_HISTORY_SCHEDULED: 'embraceHistoryScheduledCol',
            EMBRACE_HISTORY_ROWS: 'embraceHistoryNoOfRowsCol',
            EMBRACE_HISTORY_TIME_TAKEN: 'embraceHistoryTimeTakenCol',
            EMBRACE_HISTORY_STATUS: 'embraceHistoryStatusCol',
            RESOLVED_STATUS: 'resolvedStatusCol',
            EXPERTS: 'expertsCol',
            DEFAULT_PINBOARD: 'defaultPinboards'
        },
        listColClass: {
            NAME: 'bk-name',
            DISPLAYED_NAME: 'bk-display-name',
            DESCRIPTION: 'bk-description',
            DATE: 'bk-time-and-author',
            CREATED_AT: 'bk-time-and-author',
            CONNECTION_ICON: 'bk-connection-icon',
            CONNECTOR: 'bk-connector',
            MODIFIED: 'bk-time-and-author',
            MATERIALIZED: 'bk-view-status',
            AUTHOR: 'bk-profile-pic-container',
            PROVIDED_BY: 'bk-profile-pic-container',
            STICKERS: 'bk-list-label',
            SOURCE: 'bk-list-source',
            DATA_SOURCE_TYPE: 'bk-ds-type',
            DATA_SOURCE_SCHEDULED: 'bk-ds-scheduled',
            DATA_SOURCE_LOAD_STATUS: 'bk-ds-load-status',
            STATUS_VIEWER_LOAD_STATUS: 'bk-status-viewer-load-status',
            DATA_FILTER_TABLE: 'bk-data-filter-table',
            DATA_FILTER_COLUMN: 'bk-data-filter-column',
            DATA_FILTER_CONDITION: 'bk-data-filter-condition',
            DATA_FILTER_TEXT: 'bk-data-filter-text',
            JOB_OPERATION: 'bk-job-operations',
            TRANSFORMATION_EDITOR_COLUMN: 'bk-transformation-editor-column',
            TRANSFORMATION_EDITOR_TABLE: 'bk-transformation-editor-table',
            TRANSFORMATION_EDITOR_EXPRESSION: 'bk-transformation-editor-expression',
            A3_JOB_RESULT: 'bk-a3-job-result',
            A3_JOB_RUN_RESULT: 'bk-a3-job-run-result',
            A3_FEEDBACK: 'bk-a3-feedback-tab-feedback-column',
            A3_FEEDBACK_RATING: 'bk-a3-feedback-rating',
            A3_WATCH_MGMT_CHART: 'bk-a3-watch-mgmt-chart',
            A3_WATCH_MGMT_CHANGE: 'bk-a3-watch-mgmt-change',
            A3_WATCH_MGMT_LAST_RUN: 'bk-a3-watch-mgmt-last-run',
            A3_WATCH_MGMT_FOLLOWING: 'bk-a3-watch-mgmt-following',
            EMBRACE_TABLE_ICON: 'bk-embrace-table-icon',
            EMBRACE_TABLE_TYPE: 'bk-embrace-table-type',
            EMBRACE_TABLE_LAST_SYNC: 'bk-embrace-table-last-sync',
            EMBRACE_SYNC_LIST_STATUS: 'bk-embrace-sync-list-status',
            EMBRACE_SYNC_LIST_LAST_UPDATED: 'bk-embrace-sync-list-last-updated',
            EMBRACE_SYNC_LIST_TYPE: 'bk-embrace-sync-list-type',
            EMBRACE_SYNC_LIST_ACTIONS: 'bk-embrace-sync-list-actions',
            EMBRACE_HISTORY_SCHEDULED: 'bk-embrace-history-scheduled-on',
            EMBRACE_HISTORY_ROWS: 'bk-embrace-history-rows-retrieved',
            EMBRACE_HISTORY_TIME_TAKEN: 'bk-embrace-history-time-taken',
            EMBRACE_HISTORY_STATUS: 'bk-embrace-history-status',
            RESOLVED_STATUS: 'bk-resolved-status',
            EXPERTS: 'bk-experts-list',
            DEFAULT_PINBOARD: 'bk-default-pinboard'
        },
        autoRefresh: {
            A3_JOB_REFRESH_MS: 5000
        },
        pinboards: {
            button: {
                icon: 'rd-icon-add-l',
                iconSize: 'l',
                iconType: 'info',
                class: 'bk-create-new-pinboard'
            }
        },
        relatedLink: {
            button: {
                icon: 'rd-icon-add-l',
                iconSize: 'l',
                iconType: 'info',
                class: 'bk-create-new-related-link'
            }
        },
        dataManagement: {
            tables: {
                tabId: 'tablesTab'
            },
            dataSources: {
                tabId: 'dataSourcesTab',
            },
            embrace: {
                tabId: 'embraceTab'
            },
            privileges: {
                DATAMANAGEMENT: 'DATAMANAGEMENT',
                ADMINISTRATION: 'ADMINISTRATION',
                SYSTEMMANAGEMENT: 'SYSTEMMANAGEMENT'
            }
        },
        embrace: {
            button: {
                icon: 'rd-icon-add-l',
                iconSize: 'l',
                iconType: 'info'
            }
        },
        jobs: {
            button: {
                icon: 'rd-icon-add-l',
                iconSize: 'l',
                iconType: 'info',
                class: 'bk-create-new-job'
            }
        },
        actions: {
            share: {
                icon: 'rd-icon-share-l',
                iconSize: 'l'
            },
            delete: {
                icon: 'rd-icon-delete-l',
                iconSize: 'l'
            },
            tag: {
                icon: 'rd-icon-tag-l',
                class: 'bk-apply-label-btn',
                iconSize: 'l'
            },
            reset: {
                icon: 'bk-style-icon-reset'
            },
            abort: {
                icon: 'bk-style-icon-cross'
            },
            schedule: {
                icon: 'rd-icon-schedule-m'
            },
            pause: {
                icon: 'rd-icon-pause-l',
                class: 'bk-pause-job-btn',
                iconSize: 'l'
            },
            resume: {
                icon: 'rd-icon-play-l',
                class: 'bk-resume-job-btn',
                iconSize: 'l'
            },
            export: {
                icon: 'rd-icon-download-m'
            },
            import: {
                icon: 'rd-icon-upload-m',
                iconSize: 'm'
            },
            download: {
                icon: 'rd-icon-download-m'
            },
            sendEmail: {
                icon: 'rd-icon-share-m'
            },
            relate: {
                icon: 'rd-icon-copy-link-m'
            },
            time: {
                icon: 'rd-icon-time-m'
            }
        },
        sizes: {
            FIXED: 'fixed',
            SMALL: 'small',
            MEDIUM: 'medium',
            LARGE: 'large'
        },
        expertRequests: {
            MY_REQUESTS_TAB: 'myRequestsTab',
            REQUESTS_FOR_ME_TAB: 'requestsForMeTab'
        }
    },
    HTTP_STATUS_NOT_LOGGED_IN: 401,
    HTTP_STATUS_NOT_AUTHORIZED: 403,
    ALL_GROUP_GUID: 'b25ee394-9d13-49e3-9385-cd97f5b253b4',
    SUPER_USER_GUID: '0f0dd0f7-7411-4195-a4aa-0dc6b58413c9',
    SYSTEM_USER_GUID: '67e15c06-d153-4924-a4cd-ff615393b60f',
    ADMIN_GROUP_GUID: 'd0326b56-ef23-4c8a-8327-a30e99bcc72b',
    SYSTEM_GROUP_GUID: '179d8867-cf36-4a8d-a019-63a226fd3196',
    TSADMIN_USER_GUID: '59481331-ee53-42be-a548-bd87be6ddd4a',
    HIDDEN_OBJECT_GUID: '31745bb4-defd-4e8b-8de9-8fd01db78827',
    GUIDS_TO_SKIP: [
        'b25ee394-9d13-49e3-9385-cd97f5b253b4',
        '0f0dd0f7-7411-4195-a4aa-0dc6b58413c9',
        '67e15c06-d153-4924-a4cd-ff615393b60f',
        '179d8867-cf36-4a8d-a019-63a226fd3196'
    ],
    CHART_TOOLTIP_DELAY: 200,
    columnAdditionNotAllowedReasonTypes: {
        tooManyColumns: 'TOO_MANY_COLUMNS',
        complexQuery: 'COMPLEX_QUERY',
        missingUnderlyingAccess: 'MISSING_UNDERLYING_ACCESS',
        noColumnsSelected: 'NO_COLUMNS_SELECTED'
    },
    derivedColumnExprTypes: {
        DERIVATION_TYPE_LCR: 'LOGICAL_COLUMN_REFERENCE',
        DERIVATION_TYPE_EXPRESSION: 'EXPRESSION'
    },
    keyCodes: {
        UP_ARROW: 38,
        DOWN_ARROW: 40,
        ENTER_KEY: 13,
        TAB_KEY: 9,
        ESC_KEY: 27
    },
    documentType: {
        ANSWER: 'ANSWER',
        SAVED_ANSWER: 'SAVED-ANSWER',
        REPLAY_ANSWER: 'REPLAY-ANSWER',
        PINBOARD: 'PINBOARD',
        WORKSHEET: 'WORKSHEET',
        VIEW: 'view'
    },
    dataColumnHeaders: {
        indexType: {
            MIN_WIDTH: 236
        },
        geoConfig: {
            MIN_WIDTH: 152
        },
        currencyType: {
            MIN_WIDTH: 180
        }
    },
    DataExplorerViewModes: {
        PROP_VIEW: 'PROP_VIEW',
        DATA_VIEW: 'DATA_VIEW',
        SCHEMA_VIEW: 'SCHEMA_VIEW',
        DEPENDENTS_VIEW: 'DEPENDENTS_VIEW',
        SECURITY_VIEW: 'SECURITY_VIEW',
        PROFILE_VIEW: 'PROFILE_VIEW',
        ANALYZE_VIEW: 'ANALYZE_VIEW',
        A3_VIEW: 'A3_VIEW',
        EMBRACE_VIEW: 'EMBRACE_VIEW',
        SEARCH_IQ_VIEW: 'SEARCH_IQ_VIEW'
    },
    LOADING_SAMPLE_VALUE: '-',
    SPECIAL_VALUE_UNAVAILABLE: '601d5a70-d354-4aab-aa7c-b0f712f51ae3',
    joinWorkflow: {
        types: {
            INVALID_TYPE: 'INVALID_TYPE',
            DEFINE_MAPPING: 'DEFINE_MAPPING',
            EDIT_MAPPING: 'EDIT_MAPPING'
        }
    },
    preferenceKeys: {
        PANEL_STATE: 'PANEL_STATE',
        OPEN_ANSWER_EDIT_PANEL: 'OPEN_ANSWER_EDIT_PANEL',
        SUPPRESS_MANAGE_SOURCES_TOOLTIP: 'SUPPRESS_MANAGE_SOURCES_TOOLTIP',
        SUPPRESS_IN_USE_SOURCE_REMOVAL_WARNING: 'SUPPRESS_IN_USE_SOURCE_REMOVAL_WARNING',
        ANSWER_PAGE_ALERT: 'ANSWER_PAGE_ALERT_STATE',
        SEARCH_MODE: 'SEARCH_MODE'
    },
    preferenceValues: {
        panelState: {
            EXPANDED: 'EXPANDED',
            COLLAPSED: 'COLLAPSED',
            AUTO: 'AUTO'
        },
        searchMode: {
            SEARCHIQ: 'SEARCHIQ',
            CLASSIC: 'CLASSIC'
        }
    },
    decimalPrecision: {
        MIN: 2,
        MAX: 8
    },
    geo3dProjectionTypes: {
        GLOBE: 'GLOBE',
        PERSPECTIVE_PLANE: 'PERSPECTIVE_PLANE',
        MAP: 'MAP'
    },
    geoTypeSourceIds: {
        THOUGHTSPOT_LOCAL: 'THOUGHTSPOT_LOCAL',
        MAPBOX: 'MAPBOX'
    },
    geoTileTypes: {
        MAPBOX: {
            LIGHT: 'light-v9',
            DARK: 'dark-v9',
            OUTDOORS: 'outdoors-v9',
            STREETS: 'streets-v9',
            SATELLITE: 'satellite-v9',
            SATELLITE_STREETS: 'satellite-streets-v9'
        }
    },
    geoTileUrls: {
        THOUGHTSPOT_LOCAL: '/maptiles/{z}/{x}/{y}.jpg',
        MAPBOX: 'https://api.mapbox.com/styles/v1/mapbox/{tileType}/tiles/{z}/{x}/{y}?' +
            'access_token=pk.eyJ1Ijoic2hhc2hhbmt0cyIsImEiOiJjaW9kamoyMnkwMDg2djFtMzkxZnpsOGx0In0' +
            '.aX7lSTbzhDzyi5bhlOKSlA'
    },
    pivotTable: {
        Areas: {
            ROW: 'row',
            COLUMN: 'column',
            DATA: 'data'
        },
        ascendingSort: 'asc',
        descendingSort: 'desc'
    },
    geoTileMaxZoom: {
        THOUGHTSPOT_LOCAL: 11,
        MAPBOX: 18
    },
    help: {
        releaseVersions: {
            RELEASE_4_2: '4.2',
            RELEASE_4_3: '4.3',
        },
        helpWidgetUrl: {
            keywords: {
                URL: 'https://docs.thoughtspot.com/{versionNameForLink}/reference/keywords.html',
            },
            chasmTrapLimitations: {
                URL: 'https://docs.thoughtspot.com/{versionNameForLink}/admin/' +
                    'loading/chasm-trap.html#chasm-trap-limitations'
            },
            changeIndex: {
                URL: 'https://docs.thoughtspot.com/{versionNameForLink}/admin/data-modeling/' +
                    'change-index.html'
            }
        },
        helpWidgetIcon: {
            BLINK_HOW_SEARCH_WORKS: 'rd-icon-video-m',
            BLINK_KEYWORDS: 'rd-icon-keywords-m',
            BLINK_RELEASE_NOTES: 'rd-icon-release-notes-m',
            BLINK_DOCUMENTATION: 'rd-icon-documentation-m',
            BLINK_DOWNLOADS: 'rd-icon-download-m',
            BLINK_DEFAULT_ICON: 'rd-icon-release-notes-m'
        },
        support: {
            PHONE: '+1 800-508-7008 Ext. 1',
            EMAIL: 'support@thoughtspot.com'
        }
    },
    action: {
        actionWidgetIcon: {
            BLINK_DEFAULT_ICON: 'bk-style-icon-clipboard-text'
        }
    },
    importData: {
        STATUS_SEPARATOR: '/'
    },
    profilePic: {
        SIZE_PRE_SCALE: 4096000,
        SIZE_POST_SCALE: 512000,
        DIMENSION: 400
    },
    layout: {
        MIN_WIDTH: 8,
        MIN_WIDTH_STEP: 5,
        minHeight: {
            DEFAULT: 5,
            CHART: 10,
            TABLE: 14,
            HEADLINE: 8
        }
    },
    tileSizes: {
        EXTRA_SMALL: 'xs',
        SMALL: 's',
        MEDIUM: 'm',
        LARGE: 'l',
        MEDIUM_SMALL: 'ms',
        LARGE_SMALL: 'ls',
        EXTRA_LARGE: 'xl'
    },
    communityLink: 'https://community.thoughtspot.com/',
    helpMenuItems: {
        help: {
            id: 'help',
            class: 'bk-action-help',
            icon: 'rd-icon-help-m'
        },
        community: {
            id: 'community',
            class: 'bk-action-community',
            icon: 'rd-icon-community-m'
        },
        learn: {
            id: 'learn',
            class: 'bk-action-learn',
            icon: 'rd-icon-learn-m'
        }
    },
    customREditorMenuItems: {
        load: {
            id: 'load',
            icon: 'bk-style-icon-download'
        },
        saveas: {
            id: 'save_as',
            icon: 'bk-style-icon-save',
        },
        overwrite: {
            id: 'overwrite',
            icon: 'bk-style-icon-edit',
        },
        share: {
            id: 'share',
            icon: 'bk-style-icon-share',
        }
    },
    metadataObjectMenuItems: {
        save: {
            id: 'save',
            class: 'bk-action-save',
            icon: 'rd-icon-save-m'
        },
        update: {
            id: 'update',
            class: 'bk-action-update',
            icon: 'rd-icon-save-m'
        },
        saveUntitled: {
            id: 'saveUntitled',
            class: 'bk-action-save-untitled',
            icon: 'rd-icon-save-m'
        },
        saveAsView: {
            id: 'saveAsView',
            class: 'bk-action-save-as-worksheet',
            icon: 'rd-icon-save-worksheet-m'
        },
        makeACopy: {
            id: 'makeACopy',
            class: 'bk-action-make-copy',
            icon: 'rd-icon-copy-m'
        },
        editACopy: {
            id: 'editACopy',
            class: 'bk-action-edit-copy',
            icon: 'rd-icon-copy-m'
        },
        copyLink: {
            id: 'embedDocument',
            class: 'bk-action-copy-link',
            icon: 'rd-icon-copy-link-m'
        },
        pinboardSnapshot: {
            id: 'pinboardSnapshot',
            class: 'bk-action-pinboard-snapshot',
            icon: 'rd-icon-download-m'
        },
        resetLayout: {
            id: 'resetLayout',
            class: 'bk-action-reset-layout',
            icon: 'rd-icon-reset-m'
        },
        schedule: {
            id: 'schedule',
            class: 'bk-action-schedule',
            icon: 'rd-icon-schedule-m'
        },
        schedulesList: {
            id: 'schedule-list',
            class: 'bk-action-schedules',
            icon: 'rd-icon-schedule-m'
        },
        share: {
            id: 'share',
            class: 'bk-action-share',
            icon: 'rd-icon-share-m'
        },
        addFilter: {
            id: 'addFilter',
            class: 'bk-add-filter',
            icon: 'rd-icon-filter-m'
        },
        addFormula: {
            id: 'addFormula',
            class: 'bk-add-formula',
            icon: 'rd-icon-formula-m'
        },
        searchOnTop: {
            id: 'searchOnTop',
            class: 'bk-search-on-top',
            icon: 'rd-icon-search-m'
        },
        spotIQAnalyze: {
            id: 'spotIQAnalyze',
            class: 'bk-spotiq-analyze',
            icon: 'rd-icon-analyze-m'
        },
        explainInsight: {
            id: 'explainInsight',
            class: 'bk-explain-insight',
            icon: 'rd-icon-analyze-m'
        },
        replaySearch: {
            id: 'replaySearch',
            class: 'bk-replay-search',
            icon: 'rd-icon-replay-search-m'
        },
        showUnderlyingData: {
            id: 'showUnderlyingData',
            class: 'bk-show-underlying-data-trigger',
            icon: 'rd-icon-show-underlying-data-m'
        },
        download: {
            id: 'download',
            class: 'bk-download-viz',
            icon: 'rd-icon-download-m'
        },
        downloadAsPdf: {
            id: 'downloadAsPdf',
            class: 'bk-download-as-pdf',
            icon: 'rd-icon-download-m'
        },
        downloadAsCsv: {
            id: 'downloadAsCSV',
            class: 'bk-download-as-csv',
            icon: 'rd-icon-download-m'
        },
        downloadAsXlsx: {
            id: 'downloadAsXLSX',
            class: 'bk-download-as-xlsx',
            icon: 'rd-icon-download-m'
        },
        downloadTrace: {
            id: 'downloadTrace',
            class: 'bk-download-trace',
            icon: 'rd-icon-download-m'
        },
        presentation: {
            id: 'present',
            class: 'bk-viz-maximize-btn',
            icon: 'rd-icon-present-m'
        },
        toggleSize: {
            id: 'toggleSize',
            class: 'bk-viz-toggle-btn',
        },
        edit: {
            id: 'edit',
            class: 'bk-viz-context-btn',
            icon: 'rd-icon-edit-m'
        },
        editTitle: {
            id: 'editTitle',
            class: 'bk-viz-edit-title-btn',
            icon: 'rd-icon-edit-text-m'
        },
        remove: {
            id: 'delete',
            class: 'bk-viz-delete-btn',
            icon: 'rd-icon-delete-m'
        },
        ungroup: {
            id: 'ungroup',
            class: 'rd-icon-ungroup-m',
            icon: 'rd-icon-ungroup-m'
        },
        describe: {
            id: 'describe',
            class: 'bk-viz-describe-btn',
            icon: 'bk-style-icon-pinboard'
        },
        relate: {
            id: 'relate',
            class: 'bk-relate-answer',
            icon: 'rd-icon-copy-link-m'
        },
        customizeHeadlines: {
            id: 'customizeHeadlines',
            class: 'bk-customize-headlines',
            icon: 'rd-icon-filter-m'
        },
        pinboardInfo: {
            id: 'pinboardInfo',
            class: 'bk-pinboard-info',
            icon: 'rd-icon-information-m'
        },
        sendAnswerFeedback: {
            id: 'sendFeedback',
            class: 'bk-action-send',
            icon: 'rd-icon-send-m'
        },
        customAction: {
            id: 'customAction',
            class: 'bk-custom-action',
            icon: 'rd-icon-release-notes-m'
        },
        snapshot: {
            id: 'snapshot',
            icon: 'rd-icon-watch-m',
            class: 'bk-action-viz-snapshot',
        },
        pin: {
            id: 'pin',
            icon: 'rd-icon-pin-xl',
            class: 'bk-action-viz-pin'
        },
        analysisInfo: {
            id: 'analysisInfo',
            icon: 'rd-icon-information-xl',
            class: 'bk-action-analysis-info'
        },
        subscription: {
            id: 'subscription',
            icon: 'rd-icon-gear-s',
            class: 'bk-action-subscription'
        },
        explore: {
            id: 'explore',
            class: 'bk-action-explore'
        },
    },
    adminSection: {
        userManagement: {
            tabId: 'user-management',
            tabUsers: {
                id: 'users'
            },
            tabGroups: {
                id: 'groups'
            },
            tabRoles: {
                id: 'roles'
            }
        },
        dataManagement: {
            tabId: 'data-management',
            tabBusinessDataModel: {
                id: 'business-data-model',
                DATA_MODEL_FILE_NAME: 'model.xls'
            },
            tabDataSecurity: {
                id: 'data-security',
                SECURITY_FILE_NAME: 'security.xls'
            },
            tabNLMappings: {
                id: 'nl-mappings',
                DATA_MAPPINGS_FILE_NAME: 'mappings.xls'
            }
        },
        healthManagement: {
            tabId: 'health-management',
            tabOverview: {
                guid: '7d610c97-11dd-4137-940c-3eda0b1cb434',
                id: 'overview'
            },
            tabData: {
                guid: '7ba1d5d8-9cc0-4ec5-ac77-dd545c66dc75',
                id: 'data'
            },
            tabDatabase: {
                guid: '7632ad88-665a-4eaa-ba72-064666612087',
                id: 'database'
            },
            tabAlert: {
                guid: '09ec5619-057b-4b9e-b2fc-98f6905e47e6',
                id: 'alert'
            },
            tabCluster: {
                guid: 'f43e3f57-859f-4665-ac78-82ea72ec0980',
                id: 'cluster'
            },
            tabEmbrace: {
                guid: '9f542e6b-6c06-4254-b546-a3b50e0125e1',
                id: 'embrace'
            }
        },
        styleCustomization: {
            tabId: 'style-customization',
            tabRules: {
                id: 'style-customization-rules'
            },
            tabResources: {
                id: 'style-customization-resources'
            }
        },
        helpCustomization: {
            tabId: 'help-customizer'
        },
        jobManagement: {
            tabId: 'job-management'
        },
        actionCustomization: {
            tabId: 'action-customizer'
        }
    },
    IGNORED_API_CALL_ERROR: new Error('Ignored older API call'),
    adminUI: {
        listColId: {
            DISPLAYED_NAME: 'displayNameCol',
            NAME: 'nameCol',
            CREATED_AT: 'dateModifiedCol',
            AUTHOR: 'authorCol'
        },
        listColClass: {
            DISPLAYED_NAME: 'bk-display-name',
            NAME: 'bk-name',
            CREATED_AT: 'bk-time-and-author',
            AUTHOR: 'bk-profile-pic-container'
        },
        tabId: {
            GROUPS_TAB: 'groupsTab',
            ROLES_TAB: 'rolesTab',
            USERS_TAB: 'usersTab',
            DEFAULT_PINBOARD_TAB: 'pinboardTab'
        },
        formFields: {
            type: {
                PLAIN: 'plain',
                SELECT: 'select',
                CHECKBOX: 'checkbox',
                TEXTAREA: 'textarea'
            },
            inputType: {
                TEXT: 'text',
                EMAIL: 'email',
                PASSWORD: 'password'
            },
            fields: {
                NAME: 'name',
                DISPLAYNAME: 'displayName',
                DESCRIPTION: 'description',
                PASSWORD: 'password',
                CONFIRM_PASSWORD: 'confirmPassword',
                EMAIL: 'email',
                VISIBILITY: 'visibility',
                MESSAGE: 'message'
            }
        }
    },
    dataFilter: {
        FILTER_TYPES: {
            IS_NULL: {
                noText: true
            },
            IS_NOT_NULL: {
                noText: true
            }
        }
    },
    debugging: {
        DEBUG_INFO_DOWNLOAD_TRIGGER_ALPHA_KEY_CODE: 75,
        DEBUG_FILE_NAME_PATTERN: 'thoughtspot-ui-debug-info-{1}.json',
    },
    jobProtoKeys: {
        AUTHOR: 'author_id',
        WORKSHEET_ID: 'worksheet_id',
        PINBOARDS: 'pinboard_ids',
        GROUPS: 'group_ids',
        USERS: 'user_ids',
        EMAILS: 'email_to',
        FORMAT: 'file_format',
        NAME: 'name',
        GATING: 'gating_function',
        DESCRIPTION: 'description',
        A3_REQUEST: 'AnalysisRequest',
        MATERIALIZE_REQUEST: 'MaterializeRequest',
        EXPORT_REQUEST: 'export_request'
    },
    vizTypes: {
        CHART: 'CHART',
        TABLE: 'TABLE',
        HEADLINE: 'HEADLINE',
        FILTER: 'FILTER'
    },
    tokenTypeEnum: {
        MEASURE: 1,
        ATTRIBUTE: 2,
        FILTER: 3
    },
    dataSourcePreview: {
        FOOTER_TEXT: ' and {1} more.'
    },
    DAY_OF_WEEK_FORMAT: 'e',
    DAY_IN_MONTH_FORMAT: 'e',
    DAY_IN_QUARTER_FORMAT: 'e',
    DAY_IN_YEAR_FORMAT: 'j',
    MONTH_IN_YEAR_FORMAT: 'm',
    MONTH_IN_QUARTER_FORMAT: 'm',
    WEEK_IN_YEAR_FORMAT: 'V',
    TRACE_COLLECTOR_NAME: 'BlinkWorkflowManager',
    colorPickerResolution: 8,
    colorLayout: {
        COLOR_COUNT_RAINBOW: 6,
        COLOR_COUNT_DEFAULT: 8,
        COLOR_VARIATION_COUNT: 5
    },
    PRIMARY_COLOR_HUE_IDX: 2,
    SECONDARY_COLOR_HUE_IDX: 1,
    COLOR_HUE_COUNT: 5,
    defaultColorPalette: {
        RED: ['#F9B3B9',
            '#F47E89',
            '#F04152',
            '#B6313E',
            '#721F27'],
        PURPLE: ['#D1C0FB',
            '#B094F8',
            '#8C62F5',
            '#6A4ABA',
            '#422E75'],
        BLUE: ['#ABC7F9',
            '#71A1F4',
            '#2E75F0',
            '#2359B6',
            '#163772'],
        TEAL: ['#B5ECF2',
            '#82DFE9',
            '#48D1E0',
            '#369FAA',
            '#22636B'],
        YELLOW: ['#FDE9AF',
            '#FCD977',
            '#FCC838',
            '#BF982A',
            '#785F1A'],
        GREY: ['#BEC6D0',
            '#A2ACBA',
            '#747E8C',
            '#47515F',
            '#2F3947'],
        GREEN: ['#9BE5CB',
            '#56D3A8',
            '#06BF7F',
            '#049160',
            '#025B3C'],
        ORANGE: ['#FFCCB3',
            '#FFA97E',
            '#FF8142',
            '#C26232',
            '#7A3D1F']
    },
    multiHueColorsColorPalette: {
        RED_YELLOW: ['#ffffb2',
            '#fddd87',
            '#fba35d',
            '#f75534',
            '#f9140a',
            '#d70315',
            '#b10026'],
        BLUE: ['#f7fbff',
            '#cfe0f9',
            '#a6c6f3',
            '#77aded',
            '#3295e6',
            '#287ac6',
            '#1e60a6',
            '#144888',
            '#08306b'],
        YELLOW_GREEN: ['#ffffe5',
            '#d5f0ca',
            '#abe1af',
            '#7dd295',
            '#46c27b',
            '#34a165',
            '#238150',
            '#11623c',
            '#004529'],
        PINK: ['#f7f4f9',
            '#f5cfec',
            '#f1aadf',
            '#eb83d2',
            '#e356c5',
            '#c44198',
            '#a52c6d',
            '#861744',
            '#67001f'],
        YELLOW_GREEN_BLUE: ['#ffffd9',
            '#d7f1da',
            '#abe2db',
            '#78d4db',
            '#1ac5db',
            '#2397b9',
            '#226c97',
            '#194377',
            '#081d58'],
        REDS: ['#fff5f0',
            '#fee0d2',
            '#fcbba1',
            '#fc9272',
            '#fb6a4a',
            '#ef3b2c',
            '#cb181d',
            '#a50f15',
            '#67000d'],
        PURPLES: ['#fcfbfd',
            '#e6d0f8',
            '#cda6f3',
            '#b27ced',
            '#9450e6',
            '#7e3dcb',
            '#692bb0',
            '#541796',
            '#3f007d']
    },
    helpCardColors: {
        YELLOW: 'bk-yellow',
        BLUE: 'bk-blue',
        GREEN: 'bk-green',
        RED: 'bk-red',
        LIGHT_BLUE: 'bk-light-blue',
        PURPLE: 'bk-purple'
    },
    paginationTabs: {
        PAGINATION_TAB_THRESHOLD: 7
    },
    eventCollector: {
        EVENT_BATCH_THRESHOLD: 1,
    },
    legendTopSpacing: {
        VERTICAL: -42,
        HORIZONTAL: 0
    },
    cardTray: {
        size: {
            SMALL: 's',
            MEDIUM: 'm',
            EXTRA_SMALL: 'xs',
            SMALL_SHORT: 'short'
        }
    },
    cardCount: {
        ACTIVITY_CARDS: 24,
        TRENDING_CARDS: 24,
        RECENTLY_VIEWED_CARDS: 24,
        HOMEPAGE_INSIGHTS_CARDS: 24,
        PINBOARD_INSIGHT_CARDS: 4,
        FAVORITE_CARDS: 24
    },
    trending: {
        GLOBAL: 'global',
        RECENT: 'recent'
    },
    languages: {
        morning: [
            { name: 'Spanish', greeting: 'Buenos días' },
            { name: 'French', greeting: 'Bonjour' },
            { name: 'German', greeting: 'Guten morgen' },
            { name: 'Italian', greeting: 'Buongiorno' },
            { name: 'Portuguese', greeting: 'Bom dia' },
            { name: 'Swahili', greeting: 'Habari za asubuhi' },
            { name: 'Finnish', greeting: 'Hyvää huomenta' },
            { name: 'Swedish', greeting: 'God morgon' },
            { name: 'Icelandic', greeting: 'Góðan daginn' },
            { name: 'Hawaiian', greeting: 'Aloha kakahiaka' },
            { name: 'Nepali', greeting: 'Śubha - prabhāta' },
            { name: 'Thai', greeting: 'S̄wạs̄dī txn chêā' },
            { name: 'Welsh', greeting: 'Bore da' },
            { name: 'Korean', greeting: 'Joh-eun achim' },
            { name: 'Hindi', greeting: 'S̄hubh prabhat' }
        ],
        afternoon: [
            { name: 'Spanish', greeting: 'Buenas tardes' },
            { name: 'French', greeting: 'Bon après-midi' },
            { name: 'German', greeting: 'Guten nachmittag' },
            { name: 'Italian', greeting: 'Buon pomeriggio' },
            { name: 'Portuguese', greeting: 'Boa tarde' },
            { name: 'Swahili', greeting: 'Mchana mzuri' },
            { name: 'Finnish', greeting: 'Hyvää iltapäivää' },
            { name: 'Swedish', greeting: 'God eftermiddag' },
            { name: 'Icelandic', greeting: 'Góðan daginn' },
            { name: 'Hawaiian', greeting: 'Aloha ʻauinalā' },
            { name: 'Nepali', greeting: 'Śubha di\'um̐sō' },
            { name: 'Thai', greeting: 'S̄wạs̄dī txn b̀āy' },
            { name: 'Welsh', greeting: 'Prynhawn da' },
            { name: 'Korean', greeting: 'Annyeonghaseyo' },
            { name: 'Hindi', greeting: 'S̄hubh din' }
        ],
        evening: [
            { name: 'Spanish', greeting: 'Buenas noches' },
            { name: 'French', greeting: 'Bonne nuit' },
            { name: 'German', greeting: 'Guten abend' },
            { name: 'Italian', greeting: 'Buonasera' },
            { name: 'Portuguese', greeting: 'Boa noite' },
            { name: 'Swahili', greeting: 'Habari za jioni' },
            { name: 'Finnish', greeting: 'Hyvää iltaa' },
            { name: 'Swedish', greeting: 'God kväll' },
            { name: 'Icelandic', greeting: 'Gott kvöld' },
            { name: 'Hawaiian', greeting: 'Aloha ahiahi' },
            { name: 'Nepali', greeting: 'Śubha sandhyā' },
            { name: 'Thai', greeting: 'S̄wạs̄dī txn yĕn' },
            { name: 'Welsh', greeting: 'Noswaith dda' },
            { name: 'Korean', greeting: 'Annyeonghaseyo' },
            { name: 'Hindi', greeting: 'S̄hubh sandhya' }
        ]
    },
    gridTableDataType: {
        BOOL: 'BOOL',
        STRING: 'STRING'
    },
    materializeViewUrls: {
        viewSchema: '/#/schema-viewer/table/{id}',
        shardingDoc: 'https://docs.thoughtspot.com/{versionNumber}/admin/loading/sharding.html',
        mvDoc: 'https://docs.thoughtspot.com/{versionNumber}/admin/loading/materialized-views.html'
    }
};

});

unwrapExports(blinkConstants);
var blinkConstants_1 = blinkConstants.blinkConstants;

var loglevel = createCommonjsModule(function (module) {
/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    if (module.exports) {
        module.exports = definition();
    } else {
        root.log = definition();
    }
}(commonjsGlobal, function () {

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      var storageKey = "loglevel";
      if (name) {
        storageKey += ":" + name;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    return defaultLogger;
}));
});

var logger = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var _a;


var _loggers = {};
var onErrorCallBack;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
    LogLevel[LogLevel["TRACE"] = 4] = "TRACE";
})(LogLevel || (LogLevel = {}));
exports.LogLevel = LogLevel;
var LOG_LEVEL_DEFAULT = LogLevel.WARN;
var clientLogLevel = LOG_LEVEL_DEFAULT;
loglevel.enableAll();
var logMethods = (_a = {},
    _a[LogLevel.ERROR] = loglevel.error.bind(loglevel),
    _a[LogLevel.WARN] = loglevel.warn.bind(loglevel),
    _a[LogLevel.INFO] = loglevel.info.bind(loglevel),
    _a[LogLevel.DEBUG] = loglevel.info.bind(loglevel),
    _a[LogLevel.TRACE] = loglevel.trace.bind(loglevel),
    _a);
var ProfileMessages = {
    API_CALL_PREAMBLE: 'Api call',
    SAGE_THRIFT_CALL: 'Sage thrift call',
    SAGE_SERVER_LATENCY: 'Sage server latency',
    SAGE_RESPONSE_PROCESSING: 'Sage response processing',
    SAGE_DROPDOWN_RENDERING: 'Sage dropdown rendering',
    ANSWER_MODEL_PARSING: 'Parsing Answer Model',
    CHART_VIZ_PROCESSING_PREAMBLE: 'Processing data for Chart Viz',
    CHART_VIZ_CHART_TYPE_SUPPORT_COMPUTATION_PREAMBLE: 'Computing supported chart types for Chart Viz',
    CHART_VIZ_RENDER_PREAMBLE: 'Rendering for Highcharts Viz',
    FILTER_VIZ_PROCESSING_PREAMBLE: 'Processing data for Filter Viz',
    FILTER_VIZ_RENDER: 'Rendering for Filter Viz',
    TABLE_VIZ_PROCESSING_PREAMBLE: 'Processing data for Table Viz',
    TABLE_VIZ_RENDER_PREAMBLE: 'Rendering for Table Viz'
};
exports.ProfileMessages = ProfileMessages;
function getCurrentDateTime() {
    var d = new Date();
    return ((d.getHours() < 10) ? '0' : '') + d.getHours() + ':' +
        ((d.getMinutes() < 10) ? '0' : '') + d.getMinutes() + ':' +
        ((d.getSeconds() < 10) ? '0' : '') + d.getSeconds() + '.' +
        d.getMilliseconds();
}
function getCurrentErrorStack() {
    var err = new Error();
    return err.stack || '';
}
var Logger = (function () {
    function Logger(name) {
        this._muted = true;
        this._everyNMap = {};
        this._msgPrefix = name ? "(" + name + ")" : '';
    }
    Logger.prototype.unmute = function () {
        this._muted = false;
        return this;
    };
    Logger.prototype.canLog = function (logLevel) {
        return logLevel <= clientLogLevel && (logLevel <= logLevel.WARN || !this._muted);
    };
    Logger.prototype.logMessages = function (args, logLevel) {
        if (!this.canLog(logLevel)) {
            return;
        }
        args[0] = this._getFormattedMessage(args[0], logLevel);
        var logFn = logMethods[logLevel];
        logFn.apply(void 0, args);
    };
    Logger.prototype.trace = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.logMessages(args, LogLevel.TRACE);
    };
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.logMessages(args, LogLevel.DEBUG);
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.debug.apply(this, args);
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.logMessages(args, LogLevel.INFO);
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.logMessages(args, LogLevel.WARN);
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var stackTrace = this._error(args);
        onErrorCallBack(args, stackTrace);
    };
    Logger.prototype.errorSilently = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._warn(args);
    };
    Logger.prototype.logException = function (exception) {
        if (!exception) {
            return;
        }
        this.logMessages([
            exception.message
        ], LogLevel.TRACE);
    };
    Logger.prototype.everyN = function (logLevel, freq, msg) {
        if (!this.canLog(logLevel) || freq < 0) {
            return;
        }
        var key = getCurrentErrorStack();
        if (!this._everyNMap.hasOwnProperty(key)) {
            this._everyNMap[key] = 0;
        }
        if (this._everyNMap[key] > 0 && Math.floor(Math.random() * freq) > 0) {
            return;
        }
        ++this._everyNMap[key];
        if (typeof logLevel === 'string') {
            logLevel = LogLevel[logLevel.toUpperCase()];
        }
        var args = arguments;
        for (var i = 0; i < args.length - 2; i++) {
            args[i] = args[i + 2];
        }
        args.length = args.length - 2;
        this.logMessages(args, logLevel);
    };
    Logger.prototype.time = function (msg) {
        if (!isDebugLogEnabled() || !console || !console.time) {
            return;
        }
        console.time(msg);
    };
    Logger.prototype.timeEnd = function (msg) {
        if (!isDebugLogEnabled() || !console || !console.timeEnd) {
            return;
        }
        console.timeEnd(msg);
    };
    Logger.prototype.group = function (msg) {
        if (!isDebugLogEnabled() || !console || !console.group) {
            return;
        }
        console.group(msg);
    };
    Logger.prototype.groupEnd = function (msg) {
        if (!isDebugLogEnabled() || !console || !console.groupEnd) {
            return;
        }
        console.groupEnd();
    };
    Logger.prototype._error = function (args) {
        var stackTrace = getCurrentErrorStack();
        this.logMessages(args.concat([stackTrace]), LogLevel.ERROR);
        return stackTrace;
    };
    Logger.prototype._warn = function (args) {
        var stackTrace = getCurrentErrorStack();
        this.logMessages(args.concat([stackTrace]), LogLevel.WARN);
        return stackTrace;
    };
    Logger.prototype._getFormattedMessage = function (msg, logLevel) {
        return LogLevel[logLevel] + " " + getCurrentDateTime() + " " + this._msgPrefix +
            ("(" + (msg ? '] ' + msg : '') + ")");
    };
    return Logger;
}());
function create(name) {
    if (!_loggers[name]) {
        _loggers[name] = new Logger(name);
    }
    _loggers[name].unmute();
    return _loggers[name];
}
exports.create = create;
function setClientLogLevel(level) {
    clientLogLevel = level;
}
exports.setClientLogLevel = setClientLogLevel;
function isDebugLogEnabled() {
    return !_.isNull(clientLogLevel) && LogLevel.DEBUG <= clientLogLevel;
}
exports.isDebugLogEnabled = isDebugLogEnabled;
function registerOnErrorCallback(fn) {
    onErrorCallBack = fn;
}
exports.registerOnErrorCallback = registerOnErrorCallback;

});

var logger$1 = unwrapExports(logger);
var logger_1 = logger.LogLevel;
var logger_2 = logger.ProfileMessages;
var logger_3 = logger.create;
var logger_4 = logger.setClientLogLevel;
var logger_5 = logger.isDebugLogEnabled;
var logger_6 = logger.registerOnErrorCallback;

var Logger = /*#__PURE__*/Object.freeze({
'default': logger$1,
__moduleExports: logger,
LogLevel: logger_1,
ProfileMessages: logger_2,
create: logger_3,
setClientLogLevel: logger_4,
isDebugLogEnabled: logger_5,
registerOnErrorCallback: logger_6
});

var translations = createCommonjsModule(function (module, exports) {
exports.__esModule = true;

var _dateFormats = {};
var _strings = {};
exports.dateFormats = _dateFormats;
exports.strings = _strings;
function updateDateFormats(obj) {
    _.merge(_dateFormats, obj);
}
exports.updateDateFormats = updateDateFormats;
function updateStrings(obj) {
    _.merge(_strings, obj);
}
exports.updateStrings = updateStrings;
});

unwrapExports(translations);
var translations_1 = translations.dateFormats;
var translations_2 = translations.strings;
var translations_3 = translations.updateDateFormats;
var translations_4 = translations.updateStrings;

var specialDataValueFormat = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


function getSpecialFormatData(value) {
    if (value === translations.strings.NULL_VALUE_PLACEHOLDER_LABEL
        || value === translations.strings.EMPTY_VALUE_PLACEHOLDER_LABEL) {
        return value;
    }
    if (value === blinkConstants.blinkConstants.SPECIAL_VALUE_UNAVAILABLE) {
        return translations.strings.UNAVAILABLE_COLUMN_SAMPLE_VALUE;
    }
    if (value === null || value === void 0) {
        return translations.strings.NULL_VALUE_PLACEHOLDER_LABEL;
    }
    if (value === '' || (value.isBlank && value.isBlank())) {
        return translations.strings.EMPTY_VALUE_PLACEHOLDER_LABEL;
    }
    if (value instanceof Array) {
        if (!value.length || value[0] === null || value[0] === void 0) {
            return translations.strings.NULL_VALUE_PLACEHOLDER_LABEL;
        }
        switch (value[0]) {
            case 'NaN':
                return 'NaN';
            case 'Infinity':
                return 'Infinity';
            default:
                return null;
        }
    }
    return null;
}
exports.getSpecialFormatData = getSpecialFormatData;
function isSpecialNaNValue(value) {
    var specialValue = getSpecialFormatData(value);
    if (!specialValue) {
        return isNaN(value);
    }
    return specialValue === 'NaN';
}
exports.isSpecialNaNValue = isSpecialNaNValue;
function isSpecialInfinityValue(value) {
    var specialValue = getSpecialFormatData(value);
    if (!specialValue) {
        return false;
    }
    return specialValue === 'Infinity';
}
exports.isSpecialInfinityValue = isSpecialInfinityValue;
function isSpecialMinusInfinityValue(value) {
    return false;
}
exports.isSpecialMinusInfinityValue = isSpecialMinusInfinityValue;
function isSpecialValue(value) {
    return !!getSpecialFormatData(value);
}
exports.isSpecialValue = isSpecialValue;

});

var specialDataValueFormat$1 = unwrapExports(specialDataValueFormat);
var specialDataValueFormat_1 = specialDataValueFormat.getSpecialFormatData;
var specialDataValueFormat_2 = specialDataValueFormat.isSpecialNaNValue;
var specialDataValueFormat_3 = specialDataValueFormat.isSpecialInfinityValue;
var specialDataValueFormat_4 = specialDataValueFormat.isSpecialMinusInfinityValue;
var specialDataValueFormat_5 = specialDataValueFormat.isSpecialValue;

var spclDateFormat = /*#__PURE__*/Object.freeze({
'default': specialDataValueFormat$1,
__moduleExports: specialDataValueFormat,
getSpecialFormatData: specialDataValueFormat_1,
isSpecialNaNValue: specialDataValueFormat_2,
isSpecialInfinityValue: specialDataValueFormat_3,
isSpecialMinusInfinityValue: specialDataValueFormat_4,
isSpecialValue: specialDataValueFormat_5
});

var stringFormat = createCommonjsModule(function (module) {
void function(global) {

  //  ValueError :: String -> Error
  function ValueError(message) {
    var err = new Error(message);
    err.name = 'ValueError';
    return err;
  }

  //  create :: Object -> String,*... -> String
  function create(transformers) {
    return function(template) {
      var args = Array.prototype.slice.call(arguments, 1);
      var idx = 0;
      var state = 'UNDEFINED';

      return template.replace(
        /([{}])\1|[{](.*?)(?:!(.+?))?[}]/g,
        function(match, literal, _key, xf) {
          if (literal != null) {
            return literal;
          }
          var key = _key;
          if (key.length > 0) {
            if (state === 'IMPLICIT') {
              throw ValueError('cannot switch from ' +
                               'implicit to explicit numbering');
            }
            state = 'EXPLICIT';
          } else {
            if (state === 'EXPLICIT') {
              throw ValueError('cannot switch from ' +
                               'explicit to implicit numbering');
            }
            state = 'IMPLICIT';
            key = String(idx);
            idx += 1;
          }

          //  1.  Split the key into a lookup path.
          //  2.  If the first path component is not an index, prepend '0'.
          //  3.  Reduce the lookup path to a single result. If the lookup
          //      succeeds the result is a singleton array containing the
          //      value at the lookup path; otherwise the result is [].
          //  4.  Unwrap the result by reducing with '' as the default value.
          var path = key.split('.');
          var value = (/^\d+$/.test(path[0]) ? path : ['0'].concat(path))
            .reduce(function(maybe, key) {
              return maybe.reduce(function(_, x) {
                return x != null && key in Object(x) ?
                  [typeof x[key] === 'function' ? x[key]() : x[key]] :
                  [];
              }, []);
            }, [args])
            .reduce(function(_, x) { return x; }, '');

          if (xf == null) {
            return value;
          } else if (Object.prototype.hasOwnProperty.call(transformers, xf)) {
            return transformers[xf](value);
          } else {
            throw ValueError('no transformer named "' + xf + '"');
          }
        }
      );
    };
  }

  //  format :: String,*... -> String
  var format = create({});

  //  format.create :: Object -> String,*... -> String
  format.create = create;

  //  format.extend :: Object,Object -> ()
  format.extend = function(prototype, transformers) {
    var $format = create(transformers);
    prototype.format = function() {
      var args = Array.prototype.slice.call(arguments);
      args.unshift(this);
      return $format.apply(global, args);
    };
  };

  module.exports = format;

}.call(commonjsGlobal, commonjsGlobal);
});

var stringUtil = createCommonjsModule(function (module, exports) {
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(_);
var string_format_1 = __importDefault(stringFormat);
function assign(expression) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof lodash_1.default.first(args) === 'object') {
        return string_format_1.default.apply(void 0, [expression].concat(args));
    }
    else {
        return string_format_1.default.apply(void 0, [expression, ''].concat(args));
    }
}
exports.assign = assign;
function capitalize(word, all) {
    if (all === void 0) { all = false; }
    var lastResponded;
    return word.toLowerCase().replace(all ? /[^']/g : /^\S/, function (lower) {
        var upper = lower.toUpperCase(), result;
        result = lastResponded ? lower : upper;
        lastResponded = upper !== lower;
        return result;
    });
}
exports.capitalize = capitalize;
function getTokenPositionFromIndex(text, position, separator) {
    if (separator === void 0) { separator = ' '; }
    var currentPos = text.indexOf(separator);
    var currentLength = 0;
    var tokenIdx = 0;
    while (currentPos < position && currentPos >= 0) {
        currentLength = currentPos;
        tokenIdx++;
        currentPos = text.indexOf(separator, currentPos + 1);
    }
    return {
        tokenIdx: tokenIdx,
        tokenOffset: position - currentLength
    };
}
exports.getTokenPositionFromIndex = getTokenPositionFromIndex;

});

unwrapExports(stringUtil);
var stringUtil_1 = stringUtil.assign;
var stringUtil_2 = stringUtil.capitalize;
var stringUtil_3 = stringUtil.getTokenPositionFromIndex;

var protobuf = createCommonjsModule(function (module) {
/*!
 * protobuf.js v6.8.3 (c) 2016, daniel wirtz
 * compiled wed, 29 nov 2017 11:13:35 utc
 * licensed under the bsd-3-clause license
 * see: https://github.com/dcodeio/protobuf.js for details
 */
(function(global,undefined$1){(function prelude(modules, cache, entries) {

    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS
    // sources through a conflict-free require shim and is again wrapped within an iife that
    // provides a unified `global` and a minification-friendly `undefined` var plus a global
    // "use strict" directive so that minification can remove the directives of each module.

    function $require(name) {
        var $module = cache[name];
        if (!$module)
            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);
        return $module.exports;
    }

    // Expose globally
    var protobuf = global.protobuf = $require(entries[0]);

    // Be nice to AMD
    if (typeof undefined$1 === "function" && undefined$1.amd)
        undefined$1(["long"], function(Long) {
            if (Long && Long.isLong) {
                protobuf.util.Long = Long;
                protobuf.configure();
            }
            return protobuf;
        });

    // Be nice to CommonJS
    if (module && module.exports)
        module.exports = protobuf;

})/* end of prelude */({1:[function(require,module,exports){
module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],2:[function(require,module,exports){

/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined$1)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],3:[function(require,module,exports){
module.exports = codegen;

/**
 * Begins generating a function.
 * @memberof util
 * @param {string[]} functionParams Function parameter names
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 */
function codegen(functionParams, functionName) {

    /* istanbul ignore if */
    if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = undefined$1;
    }

    var body = [];

    /**
     * Appends code to the function's body or finishes generation.
     * @typedef Codegen
     * @type {function}
     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
     * @param {...*} [formatParams] Format parameters
     * @returns {Codegen|Function} Itself or the generated function if finished
     * @throws {Error} If format parameter counts do not match
     */

    function Codegen(formatStringOrScope) {
        // note that explicit array handling below makes this ~50% faster

        // finish the function
        if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose)
                console.log("codegen: " + source); // eslint-disable-line no-console
            source = "return " + source;
            if (formatStringOrScope) {
                var scopeKeys   = Object.keys(formatStringOrScope),
                    scopeParams = new Array(scopeKeys.length + 1),
                    scopeValues = new Array(scopeKeys.length),
                    scopeOffset = 0;
                while (scopeOffset < scopeKeys.length) {
                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
                }
                scopeParams[scopeOffset] = source;
                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }
            return Function(source)(); // eslint-disable-line no-new-func
        }

        // otherwise append to body
        var formatParams = new Array(arguments.length - 1),
            formatOffset = 0;
        while (formatOffset < formatParams.length)
            formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];
            switch ($1) {
                case "d": case "f": return String(Number(value));
                case "i": return String(Math.floor(value));
                case "j": return JSON.stringify(value);
                case "s": return String(value);
            }
            return "%";
        });
        if (formatOffset !== formatParams.length)
            throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
    }

    function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
    }

    Codegen.toString = toString;
    return Codegen;
}

/**
 * Begins generating a function.
 * @memberof util
 * @function codegen
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 * @variation 2
 */

/**
 * When set to `true`, codegen will log generated code to console. Useful for debugging.
 * @name util.codegen.verbose
 * @type {boolean}
 */
codegen.verbose = false;

},{}],4:[function(require,module,exports){
module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined$1)
        this._listeners = {};
    else {
        if (fn === undefined$1)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],5:[function(require,module,exports){
module.exports = fetch;

var asPromise = require(1),
    inquire   = require(7);

var fs = inquire("fs");

/**
 * Node-style callback as used by {@link util.fetch}.
 * @typedef FetchCallback
 * @type {function}
 * @param {?Error} error Error, if any, otherwise `null`
 * @param {string} [contents] File contents, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Options as used by {@link util.fetch}.
 * @typedef FetchOptions
 * @type {Object}
 * @property {boolean} [binary=false] Whether expecting a binary response
 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
 */

/**
 * Fetches the contents of a file.
 * @memberof util
 * @param {string} filename File path or url
 * @param {FetchOptions} options Fetch options
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
function fetch(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = {};
    } else if (!options)
        options = {};

    if (!callback)
        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
    if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
            return err && typeof XMLHttpRequest !== "undefined"
                ? fetch.xhr(filename, options, callback)
                : err
                ? callback(err)
                : callback(null, options.binary ? contents : contents.toString("utf8"));
        });

    // use the XHR version otherwise.
    return fetch.xhr(filename, options, callback);
}

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchOptions} [options] Fetch options
 * @returns {Promise<string|Uint8Array>} Promise
 * @variation 3
 */

/**/
fetch.xhr = function fetch_xhr(filename, options, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

        if (xhr.readyState !== 4)
            return undefined$1;

        // local cors security errors return status 0 / empty string, too. afaik this cannot be
        // reliably distinguished from an actually empty file for security reasons. feel free
        // to send a pull request if you are aware of a solution.
        if (xhr.status !== 0 && xhr.status !== 200)
            return callback(Error("status " + xhr.status));

        // if binary data is expected, make sure that some sort of array is returned, even if
        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
        if (options.binary) {
            var buffer = xhr.response;
            if (!buffer) {
                buffer = [];
                for (var i = 0; i < xhr.responseText.length; ++i)
                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
            }
            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
    };

    if (options.binary) {
        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
        if ("overrideMimeType" in xhr)
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
    }

    xhr.open("GET", filename);
    xhr.send();
};

},{"1":1,"7":7}],6:[function(require,module,exports){

module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}

},{}],7:[function(require,module,exports){
module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],8:[function(require,module,exports){

/**
 * A minimal path module to resolve Unix, Windows and URL paths alike.
 * @memberof util
 * @namespace
 */
var path = exports;

var isAbsolute =
/**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */
path.isAbsolute = function isAbsolute(path) {
    return /^(?:\/|\w+:)/.test(path);
};

var normalize =
/**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */
path.normalize = function normalize(path) {
    path = path.replace(/\\/g, "/")
               .replace(/\/{2,}/g, "/");
    var parts    = path.split("/"),
        absolute = isAbsolute(path),
        prefix   = "";
    if (absolute)
        prefix = parts.shift() + "/";
    for (var i = 0; i < parts.length;) {
        if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..")
                parts.splice(--i, 2);
            else if (absolute)
                parts.splice(i, 1);
            else
                ++i;
        } else if (parts[i] === ".")
            parts.splice(i, 1);
        else
            ++i;
    }
    return prefix + parts.join("/");
};

/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */
path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized)
        includePath = normalize(includePath);
    if (isAbsolute(includePath))
        return includePath;
    if (!alreadyNormalized)
        originPath = normalize(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};

},{}],9:[function(require,module,exports){
module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],10:[function(require,module,exports){

/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};

},{}],11:[function(require,module,exports){
/**
 * Runtime message from/to plain object converters.
 * @namespace
 */
var converter = exports;

var Enum = require(14),
    util = require(33);

/**
 * Generates a partial value fromObject conveter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(d%s){", prop);
            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
                if (field.repeated && values[keys[i]] === field.typeDefault) gen
                ("default:");
                gen
                ("case%j:", keys[i])
                ("case %i:", values[keys[i]])
                    ("m%s=%j", prop, values[keys[i]])
                    ("break");
            } gen
            ("}");
        } else gen
            ("if(typeof d%s!==\"object\")", prop)
                ("throw TypeError(%j)", field.fullName + ": object expected")
            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
                break;
            case "uint32":
            case "fixed32": gen
                ("m%s=d%s>>>0", prop, prop);
                break;
            case "int32":
            case "sint32":
            case "sfixed32": gen
                ("m%s=d%s|0", prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(util.Long)")
                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
                ("else if(typeof d%s===\"string\")", prop)
                    ("m%s=parseInt(d%s,10)", prop, prop)
                ("else if(typeof d%s===\"number\")", prop)
                    ("m%s=d%s", prop, prop)
                ("else if(typeof d%s===\"object\")", prop)
                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;
            case "bytes": gen
                ("if(typeof d%s===\"string\")", prop)
                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
                ("else if(d%s.length)", prop)
                    ("m%s=d%s", prop, prop);
                break;
            case "string": gen
                ("m%s=String(d%s)", prop, prop);
                break;
            case "bool": gen
                ("m%s=Boolean(d%s)", prop, prop);
                break;
            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a plain object to runtime message converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.fromObject = function fromObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray;
    var gen = util.codegen(["d"], mtype.name + "$fromObject")
    ("if(d instanceof this.ctor)")
        ("return d");
    if (!fields.length) return gen
    ("return new this.ctor");
    gen
    ("var m=new this.ctor");
    for (var i = 0; i < fields.length; ++i) {
        var field  = fields[i].resolve(),
            prop   = util.safeProp(field.name);

        // Map fields
        if (field.map) { gen
    ("if(d%s){", prop)
        ("if(typeof d%s!==\"object\")", prop)
            ("throw TypeError(%j)", field.fullName + ": object expected")
        ("m%s={}", prop)
        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
        ("}")
    ("}");

        // Repeated fields
        } else if (field.repeated) { gen
    ("if(d%s){", prop)
        ("if(!Array.isArray(d%s))", prop)
            ("throw TypeError(%j)", field.fullName + ": array expected")
        ("m%s=[]", prop)
        ("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
        ("}")
    ("}");

        // Non-repeated fields
        } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
    ("if(d%s!=null){", prop); // !== undefined && !== null
        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
            if (!(field.resolvedType instanceof Enum)) gen
    ("}");
        }
    } return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

/**
 * Generates a partial value toObject converter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_toObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) gen
            ("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else gen
            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
            ("if(typeof m%s===\"number\")", prop)
                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
            ("else") // Long-like
                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
                break;
            case "bytes": gen
            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;
            default: gen
            ("d%s=m%s", prop, prop);
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a runtime message to plain object converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.toObject = function toObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    if (!fields.length)
        return util.codegen()("return {}");
    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
    ("if(!o)")
        ("o={}")
    ("var d={}");

    var repeatedFields = [],
        mapFields = [],
        normalFields = [],
        i = 0;
    for (; i < fields.length; ++i)
        if (!fields[i].partOf)
            ( fields[i].resolve().repeated ? repeatedFields
            : fields[i].map ? mapFields
            : normalFields).push(fields[i]);

    if (repeatedFields.length) { gen
    ("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i) gen
        ("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen
    ("}");
    }

    if (mapFields.length) { gen
    ("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i) gen
        ("d%s={}", util.safeProp(mapFields[i].name));
        gen
    ("}");
    }

    if (normalFields.length) { gen
    ("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop  = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen
        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
            else if (field.long) gen
        ("if(util.Long){")
            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
        ("}else")
            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
            else if (field.bytes) gen
        ("d%s=o.bytes===String?%j:%s", prop, String.fromCharCode.apply(String, field.typeDefault), "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]");
            else gen
        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
        } gen
    ("}");
    }
    var hasKs2 = false;
    for (i = 0; i < fields.length; ++i) {
        var field = fields[i],
            index = mtype._fieldsArray.indexOf(field),
            prop  = util.safeProp(field.name);
        if (field.map) {
            if (!hasKs2) { hasKs2 = true; gen
    ("var ks2");
            } gen
    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
        ("d%s={}", prop)
        ("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
        ("}");
        } else if (field.repeated) { gen
    ("if(m%s&&m%s.length){", prop, prop)
        ("d%s=[]", prop)
        ("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
        ("}");
        } else { gen
    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
        if (field.partOf) gen
        ("if(o.oneofs)")
            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen
    ("}");
    }
    return gen
    ("return d");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

},{"14":14,"33":33}],12:[function(require,module,exports){
module.exports = decoder;

var Enum    = require(14),
    types   = require(32),
    util    = require(33);

function missing(field) {
    return "missing required '" + field.name + "'";
}

/**
 * Generates a decoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function decoder(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
    ("if(!(r instanceof Reader))")
        ("r=Reader.create(r)")
    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k" : ""))
    ("while(r.pos<c){")
        ("var t=r.uint32()");
    if (mtype.group) gen
        ("if((t&7)===4)")
            ("break");
    gen
        ("switch(t>>>3){");

    var i = 0;
    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
            ref   = "m" + util.safeProp(field.name); gen
            ("case %i:", field.id);

        // Map fields
        if (field.map) { gen
                ("r.skip().pos++") // assumes id 1 + key wireType
                ("if(%s===util.emptyObject)", ref)
                    ("%s={}", ref)
                ("k=r.%s()", field.keyType)
                ("r.pos++"); // assumes id 2 + value wireType
            if (types.long[field.keyType] !== undefined$1) {
                if (types.basic[type] === undefined$1) gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
                else gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=r.%s()", ref, type);
            } else {
                if (types.basic[type] === undefined$1) gen
                ("%s[k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
                else gen
                ("%s[k]=r.%s()", ref, type);
            }

        // Repeated fields
        } else if (field.repeated) { gen

                ("if(!(%s&&%s.length))", ref, ref)
                    ("%s=[]", ref);

            // Packable (always check for forward and backward compatiblity)
            if (types.packed[type] !== undefined$1) gen
                ("if((t&7)===2){")
                    ("var c2=r.uint32()+r.pos")
                    ("while(r.pos<c2)")
                        ("%s.push(r.%s())", ref, type)
                ("}else");

            // Non-packed
            if (types.basic[type] === undefined$1) gen(field.resolvedType.group
                    ? "%s.push(types[%i].decode(r))"
                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
            else gen
                    ("%s.push(r.%s())", ref, type);

        // Non-repeated
        } else if (types.basic[type] === undefined$1) gen(field.resolvedType.group
                ? "%s=types[%i].decode(r)"
                : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else gen
                ("%s=r.%s()", ref, type);
        gen
                ("break");
    // Unknown fields
    } gen
            ("default:")
                ("r.skipType(t&7)")
                ("break")

        ("}")
    ("}");

    // Field presence
    for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required) gen
    ("if(!m.hasOwnProperty(%j))", rfield.name)
        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
    }

    return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline */
}

},{"14":14,"32":32,"33":33}],13:[function(require,module,exports){
module.exports = encoder;

var Enum     = require(14),
    types    = require(32),
    util     = require(33);

/**
 * Generates a partial message type encoder.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genTypePartial(gen, field, fieldIndex, ref) {
    return field.resolvedType.group
        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
}

/**
 * Generates an encoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function encoder(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
    ("if(!w)")
        ("w=Writer.create()");

    var i, ref;

    // "when a message is serialized its known fields should be written sequentially by field number"
    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

    for (var i = 0; i < fields.length; ++i) {
        var field    = fields[i].resolve(),
            index    = mtype._fieldsArray.indexOf(field),
            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
            wireType = types.basic[type];
            ref      = "m" + util.safeProp(field.name);

        // Map fields
        if (field.map) {
            gen
    ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name) // !== undefined && !== null
        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined$1) gen
            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen
            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen
        ("}")
    ("}");

            // Repeated fields
        } else if (field.repeated) { gen
    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

            // Packed repeated
            if (field.packed && types.packed[type] !== undefined$1) { gen

        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
        ("for(var i=0;i<%s.length;++i)", ref)
            ("w.%s(%s[i])", type, ref)
        ("w.ldelim()");

            // Non-packed
            } else { gen

        ("for(var i=0;i<%s.length;++i)", ref);
                if (wireType === undefined$1)
            genTypePartial(gen, field, index, ref + "[i]");
                else gen
            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

            } gen
    ("}");

        // Non-repeated
        } else {
            if (field.optional) gen
    ("if(%s!=null&&m.hasOwnProperty(%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined$1)
        genTypePartial(gen, field, index, ref);
            else gen
        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

        }
    }

    return gen
    ("return w");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}
},{"14":14,"32":32,"33":33}],14:[function(require,module,exports){
module.exports = Enum;

// extends ReflectionObject
var ReflectionObject = require(22);
((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

var Namespace = require(21),
    util = require(33);

/**
 * Constructs a new enum instance.
 * @classdesc Reflected enum.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {Object.<string,number>} [values] Enum values as an object, by name
 * @param {Object.<string,*>} [options] Declared options
 */
function Enum(name, values, options) {
    ReflectionObject.call(this, name, options);

    if (values && typeof values !== "object")
        throw TypeError("values must be an object");

    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */
    this.valuesById = {};

    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */
    this.values = Object.create(this.valuesById); // toJSON, marker

    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */
    this.comments = {};

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined$1; // toJSON

    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.

    if (values)
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
            if (typeof values[keys[i]] === "number") // use forward entries only
                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
}

/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */

/**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */
Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options);
    enm.reserved = json.reserved;
    return enm;
};

/**
 * Converts this enum to an enum descriptor.
 * @returns {IEnum} Enum descriptor
 */
Enum.prototype.toJSON = function toJSON() {
    return util.toObject([
        "options"  , this.options,
        "values"   , this.values,
        "reserved" , this.reserved && this.reserved.length ? this.reserved : undefined$1
    ]);
};

/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */
Enum.prototype.add = function add(name, id, comment) {
    // utilized by the parser but not by .fromJSON

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (!util.isInteger(id))
        throw TypeError("id must be an integer");

    if (this.values[name] !== undefined$1)
        throw Error("duplicate name '" + name + "' in " + this);

    if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);

    if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);

    if (this.valuesById[id] !== undefined$1) {
        if (!(this.options && this.options.allow_alias))
            throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else
        this.valuesById[this.values[name] = id] = name;

    this.comments[name] = comment || null;
    return this;
};

/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */
Enum.prototype.remove = function remove(name) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    var val = this.values[name];
    if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);

    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];

    return this;
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

},{"21":21,"22":22,"33":33}],15:[function(require,module,exports){
module.exports = Field;

// extends ReflectionObject
var ReflectionObject = require(22);
((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

var Enum  = require(14),
    types = require(32),
    util  = require(33);

var Type; // cyclic

var ruleRe = /^required|optional|repeated$/;

/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */
Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);
};

/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */
function Field(name, id, type, rule, extend, options) {

    if (util.isObject(rule)) {
        options = rule;
        rule = extend = undefined$1;
    } else if (util.isObject(extend)) {
        options = extend;
        extend = undefined$1;
    }

    ReflectionObject.call(this, name, options);

    if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");

    if (!util.isString(type))
        throw TypeError("type must be a string");

    if (rule !== undefined$1 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");

    if (extend !== undefined$1 && !util.isString(extend))
        throw TypeError("extend must be a string");

    /**
     * Field rule, if any.
     * @type {string|undefined}
     */
    this.rule = rule && rule !== "optional" ? rule : undefined$1; // toJSON

    /**
     * Field type.
     * @type {string}
     */
    this.type = type; // toJSON

    /**
     * Unique field id.
     * @type {number}
     */
    this.id = id; // toJSON, marker

    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */
    this.extend = extend || undefined$1; // toJSON

    /**
     * Whether this field is required.
     * @type {boolean}
     */
    this.required = rule === "required";

    /**
     * Whether this field is optional.
     * @type {boolean}
     */
    this.optional = !this.required;

    /**
     * Whether this field is repeated.
     * @type {boolean}
     */
    this.repeated = rule === "repeated";

    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */
    this.map = false;

    /**
     * Message this field belongs to.
     * @type {Type|null}
     */
    this.message = null;

    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */
    this.partOf = null;

    /**
     * The field type's default value.
     * @type {*}
     */
    this.typeDefault = null;

    /**
     * The field's default value on prototypes.
     * @type {*}
     */
    this.defaultValue = null;

    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */
    this.long = util.Long ? types.long[type] !== undefined$1 : /* istanbul ignore next */ false;

    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */
    this.bytes = type === "bytes";

    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */
    this.resolvedType = null;

    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */
    this.extensionField = null;

    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */
    this.declaringField = null;

    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */
    this._packed = null;
}

/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */
Object.defineProperty(Field.prototype, "packed", {
    get: function() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null)
            this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});

/**
 * @override
 */
Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") // clear cached before setting
        this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};

/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */

/**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */

/**
 * Converts this field to a field descriptor.
 * @returns {IField} Field descriptor
 */
Field.prototype.toJSON = function toJSON() {
    return util.toObject([
        "rule"    , this.rule !== "optional" && this.rule || undefined$1,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options
    ]);
};

/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */
Field.prototype.resolve = function resolve() {

    if (this.resolved)
        return this;

    if ((this.typeDefault = types.defaults[this.type]) === undefined$1) { // if not a basic type, resolve it
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
            this.typeDefault = null;
        else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
    }

    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
            this.typeDefault = this.resolvedType.values[this.typeDefault];
    }

    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined$1 && this.resolvedType && !(this.resolvedType instanceof Enum))
            delete this.options.packed;
        if (!Object.keys(this.options).length)
            this.options = undefined$1;
    }

    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

        /* istanbul ignore else */
        if (Object.freeze)
            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }

    // take special care of maps and repeated fields
    if (this.map)
        this.defaultValue = util.emptyObject;
    else if (this.repeated)
        this.defaultValue = util.emptyArray;
    else
        this.defaultValue = this.typeDefault;

    // ensure proper value on prototype
    if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;

    return ReflectionObject.prototype.resolve.call(this);
};

/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */
Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;

    // enum reference: create a reflected copy of the enum and keep reuseing it
    else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;

    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
    };
};

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */
// like Field.d but without a default value

Field._configure = function configure(Type_) {
    Type = Type_;
};

},{"14":14,"22":22,"32":32,"33":33}],16:[function(require,module,exports){
var protobuf = module.exports = require(17);

protobuf.build = "light";

/**
 * A node-style callback as used by {@link load} and {@link Root#load}.
 * @typedef LoadCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Root} [root] Root, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} root Root namespace, defaults to create a new one if omitted.
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 */
function load(filename, root, callback) {
    if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
    } else if (!root)
        root = new protobuf.Root();
    return root.load(filename, callback);
}

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Promise<Root>} Promise
 * @see {@link Root#load}
 * @variation 3
 */
// function load(filename:string, [root:Root]):Promise<Root>

protobuf.load = load;

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 * @see {@link Root#loadSync}
 */
function loadSync(filename, root) {
    if (!root)
        root = new protobuf.Root();
    return root.loadSync(filename);
}

protobuf.loadSync = loadSync;

// Serialization
protobuf.encoder          = require(13);
protobuf.decoder          = require(12);
protobuf.verifier         = require(36);
protobuf.converter        = require(11);

// Reflection
protobuf.ReflectionObject = require(22);
protobuf.Namespace        = require(21);
protobuf.Root             = require(26);
protobuf.Enum             = require(14);
protobuf.Type             = require(31);
protobuf.Field            = require(15);
protobuf.OneOf            = require(23);
protobuf.MapField         = require(18);
protobuf.Service          = require(30);
protobuf.Method           = require(20);

// Runtime
protobuf.Message          = require(19);
protobuf.wrappers         = require(37);

// Utility
protobuf.types            = require(32);
protobuf.util             = require(33);

// Configure reflection
protobuf.ReflectionObject._configure(protobuf.Root);
protobuf.Namespace._configure(protobuf.Type, protobuf.Service);
protobuf.Root._configure(protobuf.Type);
protobuf.Field._configure(protobuf.Type);

},{"11":11,"12":12,"13":13,"14":14,"15":15,"17":17,"18":18,"19":19,"20":20,"21":21,"22":22,"23":23,"26":26,"30":30,"31":31,"32":32,"33":33,"36":36,"37":37}],17:[function(require,module,exports){
var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = require(38);
protobuf.BufferWriter = require(39);
protobuf.Reader       = require(24);
protobuf.BufferReader = require(25);

// Utility
protobuf.util         = require(35);
protobuf.rpc          = require(28);
protobuf.roots        = require(27);
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.Reader._configure(protobuf.BufferReader);
    protobuf.util._configure();
}

// Configure serialization
protobuf.Writer._configure(protobuf.BufferWriter);
configure();

},{"24":24,"25":25,"27":27,"28":28,"35":35,"38":38,"39":39}],18:[function(require,module,exports){
module.exports = MapField;

// extends Field
var Field = require(15);
((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

var types   = require(32),
    util    = require(33);

/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 */
function MapField(name, id, keyType, type, options) {
    Field.call(this, name, id, type, options);

    /* istanbul ignore if */
    if (!util.isString(keyType))
        throw TypeError("keyType must be a string");

    /**
     * Key type.
     * @type {string}
     */
    this.keyType = keyType; // toJSON, marker

    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */
    this.resolvedKeyType = null;

    // Overrides Field#map
    this.map = true;
}

/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */

/**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */

/**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */
MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options);
};

/**
 * Converts this map field to a map field descriptor.
 * @returns {IMapField} Map field descriptor
 */
MapField.prototype.toJSON = function toJSON() {
    return util.toObject([
        "keyType" , this.keyType,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options
    ]);
};

/**
 * @override
 */
MapField.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;

    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined$1)
        throw Error("invalid key type: " + this.keyType);

    return Field.prototype.resolve.call(this);
};

/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */
MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;

    // enum reference value: create a reflected copy of the enum and keep reuseing it
    else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;

    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};

},{"15":15,"32":32,"33":33}],19:[function(require,module,exports){
module.exports = Message;

var util = require(35);

/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object
 */
function Message(properties) {
    // not used internally
    if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            this[keys[i]] = properties[keys[i]];
}

/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */

/**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */

/*eslint-disable valid-jsdoc*/

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.create = function create(properties) {
    return this.$type.create(properties);
};

/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encode = function encode(message, writer) {
    return this.$type.encode(message, writer);
};

/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};

/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};

/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};

/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */
Message.verify = function verify(message) {
    return this.$type.verify(message);
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.toObject = function toObject(message, options) {
    return this.$type.toObject(message, options);
};

/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */
Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
};

/*eslint-enable valid-jsdoc*/
},{"35":35}],20:[function(require,module,exports){
module.exports = Method;

// extends ReflectionObject
var ReflectionObject = require(22);
((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

var util = require(33);

/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 */
function Method(name, type, requestType, responseType, requestStream, responseStream, options) {

    /* istanbul ignore next */
    if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = undefined$1;
    } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = undefined$1;
    }

    /* istanbul ignore if */
    if (!(type === undefined$1 || util.isString(type)))
        throw TypeError("type must be a string");

    /* istanbul ignore if */
    if (!util.isString(requestType))
        throw TypeError("requestType must be a string");

    /* istanbul ignore if */
    if (!util.isString(responseType))
        throw TypeError("responseType must be a string");

    ReflectionObject.call(this, name, options);

    /**
     * Method type.
     * @type {string}
     */
    this.type = type || "rpc"; // toJSON

    /**
     * Request type.
     * @type {string}
     */
    this.requestType = requestType; // toJSON, marker

    /**
     * Whether requests are streamed or not.
     * @type {boolean|undefined}
     */
    this.requestStream = requestStream ? true : undefined$1; // toJSON

    /**
     * Response type.
     * @type {string}
     */
    this.responseType = responseType; // toJSON

    /**
     * Whether responses are streamed or not.
     * @type {boolean|undefined}
     */
    this.responseStream = responseStream ? true : undefined$1; // toJSON

    /**
     * Resolved request type.
     * @type {Type|null}
     */
    this.resolvedRequestType = null;

    /**
     * Resolved response type.
     * @type {Type|null}
     */
    this.resolvedResponseType = null;
}

/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 */

/**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */
Method.fromJSON = function fromJSON(name, json) {
    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);
};

/**
 * Converts this method to a method descriptor.
 * @returns {IMethod} Method descriptor
 */
Method.prototype.toJSON = function toJSON() {
    return util.toObject([
        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined$1,
        "requestType"    , this.requestType,
        "requestStream"  , this.requestStream,
        "responseType"   , this.responseType,
        "responseStream" , this.responseStream,
        "options"        , this.options
    ]);
};

/**
 * @override
 */
Method.prototype.resolve = function resolve() {

    /* istanbul ignore if */
    if (this.resolved)
        return this;

    this.resolvedRequestType = this.parent.lookupType(this.requestType);
    this.resolvedResponseType = this.parent.lookupType(this.responseType);

    return ReflectionObject.prototype.resolve.call(this);
};

},{"22":22,"33":33}],21:[function(require,module,exports){
module.exports = Namespace;

// extends ReflectionObject
var ReflectionObject = require(22);
((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

var Enum     = require(14),
    Field    = require(15),
    util     = require(33);

var Type,    // cyclic
    Service; // "

/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */
Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};

/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */
function arrayToJSON(array) {
    if (!(array && array.length))
        return undefined$1;
    var obj = {};
    for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON();
    return obj;
}

Namespace.arrayToJSON = arrayToJSON;

/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] >= id)
                return true;
    return false;
};

/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (reserved[i] === name)
                return true;
    return false;
};

/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */
function Namespace(name, options) {
    ReflectionObject.call(this, name, options);

    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */
    this.nested = undefined$1; // toJSON

    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */
    this._nestedArray = null;
}

function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}

/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */
Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});

/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */

/**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */

/**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
 */
// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

/**
 * Converts this namespace to a namespace descriptor.
 * @returns {INamespace} Namespace descriptor
 */
Namespace.prototype.toJSON = function toJSON() {
    return util.toObject([
        "options" , this.options,
        "nested"  , arrayToJSON(this.nestedArray)
    ]);
};

/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */
Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */
    if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
                ( nested.fields !== undefined$1
                ? Type.fromJSON
                : nested.values !== undefined$1
                ? Enum.fromJSON
                : nested.methods !== undefined$1
                ? Service.fromJSON
                : nested.id !== undefined$1
                ? Field.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    }
    return this;
};

/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */
Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name]
        || null;
};

/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */
Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
    throw Error("no such enum");
};

/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */
Namespace.prototype.add = function add(object) {

    if (!(object instanceof Field && object.extend !== undefined$1 || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");

    if (!this.nested)
        this.nested = {};
    else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i)
                    object.add(nested[i]);
                this.remove(prev);
                if (!this.nested)
                    this.nested = {};
                object.setOptions(prev.options, true);

            } else
                throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};

/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */
Namespace.prototype.remove = function remove(object) {

    if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this)
        throw Error(object + " is not a member of " + this);

    delete this.nested[object.name];
    if (!Object.keys(this.nested).length)
        this.nested = undefined$1;

    object.onRemove(this);
    return clearCache(this);
};

/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */
Namespace.prototype.define = function define(path, json) {

    if (util.isString(path))
        path = path.split(".");
    else if (!Array.isArray(path))
        throw TypeError("illegal path");
    if (path && path.length && path[0] === "")
        throw Error("path must be relative");

    var ptr = this;
    while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace))
                throw Error("path conflicts with non-namespace objects");
        } else
            ptr.add(ptr = new Namespace(part));
    }
    if (json)
        ptr.addJSON(json);
    return ptr;
};

/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */
Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray, i = 0;
    while (i < nested.length)
        if (nested[i] instanceof Namespace)
            nested[i++].resolveAll();
        else
            nested[i++].resolve();
    return this.resolve();
};

/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */
Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

    /* istanbul ignore next */
    if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined$1;
    } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [ filterTypes ];

    if (util.isString(path) && path.length) {
        if (path === ".")
            return this.root;
        path = path.split(".");
    } else if (!path.length)
        return this;

    // Start at root if path is absolute
    if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);

    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
                return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
            return found;

    // Otherwise try each nested namespace
    } else
        for (var i = 0; i < this.nestedArray.length; ++i)
            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
                return found;

    // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked)
        return null;
    return this.parent.lookup(path, filterTypes);
};

/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */
// lookup(path: string, [parentAlreadyChecked: boolean])

/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */
Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [ Type ]);
    if (!found)
        throw Error("no such type");
    return found;
};

/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */
Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [ Enum ]);
    if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */
Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [ Type, Enum ]);
    if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */
Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [ Service ]);
    if (!found)
        throw Error("no such Service '" + path + "' in " + this);
    return found;
};

Namespace._configure = function(Type_, Service_) {
    Type    = Type_;
    Service = Service_;
};

},{"14":14,"15":15,"22":22,"33":33}],22:[function(require,module,exports){
module.exports = ReflectionObject;

ReflectionObject.className = "ReflectionObject";

var util = require(33);

var Root; // cyclic

/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */
function ReflectionObject(name, options) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (options && !util.isObject(options))
        throw TypeError("options must be an object");

    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */
    this.options = options; // toJSON

    /**
     * Unique name within its namespace.
     * @type {string}
     */
    this.name = name;

    /**
     * Parent namespace.
     * @type {Namespace|null}
     */
    this.parent = null;

    /**
     * Whether already resolved or not.
     * @type {boolean}
     */
    this.resolved = false;

    /**
     * Comment text, if any.
     * @type {string|null}
     */
    this.comment = null;

    /**
     * Defining file name.
     * @type {string|null}
     */
    this.filename = null;
}

Object.defineProperties(ReflectionObject.prototype, {

    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */
    root: {
        get: function() {
            var ptr = this;
            while (ptr.parent !== null)
                ptr = ptr.parent;
            return ptr;
        }
    },

    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */
    fullName: {
        get: function() {
            var path = [ this.name ],
                ptr = this.parent;
            while (ptr) {
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});

/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */
ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};

/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */
ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent)
        this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root)
        root._handleAdd(this);
};

/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */
ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root)
        root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};

/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;
    if (this.root instanceof Root)
        this.resolved = true; // only if part of a root
    return this;
};

/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */
ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options)
        return this.options[name];
    return undefined$1;
};

/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined$1)
        (this.options || (this.options = {}))[name] = value;
    return this;
};

/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
            this.setOption(keys[i], options[keys[i]], ifNotSet);
    return this;
};

/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */
ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className,
        fullName  = this.fullName;
    if (fullName.length)
        return className + " " + fullName;
    return className;
};

ReflectionObject._configure = function(Root_) {
    Root = Root_;
};

},{"33":33}],23:[function(require,module,exports){
module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = require(22);
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field = require(15),
    util  = require(33);

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 */
function OneOf(name, fieldNames, options) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined$1;
    }
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined$1 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent
}

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options);
};

/**
 * Converts this oneof to a oneof descriptor.
 * @returns {IOneOf} Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON() {
    return util.toObject([
        "options" , this.options,
        "oneof"   , this.oneof
    ]);
};

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) {
    if (oneof.parent)
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
            if (!oneof.fieldsArray[i].parent)
                oneof.parent.add(oneof.fieldsArray[i]);
}

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */
OneOf.prototype.add = function add(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */
OneOf.prototype.remove = function remove(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0)
        throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
};

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) {
    for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
            field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
};

/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length)
        fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor)
            .add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};

},{"15":15,"22":22,"33":33}],24:[function(require,module,exports){
module.exports = Reader;

var util      = require(35);

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = util.Buffer
    ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer)
                ? new BufferReader(buffer)
                /* istanbul ignore next */
                : create_array(buffer);
        })(buffer);
    }
    /* istanbul ignore next */
    : create_array;

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            do { // eslint-disable-line no-constant-condition
                if ((wireType = this.uint32() & 7) === 4)
                    break;
                this.skipType(wireType);
            } while (true);
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

},{"35":35}],25:[function(require,module,exports){
module.exports = BufferReader;

// extends Reader
var Reader = require(24);
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = require(35);

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

/* istanbul ignore else */
if (util.Buffer)
    BufferReader.prototype._slice = util.Buffer.prototype.slice;

/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

},{"24":24,"35":35}],26:[function(require,module,exports){
module.exports = Root;

// extends Namespace
var Namespace = require(21);
((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

var Field   = require(15),
    Enum    = require(14),
    OneOf   = require(23),
    util    = require(33);

var Type,   // cyclic
    parse,  // might be excluded
    common; // "

/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */
function Root(options) {
    Namespace.call(this, "", options);

    /**
     * Deferred extension fields.
     * @type {Field[]}
     */
    this.deferred = [];

    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */
    this.files = [];
}

/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */
Root.fromJSON = function fromJSON(json, root) {
    if (!root)
        root = new Root();
    if (json.options)
        root.setOptions(json.options);
    return root.addJSON(json.nested);
};

/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */
Root.prototype.resolvePath = util.path.resolve;

// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */
function SYNC() {} // eslint-disable-line no-empty-function

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined$1;
    }
    var self = this;
    if (!callback)
        return util.asPromise(load, self, filename, options);

    var sync = callback === SYNC; // undocumented

    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */
        if (!callback)
            return;
        var cb = callback;
        callback = null;
        if (sync)
            throw err;
        cb(err, root);
    }

    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{")
                source = JSON.parse(source);
            if (!util.isString(source))
                self.setOptions(source.options).addJSON(source.nested);
            else {
                parse.filename = filename;
                var parsed = parse(source, self, options),
                    resolved,
                    i = 0;
                if (parsed.imports)
                    for (; i < parsed.imports.length; ++i)
                        if (resolved = self.resolvePath(filename, parsed.imports[i]))
                            fetch(resolved);
                if (parsed.weakImports)
                    for (i = 0; i < parsed.weakImports.length; ++i)
                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))
                            fetch(resolved, true);
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued)
            finish(null, self); // only once anyway
    }

    // Fetches a single file
    function fetch(filename, weak) {

        // Strip path if this file references a bundled definition
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common)
                filename = altname;
        }

        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1)
            return;
        self.files.push(filename);

        // Shortcut bundled definitions
        if (filename in common) {
            if (sync)
                process(filename, common[filename]);
            else {
                ++queued;
                setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }

        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak)
                    finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            util.fetch(filename, function(err, source) {
                --queued;
                /* istanbul ignore if */
                if (!callback)
                    return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */
                    if (!weak)
                        finish(err);
                    else if (!queued) // can't be covered reliably
                        finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;

    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename))
        filename = [ filename ];
    for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self.resolvePath("", filename[i]))
            fetch(resolved);

    if (sync)
        return self;
    if (!queued)
        finish(null, self);
    return undefined$1;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */
// function load(filename:string, [options:IParseOptions]):Promise<Root>

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */
Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode)
        throw Error("not supported");
    return this.load(filename, options, SYNC);
};

/**
 * @override
 */
Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
            return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};

// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;

/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */
function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined$1, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}

/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */
Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {

        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined$1 && /* not already handled */ !object.extensionField)
            if (!tryHandleExtension(this, object))
                this.deferred.push(object);

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            object.parent[object.name] = object.values; // expose enum values as property of its parent

    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

        if (object instanceof Type) // Try to handle any deferred extensions
            for (var i = 0; i < this.deferred.length;)
                if (tryHandleExtension(this, this.deferred[i]))
                    this.deferred.splice(i, 1);
                else
                    ++i;
        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
            this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
            object.parent[object.name] = object; // expose namespace as property of its parent
    }

    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
    // properties of namespaces just like static code does. This allows using a .d.ts generated for
    // a static module with reflection-based solutions where the condition is met.
};

/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */
Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {

        if (/* an extension field */ object.extend !== undefined$1) {
            if (/* already handled */ object.extensionField) { // remove its sister field
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else { // cancel the extension
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */
                if (index > -1)
                    this.deferred.splice(index, 1);
            }
        }

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose enum values

    } else if (object instanceof Namespace) {

        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose namespaces

    }
};

Root._configure = function(Type_, parse_, common_) {
    Type = Type_;
    parse = parse_;
    common = common_;
};

},{"14":14,"15":15,"21":21,"23":23,"33":33}],27:[function(require,module,exports){
module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */

},{}],28:[function(require,module,exports){

/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = require(29);

},{"29":29}],29:[function(require,module,exports){
module.exports = Service;

var util = require(35);

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined$1;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined$1;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined$1;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"35":35}],30:[function(require,module,exports){
module.exports = Service;

// extends Namespace
var Namespace = require(21);
((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

var Method = require(20),
    util   = require(33),
    rpc    = require(28);

/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */
function Service(name, options) {
    Namespace.call(this, name, options);

    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */
    this.methods = {}; // toJSON, marker

    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */
    this._methodsArray = null;
}

/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */

/**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */
Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */
    if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    if (json.nested)
        service.addJSON(json.nested);
    return service;
};

/**
 * Converts this service to a service descriptor.
 * @returns {IService} Service descriptor
 */
Service.prototype.toJSON = function toJSON() {
    var inherited = Namespace.prototype.toJSON.call(this);
    return util.toObject([
        "options" , inherited && inherited.options || undefined$1,
        "methods" , Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},
        "nested"  , inherited && inherited.nested || undefined$1
    ]);
};

/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */
Object.defineProperty(Service.prototype, "methodsArray", {
    get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});

function clearCache(service) {
    service._methodsArray = null;
    return service;
}

/**
 * @override
 */
Service.prototype.get = function get(name) {
    return this.methods[name]
        || Namespace.prototype.get.call(this, name);
};

/**
 * @override
 */
Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
    return Namespace.prototype.resolve.call(this);
};

/**
 * @override
 */
Service.prototype.add = function add(object) {

    /* istanbul ignore if */
    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * @override
 */
Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {

        /* istanbul ignore if */
        if (this.methods[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */
Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};

},{"20":20,"21":21,"28":28,"33":33}],31:[function(require,module,exports){
module.exports = Type;

// extends Namespace
var Namespace = require(21);
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

var Enum      = require(14),
    OneOf     = require(23),
    Field     = require(15),
    MapField  = require(18),
    Service   = require(30),
    Message   = require(19),
    Reader    = require(24),
    Writer    = require(38),
    util      = require(33),
    encoder   = require(13),
    decoder   = require(12),
    verifier  = require(36),
    converter = require(11),
    wrappers  = require(37);

/**
 * Constructs a new reflected message type instance.
 * @classdesc Reflected message type.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Message name
 * @param {Object.<string,*>} [options] Declared options
 */
function Type(name, options) {
    Namespace.call(this, name, options);

    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */
    this.fields = {};  // toJSON, marker

    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */
    this.oneofs = undefined$1; // toJSON

    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */
    this.extensions = undefined$1; // toJSON

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined$1; // toJSON

    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */
    this.group = undefined$1; // toJSON

    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */
    this._fieldsById = null;

    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */
    this._fieldsArray = null;

    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */
    this._oneofsArray = null;

    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */
    this._ctor = null;
}

Object.defineProperties(Type.prototype, {

    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */
    fieldsById: {
        get: function() {

            /* istanbul ignore if */
            if (this._fieldsById)
                return this._fieldsById;

            this._fieldsById = {};
            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
                var field = this.fields[names[i]],
                    id = field.id;

                /* istanbul ignore if */
                if (this._fieldsById[id])
                    throw Error("duplicate id " + id + " in " + this);

                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },

    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */
    fieldsArray: {
        get: function() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },

    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */
    oneofsArray: {
        get: function() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },

    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */
    ctor: {
        get: function() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {

            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }

            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;

            // Mix in static methods
            util.merge(ctor, Message, true);

            this._ctor = ctor;

            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for (; i < /* initializes */ this.fieldsArray.length; ++i)
                this._fieldsArray[i].resolve(); // ensures a proper value

            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
                ctorProperties[this._oneofsArray[i].resolve().name] = {
                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
                };
            if (i)
                Object.defineProperties(ctor.prototype, ctorProperties);
        }
    }
});

/**
 * Generates a constructor function for the specified type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
Type.generateConstructor = function generateConstructor(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["p"], mtype.name);
    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map) gen
            ("this%s={}", util.safeProp(field.name));
        else if (field.repeated) gen
            ("this%s=[]", util.safeProp(field.name));
    return gen
    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
    /* eslint-enable no-unexpected-multiline */
};

function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}

/**
 * Message type descriptor.
 * @interface IType
 * @extends INamespace
 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
 * @property {Object.<string,IField>} fields Field descriptors
 * @property {number[][]} [extensions] Extension ranges
 * @property {number[][]} [reserved] Reserved ranges
 * @property {boolean} [group=false] Whether a legacy group or not
 */

/**
 * Creates a message type from a message type descriptor.
 * @param {string} name Message name
 * @param {IType} json Message type descriptor
 * @returns {Type} Created message type
 */
Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = Object.keys(json.fields),
        i = 0;
    for (; i < names.length; ++i)
        type.add(
            ( typeof json.fields[names[i]].keyType !== "undefined"
            ? MapField.fromJSON
            : Field.fromJSON )(names[i], json.fields[names[i]])
        );
    if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
            var nested = json.nested[names[i]];
            type.add( // most to least likely
                ( nested.id !== undefined$1
                ? Field.fromJSON
                : nested.fields !== undefined$1
                ? Type.fromJSON
                : nested.values !== undefined$1
                ? Enum.fromJSON
                : nested.methods !== undefined$1
                ? Service.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
    if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
    if (json.group)
        type.group = true;
    return type;
};

/**
 * Converts this message type to a message type descriptor.
 * @returns {IType} Message type descriptor
 */
Type.prototype.toJSON = function toJSON() {
    var inherited = Namespace.prototype.toJSON.call(this);
    return util.toObject([
        "options"    , inherited && inherited.options || undefined$1,
        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray),
        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},
        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined$1,
        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined$1,
        "group"      , this.group || undefined$1,
        "nested"     , inherited && inherited.nested || undefined$1
    ]);
};

/**
 * @override
 */
Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray, i = 0;
    while (i < fields.length)
        fields[i++].resolve();
    var oneofs = this.oneofsArray; i = 0;
    while (i < oneofs.length)
        oneofs[i++].resolve();
    return Namespace.prototype.resolveAll.call(this);
};

/**
 * @override
 */
Type.prototype.get = function get(name) {
    return this.fields[name]
        || this.oneofs && this.oneofs[name]
        || this.nested && this.nested[name]
        || null;
};

/**
 * Adds a nested object to this type.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
 */
Type.prototype.add = function add(object) {

    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Field && object.extend === undefined$1) {
        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
        // The root object takes care of adding distinct sister-fields to the respective extended
        // type instead.

        // avoids calling the getter if not absolutely necessary because it's called quite frequently
        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
            throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
            throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
            throw Error("name '" + object.name + "' is reserved in " + this);

        if (object.parent)
            object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs)
            this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * Removes a nested object from this type.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this type
 */
Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined$1) {
        // See Type#add for the reason why extension fields are excluded here.

        /* istanbul ignore if */
        if (!this.fields || this.fields[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {

        /* istanbul ignore if */
        if (!this.oneofs || this.oneofs[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<{}>} Message instance
 */
Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};

/**
 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
 * @returns {Type} `this`
 */
Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).

    var fullName = this.fullName,
        types    = [];
    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);

    // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer : Writer,
        types  : types,
        util   : util
    });
    this.decode = decoder(this)({
        Reader : Reader,
        types  : types,
        util   : util
    });
    this.verify = verifier(this)({
        types : types,
        util  : util
    });
    this.fromObject = converter.fromObject(this)({
        types : types,
        util  : util
    });
    this.toObject = converter.toObject(this)({
        types : types,
        util  : util
    });

    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = Object.create(this);
        // if (wrapper.fromObject) {
            originalThis.fromObject = this.fromObject;
            this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
            originalThis.toObject = this.toObject;
            this.toObject = wrapper.toObject.bind(originalThis);
        // }
    }

    return this;
};

/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};

/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};

/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError<{}>} If required fields are missing
 */
Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};

/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader))
        reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};

/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */
Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */
Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};

/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */
Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};

/**
 * Decorator function as returned by {@link Type.d} (TypeScript).
 * @typedef TypeDecorator
 * @type {function}
 * @param {Constructor<T>} target Target constructor
 * @returns {undefined}
 * @template T extends Message<T>
 */

/**
 * Type decorator (TypeScript).
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {TypeDecorator<T>} Decorator function
 * @template T extends Message<T>
 */
Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};

},{"11":11,"12":12,"13":13,"14":14,"15":15,"18":18,"19":19,"21":21,"23":23,"24":24,"30":30,"33":33,"36":36,"37":37,"38":38}],32:[function(require,module,exports){

/**
 * Common type constants.
 * @namespace
 */
var types = exports;

var util = require(33);

var s = [
    "double",   // 0
    "float",    // 1
    "int32",    // 2
    "uint32",   // 3
    "sint32",   // 4
    "fixed32",  // 5
    "sfixed32", // 6
    "int64",    // 7
    "uint64",   // 8
    "sint64",   // 9
    "fixed64",  // 10
    "sfixed64", // 11
    "bool",     // 12
    "string",   // 13
    "bytes"     // 14
];

function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while (i < values.length) o[s[i + offset]] = values[i++];
    return o;
}

/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */
types.basic = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2,
    /* bytes    */ 2
]);

/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */
types.defaults = bake([
    /* double   */ 0,
    /* float    */ 0,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 0,
    /* sfixed32 */ 0,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 0,
    /* sfixed64 */ 0,
    /* bool     */ false,
    /* string   */ "",
    /* bytes    */ util.emptyArray,
    /* message  */ null
]);

/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */
types.long = bake([
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1
], 7);

/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */
types.mapKey = bake([
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2
], 2);

/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */
types.packed = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0
]);

},{"33":33}],33:[function(require,module,exports){

/**
 * Various utility functions.
 * @namespace
 */
var util = module.exports = require(35);

var roots = require(27);

var Type, // cyclic
    Enum;

util.codegen = require(3);
util.fetch   = require(5);
util.path    = require(8);

/**
 * Node's fs module if available.
 * @type {Object.<string,*>}
 */
util.fs = util.inquire("fs");

/**
 * Converts an object's values to an array.
 * @param {Object.<string,*>} object Object to convert
 * @returns {Array.<*>} Converted array
 */
util.toArray = function toArray(object) {
    if (object) {
        var keys  = Object.keys(object),
            array = new Array(keys.length),
            index = 0;
        while (index < keys.length)
            array[index] = object[keys[index++]];
        return array;
    }
    return [];
};

/**
 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
 * @param {Array.<*>} array Array to convert
 * @returns {Object.<string,*>} Converted object
 */
util.toObject = function toObject(array) {
    var object = {},
        index  = 0;
    while (index < array.length) {
        var key = array[index++],
            val = array[index++];
        if (val !== undefined$1)
            object[key] = val;
    }
    return object;
};

var safePropBackslashRe = /\\/g,
    safePropQuoteRe     = /"/g;

/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
util.isReserved = function isReserved(name) {
    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
};

/**
 * Returns a safe property accessor for the specified property name.
 * @param {string} prop Property name
 * @returns {string} Safe accessor
 */
util.safeProp = function safeProp(prop) {
    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
    return "." + prop;
};

/**
 * Converts the first character of a string to upper case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.ucFirst = function ucFirst(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
};

var camelCaseRe = /_([a-z])/g;

/**
 * Converts a string to camel case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.camelCase = function camelCase(str) {
    return str.substring(0, 1)
         + str.substring(1)
               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
};

/**
 * Compares reflected fields by id.
 * @param {Field} a First field
 * @param {Field} b Second field
 * @returns {number} Comparison value
 */
util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};

/**
 * Decorator helper for types (TypeScript).
 * @param {Constructor<T>} ctor Constructor function
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {Type} Reflected type
 * @template T extends Message<T>
 * @property {Root} root Decorators root
 */
util.decorateType = function decorateType(ctor, typeName) {

    /* istanbul ignore if */
    if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }

    /* istanbul ignore next */
    if (!Type)
        Type = require(31);

    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
    return type;
};

var decorateEnumIndex = 0;

/**
 * Decorator helper for enums (TypeScript).
 * @param {Object} object Enum object
 * @returns {Enum} Reflected enum
 */
util.decorateEnum = function decorateEnum(object) {

    /* istanbul ignore if */
    if (object.$type)
        return object.$type;

    /* istanbul ignore next */
    if (!Enum)
        Enum = require(14);

    var enm = new Enum("Enum" + decorateEnumIndex++, object);
    util.decorateRoot.add(enm);
    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
    return enm;
};

/**
 * Decorator root (TypeScript).
 * @name util.decorateRoot
 * @type {Root}
 * @readonly
 */
Object.defineProperty(util, "decorateRoot", {
    get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require(26))());
    }
});

},{"14":14,"26":26,"27":27,"3":3,"31":31,"35":35,"5":5,"8":8}],34:[function(require,module,exports){
module.exports = LongBits;

var util = require(35);

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};

},{"35":35}],35:[function(require,module,exports){
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = require(1);

// converts to / from base64 encoded strings
util.base64 = require(2);

// base class of rpc.Service
util.EventEmitter = require(4);

// float handling accross browsers
util.float = require(6);

// requires modules optionally and hides the call from bundlers
util.inquire = require(7);

// converts to / from utf8 encoded strings
util.utf8 = require(10);

// provides a node-like buffer pool in the browser
util.pool = require(9);

// utility to work with the low and high bits of a 64 bit value
util.LongBits = require(34);

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 * @const
 */
util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined$1 || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined$1 && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

},{"1":1,"10":10,"2":2,"34":34,"4":4,"6":6,"7":7,"9":9}],36:[function(require,module,exports){
module.exports = verifier;

var Enum      = require(14),
    util      = require(33);

function invalid(field, expected) {
    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
}

/**
 * Generates a partial value verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyValue(gen, field, fieldIndex, ref) {
    /* eslint-disable no-unexpected-multiline */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(%s){", ref)
                ("default:")
                    ("return%j", invalid(field, "enum value"));
            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
                ("case %i:", field.resolvedType.values[keys[j]]);
            gen
                    ("break")
            ("}");
        } else {
            gen
            ("{")
                ("var e=types[%i].verify(%s);", fieldIndex, ref)
                ("if(e)")
                    ("return%j+e", field.name + ".")
            ("}");
        }
    } else {
        switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32": gen
                ("if(!util.isInteger(%s))", ref)
                    ("return%j", invalid(field, "integer"));
                break;
            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
                    ("return%j", invalid(field, "integer|Long"));
                break;
            case "float":
            case "double": gen
                ("if(typeof %s!==\"number\")", ref)
                    ("return%j", invalid(field, "number"));
                break;
            case "bool": gen
                ("if(typeof %s!==\"boolean\")", ref)
                    ("return%j", invalid(field, "boolean"));
                break;
            case "string": gen
                ("if(!util.isString(%s))", ref)
                    ("return%j", invalid(field, "string"));
                break;
            case "bytes": gen
                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
                    ("return%j", invalid(field, "buffer"));
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a partial key verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyKey(gen, field, ref) {
    /* eslint-disable no-unexpected-multiline */
    switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32": gen
            ("if(!util.key32Re.test(%s))", ref)
                ("return%j", invalid(field, "integer key"));
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64": gen
            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
                ("return%j", invalid(field, "integer|Long key"));
            break;
        case "bool": gen
            ("if(!util.key2Re.test(%s))", ref)
                ("return%j", invalid(field, "boolean key"));
            break;
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a verifier specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function verifier(mtype) {
    /* eslint-disable no-unexpected-multiline */

    var gen = util.codegen(["m"], mtype.name + "$verify")
    ("if(typeof m!==\"object\"||m===null)")
        ("return%j", "object expected");
    var oneofs = mtype.oneofsArray,
        seenFirstField = {};
    if (oneofs.length) gen
    ("var p={}");

    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            ref   = "m" + util.safeProp(field.name);

        if (field.optional) gen
        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

        // map fields
        if (field.map) { gen
            ("if(!util.isObject(%s))", ref)
                ("return%j", invalid(field, "object"))
            ("var k=Object.keys(%s)", ref)
            ("for(var i=0;i<k.length;++i){");
                genVerifyKey(gen, field, "k[i]");
                genVerifyValue(gen, field, i, ref + "[k[i]]")
            ("}");

        // repeated fields
        } else if (field.repeated) { gen
            ("if(!Array.isArray(%s))", ref)
                ("return%j", invalid(field, "array"))
            ("for(var i=0;i<%s.length;++i){", ref);
                genVerifyValue(gen, field, i, ref + "[i]")
            ("}");

        // required or present fields
        } else {
            if (field.partOf) {
                var oneofProp = util.safeProp(field.partOf.name);
                if (seenFirstField[field.partOf.name] === 1) gen
            ("if(p%s===1)", oneofProp)
                ("return%j", field.partOf.name + ": multiple values");
                seenFirstField[field.partOf.name] = 1;
                gen
            ("p%s=1", oneofProp);
            }
            genVerifyValue(gen, field, i, ref);
        }
        if (field.optional) gen
        ("}");
    }
    return gen
    ("return null");
    /* eslint-enable no-unexpected-multiline */
}
},{"14":14,"33":33}],37:[function(require,module,exports){

/**
 * Wrappers for common types.
 * @type {Object.<string,IWrapper>}
 * @const
 */
var wrappers = exports;

var Message = require(19);

/**
 * From object converter part of an {@link IWrapper}.
 * @typedef WrapperFromObjectConverter
 * @type {function}
 * @param {Object.<string,*>} object Plain object
 * @returns {Message<{}>} Message instance
 * @this Type
 */

/**
 * To object converter part of an {@link IWrapper}.
 * @typedef WrapperToObjectConverter
 * @type {function}
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @this Type
 */

/**
 * Common type wrapper part of {@link wrappers}.
 * @interface IWrapper
 * @property {WrapperFromObjectConverter} [fromObject] From object converter
 * @property {WrapperToObjectConverter} [toObject] To object converter
 */

// Custom wrapper for Any
wrappers[".google.protobuf.Any"] = {

    fromObject: function(object) {

        // unwrap value type if mapped
        if (object && object["@type"]) {
            var type = this.lookup(object["@type"]);
            /* istanbul ignore else */
            if (type) {
                // type_url does not accept leading "."
                var type_url = object["@type"].charAt(0) === "." ?
                    object["@type"].substr(1) : object["@type"];
                // type_url prefix is optional, but path seperator is required
                return this.create({
                    type_url: "/" + type_url,
                    value: type.encode(type.fromObject(object)).finish()
                });
            }
        }

        return this.fromObject(object);
    },

    toObject: function(message, options) {

        // decode value if requested and unmapped
        if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            var name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type)
                message = type.decode(message.value);
        }

        // wrap value if unmapped
        if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            object["@type"] = message.$type.fullName;
            return object;
        }

        return this.toObject(message, options);
    }
};

},{"19":19}],38:[function(require,module,exports){
module.exports = Writer;

var util      = require(35);

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined$1;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = util.Buffer
    ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    }
    /* istanbul ignore next */
    : function create_array() {
        return new Writer();
    };

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined$1;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
};

},{"35":35}],39:[function(require,module,exports){
module.exports = BufferWriter;

// extends Writer
var Writer = require(38);
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = require(35);

var Buffer = util.Buffer;

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Buffer} Buffer
 */
BufferWriter.alloc = function alloc_buffer(size) {
    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
};

var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
    ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
                           // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
        else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
    };

/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else
        buf.utf8Write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

},{"35":35,"38":38}]},{},[16]);

})(typeof window==="object"&&window||typeof self==="object"&&self||commonjsGlobal);

});

/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/

const $root = (protobuf.roots["default"] || (protobuf.roots["default"] = new protobuf.Root()))
.addJSON({
  net: {
    options: {
      java_package: "com.thoughtspot.net.address",
      go_package: "common_pb"
    },
    nested: {
      rpc: {
        options: {
          java_package: "com.thoughtspot.net.rpc",
          go_package: "rpc_pb"
        },
        nested: {
          RpcRequestInfo: {
            fields: {
              senderIp: {
                type: "string",
                id: 1
              },
              noFullTrace: {
                type: "bool",
                id: 2,
                options: {
                  "default": false
                }
              },
              traceId: {
                type: "string",
                id: 3
              },
              senderService: {
                type: "string",
                id: 4
              },
              senderTask: {
                type: "string",
                id: 5
              },
              parentTraceId: {
                type: "string",
                id: 6
              },
              auth: {
                type: "Auth",
                id: 7
              }
            },
            nested: {
              Auth: {
                fields: {
                  needsAuthorization: {
                    type: "bool",
                    id: 2
                  },
                  thoughtspotUserId: {
                    type: "string",
                    id: 1
                  }
                }
              }
            }
          },
          RpcResponseInfo: {
            fields: {
              trace: {
                type: "net.TraceEvent",
                id: 1
              },
              host: {
                type: "string",
                id: 2
              },
              useSnappy: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              }
            }
          },
          RpcDebugInfo: {
            fields: {
              size: {
                type: "int64",
                id: 1
              },
              uncompressedSize: {
                type: "int64",
                id: 2
              },
              senderIp: {
                type: "string",
                id: 3,
                options: {
                  "default": "unknown"
                }
              },
              traceId: {
                type: "string",
                id: 4,
                options: {
                  "default": "unknown"
                }
              },
              parentTraceId: {
                type: "string",
                id: 5,
                options: {
                  "default": "unknown"
                }
              },
              status: {
                type: "common.StatusProto",
                id: 6
              }
            },
            nested: {
              trace: {
                type: "RpcDebugInfo",
                id: 1008,
                extend: "TraceEvent"
              }
            }
          },
          RpcOptions: {
            fields: {
              thrift: {
                type: "ThriftOptions",
                id: 1
              },
              retryTimeoutMs: {
                type: "int32",
                id: 7,
                options: {
                  "default": 120000
                }
              },
              retrySleepIntervalMs: {
                type: "int32",
                id: 3,
                options: {
                  "default": 100
                }
              },
              connectionPoolMaxSize: {
                type: "int32",
                id: 4,
                options: {
                  "default": 200
                }
              },
              maxRequestMb: {
                type: "int32",
                id: 5
              },
              maxRecursionLimit: {
                type: "int32",
                id: 6
              },
              enableTracing: {
                type: "bool",
                id: 8,
                options: {
                  "default": true
                }
              },
              enableServerContext: {
                type: "bool",
                id: 9
              },
              deprecatedRetrySeconds: {
                type: "int32",
                id: 2,
                options: {
                  "default": 120
                }
              }
            },
            nested: {
              service: {
                type: "RpcOptions",
                id: 1000,
                extend: "google.protobuf.ServiceOptions"
              },
              method: {
                type: "RpcOptions",
                id: 1000,
                extend: "google.protobuf.MethodOptions"
              }
            }
          },
          ThriftOptions: {
            fields: {
              framedTransport: {
                type: "bool",
                id: 1,
                options: {
                  "default": true
                }
              },
              socketTimeoutMs: {
                type: "int32",
                id: 2,
                options: {
                  "default": 10000
                }
              },
              maxActiveProcessors: {
                type: "int32",
                id: 3,
                options: {
                  "default": -1
                }
              },
              protocolType: {
                type: "ProtocolType",
                id: 4,
                options: {
                  "default": "BINARY"
                }
              },
              socketConnectTimeoutMs: {
                type: "int32",
                id: 5
              },
              numRpcThreads: {
                type: "int32",
                id: 6,
                options: {
                  "default": 4
                }
              }
            },
            nested: {
              ProtocolType: {
                values: {
                  BINARY: 0,
                  JSON: 1
                }
              }
            }
          }
        }
      },
      TraceEvent: {
        fields: {
          name: {
            type: "string",
            id: 1,
            options: {
              "(common.sensitivity)": 0
            }
          },
          startUs: {
            type: "int64",
            id: 2,
            options: {
              "(common.sensitivity)": 0
            }
          },
          durationUs: {
            type: "int64",
            id: 3,
            options: {
              "(common.sensitivity)": 0
            }
          },
          chronoType: {
            type: "ChronoType",
            id: 4,
            options: {
              "(common.sensitivity)": 0
            }
          },
          log: {
            rule: "repeated",
            type: "string",
            id: 14,
            options: {
              "(common.sensitivity)": 3
            }
          },
          error: {
            rule: "repeated",
            type: "string",
            id: 5,
            options: {
              "(common.sensitivity)": 3
            }
          },
          anyError: {
            type: "bool",
            id: 15,
            options: {
              "(common.sensitivity)": 0
            }
          },
          deadlineExpired: {
            type: "bool",
            id: 6,
            options: {
              "default": false,
              "(common.sensitivity)": 0
            }
          },
          child: {
            rule: "repeated",
            type: "TraceEvent",
            id: 7
          },
          tid: {
            type: "int32",
            id: 8,
            options: {
              "(common.sensitivity)": 0
            }
          },
          parentTid: {
            type: "int32",
            id: 9,
            options: {
              "(common.sensitivity)": 0
            }
          },
          clockAlign: {
            type: "ClockAlign",
            id: 10
          },
          traceId: {
            type: "string",
            id: 11,
            options: {
              "(common.sensitivity)": 0
            }
          },
          realStartUs: {
            type: "int64",
            id: 12,
            options: {
              "(common.sensitivity)": 0
            }
          },
          host: {
            type: "string",
            id: 13,
            options: {
              "(common.sensitivity)": 3
            }
          },
          versionString: {
            type: "string",
            id: 19,
            options: {
              "(common.sensitivity)": 0
            }
          },
          threadCpuDurationUs: {
            type: "int64",
            id: 17,
            options: {
              deprecated: true,
              "(common.sensitivity)": 0
            }
          },
          rusage: {
            type: "ResourceUsage",
            id: 20
          },
          loadAvg: {
            rule: "repeated",
            type: "LoadAvg",
            id: 21
          },
          statistics: {
            type: "TraceStatistics",
            id: 18
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ],
        nested: {
          ChronoType: {
            values: {
              CHRONO_CONCURRENT: 1,
              CHRONO_SEQUENTIAL: 2
            }
          },
          ClockAlign: {
            fields: {
              type: {
                type: "Type",
                id: 1,
                options: {
                  "default": "LOCAL_CLOCK"
                }
              },
              skewUs: {
                type: "int64",
                id: 2,
                options: {
                  "default": 0
                }
              }
            },
            nested: {
              Type: {
                values: {
                  LOCAL_CLOCK: 0,
                  REMOTE_CLOCK_UNKNOWN: 1,
                  REMOTE_CLOCK_KNOWN: 2
                }
              }
            }
          },
          ResourceUsage: {
            fields: {
              utimeUs: {
                type: "int64",
                id: 1,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              stimeUs: {
                type: "int64",
                id: 2,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              maxRssKb: {
                type: "int64",
                id: 3,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              minorPageFault: {
                type: "int64",
                id: 4,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              majorPageFault: {
                type: "int64",
                id: 5,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              inputFileIo: {
                type: "int64",
                id: 6,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              outputFileIo: {
                type: "int64",
                id: 7,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              vCtxSwitch: {
                type: "int64",
                id: 8,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              ivCtxSwitch: {
                type: "int64",
                id: 9,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          LoadAvg: {
            fields: {
              epochUs: {
                type: "int64",
                id: 1,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              load: {
                type: "double",
                id: 2,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          TraceStatistics: {
            fields: {
              properties: {
                rule: "repeated",
                type: "common.KeyValue",
                id: 1
              },
              tags: {
                rule: "repeated",
                type: "common.KeyValue",
                id: 2
              }
            }
          }
        }
      },
      StringDebugInfo: {
        fields: {
          msg: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        },
        nested: {
          trace: {
            type: "StringDebugInfo",
            id: 1000,
            extend: "TraceEvent"
          }
        }
      },
      KeyValueDebugInfo: {
        fields: {
          item: {
            rule: "repeated",
            type: "common.KeyValue",
            id: 1
          }
        },
        nested: {
          trace: {
            type: "KeyValueDebugInfo",
            id: 1004,
            extend: "TraceEvent"
          }
        }
      },
      TraceSummary: {
        fields: {
          eventSummary: {
            rule: "repeated",
            type: "EventSummary",
            id: 1
          },
          workerSummary: {
            rule: "repeated",
            type: "WorkerSummary",
            id: 2
          }
        },
        nested: {
          EventMetric: {
            fields: {
              startMs: {
                type: "int64",
                id: 1
              },
              actualTimeMs: {
                type: "int64",
                id: 2
              },
              totalTimeMs: {
                type: "int64",
                id: 3
              },
              numCalls: {
                type: "int64",
                id: 4
              }
            }
          },
          EventSummary: {
            fields: {
              eventName: {
                type: "string",
                id: 1
              },
              numCalls: {
                type: "int32",
                id: 2
              },
              maxTimeMs: {
                type: "int64",
                id: 3
              },
              minTimeMs: {
                type: "int64",
                id: 4
              },
              avgTotalTimeMs: {
                type: "int64",
                id: 5
              },
              minActualTimeMs: {
                type: "int64",
                id: 10
              },
              maxActualTimeMs: {
                type: "int64",
                id: 11
              },
              avgActualTimeMs: {
                type: "int64",
                id: 6
              },
              totalTimeMs: {
                type: "int64",
                id: 7
              },
              actualTimeMs: {
                type: "int64",
                id: 8
              },
              metric: {
                rule: "repeated",
                type: "EventMetric",
                id: 9
              }
            }
          },
          WorkerSummary: {
            fields: {
              host: {
                type: "string",
                id: 1
              },
              numThreadsCreated: {
                type: "int32",
                id: 2
              },
              maxConcurrentThreads: {
                type: "int32",
                id: 3
              }
            }
          }
        }
      },
      PartialTraceIds: {
        fields: {
          guid: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      },
      TraceMetadata: {
        fields: {
          id: {
            type: "string",
            id: 8
          },
          incidentId: {
            type: "string",
            id: 1
          },
          category: {
            type: "string",
            id: 7
          },
          ip: {
            type: "string",
            id: 2
          },
          serviceName: {
            type: "string",
            id: 3
          },
          taskName: {
            type: "string",
            id: 12
          },
          sunit: {
            type: "int64",
            id: 4
          },
          timestamp: {
            type: "int64",
            id: 9
          },
          duration: {
            type: "int64",
            id: 10
          },
          tag: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 6
          },
          tagsConcat: {
            type: "string",
            id: 11
          },
          traceStatsStr: {
            type: "string",
            id: 13
          }
        }
      },
      PutTraceRequest: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          tag: {
            rule: "repeated",
            type: "string",
            id: 2,
            options: {
              deprecated: true
            }
          },
          metadata: {
            type: "TraceMetadata",
            id: 5
          },
          trace: {
            type: "TraceEvent",
            id: 3
          },
          collector: {
            type: "string",
            id: 4
          }
        }
      },
      PutTraceResponse: {
        fields: {}
      },
      PutTracesRequest: {
        fields: {
          request: {
            rule: "repeated",
            type: "PutTraceRequest",
            id: 1
          }
        }
      },
      PutTracesResponse: {
        fields: {
          response: {
            rule: "repeated",
            type: "PutTraceResponse",
            id: 1
          }
        }
      },
      GetTraceRequest: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          ignoreDescendants: {
            type: "bool",
            id: 2,
            options: {
              "default": false
            }
          },
          filterSensitiveInfo: {
            type: "bool",
            id: 3,
            options: {
              "default": false
            }
          },
          verbosityLevel: {
            type: "int32",
            id: 4,
            options: {
              "default": 50000
            }
          }
        }
      },
      GetTraceResponse: {
        fields: {
          tag: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          trace: {
            type: "TraceEvent",
            id: 2
          },
          metadata: {
            type: "TraceMetadata",
            id: 3
          },
          timestamp: {
            type: "int64",
            id: 100
          }
        }
      },
      FilterStatsAST: {
        fields: {
          type: {
            type: "NodeType",
            id: 1
          },
          token: {
            type: "string",
            id: 2
          },
          leftChild: {
            type: "FilterStatsAST",
            id: 3
          },
          rightChild: {
            type: "FilterStatsAST",
            id: 4
          }
        },
        nested: {
          NodeType: {
            values: {
              OP: 0,
              TERMINAL: 1
            }
          }
        }
      },
      GetTracesRequest: {
        fields: {
          incidentId: {
            type: "string",
            id: 1
          },
          workflowId: {
            type: "string",
            id: 12
          },
          query: {
            type: "string",
            id: 13
          },
          ip: {
            type: "string",
            id: 2
          },
          serviceName: {
            type: "string",
            id: 3
          },
          sunit: {
            type: "int64",
            id: 4
          },
          category: {
            type: "string",
            id: 5
          },
          fromEpoch: {
            type: "int64",
            id: 6
          },
          toEpoch: {
            type: "int64",
            id: 7
          },
          minDuration: {
            type: "int64",
            id: 9
          },
          maxDuration: {
            type: "int64",
            id: 10
          },
          limit: {
            type: "int64",
            id: 11
          },
          activeFromEpoch: {
            type: "int64",
            id: 15
          },
          activeEndEpoch: {
            type: "int64",
            id: 16
          },
          metadata: {
            type: "bool",
            id: 8
          },
          requestType: {
            type: "RequestType",
            id: 14
          },
          timeIdx: {
            type: "int64",
            id: 17
          },
          filterStatsAst: {
            type: "FilterStatsAST",
            id: 18
          }
        },
        nested: {
          RequestType: {
            values: {
              ALL: 0,
              BY_RECENCY: 1,
              BY_DURATION: 2,
              GET_STATISTICS: 3
            }
          }
        }
      },
      ListedTraceInfo: {
        fields: {
          traceId: {
            type: "string",
            id: 1
          },
          tag: {
            rule: "repeated",
            type: "string",
            id: 2
          },
          duration: {
            type: "int64",
            id: 3
          },
          timestampStr: {
            type: "string",
            id: 4
          },
          timestamp: {
            type: "int64",
            id: 5
          },
          traceStatistics: {
            type: "TraceEvent.TraceStatistics",
            id: 6
          },
          serviceName: {
            type: "string",
            id: 7
          },
          category: {
            type: "string",
            id: 8
          },
          sunit: {
            type: "int64",
            id: 9
          }
        }
      },
      TraceService: {
        fields: {
          serviceName: {
            type: "string",
            id: 1
          },
          sunit: {
            rule: "repeated",
            type: "int32",
            id: 2,
            options: {
              packed: false
            }
          },
          category: {
            rule: "repeated",
            type: "string",
            id: 3
          }
        }
      },
      TraceFilters: {
        fields: {
          traceService: {
            rule: "repeated",
            type: "TraceService",
            id: 1
          },
          traceIp: {
            rule: "repeated",
            type: "string",
            id: 2
          }
        }
      },
      GetTracesResponse: {
        fields: {
          traceInfoRecency: {
            rule: "repeated",
            type: "ListedTraceInfo",
            id: 1
          },
          traceInfoDuration: {
            rule: "repeated",
            type: "ListedTraceInfo",
            id: 2
          },
          traceInfoStatistics: {
            rule: "repeated",
            type: "ListedTraceInfo",
            id: 4
          },
          traceFilters: {
            type: "TraceFilters",
            id: 3
          }
        }
      },
      SummarizeTraceRequest: {
        fields: {
          traceId: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      },
      SummarizeTraceResponse: {
        fields: {
          traceSummary: {
            type: "TraceSummary",
            id: 1
          }
        }
      },
      TraceVaultService: {
        options: {
          "(net.rpc.RpcOptions.service).retry_timeout_ms": 40000,
          "(net.rpc.RpcOptions.service).max_request_mb": 511,
          "(net.rpc.RpcOptions.service).enable_tracing": false
        },
        methods: {
          GetTrace: {
            requestType: "GetTraceRequest",
            responseType: "GetTraceResponse"
          },
          PutTrace: {
            requestType: "PutTraceRequest",
            responseType: "PutTraceResponse"
          },
          SummarizeTrace: {
            requestType: "SummarizeTraceRequest",
            responseType: "SummarizeTraceResponse"
          },
          GetTraces: {
            requestType: "GetTracesRequest",
            responseType: "GetTracesResponse"
          }
        }
      },
      HostPort: {
        fields: {
          host: {
            type: "string",
            id: 1
          },
          port: {
            type: "int32",
            id: 2
          }
        }
      },
      OrionAddress: {
        fields: {
          zooServer: {
            rule: "repeated",
            type: "HostPort",
            id: 1
          },
          clusterName: {
            type: "string",
            id: 2
          },
          serviceName: {
            type: "string",
            id: 3
          },
          serviceUnitIndex: {
            type: "int32",
            id: 4
          },
          taskName: {
            type: "string",
            id: 5
          },
          portName: {
            type: "string",
            id: 6
          },
          label: {
            rule: "repeated",
            type: "Label",
            id: 7
          }
        },
        nested: {
          Label: {
            fields: {
              key: {
                type: "string",
                id: 1
              },
              value: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      AddressProto: {
        fields: {
          hostPort: {
            type: "HostPort",
            id: 1
          },
          orionAddress: {
            type: "OrionAddress",
            id: 2
          }
        }
      },
      zoo: {
        options: {
          java_package: "com.thoughtspot.net.zoo",
          go_package: "znode_pb"
        },
        nested: {
          ZnodeProto: {
            fields: {},
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          ZnodeWatchTraceProto: {
            fields: {
              path: {
                type: "string",
                id: 1
              },
              success: {
                type: "bool",
                id: 2
              },
              "null": {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              },
              content: {
                type: "string",
                id: 4
              },
              proto: {
                type: "ZnodeProto",
                id: 5
              }
            },
            nested: {
              trace: {
                type: "ZnodeWatchTraceProto",
                id: 1006,
                extend: "TraceEvent"
              }
            }
          },
          FileBlockProto: {
            fields: {
              metadata: {
                type: "Metadata",
                id: 1
              },
              data: {
                type: "bytes",
                id: 2
              }
            },
            nested: {
              Metadata: {
                fields: {
                  filePath: {
                    type: "string",
                    id: 1
                  },
                  blockNum: {
                    type: "int32",
                    id: 2
                  },
                  sizeBytes: {
                    type: "int32",
                    id: 3
                  },
                  fileVersion: {
                    type: "int64",
                    id: 4
                  }
                }
              }
            }
          },
          InodeProto: {
            fields: {
              size: {
                type: "int32",
                id: 1
              },
              pathSignature: {
                type: "string",
                id: 2
              },
              fileVersion: {
                type: "int32",
                id: 3
              },
              blockId: {
                rule: "repeated",
                type: "string",
                id: 4
              }
            },
            nested: {
              znodeId: {
                type: "InodeProto",
                id: 1026,
                extend: "ZnodeProto"
              }
            }
          },
          ZnodeDataProto: {
            fields: {
              compression: {
                type: "Compression",
                id: 1
              },
              payload: {
                type: "bytes",
                id: 2
              },
              type: {
                type: "Type",
                id: 3,
                options: {
                  "default": "DATA"
                }
              }
            },
            nested: {
              Type: {
                values: {
                  DATA: 1,
                  INODE: 2
                }
              },
              Compression: {
                values: {
                  NONE: 1,
                  SNAPPY: 2
                }
              }
            }
          },
          TestZnodeProto1: {
            fields: {
              data: {
                type: "bytes",
                id: 1
              },
              counter: {
                type: "int32",
                id: 2
              }
            },
            nested: {
              znodeId: {
                type: "TestZnodeProto1",
                id: 1044,
                extend: "ZnodeProto"
              }
            }
          },
          TestZnodeProto2: {
            fields: {
              data: {
                type: "bytes",
                id: 1
              }
            },
            nested: {
              znodeId: {
                type: "TestZnodeProto2",
                id: 1045,
                extend: "ZnodeProto"
              }
            }
          }
        }
      }
    }
  },
  common: {
    options: {
      java_package: "com.thoughtspot.common",
      go_package: "exported_metric_pb",
      java_outer_classname: "StatusOuter"
    },
    nested: {
      unused: {
        type: "string",
        id: 50000,
        extend: "google.protobuf.MessageOptions"
      },
      typeGuid: {
        type: "string",
        id: 50000,
        extend: "google.protobuf.EnumValueOptions"
      },
      mapKey: {
        type: "string",
        id: 50000,
        extend: "google.protobuf.FieldOptions"
      },
      sensitivity: {
        type: "int32",
        id: 50001,
        extend: "google.protobuf.FieldOptions"
      },
      ValueProto: {
        fields: {
          type: {
            type: "Type",
            id: 6,
            options: {
              "default": "TYPE_NULL"
            }
          },
          i64: {
            type: "int64",
            id: 1
          },
          d: {
            type: "double",
            id: 2
          },
          s: {
            type: "string",
            id: 3
          },
          b: {
            type: "bool",
            id: 4
          },
          u64: {
            type: "uint64",
            id: 5
          }
        },
        nested: {
          Type: {
            values: {
              TYPE_NULL: 0,
              TYPE_INT64: 1,
              TYPE_DOUBLE: 2,
              TYPE_STRING: 3,
              TYPE_BOOL: 4,
              TYPE_UINT64: 5
            }
          }
        }
      },
      KeyValue: {
        fields: {
          key: {
            type: "string",
            id: 1
          },
          value: {
            type: "ValueProto",
            id: 3
          },
          description: {
            type: "string",
            id: 4
          },
          deprecatedValue: {
            type: "DeprecatedValue",
            id: 2,
            options: {
              deprecated: true
            }
          }
        },
        nested: {
          DeprecatedValue: {
            fields: {
              i64: {
                type: "int64",
                id: 1
              },
              d: {
                type: "double",
                id: 2
              },
              s: {
                type: "string",
                id: 3
              }
            }
          }
        }
      },
      KeyValueStr: {
        fields: {
          key: {
            type: "string",
            id: 1
          },
          value: {
            type: "string",
            id: 2
          }
        }
      },
      KeyValueList: {
        fields: {
          key: {
            type: "string",
            id: 1
          },
          value: {
            rule: "repeated",
            type: "ValueProto",
            id: 2
          },
          description: {
            type: "string",
            id: 3
          }
        }
      },
      EntityHeader: {
        fields: {
          guid: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          description: {
            type: "string",
            id: 3
          }
        }
      },
      ErrorCode: {
        values: {
          OK: 0,
          ABORTED: 1,
          ALREADY_EXISTS: 2,
          BUSY: 3,
          CANCELLED: 4,
          INTERNAL: 5,
          INVALID_ARGUMENT: 6,
          LOAD_FAILED: 7,
          NOT_FOUND: 8,
          NOT_IMPLEMENTED: 9,
          PERMISSION_DENIED: 10,
          TIMEOUT: 11,
          NOT_READY: 12,
          UNKNOWN: 13,
          RESOURCE_EXCEEDED: 14,
          ALTER_TABLE_FAILED: 15,
          UNREACHABLE: 16,
          INVALID_TABLE_GRAPH: 17,
          CONNECTION_FAILED: 18,
          INVALID_JOIN_PATH: 19,
          INVALID_RESPONSE: 20,
          RPC_FAILED: 21,
          ADMISSION_CONTROL_REJECTED: 22,
          ADMISSION_CONTROL_CANCELLED: 23,
          MATERIALIZATION_WORKER_CONNECTION_FAILURE: 24,
          MATERIALIZATION_CONFIG_ERROR: 25,
          MATERIALIZATION_INTERNAL_ERROR: 26,
          MATERIALIZATION_CHECKPOINT_ERROR: 27,
          FALCON_RESPONSE_ERROR: 28,
          TABLE_NOT_READY: 30000,
          TABLE_OFFLINE: 30001,
          ZOOKEEPER_ERROR: 50000
        }
      },
      StatusProto: {
        fields: {
          code: {
            type: "ErrorCode",
            id: 1
          },
          message: {
            type: "string",
            id: 2
          }
        }
      },
      BlogProto: {
        fields: {
          timestamp: {
            type: "int64",
            id: 1
          },
          oaddr: {
            type: "net.OrionAddress",
            id: 2
          },
          hostname: {
            type: "string",
            id: 3
          },
          threadId: {
            type: "int32",
            id: 4
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ]
      },
      StringBlog: {
        fields: {
          msg: {
            type: "bytes",
            id: 1
          }
        },
        nested: {
          blogId: {
            type: "StringBlog",
            id: 1000,
            extend: "BlogProto"
          }
        }
      },
      RpcBlog: {
        fields: {
          status: {
            type: "StatusProto",
            id: 1
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ],
        nested: {
          blogId: {
            type: "RpcBlog",
            id: 1001,
            extend: "BlogProto"
          }
        }
      },
      FormatingType: {
        fields: {},
        nested: {
          E: {
            values: {
              NO_FORMATING: 0,
              NUMBER_FORMAT_PATTERN: 1,
              DATE_FORMAT_PATTERN: 2,
              TIME_FORMAT_PATTERN: 3,
              DATE_TIME_FORMAT_PATTERN: 4,
              HOUR_DATE_FORMAT_PATTERN: 5,
              HOUR_TIME_FORMAT_PATTERN: 6,
              YEAR_FORMAT_PATTERN: 7,
              QTR_IN_YEAR_FORMAT_PATTERN: 8,
              MONTH_IN_YEAR_FORMAT_PATTERN: 9,
              WEEK_YEAR_FORMAT_PATTERN: 10,
              DAY_IN_YEAR_FORMAT_PATTERN: 11,
              MONTH_IN_QTR_FORMAT_PATTERN: 12,
              DAY_IN_QTR_FORMAT_PATTERN: 13,
              DAY_IN_MONTH_FORMAT_PATTERN: 14,
              DAY_OF_WEEK_FORMAT_PATTERN: 15,
              QTR_YEAR_FORMAT_PATTERN: 16,
              MONTH_YEAR_FORMAT_PATTERN: 17
            }
          }
        }
      },
      MessageCode: {
        fields: {
          severity: {
            type: "Severity",
            id: 1,
            options: {
              "default": "ERROR"
            }
          },
          code: {
            type: "int32",
            id: 2
          },
          summary: {
            type: "string",
            id: 3
          },
          detail: {
            type: "string",
            id: 4
          },
          action: {
            type: "string",
            id: 5
          },
          external: {
            type: "bool",
            id: 6
          }
        },
        nested: {
          Severity: {
            values: {
              INFO: 0,
              WARNING: 1,
              ERROR: 2,
              FATAL: 3
            }
          }
        }
      },
      MessageCodeSet: {
        fields: {
          messageCode: {
            rule: "repeated",
            type: "MessageCode",
            id: 1
          }
        }
      },
      ContextMessageCode: {
        fields: {
          code: {
            type: "int32",
            id: 1
          },
          incidentIdGuid: {
            type: "string",
            id: 2
          },
          traceIdGuid: {
            type: "string",
            id: 3
          },
          debug: {
            type: "string",
            id: 4
          },
          parameter: {
            rule: "repeated",
            type: "string",
            id: 5
          }
        }
      },
      MetricValue: {
        fields: {
          key: {
            type: "string",
            id: 1
          },
          value: {
            type: "ValueProto",
            id: 3
          },
          metadata: {
            type: "MetricMetadata",
            id: 5
          },
          description: {
            type: "string",
            id: 4,
            options: {
              deprecated: true
            }
          },
          fields: {
            rule: "repeated",
            type: "KeyValue",
            id: 6
          },
          tags: {
            rule: "repeated",
            type: "KeyValueStr",
            id: 7
          },
          metricType: {
            type: "MetricType",
            id: 8
          },
          unit: {
            type: "MetricUnit",
            id: 9
          },
          boolValue: {
            type: "bool",
            id: 10
          },
          intValue: {
            type: "int64",
            id: 11
          },
          doubleValue: {
            type: "double",
            id: 12
          },
          stringValue: {
            type: "string",
            id: 13
          },
          distribution: {
            type: "Distribution",
            id: 14
          }
        },
        nested: {
          MetricType: {
            values: {
              COUNTER: 1,
              AVERAGE: 2,
              QUANTILE: 3,
              DISTRIBUTION: 4,
              VALUE: 5
            }
          },
          MetricUnit: {
            values: {
              UNKNOWN: 0,
              SECOND: 1,
              MILLI_SECOND: 2,
              MICRO_SECOND: 3,
              MB: 4
            }
          },
          Distribution: {
            fields: {
              count: {
                type: "int64",
                id: 1
              },
              mean: {
                type: "double",
                id: 2
              },
              sumOfSquaredDeviation: {
                type: "double",
                id: 3
              },
              range: {
                type: "Range",
                id: 4
              },
              bucket: {
                type: "Bucket",
                id: 5
              }
            },
            nested: {
              Range: {
                fields: {
                  min: {
                    type: "double",
                    id: 1
                  },
                  max: {
                    type: "double",
                    id: 2
                  }
                }
              },
              Bucket: {
                fields: {
                  bucketOption: {
                    type: "Option",
                    id: 1
                  },
                  bucketCount: {
                    rule: "repeated",
                    type: "int64",
                    id: 2,
                    options: {
                      packed: false
                    }
                  }
                },
                nested: {
                  Option: {
                    fields: {
                      exponential: {
                        type: "Exponential",
                        id: 1
                      },
                      linear: {
                        type: "Linear",
                        id: 2
                      }
                    },
                    nested: {
                      Linear: {
                        fields: {
                          numFiniteBuckets: {
                            type: "int64",
                            id: 1
                          },
                          offset: {
                            type: "double",
                            id: 2
                          },
                          width: {
                            type: "double",
                            id: 3
                          }
                        }
                      },
                      Exponential: {
                        fields: {
                          numFiniteBuckets: {
                            type: "int64",
                            id: 1
                          },
                          growthFactor: {
                            type: "int64",
                            id: 2,
                            options: {
                              "default": 2
                            }
                          },
                          scale: {
                            type: "int64",
                            id: 3
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      MetricMetadata: {
        fields: {
          description: {
            type: "string",
            id: 1
          },
          enableStats: {
            type: "bool",
            id: 2,
            options: {
              "default": true
            }
          }
        }
      },
      Metric: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          description: {
            type: "string",
            id: 3
          },
          metricKind: {
            type: "Kind",
            id: 4
          },
          metricUnit: {
            type: "Unit",
            id: 5,
            options: {
              "default": "UNKNOWN"
            }
          },
          valueType: {
            type: "ValueType",
            id: 6
          },
          value: {
            type: "MetricValue",
            id: 7
          }
        },
        nested: {
          Kind: {
            values: {
              GAUGE: 0,
              DELTA: 1,
              CUMULATIVE: 2,
              UNKNOWN_KIND: 3
            }
          },
          Unit: {
            values: {
              UNKNOWN: 0,
              NANO_SECONDS: 1,
              MICRO_SECONDS: 2,
              MILLI_SECONDS: 3,
              SECONDS: 4,
              MINUTES: 5,
              HOURS: 6,
              BYTES: 7,
              KILO_BYTES: 8,
              MEGA_BYTES: 9,
              GIGA_BYTES: 10
            }
          },
          ValueType: {
            values: {
              BOOL_VALUE: 0,
              INTEGER_VALUE: 1,
              DOUBLE_VALUE: 2,
              STRING_VALUE: 3,
              DISTRIBUTION_VALUE: 4
            }
          }
        }
      },
      MetricGroup: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          tags: {
            rule: "repeated",
            type: "KeyValueStr",
            id: 2
          },
          metric: {
            rule: "repeated",
            type: "Metric",
            id: 3
          }
        }
      },
      ExportedMetricProto: {
        fields: {
          timestamp: {
            type: "int64",
            id: 1
          },
          endpoint: {
            type: "Endpoint",
            id: 2
          },
          gflags: {
            rule: "repeated",
            type: "KeyValue",
            id: 3
          },
          javaSystemProperties: {
            rule: "repeated",
            type: "KeyValueStr",
            id: 4
          },
          metric: {
            rule: "repeated",
            type: "MetricValue",
            id: 5
          },
          tags: {
            rule: "repeated",
            type: "KeyValueStr",
            id: 6
          },
          metricGroup: {
            rule: "repeated",
            type: "MetricGroup",
            id: 7
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ],
        nested: {
          Endpoint: {
            fields: {
              attribute: {
                rule: "repeated",
                type: "KeyValue",
                id: 1
              }
            }
          }
        }
      }
    }
  },
  google: {
    nested: {
      protobuf: {
        nested: {
          FileDescriptorSet: {
            fields: {
              file: {
                rule: "repeated",
                type: "FileDescriptorProto",
                id: 1
              }
            }
          },
          FileDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              "package": {
                type: "string",
                id: 2
              },
              dependency: {
                rule: "repeated",
                type: "string",
                id: 3
              },
              publicDependency: {
                rule: "repeated",
                type: "int32",
                id: 10,
                options: {
                  packed: false
                }
              },
              weakDependency: {
                rule: "repeated",
                type: "int32",
                id: 11,
                options: {
                  packed: false
                }
              },
              messageType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 4
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 5
              },
              service: {
                rule: "repeated",
                type: "ServiceDescriptorProto",
                id: 6
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 7
              },
              options: {
                type: "FileOptions",
                id: 8
              },
              sourceCodeInfo: {
                type: "SourceCodeInfo",
                id: 9
              },
              syntax: {
                type: "string",
                id: 12
              }
            }
          },
          DescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              field: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 2
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 6
              },
              nestedType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 3
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 4
              },
              extensionRange: {
                rule: "repeated",
                type: "ExtensionRange",
                id: 5
              },
              oneofDecl: {
                rule: "repeated",
                type: "OneofDescriptorProto",
                id: 8
              },
              options: {
                type: "MessageOptions",
                id: 7
              },
              reservedRange: {
                rule: "repeated",
                type: "ReservedRange",
                id: 9
              },
              reservedName: {
                rule: "repeated",
                type: "string",
                id: 10
              }
            },
            nested: {
              ExtensionRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              },
              ReservedRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              }
            }
          },
          FieldDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 3
              },
              label: {
                type: "Label",
                id: 4
              },
              type: {
                type: "Type",
                id: 5
              },
              typeName: {
                type: "string",
                id: 6
              },
              extendee: {
                type: "string",
                id: 2
              },
              defaultValue: {
                type: "string",
                id: 7
              },
              oneofIndex: {
                type: "int32",
                id: 9
              },
              jsonName: {
                type: "string",
                id: 10
              },
              options: {
                type: "FieldOptions",
                id: 8
              }
            },
            nested: {
              Type: {
                values: {
                  TYPE_DOUBLE: 1,
                  TYPE_FLOAT: 2,
                  TYPE_INT64: 3,
                  TYPE_UINT64: 4,
                  TYPE_INT32: 5,
                  TYPE_FIXED64: 6,
                  TYPE_FIXED32: 7,
                  TYPE_BOOL: 8,
                  TYPE_STRING: 9,
                  TYPE_GROUP: 10,
                  TYPE_MESSAGE: 11,
                  TYPE_BYTES: 12,
                  TYPE_UINT32: 13,
                  TYPE_ENUM: 14,
                  TYPE_SFIXED32: 15,
                  TYPE_SFIXED64: 16,
                  TYPE_SINT32: 17,
                  TYPE_SINT64: 18
                }
              },
              Label: {
                values: {
                  LABEL_OPTIONAL: 1,
                  LABEL_REQUIRED: 2,
                  LABEL_REPEATED: 3
                }
              }
            }
          },
          OneofDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              options: {
                type: "OneofOptions",
                id: 2
              }
            }
          },
          EnumDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                rule: "repeated",
                type: "EnumValueDescriptorProto",
                id: 2
              },
              options: {
                type: "EnumOptions",
                id: 3
              }
            }
          },
          EnumValueDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 2
              },
              options: {
                type: "EnumValueOptions",
                id: 3
              }
            }
          },
          ServiceDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              method: {
                rule: "repeated",
                type: "MethodDescriptorProto",
                id: 2
              },
              options: {
                type: "ServiceOptions",
                id: 3
              }
            }
          },
          MethodDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              inputType: {
                type: "string",
                id: 2
              },
              outputType: {
                type: "string",
                id: 3
              },
              options: {
                type: "MethodOptions",
                id: 4
              },
              clientStreaming: {
                type: "bool",
                id: 5
              },
              serverStreaming: {
                type: "bool",
                id: 6
              }
            }
          },
          FileOptions: {
            fields: {
              javaPackage: {
                type: "string",
                id: 1
              },
              javaOuterClassname: {
                type: "string",
                id: 8
              },
              javaMultipleFiles: {
                type: "bool",
                id: 10
              },
              javaGenerateEqualsAndHash: {
                type: "bool",
                id: 20,
                options: {
                  deprecated: true
                }
              },
              javaStringCheckUtf8: {
                type: "bool",
                id: 27
              },
              optimizeFor: {
                type: "OptimizeMode",
                id: 9,
                options: {
                  "default": "SPEED"
                }
              },
              goPackage: {
                type: "string",
                id: 11
              },
              ccGenericServices: {
                type: "bool",
                id: 16
              },
              javaGenericServices: {
                type: "bool",
                id: 17
              },
              pyGenericServices: {
                type: "bool",
                id: 18
              },
              deprecated: {
                type: "bool",
                id: 23
              },
              ccEnableArenas: {
                type: "bool",
                id: 31
              },
              objcClassPrefix: {
                type: "string",
                id: 36
              },
              csharpNamespace: {
                type: "string",
                id: 37
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                38,
                38
              ]
            ],
            nested: {
              OptimizeMode: {
                values: {
                  SPEED: 1,
                  CODE_SIZE: 2,
                  LITE_RUNTIME: 3
                }
              }
            }
          },
          MessageOptions: {
            fields: {
              messageSetWireFormat: {
                type: "bool",
                id: 1
              },
              noStandardDescriptorAccessor: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              mapEntry: {
                type: "bool",
                id: 7
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                8,
                8
              ]
            ]
          },
          FieldOptions: {
            fields: {
              ctype: {
                type: "CType",
                id: 1,
                options: {
                  "default": "STRING"
                }
              },
              packed: {
                type: "bool",
                id: 2
              },
              jstype: {
                type: "JSType",
                id: 6,
                options: {
                  "default": "JS_NORMAL"
                }
              },
              lazy: {
                type: "bool",
                id: 5
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              weak: {
                type: "bool",
                id: 10
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                4,
                4
              ]
            ],
            nested: {
              CType: {
                values: {
                  STRING: 0,
                  CORD: 1,
                  STRING_PIECE: 2
                }
              },
              JSType: {
                values: {
                  JS_NORMAL: 0,
                  JS_STRING: 1,
                  JS_NUMBER: 2
                }
              }
            }
          },
          OneofOptions: {
            fields: {
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          EnumOptions: {
            fields: {
              allowAlias: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          EnumValueOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 1
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          ServiceOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 33
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          MethodOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 33
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          UninterpretedOption: {
            fields: {
              name: {
                rule: "repeated",
                type: "NamePart",
                id: 2
              },
              identifierValue: {
                type: "string",
                id: 3
              },
              positiveIntValue: {
                type: "uint64",
                id: 4
              },
              negativeIntValue: {
                type: "int64",
                id: 5
              },
              doubleValue: {
                type: "double",
                id: 6
              },
              stringValue: {
                type: "bytes",
                id: 7
              },
              aggregateValue: {
                type: "string",
                id: 8
              }
            },
            nested: {
              NamePart: {
                fields: {
                  namePart: {
                    rule: "required",
                    type: "string",
                    id: 1
                  },
                  isExtension: {
                    rule: "required",
                    type: "bool",
                    id: 2
                  }
                }
              }
            }
          },
          SourceCodeInfo: {
            fields: {
              location: {
                rule: "repeated",
                type: "Location",
                id: 1
              }
            },
            nested: {
              Location: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1
                  },
                  span: {
                    rule: "repeated",
                    type: "int32",
                    id: 2
                  },
                  leadingComments: {
                    type: "string",
                    id: 3
                  },
                  trailingComments: {
                    type: "string",
                    id: 4
                  },
                  leadingDetachedComments: {
                    rule: "repeated",
                    type: "string",
                    id: 6
                  }
                }
              }
            }
          },
          GeneratedCodeInfo: {
            fields: {
              annotation: {
                rule: "repeated",
                type: "Annotation",
                id: 1
              }
            },
            nested: {
              Annotation: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1
                  },
                  sourceFile: {
                    type: "string",
                    id: 2
                  },
                  begin: {
                    type: "int32",
                    id: 3
                  },
                  end: {
                    type: "int32",
                    id: 4
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  sage: {
    options: {
      java_package: "com.thoughtspot.sage",
      java_outer_classname: "SageA3Analysis"
    },
    nested: {
      auto_complete: {
        nested: {
          v2: {
            options: {
              java_package: "com.thoughtspot.sage.AutoComplete",
              java_outer_classname: "SageCoreApiProto"
            },
            nested: {
              Request: {
                fields: {
                  type: {
                    type: "Type",
                    id: 21
                  },
                  validateContext: {
                    type: "ValidateContextRequest",
                    id: 1
                  },
                  cleanupContext: {
                    type: "CleanupContextRequest",
                    id: 2
                  },
                  refreshGuids: {
                    type: "RefreshGuidsRequest",
                    id: 3
                  },
                  getDataScope: {
                    type: "GetDataScopeRequest",
                    id: 4
                  },
                  ping: {
                    type: "PingRequest",
                    id: 5
                  },
                  addTable: {
                    type: "AddTableRequest",
                    id: 6
                  },
                  editTable: {
                    type: "EditTableRequest",
                    id: 7
                  },
                  deleteTable: {
                    type: "DeleteTableRequest",
                    id: 8
                  },
                  transformTable: {
                    type: "TransformTableRequest",
                    id: 9
                  },
                  saveFormula: {
                    type: "SaveFormulaRequest",
                    id: 10
                  },
                  removeTable: {
                    type: "RemoveFormulaRequest",
                    id: 11
                  },
                  addTableFilter: {
                    type: "AddTableFilterRequest",
                    id: 12
                  },
                  updateTableFilter: {
                    type: "UpdateTableFilterRequest",
                    id: 13
                  },
                  updateWorksheet: {
                    type: "UpdateWorksheetRequest",
                    id: 14
                  },
                  transformWorksheet: {
                    type: "TransformWorksheetRequest",
                    id: 15
                  },
                  updateFormula: {
                    type: "UpdateFormulaRequest",
                    id: 16
                  },
                  removeFormula: {
                    type: "RemoveFormulaRequest",
                    id: 17
                  },
                  addJoin: {
                    type: "AddJoinRequest",
                    id: 18
                  },
                  editJoin: {
                    type: "EditJoinRequest",
                    id: 19
                  },
                  deleteJoin: {
                    type: "DeleteJoinRequest",
                    id: 20
                  },
                  getAccessibleTables: {
                    type: "GetAccessibleTablesRequest",
                    id: 22
                  },
                  getJoinColumns: {
                    type: "GetJoinColumnsRequest",
                    id: 23
                  },
                  getJoinTables: {
                    type: "GetJoinTablesRequest",
                    id: 24
                  },
                  upgradeContext: {
                    type: "UpgradeContextRequest",
                    id: 25
                  },
                  getMetadataStatus: {
                    type: "GetMetadataStatusRequest",
                    id: 26
                  },
                  processNlRequest: {
                    type: "ProcessNLRequest",
                    id: 27
                  },
                  completeNlRequest: {
                    type: "CompleteNLRequest",
                    id: 28
                  },
                  relevantColumnsRequest: {
                    type: "RelevantColumnsRequest",
                    id: 29
                  },
                  nlConversationRequest: {
                    type: "NLConversationRequest",
                    id: 30
                  },
                  followUpSuggestionRequest: {
                    type: "FollowUpSuggestionRequest",
                    id: 31
                  },
                  getWorksheetFromEdocRequest: {
                    type: "GetWorksheetFromEdocRequest",
                    id: 32
                  }
                },
                nested: {
                  Type: {
                    values: {
                      ADD_TABLE: 1,
                      EDIT_TABLE: 2,
                      DELETE_TABLE: 3,
                      TRANSFORM_TABLE: 4,
                      UPDATE_WORKSHEET: 5,
                      TRANSFORM_WORKSHEET: 6,
                      UPDATE_FORMULA: 7,
                      SAVE_FORMULA: 8,
                      REMOVE_FORMULA: 9,
                      ADD_JOIN: 10,
                      EDIT_JOIN: 11,
                      DELETE_JOIN: 12,
                      ADD_TABLE_FILTER: 13,
                      UPDATE_TABLE_FILTER: 14,
                      VALIDATE_CONTEXT: 15,
                      CLEANUP_CONTEXT: 16,
                      REFRESH_GUIDS: 17,
                      GET_DATA_SCOPE: 18,
                      COMPLETE: 19,
                      PING: 20,
                      GET_ACCESSIBLE_TABLES: 21,
                      GET_JOIN_COLUMNS: 22,
                      GET_JOIN_TABLES: 23,
                      UPGRADE_CONTEXT: 24,
                      GET_METADATA_STATUS: 25,
                      PROCESS_NL: 26,
                      COMPLETE_NL: 27,
                      GET_RELEVANT_COLUMNS: 28,
                      NL_CONVERSATION: 29,
                      FOLLOW_UP_SUGGESTION: 30,
                      GET_WORKSHEET_FROM_EDOC: 31,
                      NUM_TYPES: 32
                    }
                  }
                }
              },
              Response: {
                fields: {
                  validateContext: {
                    type: "ValidateContextResponse",
                    id: 1
                  },
                  cleanupContext: {
                    type: "CleanupContextResponse",
                    id: 2
                  },
                  refreshGuids: {
                    type: "RefreshGuidsResponse",
                    id: 3
                  },
                  getDataScope: {
                    type: "GetDataScopeResponse",
                    id: 4
                  },
                  ping: {
                    type: "PingResponse",
                    id: 5
                  },
                  answer: {
                    type: "AnswerResponse",
                    id: 6
                  },
                  tableFilter: {
                    type: "TableFilterResponse",
                    id: 7
                  },
                  worksheet: {
                    type: "WorksheetResponse",
                    id: 8
                  },
                  formula: {
                    type: "FormulaResponse",
                    id: 9
                  },
                  join: {
                    type: "JoinResponse",
                    id: 10
                  },
                  getAccessibleTables: {
                    type: "GetAccessibleTablesResponse",
                    id: 11
                  },
                  getJoinColumns: {
                    type: "GetJoinColumnsResponse",
                    id: 12
                  },
                  getJoinTables: {
                    type: "GetJoinTablesResponse",
                    id: 13
                  },
                  upgradeContext: {
                    type: "UpgradeContextResponse",
                    id: 14
                  },
                  getMetadataStatus: {
                    type: "GetMetadataStatusResponse",
                    id: 15
                  },
                  processNlResponse: {
                    type: "ProcessNLResponse",
                    id: 16
                  },
                  completeNlResponse: {
                    type: "CompleteNLResponse",
                    id: 17
                  },
                  relevantColumnsResponse: {
                    type: "RelevantColumnsResponse",
                    id: 18
                  },
                  nlConversationResponse: {
                    type: "NLConversationResponse",
                    id: 19
                  },
                  followUpSuggestionResponse: {
                    type: "FollowUpSuggestionResponse",
                    id: 20
                  },
                  getWorksheetFromEdocResponse: {
                    type: "GetWorksheetFromEdocResponse",
                    id: 21
                  }
                }
              },
              BatchRequest: {
                fields: {
                  request: {
                    rule: "repeated",
                    type: "Request",
                    id: 1
                  }
                },
                nested: {
                  rpcId: {
                    type: "BatchRequest",
                    id: 1161,
                    extend: "common.RpcBlog"
                  }
                }
              },
              BatchResponse: {
                fields: {
                  response: {
                    rule: "repeated",
                    type: "Response",
                    id: 1
                  }
                }
              },
              TokenMetadata: {
                fields: {
                  name: {
                    type: "string",
                    id: 2
                  },
                  table: {
                    type: "EntityHeader",
                    id: 4
                  },
                  rootTables: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 5
                  },
                  deprecatedTableName: {
                    type: "string",
                    id: 1
                  },
                  deprecatedTableGuid: {
                    type: "string",
                    id: 3
                  }
                }
              },
              ClientState: {
                fields: {
                  originalToken: {
                    type: "string",
                    id: 2
                  },
                  truncated: {
                    type: "bool",
                    id: 3
                  },
                  deprecatedSerializedFormulaTokens: {
                    type: "string",
                    id: 4
                  },
                  deprecatedTokenColor: {
                    type: "string",
                    id: 1
                  }
                }
              },
              RecognizedToken: {
                fields: {
                  token: {
                    type: "string",
                    id: 1
                  },
                  canonicalForm: {
                    type: "string",
                    id: 29
                  },
                  typeEnum: {
                    type: "TokenType.E",
                    id: 2
                  },
                  dataType: {
                    type: "falcon.DataType.E",
                    id: 3
                  },
                  matchType: {
                    type: "MatchType.E",
                    id: 4
                  },
                  guid: {
                    type: "string",
                    id: 5
                  },
                  dateFilter: {
                    type: "DateFilterProto",
                    id: 27
                  },
                  outputGuid: {
                    type: "string",
                    id: 6
                  },
                  joinPath: {
                    rule: "repeated",
                    type: "JoinPathProto",
                    id: 7
                  },
                  canEditJoinPath: {
                    type: "bool",
                    id: 8
                  },
                  explicitJoinPathEdit: {
                    type: "bool",
                    id: 9,
                    options: {
                      "default": false
                    }
                  },
                  tokenMetadata: {
                    type: "TokenMetadata",
                    id: 10
                  },
                  valueMatch: {
                    type: "bool",
                    id: 11
                  },
                  rankingScore: {
                    type: "double",
                    id: 12
                  },
                  twiddlerRank: {
                    type: "int32",
                    id: 34,
                    options: {
                      "default": 0
                    }
                  },
                  requiresDelimiters: {
                    type: "bool",
                    id: 13
                  },
                  placeholderText: {
                    type: "string",
                    id: 14
                  },
                  autoInsertedSpace: {
                    type: "bool",
                    id: 15,
                    options: {
                      "default": false
                    }
                  },
                  hasSpaceAfter: {
                    type: "bool",
                    id: 16,
                    options: {
                      "default": true
                    }
                  },
                  canBeExtended: {
                    type: "bool",
                    id: 17,
                    options: {
                      "default": false
                    }
                  },
                  reResolve: {
                    type: "bool",
                    id: 28,
                    options: {
                      "default": false
                    }
                  },
                  isAutoDisambiguated: {
                    type: "bool",
                    id: 19,
                    options: {
                      "default": false
                    }
                  },
                  formulaId: {
                    type: "string",
                    id: 20
                  },
                  worksheetColumnGuid: {
                    type: "string",
                    id: 22
                  },
                  clientState: {
                    type: "ClientState",
                    id: 23
                  },
                  bulkFilterValue: {
                    rule: "repeated",
                    type: "string",
                    id: 24
                  },
                  sageExpression: {
                    type: "SageExpression",
                    id: 26
                  },
                  entityCategory: {
                    type: "EntityCategory.E",
                    id: 30,
                    options: {
                      "default": "DEFAULT"
                    }
                  },
                  isSkipped: {
                    type: "bool",
                    id: 33,
                    options: {
                      "default": false
                    }
                  },
                  autoGeneratedSynonym: {
                    type: "bool",
                    id: 18
                  },
                  inconsistentJoinPaths: {
                    type: "bool",
                    id: 25,
                    options: {
                      "default": false
                    }
                  },
                  idxInPrevQuery: {
                    type: "int32",
                    id: 32,
                    options: {
                      "default": -1
                    }
                  },
                  deprecatedSageExpression: {
                    type: "bytes",
                    id: 21
                  },
                  deprecatedTokenIdx: {
                    type: "int32",
                    id: 31
                  }
                }
              },
              ColumnMetadata: {
                fields: {
                  guid: {
                    type: "string",
                    id: 1
                  },
                  estimatedUniqueCount: {
                    type: "int32",
                    id: 2
                  },
                  isIndexed: {
                    type: "bool",
                    id: 3
                  }
                }
              },
              WordRange: {
                fields: {
                  startIdx: {
                    type: "int32",
                    id: 1,
                    options: {
                      "default": -1
                    }
                  },
                  numWords: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": -1
                    }
                  },
                  completeQuery: {
                    type: "bool",
                    id: 3,
                    options: {
                      "default": false
                    }
                  }
                }
              },
              AutoBucketCache: {
                fields: {
                  cacheEntries: {
                    rule: "repeated",
                    type: "AutoBucketCacheEntry",
                    id: 1
                  }
                },
                nested: {
                  AutoBucketCacheEntry: {
                    fields: {
                      outputGuid: {
                        type: "string",
                        id: 1
                      },
                      bucket: {
                        type: "TimeBucket.E",
                        id: 2
                      }
                    }
                  }
                }
              },
              AutoBucketPolicy: {
                fields: {
                  useData: {
                    type: "bool",
                    id: 1,
                    options: {
                      "default": true
                    }
                  },
                  autoBucketCache: {
                    type: "AutoBucketCache",
                    id: 2
                  }
                }
              },
              ACVersion: {
                fields: {},
                nested: {
                  E: {
                    options: {
                      allow_alias: true
                    },
                    values: {
                      PRE_4_3: 1,
                      V_4_3: 2,
                      V_4_4_1: 3,
                      V_4_4_1_3: 4,
                      V_4_5: 5,
                      V_4_5_1: 6,
                      V_5: 7,
                      V_5_2: 8,
                      MAX_VERSION: 8
                    }
                  }
                }
              },
              OutputColumn: {
                fields: {
                  columnGuid: {
                    type: "string",
                    id: 1
                  },
                  aggregationType: {
                    type: "AggregationType.E",
                    id: 2,
                    options: {
                      "default": "NONE"
                    }
                  },
                  bucket: {
                    type: "TimeBucket.E",
                    id: 3,
                    options: {
                      "default": "NO_BUCKET"
                    }
                  },
                  joinPaths: {
                    rule: "repeated",
                    type: "JoinPathProto",
                    id: 4
                  },
                  showGrowth: {
                    type: "bool",
                    id: 5,
                    options: {
                      "default": false
                    }
                  },
                  calendarGuid: {
                    type: "string",
                    id: 6
                  }
                }
              },
              OutputGuidCacheProto: {
                fields: {
                  cacheEntries: {
                    rule: "repeated",
                    type: "OutputGuidCacheEntry",
                    id: 1
                  }
                },
                nested: {
                  OutputGuidCacheEntry: {
                    fields: {
                      outputGuid: {
                        type: "string",
                        id: 1
                      },
                      column: {
                        type: "OutputColumn",
                        id: 2
                      }
                    }
                  }
                }
              },
              LanguageType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      ANSWER: 0,
                      WORKSHEET: 1,
                      FORMULA: 2,
                      RLS_FORMULA: 3,
                      FORMULA_TRANSLATION: 4,
                      CONSTRAINED_SEARCH: 5,
                      NUM_LANGUAGE_TYPES: 6
                    }
                  }
                }
              },
              FeatureFlag: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      ENABLE_OUT_OF_SCOPE_MATCHES: 0,
                      ENABLE_REQUEST_PROFILING: 1,
                      DISABLE_UBR: 2,
                      SINGLE_TOKEN_COMPLETIONS_ONLY: 3,
                      DISABLE_APPROXIMATE_MATCHES: 4,
                      DISABLE_OBJECT_SEARCH: 5,
                      WRITE_REQUEST_SNAPSHOT: 6,
                      AUTO_RESOLVE_JOIN_AMBIGUITY: 8,
                      ENABLE_NLP_TOKENIZER: 9,
                      DISABLE_TOKENIZATION: 10,
                      DISABLE_DATA_BASED_AUTO_BUCKETING: 11,
                      DISABLE_UBR_FEEDBACK_LOOKUP: 12,
                      DISABLE_SEARCH_HISTORY_LOOKUP: 13,
                      LOOKUP_ONLY_COLUMNS: 14,
                      NUM_FEATURE_FLAGS: 15,
                      DISABLE_FOLLOW_UP_SUGGESTIONS: 16,
                      LOOKUP_ENLITE_PREFERRED_COLUMNS: 17,
                      SHOW_DEBUG_INFO: 18,
                      ENABLE_SEARCH_HISTORY: 7
                    }
                  }
                }
              },
              RequestStage: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      QUEUE: 0,
                      QUERY_TRANSFORMATION: 1,
                      TOKENIZATION: 2,
                      QUERY_GEN: 3,
                      COMPLETION: 4,
                      QUERY_COMPLETION: 5,
                      HINT_GEN: 6
                    }
                  }
                }
              },
              ValueList: {
                fields: {
                  value: {
                    rule: "repeated",
                    type: "falcon.ConstantValue",
                    id: 1
                  }
                }
              },
              PivotColumn: {
                fields: {
                  values: {
                    type: "ValueList",
                    id: 1
                  },
                  outputGuid: {
                    type: "string",
                    id: 2
                  },
                  formulaGuid: {
                    type: "string",
                    id: 3
                  }
                }
              },
              PivotGroup: {
                fields: {
                  measureOutputGuid: {
                    type: "string",
                    id: 1
                  },
                  aggregation: {
                    type: "AggregationType.E",
                    id: 2
                  },
                  columns: {
                    rule: "repeated",
                    type: "PivotColumn",
                    id: 3
                  }
                }
              },
              PivotContext: {
                fields: {
                  attributeOutputGuids: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  },
                  pivotGroups: {
                    rule: "repeated",
                    type: "PivotGroup",
                    id: 2
                  }
                }
              },
              ACJoin: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  error: {
                    type: "ACJoinError",
                    id: 2
                  },
                  left: {
                    type: "EntityHeader",
                    id: 3
                  },
                  right: {
                    type: "EntityHeader",
                    id: 4
                  },
                  leftColumn: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 5
                  },
                  rightColumn: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 6
                  },
                  version: {
                    type: "ACVersion.E",
                    id: 7,
                    options: {
                      "default": "PRE_4_3"
                    }
                  }
                }
              },
              PhraseDefinition: {
                fields: {
                  phraseType: {
                    type: "PhraseType.E",
                    id: 1
                  },
                  startIndex: {
                    type: "int32",
                    id: 2
                  },
                  numTokens: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": -1
                    }
                  },
                  isCompletePhrase: {
                    type: "bool",
                    id: 4,
                    options: {
                      "default": true
                    }
                  }
                }
              },
              FormattedTokens: {
                fields: {
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  },
                  phrase: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 2
                  }
                }
              },
              JoinPathChoice: {
                fields: {
                  newRoot: {
                    type: "string",
                    id: 1
                  },
                  oldRoot: {
                    type: "string",
                    id: 2
                  },
                  prependPath: {
                    type: "JoinPathProto",
                    id: 3
                  },
                  affectedToken: {
                    rule: "repeated",
                    type: "int32",
                    id: 4,
                    options: {
                      packed: false
                    }
                  },
                  newTokenPath: {
                    type: "JoinPathProto",
                    id: 5
                  },
                  preferredChoice: {
                    type: "bool",
                    id: 6
                  },
                  newTokenEditable: {
                    type: "bool",
                    id: 7
                  },
                  oldTokensEditable: {
                    type: "bool",
                    id: 8
                  }
                }
              },
              JoinPathCollection: {
                fields: {
                  choice: {
                    rule: "repeated",
                    type: "JoinPathChoice",
                    id: 1
                  },
                  oldColumnGuid: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  },
                  newTokenIndices: {
                    rule: "repeated",
                    type: "int32",
                    id: 5,
                    options: {
                      packed: false
                    }
                  },
                  newTokenIndex: {
                    type: "int32",
                    id: 3
                  },
                  rootIndex: {
                    type: "int32",
                    id: 4
                  }
                }
              },
              ACChosenJoinPath: {
                fields: {
                  joinPath: {
                    rule: "repeated",
                    type: "JoinPathProto",
                    id: 1
                  },
                  chosenIdx: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": -1
                    }
                  },
                  startIdx: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": -1
                    }
                  }
                }
              },
              ACChosenColumn: {
                fields: {
                  column: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  },
                  chosenIdx: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": -1
                    }
                  },
                  startIdx: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": -1
                    }
                  }
                }
              },
              ACTokenDisambiguation: {
                fields: {
                  chosenColumn: {
                    type: "ACChosenColumn",
                    id: 1
                  },
                  chosenJoinPath: {
                    type: "ACChosenJoinPath",
                    id: 2
                  },
                  version: {
                    type: "ACVersion.E",
                    id: 3,
                    options: {
                      "default": "PRE_4_3"
                    }
                  }
                }
              },
              ACTable: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  error: {
                    type: "ErrorCollection",
                    id: 9
                  },
                  formatted: {
                    type: "FormattedTokens",
                    id: 3
                  },
                  column: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 5
                  },
                  hashKey: {
                    type: "string",
                    id: 6
                  },
                  query: {
                    type: "SageProgram",
                    id: 7
                  },
                  expression: {
                    type: "SageExpression",
                    id: 8
                  },
                  unmappedColumn: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 10
                  },
                  version: {
                    type: "ACVersion.E",
                    id: 11,
                    options: {
                      "default": "PRE_4_3"
                    }
                  },
                  isSkipToken: {
                    type: "bool",
                    id: 12
                  },
                  nlToken: {
                    rule: "repeated",
                    type: "NLToken",
                    id: 13
                  },
                  wordRange: {
                    rule: "repeated",
                    type: "WordRange",
                    id: 14
                  },
                  locale: {
                    type: "string",
                    id: 15
                  },
                  deprecatedQuery: {
                    type: "bytes",
                    id: 4
                  },
                  deprecatedError: {
                    type: "ACTableError",
                    id: 2
                  }
                }
              },
              TokenEditOp: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      INSERT: 0,
                      DELETE: 1,
                      REPLACE: 2
                    }
                  }
                }
              },
              TokenEdit: {
                fields: {
                  op: {
                    type: "TokenEditOp.E",
                    id: 1
                  },
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 2
                  },
                  startOffset: {
                    type: "int32",
                    id: 3
                  },
                  endOffset: {
                    type: "int32",
                    id: 4
                  }
                }
              },
              IncrementalRequest: {
                fields: {
                  prevResponseIncidentId: {
                    type: "string",
                    id: 1
                  },
                  edit: {
                    rule: "repeated",
                    type: "TokenEdit",
                    id: 2
                  }
                }
              },
              ACColumn: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  table: {
                    type: "EntityHeader",
                    id: 2
                  }
                }
              },
              ACFormula: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  error: {
                    type: "ACFormulaError",
                    id: 2
                  },
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 4
                  },
                  dataType: {
                    type: "falcon.DataType.E",
                    id: 5,
                    options: {
                      "default": "UNKNOWN"
                    }
                  },
                  aggregationType: {
                    type: "AggregationType.E",
                    id: 6,
                    options: {
                      "default": "NONE"
                    }
                  },
                  columnType: {
                    type: "ColumnType.E",
                    id: 7,
                    options: {
                      "default": "UNKNOWN"
                    }
                  },
                  defaultCalendar: {
                    type: "EntityHeader",
                    id: 11
                  },
                  isAutoGenerated: {
                    type: "bool",
                    id: 8,
                    options: {
                      "default": false
                    }
                  },
                  expression: {
                    type: "SageExpression",
                    id: 9
                  },
                  version: {
                    type: "ACVersion.E",
                    id: 10,
                    options: {
                      "default": "PRE_4_3"
                    }
                  },
                  deprecatedExpression: {
                    type: "bytes",
                    id: 3
                  }
                }
              },
              NLQRewriteSuggestionType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      UNKNOWN: 0,
                      DATE: 1,
                      ENTROPY: 2,
                      SUPERLATIVE: 3,
                      UNMATCHED_ENTITY: 4,
                      REFINEMENT: 5,
                      UNDEFINED: 6,
                      IGNORE: 7,
                      FORBIDDEN: 8,
                      KEYWORD: 9,
                      SEARCH_TOGGLE: 10,
                      NUM_TYPES: 11
                    }
                  }
                }
              },
              NLQRewriteSourceType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      UNKNOWN: 0,
                      CONTEXT_CHOICE: 1,
                      CONTEXT_CACHE: 2,
                      UBR_FEEDBACK: 3,
                      INFERRED_REWRITE: 4,
                      SUPERLATIVE_REWRITE: 5,
                      QUERY_REWRITE: 6,
                      SEARCH_TOGGLE: 7,
                      NUM_SOURCES: 8
                    }
                  }
                }
              },
              NLQRewrite: {
                fields: {
                  disambiguationContext: {
                    type: "NLQRewriteContext",
                    id: 1
                  },
                  rewrittenToken: {
                    rule: "repeated",
                    type: "v2.RecognizedToken",
                    id: 2
                  },
                  phrase: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 6
                  },
                  suggestionType: {
                    type: "NLQRewriteSuggestionType.E",
                    id: 3,
                    options: {
                      "default": "UNKNOWN"
                    }
                  },
                  score: {
                    type: "double",
                    id: 4
                  },
                  sourceType: {
                    type: "NLQRewriteSourceType.E",
                    id: 5
                  },
                  version: {
                    type: "ACVersion.E",
                    id: 7,
                    options: {
                      "default": "V_5"
                    }
                  }
                }
              },
              NLQueryContextToken: {
                fields: {
                  type: {
                    type: "ContextRelationType",
                    id: 1
                  },
                  posTag: {
                    type: "nlp.POSTag.E",
                    id: 2
                  },
                  relation: {
                    type: "string",
                    id: 3
                  },
                  wordRange: {
                    type: "WordRange",
                    id: 4
                  },
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 5
                  }
                },
                nested: {
                  ContextRelationType: {
                    values: {
                      UNKNOWN: 0,
                      NEIGHBOURHOOD_WORD: 1,
                      PARENT: 2,
                      CHILD: 3
                    }
                  }
                }
              },
              NLQRewriteContext: {
                fields: {
                  query: {
                    type: "string",
                    id: 1
                  },
                  wordRange: {
                    type: "WordRange",
                    id: 2
                  },
                  tokens: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 3
                  },
                  queryCtxToken: {
                    rule: "repeated",
                    type: "NLQueryContextToken",
                    id: 4
                  },
                  posTag: {
                    type: "nlp.POSTag.E",
                    id: 7
                  },
                  relation: {
                    type: "string",
                    id: 8
                  }
                }
              },
              ForbiddenWordInfo: {
                fields: {
                  forbiddenType: {
                    type: "ForbiddenType",
                    id: 1
                  },
                  forbiddenMessage: {
                    type: "string",
                    id: 2
                  }
                },
                nested: {
                  ForbiddenType: {
                    values: {
                      FORBIDDEN_BY_LANG: 1,
                      FORBIDDEN_BY_DATA: 2
                    }
                  }
                }
              },
              NLQRewriteSuggestion: {
                fields: {
                  disambiguationContext: {
                    type: "NLQRewriteContext",
                    id: 1
                  },
                  suggestion: {
                    rule: "repeated",
                    type: "v2.RecognizedToken",
                    id: 2
                  },
                  suggestionType: {
                    type: "NLQRewriteSuggestionType.E",
                    id: 3,
                    options: {
                      "default": "UNKNOWN"
                    }
                  },
                  forbiddenWordInfo: {
                    type: "ForbiddenWordInfo",
                    id: 4
                  },
                  phrase: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 5
                  }
                }
              },
              TokenList: {
                fields: {
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  }
                }
              },
              NLTokenMappingInfo: {
                fields: {
                  wordRange: {
                    type: "WordRange",
                    id: 1
                  },
                  tokenList: {
                    rule: "repeated",
                    type: "TokenList",
                    id: 2
                  },
                  confidence: {
                    type: "SegmentMatchConfidenceBucket",
                    id: 3
                  },
                  disambiguationType: {
                    type: "NLQRewriteSuggestionType.E",
                    id: 4
                  },
                  isPartOfInterpretation: {
                    type: "bool",
                    id: 5,
                    options: {
                      "default": false
                    }
                  }
                },
                nested: {
                  SegmentMatchConfidenceBucket: {
                    values: {
                      HIGH: 1,
                      MEDIUM: 2,
                      LOW: 3
                    }
                  }
                }
              },
              SortByPhraseMapping: {
                fields: {
                  allowedAggregation: {
                    rule: "repeated",
                    type: "AggregationType.E",
                    id: 1,
                    options: {
                      packed: false
                    }
                  },
                  allowedToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 2
                  }
                }
              },
              NLPhraseMappingInfo: {
                fields: {
                  type: {
                    type: "Type",
                    id: 1
                  },
                  sortByPhraseMapping: {
                    type: "SortByPhraseMapping",
                    id: 2
                  }
                },
                nested: {
                  Type: {
                    values: {
                      SORT_BY: 1,
                      NUM_TYPES: 2
                    }
                  }
                }
              },
              NLQueryMappingInfo: {
                fields: {
                  queryToken: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  },
                  charAfter: {
                    rule: "repeated",
                    type: "string",
                    id: 4
                  },
                  tokenMappingInfo: {
                    rule: "repeated",
                    type: "NLTokenMappingInfo",
                    id: 2
                  },
                  phraseMappingInfo: {
                    rule: "repeated",
                    type: "NLPhraseMappingInfo",
                    id: 3
                  }
                }
              },
              NLContext: {
                fields: {
                  isNlQuerySourced: {
                    type: "bool",
                    id: 1,
                    options: {
                      "default": false
                    }
                  },
                  showNlQueryMapping: {
                    type: "bool",
                    id: 2,
                    options: {
                      "default": true
                    }
                  },
                  queryMappingInfo: {
                    type: "NLQueryMappingInfo",
                    id: 3
                  },
                  version: {
                    type: "ACVersion.E",
                    id: 4,
                    options: {
                      "default": "V_5"
                    }
                  }
                }
              },
              ACContext: {
                fields: {
                  table: {
                    rule: "repeated",
                    type: "ACTable",
                    id: 1
                  },
                  join: {
                    rule: "repeated",
                    type: "ACJoin",
                    id: 2
                  },
                  formula: {
                    rule: "repeated",
                    type: "ACFormula",
                    id: 3
                  },
                  tokenDisambiguation: {
                    rule: "repeated",
                    type: "ACTokenDisambiguation",
                    id: 4
                  },
                  queryRewrite: {
                    rule: "repeated",
                    type: "NLQRewrite",
                    id: 9
                  },
                  headerDef: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 6
                  },
                  nlContext: {
                    type: "NLContext",
                    id: 10
                  },
                  version: {
                    type: "Version",
                    id: 7,
                    options: {
                      "default": "V1"
                    }
                  },
                  pivotContexts: {
                    rule: "repeated",
                    type: "PivotContext",
                    id: 5
                  },
                  v: {
                    type: "ACVersion.E",
                    id: 8,
                    options: {
                      "default": "PRE_4_3"
                    }
                  }
                },
                nested: {
                  Version: {
                    values: {
                      V1: 1,
                      V2: 2
                    }
                  }
                }
              },
              ErrorCode: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      SUCCESS: 0,
                      NOT_READY: 1,
                      CANCELLED: 2,
                      TIME_OUT_ERROR: 3,
                      PERMISSION_DENIED: 4,
                      FAILURE: 5,
                      UNSUPPORTED_LANGUAGE: 6,
                      NO_MATCH: 7,
                      AMBIGUOUS_TOKEN: 8,
                      BAD_RECOGNIZED_TOKENS: 9,
                      BAD_TOKEN_SEQUENCE: 10,
                      JOIN_PATH_AMBIGUITY: 11,
                      NO_JOIN_PATH: 12,
                      INVALID_TRANSFORM: 13,
                      INCONSISTENT_JOIN_PATH: 14,
                      RELATIONSHIP_GRAPH_HAS_CYCLES: 15,
                      USER_GROUP_MASK_NOT_SET: 16,
                      INCREMENTAL_REQUEST_NOT_APPLICABLE: 17,
                      NOT_FOUND: 18,
                      INVALID_REQUEST: 19,
                      INVALID_JOIN_PATH: 20,
                      FORBIDDEN_WORD: 21,
                      INVALID_COLUMN: 22,
                      INVALID_TABLE: 23
                    }
                  }
                }
              },
              ErrorSeverity: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      ERROR: 1,
                      WARNING: 2,
                      SUGGESTION: 3
                    }
                  }
                }
              },
              ErrorDebugInfo: {
                fields: {
                  numFailedLookups: {
                    type: "int32",
                    id: 1
                  },
                  forbiddenType: {
                    type: "ForbiddenType",
                    id: 2
                  }
                },
                nested: {
                  ForbiddenType: {
                    values: {
                      FORBIDDEN_BY_LANG: 1,
                      FORBIDDEN_BY_DATA: 2
                    }
                  }
                }
              },
              Error: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2,
                    options: {
                      "default": ""
                    }
                  },
                  severity: {
                    type: "ErrorSeverity.E",
                    id: 3
                  },
                  errorMessagePosition: {
                    type: "int32",
                    id: 4
                  },
                  errorSpan: {
                    type: "int32",
                    id: 5
                  },
                  debugInfo: {
                    type: "ErrorDebugInfo",
                    id: 6
                  }
                }
              },
              ErrorCollection: {
                fields: {
                  error: {
                    type: "Error",
                    id: 1
                  },
                  errorDetail: {
                    rule: "repeated",
                    type: "Error",
                    id: 2
                  }
                }
              },
              ACJoinError: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  }
                }
              },
              ACFormulaError: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  }
                }
              },
              ACTableError: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2,
                    options: {
                      "default": ""
                    }
                  },
                  severity: {
                    type: "ErrorSeverity.E",
                    id: 3
                  },
                  errorMessagePosition: {
                    type: "int32",
                    id: 4
                  },
                  errorSpan: {
                    type: "int32",
                    id: 5
                  }
                }
              },
              TableJoin: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  tables: {
                    rule: "repeated",
                    type: "JoinInputTable",
                    id: 4
                  },
                  joinedColumns: {
                    rule: "repeated",
                    type: "JoinedColumn",
                    id: 3
                  },
                  deprecatedTables: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 2
                  }
                },
                nested: {
                  JoinInputTable: {
                    fields: {
                      table: {
                        type: "EntityHeader",
                        id: 1
                      },
                      outerJoin: {
                        type: "bool",
                        id: 2,
                        options: {
                          "default": true,
                          "(common.sensitivity)": 0
                        }
                      }
                    }
                  },
                  JoinedColumn: {
                    fields: {
                      input: {
                        rule: "repeated",
                        type: "EntityHeader",
                        id: 1
                      },
                      output: {
                        type: "EntityHeader",
                        id: 2
                      },
                      serializedRecognizedToken: {
                        type: "bytes",
                        id: 3,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      }
                    }
                  }
                }
              },
              SageQuery: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 9
                  },
                  columns: {
                    rule: "repeated",
                    type: "Column",
                    id: 1
                  },
                  filters: {
                    rule: "repeated",
                    type: "Filter",
                    id: 2
                  },
                  growthDimension: {
                    type: "GrowthDimension",
                    id: 3
                  },
                  resultForEachValue: {
                    rule: "repeated",
                    type: "Column",
                    id: 4
                  },
                  topCount: {
                    type: "int32",
                    id: 5,
                    options: {
                      "default": -1
                    }
                  },
                  isSubQuery: {
                    type: "bool",
                    id: 10,
                    options: {
                      "default": false
                    }
                  },
                  queryRootGuid: {
                    type: "string",
                    id: 11
                  },
                  isPivotTable: {
                    type: "bool",
                    id: 12,
                    options: {
                      "default": false
                    }
                  },
                  relatedAttributes: {
                    rule: "repeated",
                    type: "Column",
                    id: 6
                  },
                  relatedMeasures: {
                    rule: "repeated",
                    type: "Column",
                    id: 7
                  },
                  defaultTimeDimensions: {
                    rule: "repeated",
                    type: "Column",
                    id: 8
                  }
                },
                nested: {
                  JoinPath: {
                    fields: {
                      rootTableGuid: {
                        type: "string",
                        id: 1,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      joinGuid: {
                        rule: "repeated",
                        type: "string",
                        id: 2,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      }
                    }
                  },
                  Column: {
                    fields: {
                      column: {
                        type: "SageExpression",
                        id: 14
                      },
                      header: {
                        type: "EntityHeader",
                        id: 16
                      },
                      columnType: {
                        type: "ColumnType.E",
                        id: 4,
                        options: {
                          "default": "UNKNOWN",
                          "(common.sensitivity)": 0
                        }
                      },
                      aggregationType: {
                        type: "AggregationType.E",
                        id: 7,
                        options: {
                          "default": "NONE",
                          "(common.sensitivity)": 0
                        }
                      },
                      groupBy: {
                        type: "bool",
                        id: 3,
                        options: {
                          "default": false,
                          "(common.sensitivity)": 0
                        }
                      },
                      sortOrder: {
                        type: "int32",
                        id: 5,
                        options: {
                          "default": -1,
                          "(common.sensitivity)": 0
                        }
                      },
                      sortAscending: {
                        type: "bool",
                        id: 6,
                        options: {
                          "default": true,
                          "(common.sensitivity)": 0
                        }
                      },
                      showGrowth: {
                        type: "bool",
                        id: 8,
                        options: {
                          "default": false,
                          "(common.sensitivity)": 0
                        }
                      },
                      bucket: {
                        type: "TimeBucket.E",
                        id: 9,
                        options: {
                          "default": "NO_BUCKET",
                          "(common.sensitivity)": 0
                        }
                      },
                      worksheetColumnGuid: {
                        type: "string",
                        id: 19,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      uniqueValues: {
                        type: "int64",
                        id: 12,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      formulaId: {
                        type: "string",
                        id: 15,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      pivotBy: {
                        type: "bool",
                        id: 20,
                        options: {
                          "default": false,
                          "(common.sensitivity)": 0
                        }
                      },
                      recognizedToken: {
                        type: "RecognizedToken",
                        id: 21
                      },
                      isUnmapped: {
                        type: "bool",
                        id: 22,
                        options: {
                          "default": false,
                          "(common.sensitivity)": 0
                        }
                      },
                      calendar: {
                        type: "EntityHeader",
                        id: 23,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      mustHaveOnChart: {
                        type: "bool",
                        id: 24
                      },
                      id: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: false
                        }
                      },
                      name: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: false
                        }
                      },
                      joinPath: {
                        type: "JoinPath",
                        id: 11,
                        options: {
                          deprecated: false
                        }
                      },
                      markedForDisambiguation: {
                        type: "bool",
                        id: 13,
                        options: {
                          deprecated: false
                        }
                      },
                      showColumn: {
                        type: "bool",
                        id: 10,
                        options: {
                          deprecated: false
                        }
                      },
                      deprecatedDataType: {
                        type: "falcon.DataType.E",
                        id: 17,
                        options: {
                          deprecated: false
                        }
                      },
                      deprecatedSerializedRecognizedToken: {
                        type: "bytes",
                        id: 18
                      }
                    }
                  },
                  FilterType: {
                    values: {
                      SIMPLE: 0,
                      GEO: 1,
                      NUM_FILTERS: 2
                    }
                  },
                  Filter: {
                    fields: {
                      column: {
                        type: "SageExpression",
                        id: 16
                      },
                      header: {
                        type: "EntityHeader",
                        id: 18
                      },
                      timeBucket: {
                        type: "TimeBucket.E",
                        id: 23,
                        options: {
                          "default": "NO_BUCKET"
                        }
                      },
                      aggregationType: {
                        type: "AggregationType.E",
                        id: 12,
                        options: {
                          "default": "NONE"
                        }
                      },
                      columnType: {
                        type: "ColumnType.E",
                        id: 20,
                        options: {
                          "default": "UNKNOWN"
                        }
                      },
                      op: {
                        type: "CompareTypeProto.E",
                        id: 3
                      },
                      int64Value: {
                        rule: "repeated",
                        type: "int64",
                        id: 4,
                        options: {
                          packed: false
                        }
                      },
                      stringValue: {
                        rule: "repeated",
                        type: "string",
                        id: 5
                      },
                      doubleValue: {
                        rule: "repeated",
                        type: "double",
                        id: 6,
                        options: {
                          packed: false
                        }
                      },
                      booleanValue: {
                        rule: "repeated",
                        type: "bool",
                        id: 7,
                        options: {
                          packed: false
                        }
                      },
                      negateFilter: {
                        type: "bool",
                        id: 8,
                        options: {
                          "default": false
                        }
                      },
                      int32Value: {
                        rule: "repeated",
                        type: "int32",
                        id: 9,
                        options: {
                          packed: false
                        }
                      },
                      floatValue: {
                        rule: "repeated",
                        type: "float",
                        id: 10,
                        options: {
                          packed: false
                        }
                      },
                      includeNull: {
                        type: "bool",
                        id: 11,
                        options: {
                          "default": false
                        }
                      },
                      dateFilter: {
                        rule: "repeated",
                        type: "DateFilterProto",
                        id: 15
                      },
                      filterValueQuery: {
                        type: "FilterValueQuery",
                        id: 26
                      },
                      worksheetColumnGuid: {
                        type: "string",
                        id: 17
                      },
                      formulaId: {
                        type: "string",
                        id: 19
                      },
                      type: {
                        type: "FilterType",
                        id: 21,
                        options: {
                          "default": "SIMPLE"
                        }
                      },
                      geoInfo: {
                        type: "GeoInfo",
                        id: 22
                      },
                      isAutoGenerated: {
                        type: "bool",
                        id: 24,
                        options: {
                          "default": false
                        }
                      },
                      calendar: {
                        type: "EntityHeader",
                        id: 25,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      columnName: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: false
                        }
                      },
                      columnGuid: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: false
                        }
                      },
                      joinPath: {
                        type: "JoinPath",
                        id: 13,
                        options: {
                          deprecated: false
                        }
                      },
                      markedForDisambiguation: {
                        type: "bool",
                        id: 14,
                        options: {
                          "default": false
                        }
                      }
                    },
                    nested: {
                      GeoInfo: {
                        fields: {
                          circle: {
                            rule: "repeated",
                            type: "GeoCircle",
                            id: 1
                          }
                        },
                        nested: {
                          GeoCircle: {
                            fields: {
                              latitude: {
                                type: "double",
                                id: 1
                              },
                              longitude: {
                                type: "double",
                                id: 2
                              },
                              radius: {
                                type: "double",
                                id: 3
                              },
                              inclusive: {
                                type: "bool",
                                id: 4
                              }
                            }
                          }
                        }
                      },
                      FilterValueQuery: {
                        fields: {
                          query: {
                            type: "SageQuery",
                            id: 1
                          },
                          column: {
                            type: "EntityHeader",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  GrowthDimension: {
                    fields: {
                      column: {
                        type: "SageExpression",
                        id: 6
                      },
                      header: {
                        type: "EntityHeader",
                        id: 8
                      },
                      bucket: {
                        type: "TimeBucket.E",
                        id: 3,
                        options: {
                          "default": "MONTHLY"
                        }
                      },
                      qualifier: {
                        type: "TimeBucketQualifierProto.E",
                        id: 9,
                        options: {
                          "default": "NONE"
                        }
                      },
                      worksheetColumnGuid: {
                        type: "string",
                        id: 7
                      },
                      calendar: {
                        type: "EntityHeader",
                        id: 26,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      timeColumn: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: false
                        }
                      },
                      timeColumnGuid: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: false
                        }
                      },
                      joinPath: {
                        type: "JoinPath",
                        id: 5,
                        options: {
                          deprecated: false
                        }
                      },
                      yearOverYear: {
                        type: "bool",
                        id: 4,
                        options: {
                          "default": false,
                          deprecated: false
                        }
                      }
                    }
                  }
                }
              },
              Statement: {
                fields: {
                  query: {
                    type: "SageQuery",
                    id: 1
                  },
                  join: {
                    type: "TableJoin",
                    id: 2
                  }
                }
              },
              SageProgram: {
                fields: {
                  statements: {
                    rule: "repeated",
                    type: "Statement",
                    id: 1
                  },
                  displaySageQuery: {
                    type: "SageQuery",
                    id: 2
                  },
                  programType: {
                    type: "ProgramType",
                    id: 3,
                    options: {
                      "default": "SIMPLE",
                      "(common.sensitivity)": 0
                    }
                  }
                },
                nested: {
                  ProgramType: {
                    values: {
                      SIMPLE: 0,
                      CHASM_TRAP: 1,
                      QUERY_ON_QUERY: 2,
                      UNKNOWN: 3
                    }
                  }
                }
              },
              CompletionType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      CLASSIC: 0,
                      NLP: 1,
                      PROCESS_NL: 2
                    }
                  }
                }
              },
              QueryCompletionType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      UNDEFINED: 0,
                      SYNONYM: 1,
                      REWRITE: 2,
                      SEARCH_HISTORY_SELF: 3,
                      SEARCH_HISTORY_OTHERS: 4,
                      NL_COMPLETION: 5,
                      NL_PRIMING_COMPLETION: 6,
                      PHRASE_HISTORY_SELF: 7,
                      PHRASE_HISTORY_OTHERS: 8
                    }
                  }
                }
              },
              CompletionScope: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      IN_SCOPE: 0,
                      NON_JOINABLE_SCOPE: 1,
                      OUT_OF_SCOPE: 2,
                      JOINABLE_THROUGH_CHASM_TRAP: 3
                    }
                  }
                }
              },
              Completion: {
                fields: {
                  recognizedToken: {
                    type: "RecognizedToken",
                    id: 1
                  },
                  numTokensToReplace: {
                    type: "int32",
                    id: 2
                  },
                  scope: {
                    type: "CompletionScope.E",
                    id: 3,
                    options: {
                      "default": "IN_SCOPE"
                    }
                  },
                  debugInfo: {
                    type: "string",
                    id: 4
                  }
                }
              },
              QueryCompletion: {
                fields: {
                  query: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  },
                  completionTokens: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 10
                  },
                  numPrefixTokens: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": 0
                    }
                  },
                  searchText: {
                    type: "string",
                    id: 3
                  },
                  score: {
                    type: "double",
                    id: 4,
                    options: {
                      "default": 0
                    }
                  },
                  numSuffixTokens: {
                    type: "int32",
                    id: 5,
                    options: {
                      "default": 0
                    }
                  },
                  scope: {
                    type: "CompletionScope.E",
                    id: 6,
                    options: {
                      "default": "IN_SCOPE"
                    }
                  },
                  matchType: {
                    type: "MatchType.E",
                    id: 7,
                    options: {
                      "default": "UNDEFINED"
                    }
                  },
                  completionType: {
                    type: "QueryCompletionType.E",
                    id: 8,
                    options: {
                      "default": "UNDEFINED"
                    }
                  },
                  dataScopeTable: {
                    type: "DataScopeTable",
                    id: 9
                  },
                  isPreviousQueryCompletion: {
                    type: "bool",
                    id: 11,
                    options: {
                      "default": false
                    }
                  },
                  feedbackScore: {
                    type: "double",
                    id: 12
                  }
                }
              },
              CompletionRequest: {
                fields: {
                  authToken: {
                    type: "AuthToken",
                    id: 1
                  },
                  requestCallId: {
                    type: "int32",
                    id: 2
                  },
                  incidentId: {
                    type: "string",
                    id: 3
                  },
                  queryStreamId: {
                    type: "string",
                    id: 4
                  },
                  clientTimestampMs: {
                    type: "int64",
                    id: 5
                  },
                  sessionId: {
                    type: "string",
                    id: 6
                  },
                  browserWindowId: {
                    type: "string",
                    id: 7
                  },
                  timeBudgetInMs: {
                    type: "int32",
                    id: 8,
                    options: {
                      "default": 1800
                    }
                  },
                  languageType: {
                    type: "LanguageType.E",
                    id: 9,
                    options: {
                      "default": "ANSWER"
                    }
                  },
                  locale: {
                    type: "string",
                    id: 30,
                    options: {
                      "default": "en_US.utf8"
                    }
                  },
                  inputLocale: {
                    type: "string",
                    id: 39
                  },
                  flag: {
                    rule: "repeated",
                    type: "FeatureFlag.E",
                    id: 10,
                    options: {
                      packed: false
                    }
                  },
                  includeObjects: {
                    type: "bool",
                    id: 11,
                    options: {
                      "default": true
                    }
                  },
                  inputToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 12
                  },
                  incrementalRequest: {
                    type: "IncrementalRequest",
                    id: 26
                  },
                  currentlyEditedToken: {
                    type: "int32",
                    id: 13,
                    options: {
                      "default": -1
                    }
                  },
                  cursorOffsetInToken: {
                    type: "int32",
                    id: 14,
                    options: {
                      "default": -1
                    }
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 15
                  },
                  transform: {
                    rule: "repeated",
                    type: "QueryTransform",
                    id: 16
                  },
                  exactMatchOnly: {
                    type: "bool",
                    id: 18
                  },
                  endIndexForExactMatch: {
                    type: "int32",
                    id: 28,
                    options: {
                      "default": -1
                    }
                  },
                  maxJoinPaths: {
                    type: "int32",
                    id: 20,
                    options: {
                      "default": 100
                    }
                  },
                  maxCompletions: {
                    type: "int32",
                    id: 21,
                    options: {
                      "default": 10
                    }
                  },
                  objectSearchMaxResults: {
                    type: "int32",
                    id: 29,
                    options: {
                      "default": 10
                    }
                  },
                  deleteInvalidPhrases: {
                    type: "bool",
                    id: 22
                  },
                  contextQueryRoot: {
                    rule: "repeated",
                    type: "string",
                    id: 23
                  },
                  tokenDisambiguation: {
                    rule: "repeated",
                    type: "ACTokenDisambiguation",
                    id: 24
                  },
                  userFeedback: {
                    type: "UserFeedback",
                    id: 27
                  },
                  autoBucketPolicy: {
                    type: "AutoBucketPolicy",
                    id: 31
                  },
                  rewriteSuggestion: {
                    rule: "repeated",
                    type: "NLQRewriteSuggestion",
                    id: 32
                  },
                  queryRewrite: {
                    rule: "repeated",
                    type: "NLQRewrite",
                    id: 33
                  },
                  completionType: {
                    type: "CompletionType.E",
                    id: 34,
                    options: {
                      "default": "CLASSIC"
                    }
                  },
                  outputGuidCacheProto: {
                    type: "OutputGuidCacheProto",
                    id: 35
                  },
                  previousRequestState: {
                    type: "PrevRequestState",
                    id: 37
                  },
                  bestEffortTokenization: {
                    type: "bool",
                    id: 38,
                    options: {
                      "default": false
                    }
                  },
                  ubrContextId: {
                    type: "string",
                    id: 40
                  },
                  allowedPhraseTypes: {
                    rule: "repeated",
                    type: "PhraseType.E",
                    id: 41,
                    options: {
                      packed: false
                    }
                  },
                  feedbackScore: {
                    type: "double",
                    id: 42
                  },
                  deprecatedCompletionsWithKeywords: {
                    type: "bool",
                    id: 17
                  },
                  deprecatedSingleTokenCompletionsOnly: {
                    type: "bool",
                    id: 19
                  },
                  editRange: {
                    type: "WordRange",
                    id: 36
                  }
                },
                nested: {
                  rpcId: {
                    type: "CompletionRequest",
                    id: 1145,
                    extend: "common.RpcBlog"
                  },
                  PrevRequestState: {
                    fields: {
                      previousQueryCompletions: {
                        rule: "repeated",
                        type: "QueryCompletion",
                        id: 1
                      },
                      previousCompletionPosition: {
                        type: "int32",
                        id: 2
                      },
                      editInMiddleInfo: {
                        type: "EditInMiddleInfo",
                        id: 3
                      }
                    }
                  }
                }
              },
              TableInterpretation: {
                fields: {
                  newToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  },
                  phrase: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 2
                  },
                  isSkipToken: {
                    type: "bool",
                    id: 3
                  }
                }
              },
              CompletionResponse: {
                fields: {
                  error: {
                    type: "ErrorCollection",
                    id: 26
                  },
                  serverLatencyInMs: {
                    type: "int32",
                    id: 5
                  },
                  latencyBreakUp: {
                    rule: "repeated",
                    type: "int32",
                    id: 6,
                    options: {
                      packed: false
                    }
                  },
                  responseCallId: {
                    type: "int32",
                    id: 7
                  },
                  incidentId: {
                    type: "string",
                    id: 8
                  },
                  objectResult: {
                    rule: "repeated",
                    type: "Object",
                    id: 10
                  },
                  columnMetadata: {
                    rule: "repeated",
                    type: "ColumnMetadata",
                    id: 11
                  },
                  newToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 12
                  },
                  languageCompletion: {
                    rule: "repeated",
                    type: "Completion",
                    id: 13
                  },
                  dataCompletion: {
                    rule: "repeated",
                    type: "Completion",
                    id: 14
                  },
                  queryCompletion: {
                    rule: "repeated",
                    type: "QueryCompletion",
                    id: 15
                  },
                  formulaCompletion: {
                    rule: "repeated",
                    type: "Completion",
                    id: 16
                  },
                  completionPosition: {
                    type: "int32",
                    id: 17
                  },
                  uniqueCompletionUsedForQuery: {
                    type: "bool",
                    id: 18,
                    options: {
                      "default": false
                    }
                  },
                  formulaGhost: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 19
                  },
                  phrase: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 20
                  },
                  joinPathAmbiguity: {
                    rule: "repeated",
                    type: "JoinPathCollection",
                    id: 22
                  },
                  accessibleTable: {
                    rule: "repeated",
                    type: "string",
                    id: 23
                  },
                  query: {
                    type: "SageProgram",
                    id: 24
                  },
                  expression: {
                    type: "SageExpression",
                    id: 25
                  },
                  tokenDisambiguation: {
                    rule: "repeated",
                    type: "ACTokenDisambiguation",
                    id: 27
                  },
                  interpretations: {
                    rule: "repeated",
                    type: "TableInterpretation",
                    id: 28
                  },
                  queryRewriteSuggestions: {
                    rule: "repeated",
                    type: "NLQRewriteSuggestion",
                    id: 29
                  },
                  dataScopeTable: {
                    rule: "repeated",
                    type: "DataScopeTable",
                    id: 31
                  },
                  autoGeneratedFormulae: {
                    rule: "repeated",
                    type: "ACFormula",
                    id: 32
                  },
                  queryMappingInfo: {
                    type: "NLQueryMappingInfo",
                    id: 34,
                    options: {
                      deprecated: true
                    }
                  },
                  queryClassificationInfo: {
                    type: "NLQueryClassificationInfo",
                    id: 35
                  },
                  deprecatedError: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  deprecatedErrorMessage: {
                    type: "string",
                    id: 2
                  },
                  deprecatedErrorMessagePosition: {
                    type: "int32",
                    id: 3
                  },
                  deprecatedErrorSpan: {
                    type: "int32",
                    id: 4
                  },
                  deprecatedSeverity: {
                    type: "ErrorSeverity.E",
                    id: 9
                  },
                  deprecatedQuery: {
                    type: "bytes",
                    id: 21,
                    options: {
                      deprecated: true
                    }
                  }
                }
              },
              QueryTransformType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      ADD_COLUMN: 1,
                      REMOVE_COLUMN: 2,
                      REMOVE_ALL_PHRASES_BY_COLUMN: 3,
                      ADD_SORT_COLUMN: 4,
                      REMOVE_ALL_SORT_PHRASES: 5,
                      ADD_EMPTY_GROUP_BY: 6,
                      ADD_IN_FILTER: 7,
                      REMOVE_IN_FILTER: 8,
                      ADD_PREDICATE_FILTER: 9,
                      REMOVE_PREDICATE_FILTER: 10,
                      REMOVE_ALL_FILTERS_FOR_COLUMN: 11,
                      REMOVE_ALL_DATE_RANGE_FILTERS_FOR_COLUMN: 12,
                      REMOVE_NON_FILTER_PHRASES: 13,
                      ADD_HAVING_FILTER: 14,
                      REMOVE_HAVING_FILTER: 15,
                      REMOVE_ALL_HAVING_FILTERS: 17,
                      REMOVE_ALL_HAVING_FILTERS_BY_AGGREGATE: 16,
                      REMOVE_ALL_HAVING_FILTERS_BY_COLUMN: 18,
                      ADD_TIME_BUCKET_QUALIFIER: 23,
                      REMOVE_TIME_BUCKET_QUALIFIER: 24,
                      CHANGE_AGGREGATION: 25,
                      CHANGE_TIME_BUCKET: 26,
                      DRILL_DOWN: 27,
                      ADD_VERSUS: 28,
                      NUM_TRANSFORMS: 29,
                      DEPRECATED_ADD_FORMULA: 19,
                      DEPRECATED_REMOVE_FORMULA: 20,
                      DEPRECATED_ADD_TIME_BUCKET: 21,
                      DEPRECATED_REMOVE_TIME_BUCKET: 22
                    }
                  }
                }
              },
              ChangeAggregationParam: {
                fields: {
                  oldAggregation: {
                    type: "AggregationType.E",
                    id: 1
                  },
                  defaultAggregation: {
                    type: "AggregationType.E",
                    id: 2,
                    options: {
                      "default": "NONE"
                    }
                  }
                }
              },
              AddColumnTransform: {
                fields: {
                  column: {
                    rule: "repeated",
                    type: "Column",
                    id: 1
                  }
                },
                nested: {
                  Column: {
                    fields: {
                      columnGuid: {
                        type: "string",
                        id: 1
                      },
                      joinPath: {
                        rule: "repeated",
                        type: "JoinPathProto",
                        id: 2
                      },
                      aggregation: {
                        type: "AggregationType.E",
                        id: 3
                      }
                    }
                  }
                }
              },
              DrillDownTransform: {
                fields: {
                  drillDownFilters: {
                    type: "TableData",
                    id: 1
                  },
                  nonFilteredColumnOutputId: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  },
                  drillDownColumn: {
                    type: "DrillDownColumn",
                    id: 3
                  }
                },
                nested: {
                  DrillDownColumn: {
                    fields: {
                      columnGuid: {
                        type: "string",
                        id: 1
                      }
                    }
                  }
                }
              },
              QueryTransform: {
                fields: {
                  type: {
                    type: "QueryTransformType.E",
                    id: 1
                  },
                  columnGuid: {
                    type: "string",
                    id: 2
                  },
                  aggregation: {
                    type: "AggregationType.E",
                    id: 3
                  },
                  joinPath: {
                    rule: "repeated",
                    type: "JoinPathProto",
                    id: 4
                  },
                  tokenOutputGuid: {
                    type: "string",
                    id: 6
                  },
                  op: {
                    type: "CompareTypeProto.E",
                    id: 7
                  },
                  value: {
                    type: "string",
                    id: 8
                  },
                  value2: {
                    type: "string",
                    id: 9
                  },
                  bulkValue: {
                    rule: "repeated",
                    type: "string",
                    id: 10
                  },
                  negateOp: {
                    type: "bool",
                    id: 11
                  },
                  prependNewPhrase: {
                    type: "bool",
                    id: 12
                  },
                  resolveValueToken: {
                    type: "bool",
                    id: 13,
                    options: {
                      "default": true
                    }
                  },
                  combineValueTokens: {
                    type: "bool",
                    id: 14,
                    options: {
                      "default": false
                    }
                  },
                  ascending: {
                    type: "bool",
                    id: 15,
                    options: {
                      "default": true
                    }
                  },
                  timeBucket: {
                    type: "TimeBucket.E",
                    id: 16
                  },
                  calendarGuid: {
                    type: "string",
                    id: 27
                  },
                  timeBucketQualifier: {
                    type: "TimeBucketQualifierProto.E",
                    id: 17
                  },
                  changeAggregationParam: {
                    type: "ChangeAggregationParam",
                    id: 22
                  },
                  column: {
                    type: "SageExpression",
                    id: 23
                  },
                  queryColumn: {
                    type: "SageQuery.Column",
                    id: 24
                  },
                  dateColumnGuid: {
                    type: "string",
                    id: 25
                  },
                  addColumn: {
                    type: "AddColumnTransform",
                    id: 26
                  },
                  drillDown: {
                    type: "DrillDownTransform",
                    id: 28
                  },
                  deprecatedSerializedColumn: {
                    type: "bytes",
                    id: 5
                  },
                  deprecatedFormulaName: {
                    type: "string",
                    id: 18
                  },
                  deprecatedFormulaId: {
                    type: "string",
                    id: 19
                  },
                  deprecatedFormulaOutputGuid: {
                    type: "string",
                    id: 20
                  },
                  deprecatedFormulaTokenType: {
                    type: "TokenType.E",
                    id: 21,
                    options: {
                      "default": "FORMULA"
                    }
                  }
                }
              },
              DataValue: {
                fields: {
                  value: {
                    type: "string",
                    id: 1
                  },
                  epochRange: {
                    type: "EpochRange",
                    id: 2
                  }
                },
                nested: {
                  EpochRange: {
                    fields: {
                      startEpoch: {
                        type: "int32",
                        id: 1
                      },
                      endEpoch: {
                        type: "int32",
                        id: 2
                      }
                    }
                  }
                }
              },
              ColumnData: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  },
                  dataValue: {
                    rule: "repeated",
                    type: "DataValue",
                    id: 2
                  }
                }
              },
              TableData: {
                fields: {
                  columnData: {
                    rule: "repeated",
                    type: "ColumnData",
                    id: 1
                  }
                }
              },
              AuthToken: {
                fields: {
                  user: {
                    type: "EntityHeader",
                    id: 1
                  },
                  expirationTime: {
                    type: "int32",
                    id: 2
                  },
                  value: {
                    type: "int64",
                    id: 3
                  },
                  logicalSchemaVersion: {
                    type: "int64",
                    id: 5
                  },
                  rlsGroups: {
                    type: "SparseBitmapProto",
                    id: 6
                  },
                  groupMask: {
                    type: "int64",
                    id: 4,
                    options: {
                      deprecated: true
                    }
                  }
                }
              },
              DataScope: {
                fields: {
                  logicalTable: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  },
                  logicalColumn: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  },
                  filterSageQuery: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 3
                  },
                  forcedRoot: {
                    type: "string",
                    id: 4
                  }
                }
              },
              DataScopeTableType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      LOGICAL: 1,
                      WORKSHEET: 2,
                      USER_DEFINED: 3
                    }
                  }
                }
              },
              DataScopeTable: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  column: {
                    rule: "repeated",
                    type: "EntityHeader",
                    id: 2
                  },
                  type: {
                    type: "DataScopeTableType.E",
                    id: 3
                  },
                  confidence: {
                    type: "double",
                    id: 4
                  }
                }
              },
              EditInMiddleInfo: {
                fields: {
                  prevTokens: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  },
                  prevPhrases: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 2
                  }
                }
              },
              UserRating: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      UNKNOWN: 0,
                      GOOD: 1,
                      BAD: 2,
                      UGLY: 3
                    }
                  }
                }
              },
              UserFeedback: {
                fields: {
                  userRating: {
                    type: "UserRating.E",
                    id: 1,
                    options: {
                      "default": "UNKNOWN"
                    }
                  },
                  description: {
                    type: "string",
                    id: 2
                  }
                }
              },
              ACRequestInfo: {
                fields: {
                  authToken: {
                    type: "AuthToken",
                    id: 1
                  },
                  queryStreamId: {
                    type: "string",
                    id: 2
                  },
                  requestCallId: {
                    type: "int32",
                    id: 3
                  },
                  incidentId: {
                    type: "string",
                    id: 4
                  },
                  clientTimestampMs: {
                    type: "int64",
                    id: 5
                  },
                  timeBudgetMs: {
                    type: "int32",
                    id: 6,
                    options: {
                      "default": 1800
                    }
                  },
                  flag: {
                    rule: "repeated",
                    type: "FeatureFlag.E",
                    id: 7,
                    options: {
                      packed: false
                    }
                  },
                  deleteInvalidPhrases: {
                    type: "bool",
                    id: 8,
                    options: {
                      "default": false
                    }
                  },
                  userFeedback: {
                    type: "UserFeedback",
                    id: 10
                  },
                  locale: {
                    type: "string",
                    id: 11,
                    options: {
                      "default": "en_US.utf8"
                    }
                  },
                  isAnswerPage: {
                    type: "bool",
                    id: 12
                  },
                  worksheetGuid: {
                    type: "string",
                    id: 9
                  }
                }
              },
              ACResponseInfo: {
                fields: {
                  responseCallId: {
                    type: "int32",
                    id: 1
                  },
                  incidentId: {
                    type: "string",
                    id: 2
                  },
                  serverLatencyMs: {
                    type: "int32",
                    id: 3
                  },
                  latencyBreakUp: {
                    rule: "repeated",
                    type: "int32",
                    id: 4,
                    options: {
                      packed: false
                    }
                  }
                }
              },
              Object: {
                fields: {
                  guid: {
                    type: "string",
                    id: 1
                  },
                  name: {
                    type: "HighlightedString",
                    id: 2
                  },
                  authorGuid: {
                    type: "string",
                    id: 3
                  },
                  authorName: {
                    type: "HighlightedString",
                    id: 4
                  },
                  authorDisplayName: {
                    type: "HighlightedString",
                    id: 12
                  },
                  type: {
                    type: "Type",
                    id: 5
                  },
                  score: {
                    type: "float",
                    id: 6
                  },
                  question: {
                    rule: "repeated",
                    type: "Question",
                    id: 8
                  },
                  viz: {
                    rule: "repeated",
                    type: "Viz",
                    id: 10
                  },
                  modifiedEpochMs: {
                    type: "int64",
                    id: 11
                  },
                  helpPage: {
                    type: "HelpPageProto",
                    id: 13
                  },
                  action: {
                    type: "ActionProto",
                    id: 14
                  },
                  explanation: {
                    type: "string",
                    id: 15
                  }
                },
                nested: {
                  Type: {
                    values: {
                      ANSWER: 1,
                      PINBOARD: 2,
                      HELP_PAGE: 3,
                      ACTION: 4
                    }
                  },
                  VizType: {
                    values: {
                      HEADLINE: 1,
                      TABLE: 2,
                      CHART: 3
                    }
                  },
                  Question: {
                    fields: {
                      text: {
                        type: "HighlightedString",
                        id: 1
                      },
                      acContext: {
                        type: "ACContext",
                        id: 3
                      }
                    }
                  },
                  HighlightedString: {
                    fields: {
                      text: {
                        type: "string",
                        id: 1
                      },
                      highlight: {
                        rule: "repeated",
                        type: "Highlight",
                        id: 2
                      }
                    }
                  },
                  Highlight: {
                    fields: {
                      start: {
                        type: "int32",
                        id: 1
                      },
                      size: {
                        type: "int32",
                        id: 2
                      }
                    }
                  },
                  Viz: {
                    fields: {
                      guid: {
                        type: "string",
                        id: 1
                      },
                      title: {
                        type: "HighlightedString",
                        id: 2
                      },
                      type: {
                        type: "VizType",
                        id: 3
                      },
                      question: {
                        type: "Question",
                        id: 4
                      },
                      score: {
                        type: "float",
                        id: 5
                      },
                      modifiedEpochMs: {
                        type: "int64",
                        id: 6
                      },
                      explanation: {
                        type: "string",
                        id: 7
                      }
                    }
                  },
                  HelpPageProto: {
                    fields: {
                      URL: {
                        type: "string",
                        id: 1
                      },
                      title: {
                        type: "string",
                        id: 2
                      },
                      description: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  ActionProto: {
                    fields: {
                      type: {
                        type: "ActionType",
                        id: 1
                      },
                      title: {
                        type: "string",
                        id: 2
                      }
                    },
                    nested: {
                      ActionType: {
                        values: {
                          CREATE_WORKSHEET: 1,
                          UPLOAD_DATA: 2,
                          VIEW_SCHEMA: 3,
                          UPLOAD_SCHEMA: 4,
                          VIEW_PINBOARDS: 5,
                          VIEW_ANSWERS: 6,
                          VIEW_DATA_TABLES: 7,
                          VIEW_DATA_SOURCES: 8,
                          EDIT_PROFILE: 9,
                          CREATE_PINBOARD: 10,
                          ADMIN_ADD_NEW_USER: 11,
                          ADMIN_ADD_NEW_GROUP: 12,
                          ADMIN_VIEW_USERS: 13,
                          ADMIN_VIEW_GROUPS: 14,
                          ADMIN_MANAGE_BUSINESS_DATA_MODEL: 15,
                          ADMIN_MANAGE_DATA_SECURITY: 16,
                          ADMIN_VIEW_SYSTEM_HEALTH_OVERVIEW: 17,
                          ADMIN_VIEW_SYSTEM_HEALTH_DATA: 18,
                          ADMIN_VIEW_SYSTEM_HEALTH_CLUSTER_MANAGER: 19,
                          ADMIN_VIEW_SYSTEM_HEALTH_ALERTS_AND_EVENTS: 20,
                          ADMIN_MANAGE_JOBS: 21
                        }
                      }
                    }
                  }
                }
              },
              NLTableRequest: {
                fields: {
                  inputToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  },
                  currentlyEditedToken: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": -1
                    }
                  },
                  cursorOffsetInToken: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": -1
                    }
                  },
                  maxCompletions: {
                    type: "int32",
                    id: 4,
                    options: {
                      "default": 10
                    }
                  }
                }
              },
              FeedbackType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      LIKE: 0,
                      DISLIKE: 1,
                      NUM_FEEDBACK_TYPES: 2
                    }
                  }
                }
              },
              CompleteNLRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 3
                  },
                  table: {
                    type: "NLTableRequest",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "CompleteNLRequest",
                    id: 1228,
                    extend: "common.RpcBlog"
                  }
                }
              },
              RecordNLFeedbackRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 3
                  },
                  queryMappingInfo: {
                    type: "NLQueryMappingInfo",
                    id: 4
                  },
                  feedbackType: {
                    type: "FeedbackType.E",
                    id: 5
                  }
                },
                nested: {
                  rpcId: {
                    type: "RecordNLFeedbackRequest",
                    id: 1232,
                    extend: "common.RpcBlog"
                  }
                }
              },
              RecordNLFeedbackResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  }
                }
              },
              ObjectSearchParams: {
                fields: {
                  maxResults: {
                    type: "int32",
                    id: 1,
                    options: {
                      "default": 10
                    }
                  }
                }
              },
              ProcessNLRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 3
                  },
                  objectSearchParams: {
                    type: "ObjectSearchParams",
                    id: 4
                  },
                  queryRewriteChoice: {
                    rule: "repeated",
                    type: "NLQRewriteSuggestion",
                    id: 5
                  }
                },
                nested: {
                  rpcId: {
                    type: "ProcessNLRequest",
                    id: 1223,
                    extend: "common.RpcBlog"
                  }
                }
              },
              ProcessNLResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    rule: "repeated",
                    type: "ACContext",
                    id: 4
                  },
                  queryRewriteSuggestions: {
                    rule: "repeated",
                    type: "NLQRewriteSuggestion",
                    id: 5
                  },
                  dataScopeTable: {
                    rule: "repeated",
                    type: "DataScopeTable",
                    id: 6
                  },
                  objectResult: {
                    rule: "repeated",
                    type: "Object",
                    id: 7
                  },
                  queryMappingInfo: {
                    type: "NLQueryMappingInfo",
                    id: 8
                  },
                  queryClassificationInfo: {
                    type: "NLQueryClassificationInfo",
                    id: 9
                  }
                }
              },
              CompleteNLResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    rule: "repeated",
                    type: "ACContext",
                    id: 4
                  },
                  queryCompletion: {
                    rule: "repeated",
                    type: "QueryCompletion",
                    id: 5
                  },
                  objectResult: {
                    rule: "repeated",
                    type: "Object",
                    id: 6
                  },
                  completionPosition: {
                    type: "int32",
                    id: 7
                  }
                }
              },
              RecordAnswerQuestionPairsRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  sageAnswer: {
                    type: "ACContext",
                    id: 2
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 3
                  },
                  naturalLanguageQuestion: {
                    rule: "repeated",
                    type: "string",
                    id: 4
                  },
                  score: {
                    type: "double",
                    id: 5,
                    options: {
                      "default": 1
                    }
                  },
                  queryMappingInfo: {
                    type: "NLQueryMappingInfo",
                    id: 6
                  }
                },
                nested: {
                  rpcId: {
                    type: "RecordAnswerQuestionPairsRequest",
                    id: 1229,
                    extend: "common.RpcBlog"
                  }
                }
              },
              RecordAnswerQuestionPairsResponse: {
                fields: {}
              },
              RelevantColumnsRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 2
                  },
                  numColumns: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": 10
                    }
                  }
                },
                nested: {
                  rpcId: {
                    type: "RelevantColumnsRequest",
                    id: 1244,
                    extend: "common.RpcBlog"
                  }
                }
              },
              RelevantColumnsResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 3
                  }
                }
              },
              NLIncrementalQueryType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      NL_INTENT: 0,
                      EDIT_TABLE: 1,
                      TRANSFORM: 2
                    }
                  }
                }
              },
              ProcessNLIntentRequest: {
                fields: {
                  nlRequest: {
                    type: "ProcessNLRequest",
                    id: 1
                  },
                  prefixContext: {
                    type: "ACContext",
                    id: 3
                  }
                }
              },
              ProcessNLIntentResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  intentType: {
                    type: "IntentType",
                    id: 4
                  },
                  shareIntent: {
                    type: "ShareIntent",
                    id: 5
                  },
                  pinIntent: {
                    type: "PinIntent",
                    id: 6
                  },
                  queryIntent: {
                    type: "QueryIntent",
                    id: 7
                  },
                  sortIntent: {
                    type: "SortIntent",
                    id: 8
                  },
                  chartIntent: {
                    type: "ChartIntent",
                    id: 9
                  },
                  addColumnIntent: {
                    type: "AddColumnIntent",
                    id: 10
                  }
                },
                nested: {
                  IntentType: {
                    values: {
                      SHARE: 0,
                      PIN: 1,
                      OPEN: 2,
                      NL_QUERY: 3,
                      SORT: 4,
                      DRILL: 5,
                      FILTER: 6,
                      CHART: 7,
                      ADD_COLUMN: 8,
                      NUM_INTENTS: 9
                    }
                  }
                }
              },
              SortIntent: {
                fields: {
                  token: {
                    type: "RecognizedToken",
                    id: 1
                  },
                  ascending: {
                    type: "bool",
                    id: 2,
                    options: {
                      "default": false
                    }
                  }
                }
              },
              AddColumnIntent: {
                fields: {
                  token: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  }
                }
              },
              ShareIntent: {
                fields: {
                  objectId: {
                    type: "string",
                    id: 1
                  },
                  objectType: {
                    type: "Object.Type",
                    id: 2
                  },
                  userName: {
                    rule: "repeated",
                    type: "string",
                    id: 3
                  }
                }
              },
              OpenIntent: {
                fields: {
                  objectId: {
                    type: "string",
                    id: 1
                  },
                  objectType: {
                    type: "Object.Type",
                    id: 2
                  }
                }
              },
              PinIntent: {
                fields: {
                  pinToObjectId: {
                    type: "string",
                    id: 1
                  }
                }
              },
              QueryIntent: {
                fields: {
                  nlResponse: {
                    type: "ProcessNLResponse",
                    id: 1
                  }
                }
              },
              ChartIntent: {
                fields: {
                  type: {
                    type: "ChartType",
                    id: 1
                  }
                },
                nested: {
                  ChartType: {
                    values: {
                      LINE: 1,
                      BAR: 2,
                      PIE: 3
                    }
                  }
                }
              },
              NLIncrementalQueryRequest: {
                fields: {
                  type: {
                    type: "NLIncrementalQueryType.E",
                    id: 1
                  },
                  editTable: {
                    type: "EditTableRequest",
                    id: 2
                  },
                  transformTable: {
                    type: "TransformTableRequest",
                    id: 3
                  },
                  nlIntentRequest: {
                    type: "ProcessNLIntentRequest",
                    id: 4
                  }
                }
              },
              NLIncrementalQueryResponse: {
                fields: {
                  type: {
                    type: "NLIncrementalQueryType.E",
                    id: 1
                  },
                  answerResponse: {
                    type: "AnswerResponse",
                    id: 2
                  },
                  nlIntentResponse: {
                    type: "ProcessNLIntentResponse",
                    id: 4
                  }
                }
              },
              NLIncrementalQueryDetails: {
                fields: {
                  request: {
                    type: "NLIncrementalQueryRequest",
                    id: 1
                  },
                  response: {
                    type: "NLIncrementalQueryResponse",
                    id: 2
                  }
                }
              },
              NLConversationRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  request: {
                    type: "NLIncrementalQueryRequest",
                    id: 2
                  },
                  suffixConversation: {
                    rule: "repeated",
                    type: "NLIncrementalQueryDetails",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "NLConversationRequest",
                    id: 1248,
                    extend: "common.RpcBlog"
                  }
                }
              },
              NLConversationResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  response: {
                    rule: "repeated",
                    type: "NLIncrementalQueryResponse",
                    id: 3
                  }
                }
              },
              QueryModificationSource: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      ADMIN_ADDED: 1,
                      QUERY_TEMPLATE_SOURCED: 2,
                      ENABLE_EXPLORATION: 3,
                      USAGE_BASED: 4,
                      PREVIOUSLY_SELECTED: 5
                    }
                  }
                }
              },
              FollowUpSuggestionType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      QUERY_MODIFICATION: 1,
                      GROUP_BY: 2,
                      AGGREGATION: 3,
                      FILTER: 4,
                      VERSUS: 5,
                      REPLACE_DATE_BUCKET: 6,
                      REPLACE_GROUP_BY: 7,
                      REPLACE_AGGREGATED_COLUMN: 8
                    }
                  }
                }
              },
              QueryModificationSuggestion: {
                fields: {
                  removePhrase: {
                    type: "RemovePhrase",
                    id: 1
                  },
                  addPhrase: {
                    rule: "repeated",
                    type: "AddPhrase",
                    id: 2
                  },
                  transform: {
                    type: "Transform",
                    id: 3
                  },
                  source: {
                    type: "QueryModificationSource.E",
                    id: 4
                  },
                  type: {
                    type: "FollowUpSuggestionType.E",
                    id: 5
                  },
                  followUpIdx: {
                    type: "int32",
                    id: 6
                  },
                  debugInfo: {
                    type: "DebugInfo",
                    id: 7
                  }
                },
                nested: {
                  Transform: {
                    fields: {
                      transform: {
                        rule: "repeated",
                        type: "QueryTransform",
                        id: 1
                      },
                      tokenDelta: {
                        type: "TokenDelta",
                        id: 3
                      },
                      token: {
                        rule: "repeated",
                        type: "RecognizedToken",
                        id: 2
                      }
                    },
                    nested: {
                      TokenDelta: {
                        fields: {
                          addedToken: {
                            rule: "repeated",
                            type: "RecognizedToken",
                            id: 1
                          },
                          removedToken: {
                            rule: "repeated",
                            type: "RecognizedToken",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  AddPhrase: {
                    fields: {
                      phraseToken: {
                        rule: "repeated",
                        type: "RecognizedToken",
                        id: 1
                      },
                      phraseType: {
                        type: "PhraseType.E",
                        id: 2
                      }
                    }
                  },
                  RemovePhrase: {
                    fields: {
                      phraseIdx: {
                        rule: "repeated",
                        type: "int32",
                        id: 1,
                        options: {
                          packed: false
                        }
                      }
                    }
                  },
                  DebugInfo: {
                    fields: {
                      totalScore: {
                        type: "double",
                        id: 1
                      },
                      scoreDetail: {
                        rule: "repeated",
                        type: "MatchedToken.UsageScoreDetail",
                        id: 2
                      }
                    }
                  }
                }
              },
              FollowUpSuggestionTypeInfo: {
                fields: {
                  suggestionType: {
                    type: "FollowUpSuggestionType.E",
                    id: 1
                  },
                  maxResults: {
                    type: "uint32",
                    id: 2
                  }
                }
              },
              FollowUpSuggestionRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  incidentId: {
                    type: "string",
                    id: 8
                  },
                  vizDetail: {
                    type: "SourceVizDetail",
                    id: 2
                  },
                  context: {
                    type: "ACContext",
                    id: 3
                  },
                  tableIdx: {
                    type: "int32",
                    id: 4
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 5
                  },
                  suggestionInfo: {
                    rule: "repeated",
                    type: "FollowUpSuggestionTypeInfo",
                    id: 6
                  },
                  suggestion: {
                    rule: "repeated",
                    type: "QueryModificationSuggestion",
                    id: 7
                  }
                },
                nested: {
                  rpcId: {
                    type: "FollowUpSuggestionRequest",
                    id: 1254,
                    extend: "common.RpcBlog"
                  },
                  SourceVizDetail: {
                    fields: {
                      vizId: {
                        type: "string",
                        id: 1
                      },
                      rowCount: {
                        type: "int64",
                        id: 4
                      },
                      chartDetail: {
                        type: "ChartDetail",
                        id: 5
                      },
                      visualizedColumns: {
                        rule: "repeated",
                        type: "string",
                        id: 6
                      }
                    },
                    nested: {
                      ChartDetail: {
                        fields: {
                          xAxis: {
                            rule: "repeated",
                            type: "string",
                            id: 2
                          },
                          yAxis: {
                            rule: "repeated",
                            type: "string",
                            id: 3
                          }
                        }
                      }
                    }
                  }
                }
              },
              FollowUpSuggestionResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  queryModificationSuggestion: {
                    rule: "repeated",
                    type: "QueryModificationSuggestion",
                    id: 4
                  },
                  columnsToFilter: {
                    rule: "repeated",
                    type: "string",
                    id: 5
                  },
                  context: {
                    type: "ACContext",
                    id: 6
                  }
                }
              },
              ACTableRequest: {
                fields: {
                  inputToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 1
                  },
                  incrementalRequest: {
                    type: "IncrementalRequest",
                    id: 10
                  },
                  currentlyEditedToken: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": -1
                    }
                  },
                  cursorOffsetInToken: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": -1
                    }
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 4
                  },
                  exactMatchOnly: {
                    type: "bool",
                    id: 6,
                    options: {
                      "default": false
                    }
                  },
                  endIndexForExactMatch: {
                    type: "int32",
                    id: 13,
                    options: {
                      "default": -1
                    }
                  },
                  maxJoinPaths: {
                    type: "int32",
                    id: 8,
                    options: {
                      "default": 100
                    }
                  },
                  maxCompletions: {
                    type: "int32",
                    id: 9,
                    options: {
                      "default": 10
                    }
                  },
                  objectSearchMaxResults: {
                    type: "int32",
                    id: 15,
                    options: {
                      "default": 10
                    }
                  },
                  isRowSecurityFormula: {
                    type: "bool",
                    id: 11,
                    options: {
                      "default": false
                    }
                  },
                  contextQueryRoot: {
                    rule: "repeated",
                    type: "string",
                    id: 12
                  },
                  previousRequestState: {
                    type: "PrevRequestState",
                    id: 17
                  },
                  bestEffortTokenization: {
                    type: "bool",
                    id: 18,
                    options: {
                      "default": false
                    }
                  },
                  contextId: {
                    type: "string",
                    id: 19
                  },
                  allowedPhraseTypes: {
                    rule: "repeated",
                    type: "PhraseType.E",
                    id: 20,
                    options: {
                      packed: false
                    }
                  },
                  deprecatedCompletionsWithKeywords: {
                    type: "bool",
                    id: 5
                  },
                  deprecatedSingleTokenCompletionsOnly: {
                    type: "bool",
                    id: 7
                  },
                  deprecatedAttributeCompletionsOnly: {
                    type: "bool",
                    id: 14
                  },
                  editRange: {
                    type: "WordRange",
                    id: 16
                  }
                },
                nested: {
                  PrevRequestState: {
                    fields: {
                      previousQueryCompletions: {
                        rule: "repeated",
                        type: "QueryCompletion",
                        id: 1
                      },
                      previousCompletionPosition: {
                        type: "int32",
                        id: 2
                      }
                    }
                  }
                }
              },
              ACTableResponse: {
                fields: {
                  header: {
                    type: "EntityHeader",
                    id: 1
                  },
                  newToken: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 2
                  },
                  languageCompletion: {
                    rule: "repeated",
                    type: "Completion",
                    id: 3
                  },
                  dataCompletion: {
                    rule: "repeated",
                    type: "Completion",
                    id: 4
                  },
                  queryCompletion: {
                    rule: "repeated",
                    type: "QueryCompletion",
                    id: 5
                  },
                  formulaCompletion: {
                    rule: "repeated",
                    type: "Completion",
                    id: 6
                  },
                  completionPosition: {
                    type: "int32",
                    id: 7,
                    options: {
                      "default": -1
                    }
                  },
                  uniqueCompletionUsedForQuery: {
                    type: "bool",
                    id: 8,
                    options: {
                      "default": false
                    }
                  },
                  formulaGhost: {
                    rule: "repeated",
                    type: "RecognizedToken",
                    id: 9
                  },
                  phrase: {
                    rule: "repeated",
                    type: "PhraseDefinition",
                    id: 10
                  },
                  joinPathAmbiguity: {
                    rule: "repeated",
                    type: "JoinPathCollection",
                    id: 11
                  },
                  accessibleTable: {
                    rule: "repeated",
                    type: "string",
                    id: 12
                  }
                }
              },
              ACJoinRequest: {
                fields: {
                  join: {
                    type: "ACJoin",
                    id: 1
                  },
                  leftIdx: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": -1
                    }
                  },
                  rightIdx: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": -1
                    }
                  }
                }
              },
              ACJoinResponse: {
                fields: {
                  completion: {
                    rule: "repeated",
                    type: "ACColumn",
                    id: 1
                  }
                }
              },
              ValidateContextRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  }
                },
                nested: {
                  rpcId: {
                    type: "ValidateContextRequest",
                    id: 1129,
                    extend: "common.RpcBlog"
                  }
                }
              },
              ValidateContextResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    type: "ACContext",
                    id: 4
                  }
                }
              },
              CleanupContextRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  }
                },
                nested: {
                  rpcId: {
                    type: "CleanupContextRequest",
                    id: 1130,
                    extend: "common.RpcBlog"
                  }
                }
              },
              CleanupContextResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    type: "ACContext",
                    id: 4
                  }
                }
              },
              RefreshGuidsRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  }
                },
                nested: {
                  rpcId: {
                    type: "RefreshGuidsRequest",
                    id: 1131,
                    extend: "common.RpcBlog"
                  }
                }
              },
              RefreshGuidsResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    type: "ACContext",
                    id: 4
                  }
                }
              },
              GetDataScopeRequest: {
                fields: {
                  authToken: {
                    type: "AuthToken",
                    id: 1
                  },
                  lastSeenVersion: {
                    type: "int32",
                    id: 2
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetDataScopeRequest",
                    id: 1144,
                    extend: "common.RpcBlog"
                  }
                }
              },
              GetDataScopeResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  table: {
                    rule: "repeated",
                    type: "DataScopeTable",
                    id: 3
                  },
                  version: {
                    type: "int32",
                    id: 4
                  },
                  buildingIndex: {
                    type: "bool",
                    id: 5
                  }
                }
              },
              GetAccessibleTablesRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  idx: {
                    type: "int32",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetAccessibleTablesRequest",
                    id: 1164,
                    extend: "common.RpcBlog"
                  }
                }
              },
              GetAccessibleTablesResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  table: {
                    rule: "repeated",
                    type: "string",
                    id: 4
                  }
                }
              },
              GetDrillDownColumnsRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  tableIdx: {
                    type: "int32",
                    id: 3
                  },
                  filterColumnOutputGuid: {
                    rule: "repeated",
                    type: "string",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetDrillDownColumnsRequest",
                    id: 1256,
                    extend: "common.RpcBlog"
                  }
                }
              },
              GetDrillDownColumnsResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  drillDownColumn: {
                    rule: "repeated",
                    type: "DrillDownColumn",
                    id: 4
                  }
                },
                nested: {
                  DrillDownColumn: {
                    fields: {
                      column: {
                        type: "EntityHeader",
                        id: 1
                      },
                      table: {
                        type: "EntityHeader",
                        id: 2
                      }
                    }
                  }
                }
              },
              PingRequest: {
                fields: {},
                nested: {
                  rpcId: {
                    type: "PingRequest",
                    id: 1146,
                    extend: "common.RpcBlog"
                  }
                }
              },
              PingResponse: {
                fields: {}
              },
              GetMetadataStatusRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetMetadataStatusRequest",
                    id: 1218,
                    extend: "common.RpcBlog"
                  }
                }
              },
              MetadataStatus: {
                fields: {
                  version: {
                    type: "int64",
                    id: 1
                  }
                }
              },
              GetMetadataStatusResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  metadataStatus: {
                    type: "MetadataStatus",
                    id: 4
                  }
                }
              },
              AddTableRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  table: {
                    type: "ACTableRequest",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "AddTableRequest",
                    id: 1132,
                    extend: "common.RpcBlog"
                  }
                }
              },
              EditTableRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  idx: {
                    type: "int32",
                    id: 3
                  },
                  table: {
                    type: "ACTableRequest",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "EditTableRequest",
                    id: 1133,
                    extend: "common.RpcBlog"
                  }
                }
              },
              DeleteTableRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  idx: {
                    type: "int32",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "DeleteTableRequest",
                    id: 1134,
                    extend: "common.RpcBlog"
                  }
                }
              },
              TransformTableRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  idx: {
                    type: "int32",
                    id: 3
                  },
                  transform: {
                    rule: "repeated",
                    type: "QueryTransform",
                    id: 4
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 5
                  }
                },
                nested: {
                  rpcId: {
                    type: "TransformTableRequest",
                    id: 1135,
                    extend: "common.RpcBlog"
                  }
                }
              },
              SaveFormulaRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  formula: {
                    type: "ACFormula",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "SaveFormulaRequest",
                    id: 1136,
                    extend: "common.RpcBlog"
                  }
                }
              },
              RemoveFormulaRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  formula: {
                    type: "ACFormula",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "RemoveFormulaRequest",
                    id: 1137,
                    extend: "common.RpcBlog"
                  }
                }
              },
              AddTableFilterRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  filterDefn: {
                    type: "ACFormula",
                    id: 2
                  },
                  tableGuid: {
                    type: "string",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "AddTableFilterRequest",
                    id: 1147,
                    extend: "common.RpcBlog"
                  }
                }
              },
              UpdateTableFilterRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  filterDefn: {
                    type: "ACFormula",
                    id: 2
                  },
                  tableFilter: {
                    type: "RecognizedToken",
                    id: 3
                  },
                  tableGuid: {
                    type: "string",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "UpdateTableFilterRequest",
                    id: 1148,
                    extend: "common.RpcBlog"
                  }
                }
              },
              AnswerResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    type: "ACContext",
                    id: 4
                  },
                  resp: {
                    type: "ACTableResponse",
                    id: 5
                  },
                  objectResult: {
                    rule: "repeated",
                    type: "Object",
                    id: 6
                  }
                }
              },
              TableFilterResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  addedFilter: {
                    type: "RecognizedToken",
                    id: 4
                  },
                  deprecatedFilterExpression: {
                    type: "bytes",
                    id: 5,
                    options: {
                      deprecated: true
                    }
                  },
                  joinPathAmbiguity: {
                    rule: "repeated",
                    type: "JoinPathCollection",
                    id: 6
                  },
                  filterExpression: {
                    type: "SageExpression",
                    id: 7
                  }
                }
              },
              UpdateWorksheetRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  worksheet: {
                    type: "ACTableRequest",
                    id: 2
                  },
                  context: {
                    type: "ACContext",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "UpdateWorksheetRequest",
                    id: 1138,
                    extend: "common.RpcBlog"
                  }
                }
              },
              TransformWorksheetRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  transform: {
                    rule: "repeated",
                    type: "QueryTransform",
                    id: 2
                  },
                  context: {
                    type: "ACContext",
                    id: 3
                  },
                  dataScope: {
                    type: "DataScope",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "TransformWorksheetRequest",
                    id: 1139,
                    extend: "common.RpcBlog"
                  }
                }
              },
              WorksheetResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  resp: {
                    type: "ACTableResponse",
                    id: 4
                  },
                  context: {
                    type: "ACContext",
                    id: 5
                  }
                }
              },
              UpdateFormulaRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  table: {
                    type: "ACTableRequest",
                    id: 3
                  },
                  formulaId: {
                    type: "string",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "UpdateFormulaRequest",
                    id: 1140,
                    extend: "common.RpcBlog"
                  }
                }
              },
              FormulaResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  table: {
                    type: "ACTable",
                    id: 4
                  },
                  resp: {
                    type: "ACTableResponse",
                    id: 5
                  }
                }
              },
              AddJoinRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  join: {
                    type: "ACJoinRequest",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "AddJoinRequest",
                    id: 1141,
                    extend: "common.RpcBlog"
                  }
                }
              },
              EditJoinRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  idx: {
                    type: "int32",
                    id: 3
                  },
                  join: {
                    type: "ACJoinRequest",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "EditJoinRequest",
                    id: 1142,
                    extend: "common.RpcBlog"
                  }
                }
              },
              DeleteJoinRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  idx: {
                    type: "int32",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "DeleteJoinRequest",
                    id: 1143,
                    extend: "common.RpcBlog"
                  }
                }
              },
              JoinResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    type: "ACContext",
                    id: 4
                  },
                  resp: {
                    type: "ACJoinResponse",
                    id: 5
                  }
                }
              },
              GetJoinTablesRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  sourceTable: {
                    type: "ACTable",
                    id: 3
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetJoinTablesRequest",
                    id: 1195,
                    extend: "common.RpcBlog"
                  }
                }
              },
              ColumnPair: {
                fields: {
                  sourceColumn: {
                    type: "string",
                    id: 1
                  },
                  targetColumn: {
                    type: "string",
                    id: 2
                  }
                }
              },
              GetJoinTablesResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  joinTables: {
                    rule: "repeated",
                    type: "JoinTable",
                    id: 4
                  }
                },
                nested: {
                  JoinTable: {
                    fields: {
                      table: {
                        type: "string",
                        id: 1
                      },
                      joinColumns: {
                        rule: "repeated",
                        type: "ColumnPair",
                        id: 2
                      }
                    }
                  }
                }
              },
              GetJoinColumnsRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  },
                  sourceTable: {
                    type: "ACTable",
                    id: 3
                  },
                  targetTable: {
                    type: "ACTable",
                    id: 4
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetJoinColumnsRequest",
                    id: 1194,
                    extend: "common.RpcBlog"
                  }
                }
              },
              GetJoinColumnsResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  joinColumns: {
                    rule: "repeated",
                    type: "ColumnPair",
                    id: 4
                  }
                }
              },
              UpgradeContextRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  context: {
                    type: "ACContext",
                    id: 2
                  }
                },
                nested: {
                  rpcId: {
                    type: "UpgradeContextRequest",
                    id: 1205,
                    extend: "common.RpcBlog"
                  }
                }
              },
              UpgradeContextResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  info: {
                    type: "ACResponseInfo",
                    id: 3
                  },
                  context: {
                    type: "ACContext",
                    id: 4
                  }
                }
              },
              EDocAliasDictionary: {
                fields: {
                  entry: {
                    rule: "repeated",
                    type: "Entry",
                    id: 1
                  }
                },
                nested: {
                  Entry: {
                    fields: {
                      alias: {
                        type: "string",
                        id: 1
                      },
                      guid: {
                        type: "string",
                        id: 2
                      }
                    }
                  }
                }
              },
              GetWorksheetFromEdocRequest: {
                fields: {
                  info: {
                    type: "ACRequestInfo",
                    id: 1
                  },
                  edoc: {
                    type: "scriptability.WorksheetEDocProto",
                    id: 2
                  },
                  tableAliasGuids: {
                    type: "EDocAliasDictionary",
                    id: 5
                  },
                  joinAliasGuids: {
                    type: "EDocAliasDictionary",
                    id: 6
                  },
                  columnAliasGuids: {
                    type: "EDocAliasDictionary",
                    id: 7
                  }
                },
                nested: {
                  rpcId: {
                    type: "GetWorksheetFromEdocRequest",
                    id: 1260,
                    extend: "common.RpcBlog"
                  }
                }
              },
              GetWorksheetFromEdocResponse: {
                fields: {
                  errorCode: {
                    type: "ErrorCode.E",
                    id: 1
                  },
                  errorMessage: {
                    type: "string",
                    id: 2
                  },
                  context: {
                    type: "ACContext",
                    id: 3
                  },
                  columnAliasOutputGuids: {
                    type: "EDocAliasDictionary",
                    id: 4
                  }
                }
              }
            }
          }
        }
      },
      MatchType: {
        fields: {},
        nested: {
          E: {
            values: {
              EXACT: 0,
              PREFIX: 1,
              WORD_PREFIX: 7,
              SUFFIX: 2,
              SUBSTRING: 3,
              APPROXIMATE: 4,
              APPROXIMATE_PREFIX: 5,
              PARTIAL_SUBSTRING: 6,
              EXACT_STEMMED: 8,
              UNDEFINED: 9
            }
          }
        }
      },
      KeyType: {
        fields: {},
        nested: {
          E: {
            values: {
              UNSTEMMED: 1,
              STEMMED: 2,
              MORPHED: 3,
              UNDEFINED: 4
            }
          }
        }
      },
      RequestType: {
        fields: {},
        nested: {
          E: {
            values: {
              CLASSIC: 1,
              ENLITE: 2
            }
          }
        }
      },
      SynonymSource: {
        fields: {},
        nested: {
          E: {
            values: {
              USER_DEFINED: 0,
              WORDNET: 1,
              SYNONYM_DICTIONARY: 2,
              NL_SYNONYM_DICTIONARY: 3,
              UNKNOWN: 4
            }
          }
        }
      },
      MatchedToken: {
        fields: {
          token: {
            type: "string",
            id: 1
          },
          type: {
            type: "string",
            id: 2
          },
          weight: {
            type: "double",
            id: 3,
            options: {
              "default": 0
            }
          },
          cardinalityScore: {
            type: "double",
            id: 4,
            options: {
              "default": 0
            }
          },
          usageScore: {
            type: "double",
            id: 5,
            options: {
              "default": 0
            }
          },
          matchType: {
            type: "MatchType.E",
            id: 6
          },
          keyType: {
            type: "KeyType.E",
            id: 8,
            options: {
              "default": "UNSTEMMED"
            }
          },
          autoGeneratedSynonym: {
            type: "bool",
            id: 7,
            options: {
              "default": false
            }
          },
          synonymSource: {
            type: "SynonymSource.E",
            id: 9,
            options: {
              "default": "UNKNOWN"
            }
          },
          usageFrequency: {
            type: "int32",
            id: 10
          },
          usageScoreDetail: {
            rule: "repeated",
            type: "UsageScoreDetail",
            id: 11
          }
        },
        nested: {
          UsageScoreDetail: {
            fields: {
              feature: {
                type: "string",
                id: 1
              },
              score: {
                type: "double",
                id: 2
              },
              boost: {
                type: "double",
                id: 3
              }
            }
          }
        }
      },
      EntityCategory: {
        fields: {},
        nested: {
          E: {
            values: {
              DEFAULT: 0,
              PERSON: 1,
              PLACE: 2,
              TIME: 3,
              MONEY: 4,
              PRODUCT: 5,
              ZIP_CODE: 6,
              LAT_LONG: 7,
              COMPANY_ORG: 8,
              NUM_TYPES: 9
            }
          }
        }
      },
      EntityHeader: {
        fields: {
          guid: {
            type: "string",
            id: 1,
            options: {
              "(common.sensitivity)": 0
            }
          },
          name: {
            type: "string",
            id: 2,
            options: {
              "(common.sensitivity)": 3
            }
          },
          description: {
            type: "string",
            id: 3,
            options: {
              "(common.sensitivity)": 3
            }
          },
          created: {
            type: "int64",
            id: 4,
            options: {
              "(common.sensitivity)": 0
            }
          },
          modified: {
            type: "int64",
            id: 5,
            options: {
              "(common.sensitivity)": 0
            }
          },
          indexVersion: {
            type: "int64",
            id: 6,
            options: {
              "(common.sensitivity)": 0
            }
          }
        }
      },
      SynonymProto: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          permittedUsers: {
            rule: "repeated",
            type: "EntityHeader",
            id: 2
          }
        }
      },
      AggregationLevel: {
        fields: {},
        nested: {
          E: {
            values: {
              AGGREGATE: 0,
              NON_AGGREGATE: 1
            }
          }
        }
      },
      FeatureScore: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          contribution: {
            type: "double",
            id: 2
          },
          weight: {
            type: "double",
            id: 3
          }
        }
      },
      MatchScore: {
        fields: {
          featureScore: {
            rule: "repeated",
            type: "FeatureScore",
            id: 1
          }
        }
      },
      ProviderType: {
        fields: {},
        nested: {
          E: {
            values: {
              USER_VIA_FRONT_END: 1,
              ADMIN_VIA_CLI: 2,
              ENLITE_REWRITERS: 3,
              NUM_TYPES: 4
            }
          }
        }
      },
      FeedbackType: {
        fields: {},
        nested: {
          E: {
            values: {
              ASSOCIATION: 1,
              SYNONYM: 2,
              NUM_TYPES: 3
            }
          }
        }
      },
      FeedbackScore: {
        fields: {
          positiveScore: {
            type: "double",
            id: 1
          },
          negativeScore: {
            type: "double",
            id: 2
          }
        }
      },
      SparseBitmapProto: {
        fields: {
          size: {
            type: "uint32",
            id: 1,
            options: {
              deprecated: true
            }
          },
          base: {
            type: "int32",
            id: 2,
            options: {
              deprecated: true
            }
          },
          data: {
            type: "bytes",
            id: 3
          },
          type: {
            type: "int32",
            id: 4
          },
          version: {
            type: "Version",
            id: 5,
            options: {
              "default": "V1"
            }
          }
        },
        nested: {
          Version: {
            values: {
              V1: 1,
              V2: 2,
              V3: 3
            }
          }
        }
      },
      AggregationType: {
        fields: {},
        nested: {
          E: {
            values: {
              NONE: 0,
              COUNT: 1,
              UNIQUE_COUNT: 2,
              SUM: 3,
              AVERAGE: 4,
              MIN: 5,
              MAX: 6,
              STD_DEVIATION: 7,
              VARIANCE: 8,
              AGGREGATE_DISTINCT: 9,
              RANK: 10,
              RANK_PERCENTILE: 11
            }
          }
        }
      },
      CompareTypeProto: {
        fields: {},
        nested: {
          E: {
            values: {
              EQ: 0,
              NE: 1,
              LT: 2,
              LE: 3,
              GT: 4,
              GE: 5,
              IN: 6,
              BW: 7,
              CONTAINS: 8,
              BEGINS_WITH: 9,
              ENDS_WITH: 10,
              BW_INC: 11,
              BW_INC_MIN: 12,
              BW_INC_MAX: 13,
              LIKE: 14
            }
          }
        }
      },
      TimeBucket: {
        fields: {},
        nested: {
          E: {
            values: {
              NO_BUCKET: 0,
              DAILY: 1,
              WEEKLY: 2,
              MONTHLY: 3,
              QUARTERLY: 4,
              YEARLY: 5,
              HOURLY: 6,
              AUTO: 8,
              HOUR_OF_DAY: 9,
              DAY_OF_WEEK: 7,
              DAY_OF_MONTH: 10,
              DAY_OF_QUARTER: 11,
              DAY_OF_YEAR: 12,
              WEEK_OF_MONTH: 13,
              WEEK_OF_QUARTER: 14,
              WEEK_OF_YEAR: 15,
              MONTH_OF_QUARTER: 16,
              MONTH_OF_YEAR: 17,
              QUARTER_OF_YEAR: 18
            }
          }
        }
      },
      TimeBucketQualifierProto: {
        fields: {},
        nested: {
          E: {
            values: {
              YEAR_OVER_YEAR: 0,
              QUARTER_OVER_QUARTER: 1,
              MONTH_OVER_MONTH: 2,
              WEEK_OVER_WEEK: 3,
              DAY_OVER_DAY: 4,
              NONE: 5
            }
          }
        }
      },
      TokenType: {
        fields: {},
        nested: {
          E: {
            values: {
              UNRECOGNIZED: 1,
              MEASURE: 2,
              ATTRIBUTE: 3,
              VALUE: 4,
              KEYWORD: 5,
              CALENDAR: 30,
              OPERATOR: 6,
              POSITIVE_INT: 7,
              SUBSTRING_VALUE: 8,
              PREFIX_VALUE: 9,
              SUFFIX_VALUE: 10,
              YEAR: 14,
              DATE_BUCKET: 17,
              FUNCTION_NAME: 22,
              DELIMITER: 23,
              FORMULA: 24,
              CONSTANT: 25,
              STOP_WORD: 26,
              SKIP_TOKEN: 27,
              TEMPLATE_ARG: 28,
              INCLUDE_FSM: 11,
              ANY: 18,
              END_FSM: 19,
              NAMED_PHRASE: 29,
              MAX_TYPE: 31,
              INTEGER: 12,
              DOUBLE: 13,
              STRING: 20,
              BOOL: 21,
              DATE: 15,
              TIME: 16
            }
          }
        }
      },
      PhraseType: {
        fields: {},
        nested: {
          E: {
            values: {
              AGGREGATED_COLUMN_PHRASE: 1,
              GROUP_BY_COLUMN_PHRASE: 2,
              FILTER_PHRASE: 3,
              HAVING_PHRASE: 4,
              TOP_BOTTOM_PHRASE: 5,
              GROWTH_PHRASE: 6,
              SORT_BY_PHRASE: 7,
              FOR_EACH_PHRASE: 8,
              SHOW_COLUMN_PHRASE: 9,
              AGGREGATED_ATTRIBUTE_VALUE_PHRASE: 10,
              FORMULA_PHRASE: 11,
              PIVOT_PHRASE: 12,
              GEOFILTER_PHRASE: 13,
              STOP_WORD_PHRASE: 14,
              SKIP_TOKEN_PHRASE: 15,
              VERSUS_SUBQUERY_PHRASE: 16,
              VERSUS_PHRASE: 17,
              BEGIN: 18,
              END: 19,
              FILTERED_COUNT_PHRASE: 20,
              DELIMITER_PHRASE: 21,
              IN_FILTER_PHRASE: 22,
              IN_FILTER_SUBQUERY_PHRASE: 23,
              CALENDAR_PHRASE: 24,
              UNDEFINED_PHRASE: 25
            }
          }
        }
      },
      I18nGroup: {
        fields: {},
        nested: {
          E: {
            values: {
              NONE: 0,
              DAY_OF_WEEK: 1,
              MONTH: 2,
              QUARTER: 3,
              DATE_FILTER: 4
            }
          }
        }
      },
      IndexType: {
        fields: {},
        nested: {
          E: {
            values: {
              DATA: 0,
              METADATA: 1
            }
          }
        }
      },
      IndexCategory: {
        fields: {},
        nested: {
          E: {
            values: {
              GLOBAL: 0,
              PERSONAL: 1,
              NUM_CATEGORY: 2
            }
          }
        }
      },
      PhysicalTableType: {
        fields: {},
        nested: {
          E: {
            values: {
              SYSTEM: 0,
              USER: 1,
              STATSDB: 2,
              NUM_TYPES: 3
            }
          }
        }
      },
      ColumnType: {
        fields: {},
        nested: {
          E: {
            values: {
              UNKNOWN: 0,
              ATTRIBUTE: 1,
              MEASURE: 2
            }
          }
        }
      },
      ColumnIndexType: {
        fields: {},
        nested: {
          E: {
            values: {
              DEFAULT: 0,
              DONT_INDEX: 1,
              PREFIX_ONLY: 2,
              PREFIX_AND_WORD_SUBSTRING: 3,
              PREFIX_AND_SUBSTRING: 4
            }
          }
        }
      },
      ColumnIndexTypeReason: {
        fields: {},
        nested: {
          E: {
            values: {
              USER: 0,
              EXCEEDED_MAX_DEFAULT_CARDINALITY: 1,
              EXCEEDED_MAX_GLOBAL_CARDINALITY: 2,
              FALCON_DATA_TYPE_NOT_CHAR: 3,
              EXCEEDED_MAX_LONG_TOKENS: 4,
              IGNORE_RELEVANCE: 5,
              ENTITY_DETECTED: 6,
              DATA_SCORE: 7
            }
          }
        }
      },
      ColumnIndexSourceType: {
        fields: {},
        nested: {
          E: {
            values: {
              FALCON_QUERY: 0,
              INLINE_VALUES: 1,
              RLS_AWARE_FALCON_QUERY: 2,
              RLS_AWARE_EXTERNAL_QUERY: 3
            }
          }
        }
      },
      LogicalTableType: {
        fields: {},
        nested: {
          E: {
            values: {
              ONE_TO_ONE: 0,
              WORKSHEET: 1,
              USER_TABLE: 2,
              NUM_TYPES: 3
            }
          }
        }
      },
      NLQueryComplexity: {
        fields: {},
        nested: {
          E: {
            values: {
              SIMPLE: 0,
              COMPLEX: 1,
              UNKNOWN: 2
            }
          }
        }
      },
      NLQueryClassificationInfo: {
        fields: {
          queryComplexity: {
            type: "NLQueryComplexity.E",
            id: 1
          },
          confidenceScore: {
            type: "double",
            id: 2
          }
        }
      },
      DateFilterProto: {
        fields: {
          type: {
            type: "DateFilterType",
            id: 1
          },
          datePeriod: {
            type: "DatePeriod",
            id: 2
          },
          yearName: {
            type: "string",
            id: 12
          },
          quarterName: {
            type: "string",
            id: 13
          },
          monthName: {
            type: "string",
            id: 14
          },
          weekDayName: {
            type: "string",
            id: 15
          },
          number: {
            type: "int32",
            id: 7
          },
          epoch: {
            type: "int64",
            id: 8,
            options: {
              "default": -1
            }
          },
          op: {
            type: "CompareTypeProto.E",
            id: 9
          },
          dateRange: {
            type: "DateRange",
            id: 10
          },
          forEachPeriod: {
            type: "DatePeriod",
            id: 11,
            options: {
              "default": "NUM_DATE_PERIODS"
            }
          },
          year: {
            type: "int32",
            id: 3,
            options: {
              "default": -1
            }
          },
          quarter: {
            type: "Quarter",
            id: 4,
            options: {
              "default": "NUM_QUARTERS"
            }
          },
          month: {
            type: "Month",
            id: 5,
            options: {
              "default": "NUM_MONTHS"
            }
          },
          weekDay: {
            type: "WeekDay",
            id: 6,
            options: {
              "default": "NUM_WEEK_DAYS"
            }
          }
        },
        nested: {
          DatePeriod: {
            values: {
              DAY: 0,
              WEEK: 1,
              MONTH: 2,
              QUARTER: 3,
              YEAR: 4,
              HOUR: 5,
              MINUTE: 6,
              SECOND: 7,
              NUM_DATE_PERIODS: 8
            }
          },
          Quarter: {
            values: {
              Q1: 0,
              Q2: 1,
              Q3: 2,
              Q4: 3,
              NUM_QUARTERS: 4
            }
          },
          Month: {
            values: {
              JANUARY: 0,
              FEBRUARY: 1,
              MARCH: 2,
              APRIL: 3,
              MAY: 4,
              JUNE: 5,
              JULY: 6,
              AUGUST: 7,
              SEPTEMBER: 8,
              OCTOBER: 9,
              NOVEMBER: 10,
              DECEMBER: 11,
              NUM_MONTHS: 12
            }
          },
          WeekDay: {
            values: {
              MONDAY: 0,
              TUESDAY: 1,
              WEDNESDAY: 2,
              THURSDAY: 3,
              FRIDAY: 4,
              SATURDAY: 5,
              SUNDAY: 6,
              NUM_WEEK_DAYS: 7
            }
          },
          DateFilterType: {
            values: {
              YESTERDAY: 0,
              TODAY: 1,
              TOMORROW: 18,
              LAST_PERIOD: 2,
              LAST_N_PERIOD: 3,
              PERIOD_TO_DATE: 4,
              YEAR_ONLY: 5,
              QUARTER_YEAR: 6,
              QUARTER_ONLY: 20,
              MONTH_ONLY: 7,
              WEEKDAY_ONLY: 8,
              MONTH_YEAR: 9,
              N_PERIOD_AGO: 10,
              THIS_PERIOD: 13,
              NEXT_PERIOD: 14,
              NEXT_N_PERIOD: 17,
              EXACT_DATE: 11,
              EXACT_TIME: 19,
              EXACT_DATE_TIME: 12,
              NOW: 15,
              EXACT_DATE_RANGE: 16,
              PERIOD_ONLY: 21,
              NUM_DATE_FILTERS: 22
            }
          },
          DateRange: {
            fields: {
              lowEpoch: {
                type: "int64",
                id: 1
              },
              highEpoch: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      JoinProto: {
        fields: {
          id: {
            type: "EntityHeader",
            id: 1
          },
          source: {
            type: "EntityHeader",
            id: 2
          },
          destination: {
            type: "EntityHeader",
            id: 3
          },
          joinType: {
            type: "JoinType",
            id: 4,
            options: {
              "default": "INNER",
              "(common.sensitivity)": 0
            }
          },
          sourceColumn: {
            rule: "repeated",
            type: "EntityHeader",
            id: 5
          },
          destColumn: {
            rule: "repeated",
            type: "EntityHeader",
            id: 6
          },
          joinNulls: {
            type: "bool",
            id: 7,
            options: {
              "(common.sensitivity)": 0
            }
          },
          oneToOne: {
            type: "bool",
            id: 8
          }
        },
        nested: {
          JoinType: {
            values: {
              INNER: 0,
              FULL_OUTER: 1,
              LEFT_OUTER: 2,
              RIGHT_OUTER: 3,
              CROSS: 4
            }
          }
        }
      },
      JoinPathProto: {
        fields: {
          id: {
            type: "EntityHeader",
            id: 6
          },
          rootTable: {
            type: "EntityHeader",
            id: 1
          },
          join: {
            rule: "repeated",
            type: "JoinProto",
            id: 5
          },
          leafTable: {
            type: "EntityHeader",
            id: 3
          },
          isConnected: {
            type: "bool",
            id: 4,
            options: {
              "default": true,
              "(common.sensitivity)": 0
            }
          },
          joins: {
            rule: "repeated",
            type: "EntityHeader",
            id: 2,
            options: {
              deprecated: true
            }
          }
        }
      },
      Column: {
        fields: {
          id: {
            type: "EntityHeader",
            id: 1
          },
          table: {
            type: "EntityHeader",
            id: 2
          },
          joinPaths: {
            rule: "repeated",
            type: "JoinPathProto",
            id: 3
          }
        }
      },
      SageExpression: {
        fields: {
          exprClass: {
            type: "ExpressionClass",
            id: 1,
            options: {
              "(common.sensitivity)": 0
            }
          },
          constant: {
            type: "Constant",
            id: 3
          },
          column: {
            type: "Column",
            id: 4
          },
          "function": {
            type: "Function",
            id: 7
          },
          variable: {
            type: "Variable",
            id: 10
          },
          exprRef: {
            type: "ExpressionRef",
            id: 11
          },
          dataType: {
            type: "falcon.DataType.E",
            id: 8,
            options: {
              "(common.sensitivity)": 0
            }
          },
          formatingType: {
            type: "common.FormatingType.E",
            id: 9,
            options: {
              "(common.sensitivity)": 0
            }
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ],
        nested: {
          ExpressionClass: {
            values: {
              EXPR_CONSTANT: 0,
              EXPR_COLUMN: 1,
              EXPR_FUNCTION: 2,
              EXPR_VARIABLE: 3
            }
          },
          Constant: {
            fields: {
              strValue: {
                type: "string",
                id: 1,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              intValue: {
                type: "int64",
                id: 2,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              doubleValue: {
                type: "double",
                id: 3,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              dateEpochValue: {
                type: "int64",
                id: 4,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              boolValue: {
                type: "bool",
                id: 5,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              isNull: {
                type: "bool",
                id: 6,
                options: {
                  "default": false,
                  "(common.sensitivity)": 0
                }
              },
              normalize: {
                type: "bool",
                id: 7,
                options: {
                  "default": true,
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          Function: {
            fields: {
              name: {
                type: "string",
                id: 1,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              "arguments": {
                rule: "repeated",
                type: "SageExpression",
                id: 2
              },
              isAggregate: {
                type: "bool",
                id: 3,
                options: {
                  "default": false,
                  "(common.sensitivity)": 0
                }
              },
              hasVarargs: {
                type: "bool",
                id: 4,
                options: {
                  "default": false,
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          Variable: {
            fields: {
              id: {
                type: "EntityHeader",
                id: 1
              },
              value: {
                type: "SageExpression",
                id: 2
              },
              isDefault: {
                type: "bool",
                id: 3,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          ExpressionRef: {
            fields: {
              refId: {
                type: "EntityHeader",
                id: 1
              }
            }
          }
        }
      },
      SageExpressionInternal: {
        fields: {
          columnType: {
            type: "ColumnType.E",
            id: 1,
            options: {
              "default": "UNKNOWN",
              "(common.sensitivity)": 0
            }
          }
        },
        nested: {
          internal: {
            type: "SageExpressionInternal",
            id: 1000,
            extend: "SageExpression"
          }
        }
      },
      nlp: {
        nested: {
          Language: {
            values: {
              English: 1,
              Unknown: 2
            }
          },
          NlpText: {
            fields: {
              rawText: {
                type: "string",
                id: 1
              },
              sentence: {
                rule: "repeated",
                type: "SentenceProto",
                id: 2
              }
            }
          },
          POSTag: {
            fields: {},
            nested: {
              E: {
                values: {
                  NOUN: 1,
                  PRONOUN: 2,
                  PREPOSITION: 3,
                  ADJECTIVE: 4,
                  ADJECTIVE_SUPERLATIVE: 5,
                  ADJECTIVE_COMPARATIVE: 6,
                  ADVERB: 7,
                  ADVERB_COMPARATIVE: 8,
                  ADVERB_SUPERLATIVE: 9,
                  VERB: 10,
                  PREDETERMINER: 11,
                  CARDINAL_NUMBER: 12,
                  IGNORE: 13,
                  UNDEFINED: 14
                }
              }
            }
          },
          ParseLabel: {
            fields: {},
            nested: {
              E: {
                values: {
                  advcl: 0,
                  advmod: 1,
                  amod: 2,
                  aux: 3,
                  auxpass: 4,
                  cc: 5,
                  ccomp: 6,
                  conj: 7,
                  cop: 8,
                  csubj: 9,
                  dep: 10,
                  det: 11,
                  dobj: 12,
                  expl: 13,
                  infmod: 14,
                  iobj: 15,
                  mark: 16,
                  mwe: 17,
                  neg: 18,
                  nn: 19,
                  npadvmod: 20,
                  nsubj: 21,
                  nsubjpass: 22,
                  num: 23,
                  number: 24,
                  partmod: 25,
                  pcomp: 26,
                  pobj: 27,
                  poss: 28,
                  possessive: 29,
                  predet: 30,
                  prep: 31,
                  prt: 32,
                  punct: 33,
                  quantmod: 34,
                  rcmod: 35,
                  ROOT: 36,
                  tmod: 37,
                  OTHER: 38
                }
              }
            }
          },
          Token: {
            fields: {
              rawText: {
                type: "string",
                id: 1
              },
              posTag: {
                type: "POSTag.E",
                id: 2
              },
              rawPosTag: {
                type: "string",
                id: 6
              },
              parentIndex: {
                type: "int32",
                id: 3
              },
              relation: {
                type: "string",
                id: 4
              },
              wordIndex: {
                type: "int32",
                id: 5
              },
              isBound: {
                type: "bool",
                id: 7
              }
            }
          },
          SentenceProto: {
            fields: {
              token: {
                rule: "repeated",
                type: "Token",
                id: 1
              },
              rawText: {
                type: "string",
                id: 4
              }
            }
          },
          SentenceTranslation: {
            fields: {
              utterance: {
                type: "string",
                id: 1
              },
              sentenceProto: {
                type: "SentenceProto",
                id: 2
              }
            }
          },
          TranslationCache: {
            fields: {
              translation: {
                rule: "repeated",
                type: "SentenceTranslation",
                id: 1
              }
            }
          }
        }
      },
      NLTokenType: {
        fields: {},
        nested: {
          E: {
            values: {
              MEASURE: 0,
              ATTRIBUTE: 1,
              FILTER: 2,
              AGGREGATE: 3,
              KEYWORD: 4,
              NUM_TYPES: 5
            }
          }
        }
      },
      NLTokenMetadata: {
        fields: {
          canonicalName: {
            type: "string",
            id: 1
          },
          table: {
            type: "EntityHeader",
            id: 2
          }
        }
      },
      NLToken: {
        fields: {
          text: {
            type: "string",
            id: 1
          },
          type: {
            type: "NLTokenType.E",
            id: 2
          },
          metadata: {
            type: "NLTokenMetadata",
            id: 3
          }
        }
      },
      NLPhraseTemplate: {
        fields: {
          token: {
            rule: "repeated",
            type: "NLToken",
            id: 1
          }
        }
      },
      NLTemplate: {
        fields: {
          phraseTemplate: {
            rule: "repeated",
            type: "NLPhraseTemplate",
            id: 1
          },
          description: {
            type: "string",
            id: 2
          }
        }
      },
      NLTemplatePair: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          template: {
            type: "NLTemplate",
            id: 2
          }
        }
      },
      NLTemplates: {
        fields: {
          templatePair: {
            rule: "repeated",
            type: "NLTemplate",
            id: 1
          }
        }
      },
      QVSpecProto: {
        fields: {
          table: {
            rule: "repeated",
            type: "QVTableProto",
            id: 1
          },
          terminalQuery: {
            rule: "repeated",
            type: "EntityHeader",
            id: 2
          }
        }
      },
      QVTableProto: {
        fields: {
          id: {
            type: "EntityHeader",
            id: 1
          },
          type: {
            type: "TableType",
            id: 2
          },
          join: {
            rule: "repeated",
            type: "JoinProto",
            id: 3
          },
          column: {
            rule: "repeated",
            type: "QVColumnProto",
            id: 4
          },
          filter: {
            rule: "repeated",
            type: "QVFilterProto",
            id: 5
          },
          rowLimit: {
            type: "int32",
            id: 6
          }
        },
        nested: {
          TableType: {
            values: {
              UNKNOWN: 0,
              BASE_TABLE: 1,
              WORKSHEET: 2,
              AGG_WORKSHEET: 3,
              QUERY_TABLE: 4
            }
          }
        }
      },
      ColumnLineage: {
        fields: {
          tableId: {
            type: "EntityHeader",
            id: 1
          },
          columnId: {
            type: "EntityHeader",
            id: 2
          }
        }
      },
      QVColumnProto: {
        fields: {
          id: {
            type: "EntityHeader",
            id: 1
          },
          property: {
            rule: "repeated",
            type: "Property",
            id: 2,
            options: {
              packed: false
            }
          },
          lineage: {
            rule: "repeated",
            type: "ColumnLineage",
            id: 3
          },
          type: {
            type: "ColumnType.E",
            id: 4
          },
          dataType: {
            type: "falcon.DataType.E",
            id: 5
          }
        },
        nested: {
          Property: {
            values: {
              GROWTH_DIMENSION: 1,
              IS_GROUPING: 2,
              SORT_ASCENDING: 3,
              SORT_DESCENDING: 4,
              IS_FORMULA: 5,
              IS_OUTPUT: 6
            }
          }
        }
      },
      QVFilterProto: {
        fields: {
          id: {
            type: "EntityHeader",
            id: 1
          },
          property: {
            rule: "repeated",
            type: "Property",
            id: 2,
            options: {
              packed: false
            }
          },
          lineage: {
            rule: "repeated",
            type: "ColumnLineage",
            id: 3
          }
        },
        nested: {
          Property: {
            values: {
              INCLUDE_NULL: 1,
              IS_FORMULA: 2,
              IS_DATE_FILTER: 3
            }
          }
        }
      },
      VisualizationAnalysisRequest: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          visualizationQuery: {
            type: "callosum.VisualizationQueryProto",
            id: 2
          },
          selectedToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 3
          },
          analysisId: {
            type: "string",
            id: 4
          },
          sendEmail: {
            type: "bool",
            id: 5,
            options: {
              "default": true
            }
          },
          param: {
            type: "AnalysisParam",
            id: 6
          },
          excludedToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 7
          },
          analyzeCurrentData: {
            type: "CurrentDataOptions",
            id: 8,
            options: {
              "default": "INCLUDE"
            }
          },
          locale: {
            type: "string",
            id: 9,
            options: {
              "default": "en_US.utf8"
            }
          },
          dataPoint: {
            rule: "repeated",
            type: "sage.AnalysisAlgorithm.DataPoint",
            id: 10
          }
        },
        nested: {
          rpcId: {
            type: "VisualizationAnalysisRequest",
            id: 1178,
            extend: "common.RpcBlog"
          },
          CurrentDataOptions: {
            values: {
              EXCLUDE: 1,
              INCLUDE: 2,
              CURRENT_ONLY: 3
            }
          }
        }
      },
      VisualizationAnalysisResponse: {
        fields: {
          pinboardId: {
            type: "string",
            id: 1
          }
        }
      },
      RelatedQueriesRequest: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          context: {
            type: "sage.auto_complete.v2.ACContext",
            id: 2
          },
          tableIndex: {
            type: "int32",
            id: 3
          },
          locale: {
            type: "string",
            id: 4,
            options: {
              "default": "en_US.utf8"
            }
          }
        },
        nested: {
          rpcId: {
            type: "RelatedQueriesRequest",
            id: 1221,
            extend: "common.RpcBlog"
          }
        }
      },
      RelatedQueriesResponse: {
        fields: {
          queryDetails: {
            rule: "repeated",
            type: "QueryDetails",
            id: 1
          },
          tableIndex: {
            type: "int32",
            id: 2
          }
        },
        nested: {
          QueryDetails: {
            fields: {
              context: {
                type: "sage.auto_complete.v2.ACContext",
                id: 1
              },
              title: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      RelatedInsightsRequest: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          context: {
            type: "sage.auto_complete.v2.ACContext",
            id: 2
          },
          tableIndex: {
            type: "int32",
            id: 3
          },
          analysisDepth: {
            type: "int32",
            id: 4,
            options: {
              "default": 1
            }
          },
          locale: {
            type: "string",
            id: 5,
            options: {
              "default": "en_US.utf8"
            }
          },
          tableGuid: {
            type: "string",
            id: 6
          }
        },
        nested: {
          rpcId: {
            type: "RelatedInsightsRequest",
            id: 1222,
            extend: "common.RpcBlog"
          }
        }
      },
      RelatedInsightsResponse: {
        fields: {
          visualizationQuery: {
            rule: "repeated",
            type: "callosum.VisualizationQueryProto",
            id: 1
          }
        }
      },
      DataAnalysisRequest: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          visualizationQuery: {
            type: "callosum.VisualizationQueryProto",
            id: 2
          },
          sageOutputColumnId: {
            rule: "repeated",
            type: "string",
            id: 3
          },
          dataRow: {
            rule: "repeated",
            type: "callosum.DataRow",
            id: 4
          },
          selectedToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 5
          },
          analysisId: {
            type: "string",
            id: 6
          },
          sendEmail: {
            type: "bool",
            id: 7,
            options: {
              "default": true
            }
          },
          param: {
            type: "AnalysisParam",
            id: 8
          },
          excludedToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 9
          },
          locale: {
            type: "string",
            id: 10,
            options: {
              "default": "en_US.utf8"
            }
          }
        },
        nested: {
          rpcId: {
            type: "DataAnalysisRequest",
            id: 1179,
            extend: "common.RpcBlog"
          }
        }
      },
      DataAnalysisResponse: {
        fields: {
          pinboardId: {
            type: "string",
            id: 1
          }
        }
      },
      AnomalyExplanationAnalysisRequest: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          visualizationQuery: {
            type: "callosum.VisualizationQueryProto",
            id: 2
          },
          dataPoint: {
            rule: "repeated",
            type: "sage.AnalysisAlgorithm.DataPoint",
            id: 3
          },
          selectedToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 4
          },
          analysisId: {
            type: "string",
            id: 5
          },
          sendEmail: {
            type: "bool",
            id: 6,
            options: {
              "default": true
            }
          },
          param: {
            type: "AnalysisParam",
            id: 7
          },
          excludedToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 8
          },
          analyzeCurrentData: {
            type: "VisualizationAnalysisRequest.CurrentDataOptions",
            id: 9,
            options: {
              "default": "INCLUDE"
            }
          },
          locale: {
            type: "string",
            id: 10,
            options: {
              "default": "en_US.utf8"
            }
          },
          explorationType: {
            type: "ExplorationType",
            id: 11
          }
        },
        nested: {
          rpcId: {
            type: "AnomalyExplanationAnalysisRequest",
            id: 1250,
            extend: "common.RpcBlog"
          },
          ExplorationType: {
            values: {
              UNKNOWN: 1,
              ANOMALY_EXPLANATION: 2,
              CLASSIFICATION: 3
            }
          }
        }
      },
      AnomalyExplanationAnalysisResponse: {
        fields: {
          pinboardId: {
            type: "string",
            id: 1
          }
        }
      },
      TableAnalysisRequest: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          tableGuid: {
            type: "string",
            id: 2
          },
          selectedColumn: {
            rule: "repeated",
            type: "string",
            id: 3
          },
          analysisId: {
            type: "string",
            id: 4
          },
          sendEmail: {
            type: "bool",
            id: 5,
            options: {
              "default": true
            }
          },
          param: {
            type: "AnalysisParam",
            id: 6
          },
          excludedColumn: {
            rule: "repeated",
            type: "string",
            id: 7
          },
          tableName: {
            type: "string",
            id: 8
          },
          isWorksheet: {
            type: "bool",
            id: 9,
            options: {
              "default": false
            }
          },
          initialDelaySeconds: {
            type: "int32",
            id: 10,
            options: {
              "default": 0
            }
          },
          locale: {
            type: "string",
            id: 11,
            options: {
              "default": "en_US.utf8"
            }
          }
        },
        nested: {
          rpcId: {
            type: "TableAnalysisRequest",
            id: 1190,
            extend: "common.RpcBlog"
          }
        }
      },
      TableAnalysisResponse: {
        fields: {
          pinboardId: {
            type: "string",
            id: 1
          }
        }
      },
      A3AnalysisType: {
        fields: {},
        nested: {
          E: {
            values: {
              UNKNOWN: 0,
              VISUALIZATION: 1,
              DATA: 2,
              TABLE: 3,
              ANOMALY_EXPLANATION: 4
            }
          }
        }
      },
      ChangeDescription: {
        fields: {
          measureName: {
            type: "string",
            id: 1
          },
          firstAggregate: {
            type: "string",
            id: 2
          },
          secondAggregate: {
            type: "string",
            id: 3
          },
          percentChange: {
            type: "string",
            id: 4
          },
          firstValueList: {
            type: "string",
            id: 5
          },
          secondValueList: {
            type: "string",
            id: 6
          }
        }
      },
      AnalysisFacts: {
        fields: {
          rowsProcessed: {
            type: "sint64",
            id: 1
          },
          durationMs: {
            type: "sint64",
            id: 2
          },
          measures: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 3
          },
          drillAttributes: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 4
          },
          explanation: {
            type: "string",
            id: 5
          },
          insightExplanation: {
            rule: "repeated",
            type: "sage.A3InsightExplanation",
            id: 6
          },
          analysisExplanation: {
            type: "sage.A3AnalysisExplanation",
            id: 7
          },
          changeDescription: {
            type: "ChangeDescription",
            id: 8
          }
        }
      },
      AnomalyInsightNlgProto: {
        fields: {
          measureAggregation: {
            type: "sage.AggregationType.E",
            id: 1
          },
          measureName: {
            type: "string",
            id: 2
          },
          drillAttributeName: {
            type: "string",
            id: 3
          },
          attributeFilters: {
            rule: "repeated",
            type: "QueryAttributeFilters",
            id: 4
          },
          drillAttributeValues: {
            rule: "repeated",
            type: "string",
            id: 5
          },
          anomalyValues: {
            type: "int32",
            id: 6,
            options: {
              "default": 0
            }
          },
          totalValues: {
            type: "int64",
            id: 7,
            options: {
              "default": 0
            }
          },
          score: {
            type: "float",
            id: 8,
            options: {
              "default": 0
            }
          }
        },
        nested: {
          QueryAttributeFilters: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      TrendInsightNlgProto: {
        fields: {
          measureAggregation: {
            type: "sage.AggregationType.E",
            id: 1
          },
          measureName: {
            type: "string",
            id: 2
          },
          drillAttribute: {
            type: "string",
            id: 3
          },
          attributeFilters: {
            rule: "repeated",
            type: "QueryAttributeFilters",
            id: 4
          },
          isTrendingUp: {
            type: "bool",
            id: 5,
            options: {
              "default": true
            }
          },
          score: {
            type: "float",
            id: 6,
            options: {
              "default": 0
            }
          },
          pValue: {
            type: "float",
            id: 7,
            options: {
              "default": 0
            }
          }
        },
        nested: {
          QueryAttributeFilters: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      CrossCorrelationInsightNlgProto: {
        fields: {
          measure1Aggregation: {
            type: "sage.AggregationType.E",
            id: 1
          },
          measure1Name: {
            type: "string",
            id: 2
          },
          measure2Aggregation: {
            type: "sage.AggregationType.E",
            id: 3
          },
          measure2Name: {
            type: "string",
            id: 4
          },
          drillAttribute: {
            type: "string",
            id: 5
          },
          correlationPercentage: {
            type: "float",
            id: 6,
            options: {
              "default": 0
            }
          },
          lag: {
            type: "int32",
            id: 7,
            options: {
              "default": 0
            }
          },
          lagUnit: {
            type: "sage.TimeBucket.E",
            id: 8
          }
        }
      },
      DiffInsightNlgProto: {
        fields: {
          measureAggregation: {
            type: "sage.AggregationType.E",
            id: 1
          },
          measureName: {
            type: "string",
            id: 2
          },
          drillAttribute: {
            type: "string",
            id: 3
          },
          anomalyValues: {
            type: "int32",
            id: 4,
            options: {
              "default": 0
            }
          },
          totalValues: {
            type: "int64",
            id: 5,
            options: {
              "default": 0
            }
          },
          largestShareValues: {
            rule: "repeated",
            type: "string",
            id: 6
          },
          percentage: {
            type: "float",
            id: 7,
            options: {
              "default": 0
            }
          }
        }
      },
      A3Request: {
        fields: {
          visualizationAnalysis: {
            type: "VisualizationAnalysisRequest",
            id: 1
          },
          dataAnalysis: {
            type: "DataAnalysisRequest",
            id: 2
          },
          tableAnalysis: {
            type: "TableAnalysisRequest",
            id: 3
          },
          type: {
            type: "A3AnalysisType.E",
            id: 4
          },
          analysisId: {
            type: "string",
            id: 5
          },
          title: {
            type: "string",
            id: 6
          },
          anomalyExplanationAnalysis: {
            type: "AnomalyExplanationAnalysisRequest",
            id: 7
          }
        },
        nested: {
          rpcId: {
            type: "A3Request",
            id: 1212,
            extend: "common.RpcBlog"
          }
        }
      },
      A3SuggestedColumnsRequest: {
        fields: {
          a3Request: {
            type: "A3Request",
            id: 1
          },
          editTable: {
            type: "sage.auto_complete.v2.EditTableRequest",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "A3SuggestedColumnsRequest",
            id: 1255,
            extend: "common.RpcBlog"
          }
        }
      },
      A3Response: {
        fields: {
          visualizationAnalysis: {
            type: "VisualizationAnalysisResponse",
            id: 1
          },
          dataAnalysis: {
            type: "DataAnalysisResponse",
            id: 2
          },
          tableAnalysis: {
            type: "TableAnalysisResponse",
            id: 3
          },
          type: {
            type: "A3AnalysisType.E",
            id: 4
          },
          anomalyExplanationAnalysis: {
            type: "AnomalyExplanationAnalysisResponse",
            id: 5
          }
        }
      },
      A3AnalysisStatusRequest: {
        fields: {
          analysisId: {
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "A3AnalysisStatusRequest",
            id: 1213,
            extend: "common.RpcBlog"
          }
        }
      },
      A3AnalysisStatusResponse: {
        fields: {
          analysisId: {
            type: "string",
            id: 1
          },
          analysisStatus: {
            type: "A3AnalysisStatus",
            id: 2
          },
          response: {
            type: "A3Response",
            id: 3
          },
          timelyJobId: {
            type: "string",
            id: 4
          }
        }
      },
      A3AnalysisCancelRequest: {
        fields: {
          analysisId: {
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "A3AnalysisCancelRequest",
            id: 1214,
            extend: "common.RpcBlog"
          }
        }
      },
      A3AnalysisCancelResponse: {
        fields: {
          analysisId: {
            type: "string",
            id: 1
          },
          analysisStatus: {
            type: "A3AnalysisStatus",
            id: 2
          },
          response: {
            type: "A3Response",
            id: 3
          }
        }
      },
      AutoAwesomeService: {
        options: {
          "(net.rpc.RpcOptions.service).thrift.protocol_type": "JSON"
        },
        methods: {
          VisualizationAnalysis: {
            requestType: "VisualizationAnalysisRequest",
            responseType: "VisualizationAnalysisResponse"
          },
          DataAnalysis: {
            requestType: "DataAnalysisRequest",
            responseType: "DataAnalysisResponse"
          },
          TableAnalysis: {
            requestType: "TableAnalysisRequest",
            responseType: "TableAnalysisResponse"
          },
          AnomalyExplanationAnalysis: {
            requestType: "AnomalyExplanationAnalysisRequest",
            responseType: "AnomalyExplanationAnalysisResponse"
          },
          GetRelatedQueries: {
            requestType: "RelatedQueriesRequest",
            responseType: "RelatedQueriesResponse"
          },
          GetRelatedInsights: {
            requestType: "RelatedInsightsRequest",
            responseType: "RelatedInsightsResponse"
          },
          A3Analysis: {
            requestType: "A3Request",
            responseType: "A3AnalysisStatusResponse"
          },
          A3AnalysisStatus: {
            requestType: "A3AnalysisStatusRequest",
            responseType: "A3AnalysisStatusResponse"
          },
          A3AnalysisCancel: {
            requestType: "A3AnalysisCancelRequest",
            responseType: "A3AnalysisCancelResponse"
          }
        }
      },
      DrillExplanation: {
        fields: {
          measure: {
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 1
          },
          attribute: {
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 2
          },
          totalGroupsAnalyzed: {
            type: "int64",
            id: 3
          },
          totalInsightsGenerated: {
            type: "int64",
            id: 4
          },
          totalInsightsShown: {
            type: "int64",
            id: 5
          }
        }
      },
      A3AnalysisExplanation: {
        fields: {
          drillExplanation: {
            rule: "repeated",
            type: "DrillExplanation",
            id: 1
          },
          totalInsightsShown: {
            type: "int64",
            id: 2
          }
        }
      },
      InsightFeature: {
        fields: {
          sageProgram: {
            type: "sage.auto_complete.v2.SageProgram",
            id: 1
          },
          type: {
            type: "Type",
            id: 2
          },
          anomalousPoint: {
            type: "string",
            id: 3
          }
        },
        nested: {
          Type: {
            values: {
              MEASURE_COLUMN_UNINTERESTING: 0,
              ATTRIBUTE_COLUMN_UNINTERESTING: 1,
              FILTER_COLUMN_UNINTERESTING: 2,
              MEASURE_FILTER_COMBINATION_OBVIOUS: 3,
              CORRELATION_OBVIOUS: 4,
              TREND_BETTER_DATE_ATTRIBUTE: 5,
              ATTRIBUTE_FILTER_COMBINATION_UNINTERESTING: 6,
              BETTER_DATE_BUCKET: 7,
              ALL_ANOMALIES_OBVIOUS: 8,
              TREND_OBVIOUS: 9,
              ANOMALOUS_POINT_UNINTERESTING: 10,
              DIFF_VALUE_UNINTERESTING: 11,
              DIFF_EXPECTED: 12,
              ALL_CHANGES_EXPECTED: 13
            }
          }
        }
      },
      A3InsightExplanation: {
        fields: {
          measures: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 1
          },
          drillAttributes: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 2
          },
          analysisDescriptor: {
            type: "AnalysisDescriptor",
            id: 3
          },
          explanation: {
            type: "string",
            id: 4
          },
          vizId: {
            type: "string",
            id: 5
          },
          score: {
            type: "double",
            id: 6
          },
          rating: {
            type: "sint32",
            id: 7
          },
          signature: {
            type: "string",
            id: 8
          },
          insightFeatures: {
            rule: "repeated",
            type: "InsightFeature",
            id: 9
          }
        }
      },
      AnalysisAlgorithm: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          stdevMean: {
            type: "StdevMean",
            id: 2
          },
          absDiffMajority: {
            type: "AbsDiffMajority",
            id: 3
          },
          linearRegression: {
            type: "LinearRegression",
            id: 4
          },
          trendAnalysis: {
            type: "TrendAnalysis",
            id: 5
          },
          crossCorrelation: {
            type: "CrossCorrelation",
            id: 6
          },
          madMedian: {
            type: "MadMedian",
            id: 7
          },
          shesd: {
            type: "SeasonalHybridESD",
            id: 8
          },
          anomalyExplanation: {
            type: "AnomalyExplanation",
            id: 9
          },
          dataPoint: {
            rule: "repeated",
            type: "DataPoint",
            id: 10
          }
        },
        nested: {
          DataPoint: {
            fields: {
              attributeValue: {
                type: "falcon.ConstantValue",
                id: 1
              },
              measureValue: {
                type: "double",
                id: 2
              },
              anomalyDirection: {
                type: "AnomalyDirection",
                id: 3
              }
            },
            nested: {
              AnomalyDirection: {
                values: {
                  HIGH: 1,
                  LOW: 2,
                  UNKNOWN: 3
                }
              }
            }
          },
          StdevMean: {
            fields: {
              minRows: {
                type: "sint64",
                id: 1,
                options: {
                  "default": 5
                }
              },
              multiplier: {
                type: "double",
                id: 2,
                options: {
                  "default": -1
                }
              },
              mean: {
                type: "double",
                id: 3
              },
              stdDev: {
                type: "double",
                id: 4
              }
            }
          },
          MadMedian: {
            fields: {
              minRows: {
                type: "sint64",
                id: 1,
                options: {
                  "default": 5
                }
              },
              multiplier: {
                type: "double",
                id: 2,
                options: {
                  "default": -1
                }
              },
              median: {
                type: "double",
                id: 3
              },
              medianAbsDev: {
                type: "double",
                id: 4
              }
            }
          },
          SeasonalHybridESD: {
            fields: {
              multiplier: {
                type: "double",
                id: 1,
                options: {
                  "default": -1
                }
              },
              minRows: {
                type: "sint64",
                id: 2,
                options: {
                  "default": 5
                }
              },
              alpha: {
                type: "double",
                id: 3,
                options: {
                  "default": 1
                }
              }
            }
          },
          AbsDiffMajority: {
            fields: {
              maxDiffElements: {
                type: "sint64",
                id: 1,
                options: {
                  "default": 10
                }
              },
              maxFraction: {
                type: "double",
                id: 2,
                options: {
                  "default": 0.5
                }
              },
              minAbsChangeRatio: {
                type: "double",
                id: 3,
                options: {
                  "default": 0.1
                }
              },
              minChangeRatio: {
                type: "double",
                id: 4,
                options: {
                  "default": 0.1
                }
              }
            }
          },
          LinearRegression: {
            fields: {
              pValueThreshold: {
                type: "double",
                id: 1,
                options: {
                  "default": 0.05
                }
              },
              multiplier: {
                type: "double",
                id: 2,
                options: {
                  "default": -1
                }
              },
              minRows: {
                type: "sint64",
                id: 3,
                options: {
                  "default": 5
                }
              }
            }
          },
          TrendAnalysis: {
            fields: {
              linearRegression: {
                type: "LinearRegression",
                id: 1
              },
              slope: {
                type: "double",
                id: 2,
                options: {
                  "default": 1
                }
              },
              percentPoints: {
                type: "double",
                id: 3,
                options: {
                  "default": 75
                }
              },
              minRows: {
                type: "sint64",
                id: 4,
                options: {
                  "default": 5
                }
              },
              minAbsGradientRadThreshold: {
                type: "double",
                id: 5,
                options: {
                  "default": 1e-10
                }
              },
              minRelativeDifference: {
                type: "double",
                id: 6,
                options: {
                  "default": 5
                }
              },
              pValue: {
                type: "double",
                id: 7
              },
              relativeDifference: {
                type: "double",
                id: 8
              }
            }
          },
          CrossCorrelation: {
            fields: {
              corrCoeff: {
                type: "double",
                id: 1,
                options: {
                  "default": 0.7
                }
              },
              maxLag: {
                type: "sint64",
                id: 2,
                options: {
                  "default": 50
                }
              },
              minRows: {
                type: "sint64",
                id: 3,
                options: {
                  "default": 5
                }
              },
              maxCorrCoeff: {
                type: "double",
                id: 4,
                options: {
                  "default": 0.98
                }
              }
            }
          },
          AnomalyExplanation: {
            fields: {
              maxExplanationColumns: {
                type: "sint64",
                id: 1,
                options: {
                  "default": 5
                }
              },
              minRows: {
                type: "sint64",
                id: 2,
                options: {
                  "default": 5
                }
              },
              decisionTree: {
                type: "string",
                id: 3
              }
            }
          },
          Type: {
            values: {
              STDEV_MEAN: 1,
              ABS_DIFF_MAJORITY: 2,
              LINEAR_REGRESSION: 3,
              TREND_ANALYSIS: 4,
              CROSS_CORRELATION: 5,
              MAD_MEDIAN: 6,
              SHESD: 7,
              ANOMALY_EXPLANATION: 8
            }
          }
        }
      },
      AnalysisDescriptor: {
        fields: {
          analysisClass: {
            type: "AnalysisClass",
            id: 1
          },
          outlierDetection: {
            type: "OutlierDetection",
            id: 2
          },
          diffExplanation: {
            type: "DiffExplanation",
            id: 3
          },
          customRAnalysis: {
            type: "CustomRAnalysis",
            id: 4
          },
          trendAnalysis: {
            type: "TrendAnalysis",
            id: 5
          },
          crossCorrelation: {
            type: "CrossCorrelation",
            id: 6
          },
          anomalyExplanation: {
            type: "AnomalyExplanation",
            id: 7
          }
        },
        nested: {
          OutlierDetection: {
            fields: {
              algorithm: {
                type: "AnalysisAlgorithm",
                id: 1
              }
            }
          },
          DiffExplanation: {
            fields: {
              algorithm: {
                type: "AnalysisAlgorithm",
                id: 1
              }
            }
          },
          CustomRAnalysis: {
            fields: {
              rScript: {
                type: "string",
                id: 1
              },
              columnBinding: {
                rule: "repeated",
                type: "ColumnBinding",
                id: 2
              },
              rTemplateId: {
                type: "string",
                id: 3
              },
              rOutputType: {
                type: "ROutputType",
                id: 4
              },
              unselectedSageOutputColumnId: {
                rule: "repeated",
                type: "string",
                id: 5
              }
            },
            nested: {
              ColumnBinding: {
                fields: {
                  sageOutputColumnId: {
                    type: "string",
                    id: 1
                  },
                  variableName: {
                    type: "string",
                    id: 2
                  },
                  columnName: {
                    type: "string",
                    id: 3
                  }
                }
              },
              ROutputType: {
                values: {
                  PNG: 1,
                  CSV: 2
                }
              }
            }
          },
          TrendAnalysis: {
            fields: {
              algorithm: {
                type: "AnalysisAlgorithm",
                id: 1
              }
            }
          },
          CrossCorrelation: {
            fields: {
              algorithm: {
                type: "AnalysisAlgorithm",
                id: 1
              }
            }
          },
          AnomalyExplanation: {
            fields: {
              algorithm: {
                type: "AnalysisAlgorithm",
                id: 1
              },
              columnBinding: {
                rule: "repeated",
                type: "CustomRAnalysis.ColumnBinding",
                id: 2
              }
            }
          },
          AnalysisClass: {
            values: {
              OUTLIER_DETECTION: 1,
              DIFF_EXPLANATION: 2,
              CUSTOM_R_ANALYSIS: 3,
              TREND_ANALYSIS: 4,
              CROSS_CORRELATION: 5,
              ANOMALY_EXPLANATION: 6
            }
          }
        }
      },
      MaxInsightOptions: {
        fields: {
          maxMeasures: {
            type: "sint32",
            id: 1,
            options: {
              "default": 3
            }
          },
          maxDrillAttributes: {
            type: "sint32",
            id: 2,
            options: {
              "default": 10
            }
          },
          maxAnomalies: {
            type: "sint32",
            id: 3,
            options: {
              "default": 20
            }
          },
          maxShesdAnomalies: {
            type: "sint32",
            id: 4,
            options: {
              "default": 3
            }
          },
          maxLrAnomalies: {
            type: "sint32",
            id: 5,
            options: {
              "default": 3
            }
          },
          maxTrends: {
            type: "sint32",
            id: 6,
            options: {
              "default": 3
            }
          },
          maxCrossCorrelationInsights: {
            type: "sint32",
            id: 7,
            options: {
              "default": 3
            }
          },
          maxCrossCorrelationDateColumns: {
            type: "sint32",
            id: 8,
            options: {
              "default": 1
            }
          },
          crossCorrelationAllPairs: {
            type: "bool",
            id: 9,
            options: {
              "default": false
            }
          },
          boostDateColumns: {
            type: "bool",
            id: 10,
            options: {
              "default": true,
              deprecated: true
            }
          },
          maxDateColumns: {
            type: "int32",
            id: 11,
            options: {
              "default": 3
            }
          },
          maxAnomalyExplanationInsights: {
            type: "sint32",
            id: 12,
            options: {
              "default": 10
            }
          }
        }
      },
      AnalysisParam: {
        fields: {
          analysisDescriptor: {
            rule: "repeated",
            type: "AnalysisDescriptor",
            id: 1
          },
          maxFalconResponseRows: {
            type: "sint64",
            id: 2,
            options: {
              "default": 1000000
            }
          },
          maxFalconQueries: {
            type: "sint64",
            id: 3,
            options: {
              "default": -1
            }
          },
          excludeNull: {
            type: "bool",
            id: 4,
            options: {
              "default": true
            }
          },
          maxInsightsOpts: {
            type: "MaxInsightOptions",
            id: 5
          },
          resourceOpts: {
            type: "ResourceOptions",
            id: 6
          },
          excludeZeroMeasure: {
            type: "bool",
            id: 7,
            options: {
              "default": true
            }
          },
          highlightBestValue: {
            type: "bool",
            id: 8,
            options: {
              "default": false
            }
          },
          autotuneDateBoundary: {
            type: "bool",
            id: 9,
            options: {
              "default": true
            }
          }
        }
      },
      ResourceOptions: {
        fields: {
          queryTimeout: {
            type: "sint32",
            id: 1,
            options: {
              "default": -1
            }
          }
        }
      },
      A3AnalysisStatus: {
        fields: {
          state: {
            type: "State",
            id: 1
          },
          error: {
            type: "string",
            id: 2
          },
          donePercentage: {
            type: "int32",
            id: 3
          },
          currentStatus: {
            type: "string",
            id: 4
          }
        },
        nested: {
          State: {
            values: {
              NOT_STARTED: 0,
              RUNNING: 1,
              DONE: 2,
              FAILED: 3,
              CANCELLED: 4,
              NOT_FOUND: 5,
              QUEUED: 6
            }
          }
        }
      }
    }
  },
  falcon: {
    options: {
      java_package: "com.thoughtspot.falcon",
      java_outer_classname: "ShardingSpecOuter",
      go_package: "update_task_pb"
    },
    nested: {
      DataType: {
        fields: {},
        nested: {
          E: {
            options: {
              allow_alias: true
            },
            values: {
              UNKNOWN: 0,
              BOOL: 1,
              CHAR: 2,
              DATE: 3,
              INT32: 4,
              INT64: 5,
              FLOAT: 6,
              DOUBLE: 7,
              DATE_TIME: 8,
              TIME: 9,
              MAX_TYPE: 9
            }
          }
        }
      },
      defnRef: {
        type: "bool",
        id: 60000,
        extend: "google.protobuf.FieldOptions",
        options: {
          "default": false
        }
      },
      DeprecatedUserAnnotation: {
        fields: {
          type: {
            type: "string",
            id: 1
          }
        }
      },
      ConstantValue: {
        fields: {
          int32Val: {
            type: "sint32",
            id: 1
          },
          int64Val: {
            type: "sint64",
            id: 2
          },
          stringVal: {
            type: "string",
            id: 3
          },
          boolVal: {
            type: "bool",
            id: 4
          },
          doubleVal: {
            type: "double",
            id: 5
          },
          floatVal: {
            type: "float",
            id: 6
          },
          nullVal: {
            type: "bool",
            id: 7,
            options: {
              "default": false
            }
          },
          normalize: {
            type: "bool",
            id: 8,
            options: {
              "default": true
            }
          },
          nullType: {
            type: "ValueProto.Type",
            id: 9
          }
        }
      },
      ValueDefinition: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          value: {
            type: "ConstantValue",
            id: 3
          },
          internal: {
            type: "Internal",
            id: 5
          },
          userAnnotation: {
            type: "DeprecatedUserAnnotation",
            id: 4,
            options: {
              deprecated: true
            }
          }
        },
        nested: {
          Internal: {
            fields: {
              vproto: {
                type: "ValueProto",
                id: 1
              }
            }
          }
        }
      },
      ColumnDefinition: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          column: {
            type: "Column",
            id: 3
          },
          userAnnotation: {
            type: "DeprecatedUserAnnotation",
            id: 4,
            options: {
              deprecated: true
            }
          }
        },
        nested: {
          Column: {
            fields: {
              tableName: {
                type: "string",
                id: 1
              },
              tableDisplayName: {
                type: "string",
                id: 2
              },
              columnName: {
                type: "string",
                id: 3
              },
              columnDisplayName: {
                type: "string",
                id: 4
              },
              userSchemaName: {
                type: "string",
                id: 5
              },
              userSchemaDisplayName: {
                type: "string",
                id: 6
              }
            }
          }
        }
      },
      PartitionOverDefinition: {
        fields: {
          partitionBy: {
            rule: "repeated",
            type: "string",
            id: 1,
            options: {
              "(defn_ref)": true
            }
          },
          orderBy: {
            rule: "repeated",
            type: "OrderingColumn",
            id: 2
          },
          window: {
            type: "PartitionWindow",
            id: 3
          }
        },
        nested: {
          OrderingColumn: {
            fields: {
              column: {
                type: "string",
                id: 1,
                options: {
                  "(defn_ref)": true
                }
              },
              ascending: {
                type: "bool",
                id: 2,
                options: {
                  "default": true
                }
              }
            }
          }
        }
      },
      DatepartDefinition: {
        fields: {
          calendarTable: {
            type: "TableHeaderProto",
            id: 1
          },
          partColumnTag: {
            type: "string",
            id: 2
          },
          lookupColumnTag: {
            type: "string",
            id: 3
          }
        }
      },
      WithinGroupDefinition: {
        fields: {
          orderBy: {
            rule: "repeated",
            type: "OrderingColumn",
            id: 1
          }
        },
        nested: {
          OrderingColumn: {
            fields: {
              column: {
                type: "string",
                id: 1,
                options: {
                  "(defn_ref)": true
                }
              },
              ascending: {
                type: "bool",
                id: 2,
                options: {
                  "default": true
                }
              }
            }
          }
        }
      },
      ExpressionDefinition: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          op: {
            type: "ExpressionOp.E",
            id: 3
          },
          leftNodeTag: {
            type: "string",
            id: 4,
            options: {
              deprecated: true
            }
          },
          rightNodeTag: {
            type: "string",
            id: 5,
            options: {
              deprecated: true
            }
          },
          operandTag: {
            rule: "repeated",
            type: "string",
            id: 9,
            options: {
              "(defn_ref)": true
            }
          },
          "function": {
            type: "AggregateOp.E",
            id: 6,
            options: {
              "default": "NONE"
            }
          },
          dataType: {
            type: "DataType.E",
            id: 7,
            options: {
              "default": "UNKNOWN"
            }
          },
          userAnnotation: {
            type: "DeprecatedUserAnnotation",
            id: 8,
            options: {
              deprecated: true
            }
          },
          partitionOver: {
            type: "PartitionOverDefinition",
            id: 10
          },
          datepart: {
            type: "DatepartDefinition",
            id: 11
          },
          withinGroup: {
            type: "WithinGroupDefinition",
            id: 12
          }
        }
      },
      ExpressionDefinitionList: {
        fields: {
          nodes: {
            rule: "repeated",
            type: "ExpressionDefinition",
            id: 1
          }
        }
      },
      Definitions: {
        fields: {
          columns: {
            rule: "repeated",
            type: "ColumnDefinition",
            id: 1
          },
          expressionsOld: {
            rule: "repeated",
            type: "ExpressionDefinitionList",
            id: 2,
            options: {
              deprecated: true
            }
          },
          expressions: {
            rule: "repeated",
            type: "ExpressionDefinition",
            id: 3
          },
          values: {
            rule: "repeated",
            type: "ValueDefinition",
            id: 4
          }
        }
      },
      TableVersionInfo: {
        fields: {
          table: {
            type: "string",
            id: 1
          },
          alias: {
            type: "string",
            id: 2
          },
          dataVersion: {
            type: "sint32",
            id: 3
          },
          schemaVersion: {
            type: "sint32",
            id: 4
          }
        }
      },
      ObjectId: {
        fields: {
          guid: {
            type: "string",
            id: 1,
            options: {
              "(common.sensitivity)": 0
            }
          },
          name: {
            type: "string",
            id: 2,
            options: {
              "(common.sensitivity)": 3
            }
          }
        }
      },
      TableHeaderProto: {
        fields: {
          guid: {
            type: "string",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          },
          schemaVersion: {
            type: "int64",
            id: 3
          },
          dataVersion: {
            type: "int64",
            id: 4
          }
        }
      },
      ValueProto: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          s: {
            type: "string",
            id: 2
          },
          b: {
            type: "bool",
            id: 3
          },
          i: {
            type: "sint64",
            id: 4
          },
          d: {
            type: "double",
            id: 5
          },
          "null": {
            type: "bool",
            id: 6
          },
          scaseStrlen: {
            type: "int32",
            id: 7
          },
          caseBytes: {
            type: "bytes",
            id: 8
          }
        },
        nested: {
          Type: {
            values: {
              TYPE_STRING: 0,
              TYPE_BOOL: 1,
              TYPE_INT64: 2,
              TYPE_DOUBLE: 3,
              TYPE_NULL: 4,
              TYPE_STRING_CASE: 5
            }
          }
        }
      },
      EncodedFileNameSharedProto: {
        fields: {
          dataDirPrefix: {
            type: "string",
            id: 1
          },
          dataFilePrefix: {
            type: "string",
            id: 2,
            options: {
              deprecated: true
            }
          },
          db: {
            type: "string",
            id: 3
          },
          userSchema: {
            type: "string",
            id: 4
          },
          table: {
            type: "string",
            id: 5
          },
          schemaVersion: {
            type: "int64",
            id: 6
          },
          partition: {
            type: "int64",
            id: 7
          }
        }
      },
      EncodedFileNameProto: {
        fields: {
          dataVersion: {
            rule: "repeated",
            type: "DataVersionRange",
            id: 1
          }
        },
        nested: {
          DataVersionRange: {
            fields: {
              from: {
                type: "int64",
                id: 1
              },
              to: {
                type: "int64",
                id: 2
              },
              schemaVersion: {
                type: "int64",
                id: 3
              }
            }
          }
        }
      },
      MultiPartNameProto: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          columnId: {
            type: "ObjectId",
            id: 4
          },
          alias: {
            type: "string",
            id: 5
          }
        }
      },
      MultiPartTableNameProto: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          alias: {
            type: "string",
            id: 4
          }
        }
      },
      ObjectSummary: {
        fields: {
          createdBy: {
            type: "string",
            id: 1
          },
          createdOn: {
            type: "int64",
            id: 2
          },
          lastModifiedBy: {
            type: "string",
            id: 3
          },
          lastModifiedOn: {
            type: "int64",
            id: 4
          },
          description: {
            type: "string",
            id: 5
          },
          lastRefreshTime: {
            type: "int64",
            id: 6
          },
          lastRefreshTimeTaken: {
            type: "int64",
            id: 7
          },
          lastRefreshStartTime: {
            type: "int64",
            id: 8
          },
          lastRefreshEnqueuedTime: {
            type: "int64",
            id: 9
          }
        }
      },
      UpdatePolicy: {
        fields: {
          mode: {
            type: "Mode",
            id: 1,
            options: {
              "default": "MANUAL"
            }
          }
        },
        nested: {
          Mode: {
            values: {
              MANUAL: 0,
              ON_LOAD_ASYNC: 1
            }
          }
        }
      },
      AggregateOp: {
        fields: {},
        nested: {
          E: {
            options: {
              allow_alias: true
            },
            values: {
              AGGR_NONE: 0,
              AGGR_SUM: 1,
              AGGR_AVERAGE: 2,
              AGGR_COUNT_NON_NULL: 3,
              AGGR_MIN: 4,
              AGGR_MAX: 5,
              AGGR_VARIANCE: 6,
              AGGR_STDEV: 7,
              AGGR_GROWTH: 8,
              AGGR_MEDIAN: 9,
              AGGR_COUNT_DISTINCT: 10,
              AGGR_COUNT_WITH_NULL: 11,
              AGGR_ROW_NUMBER: 12,
              AGGR_RANK: 13,
              AGGR_DENSE_RANK: 14,
              AGGR_APPROX_COUNT_DISTINCT: 15,
              AGGR_DISTINCT: 16,
              AGGR_NTILE: 17,
              AGGR_RANK_PERCENTILE: 18,
              AGGR_COUNT_DISTINCT_V1: 19,
              AGGR_PERCENTILE_CONT_WITHIN_GROUP: 20,
              AGGR_PERCENTILE_DISC_WITHIN_GROUP: 21,
              NONE: 0,
              SUM: 1,
              AVG: 2,
              COUNT: 3,
              COUNT_NON_NULL: 3,
              MIN: 4,
              MAX: 5,
              VARIANCE: 6,
              STDEV: 7,
              GROWTH: 8,
              MEDIAN: 9,
              COUNT_DISTINCT: 10,
              COUNT_WITH_NULL: 11
            }
          }
        }
      },
      ExpressionOp: {
        fields: {},
        nested: {
          E: {
            options: {
              allow_alias: true
            },
            values: {
              OP_NONE: 0,
              OP_PLUS: 1,
              OP_MINUS: 2,
              OP_MULTIPLY: 3,
              OP_DIVIDE: 4,
              OP_MOD: 5,
              OP_EXP: 6,
              OP_ABS_YEAR: 7,
              OP_ABS_QUARTER: 8,
              OP_ABS_MONTH: 9,
              OP_ABS_DAY: 10,
              OP_QUARTER_IN_YEAR: 11,
              OP_MONTH_IN_YEAR: 12,
              OP_DAY_IN_YEAR: 13,
              OP_MONTH_IN_QUARTER: 14,
              OP_DAY_IN_QUARTER: 15,
              OP_DAY_IN_MONTH: 16,
              OP_DAY_OF_WEEK: 17,
              OP_YEAR_START_EPOCH: 21,
              OP_QUARTER_START_EPOCH: 22,
              OP_MONTH_START_EPOCH: 23,
              OP_DAY_START_EPOCH: 24,
              OP_WEEK_IN_YEAR: 25,
              OP_WEEK_IN_QUARTER: 26,
              OP_WEEK_IN_MONTH: 27,
              OP_WEEK_IN_YEAR_AS_EPOCH: 28,
              OP_WEEK_IN_QUARTER_AS_EPOCH: 29,
              OP_WEEK_IN_MONTH_AS_EPOCH: 30,
              OP_ABS_HOUR: 31,
              OP_HOUR_START_EPOCH: 32,
              OP_ABS_WEEK: 33,
              OP_WEEK_START_EPOCH: 34,
              OP_NOT: 35,
              OP_SQRT: 36,
              OP_STRLEN: 37,
              OP_IS_NULL: 38,
              OP_EQUALS: 39,
              OP_NOT_EQUALS: 40,
              OP_LESS_THAN: 41,
              OP_LESSER_EQUALS: 42,
              OP_GREATER_THAN: 43,
              OP_GREATER_EQUALS: 44,
              OP_AND: 45,
              OP_OR: 46,
              OP_BEGINS_WITH: 47,
              OP_ENDS_WITH: 48,
              OP_CONTAINS: 49,
              OP_EQUALS_NOCASE: 50,
              OP_NOT_EQUALS_NOCASE: 51,
              OP_LESS_THAN_NOCASE: 52,
              OP_LESSER_EQUALS_NOCASE: 53,
              OP_GREATER_THAN_NOCASE: 54,
              OP_GREATER_EQUALS_NOCASE: 55,
              OP_BEGINS_WITH_NOCASE: 56,
              OP_ENDS_WITH_NOCASE: 57,
              OP_CONTAINS_NOCASE: 58,
              OP_NEGATE: 59,
              OP_ABS: 60,
              OP_FLOOR: 61,
              OP_CEIL: 62,
              OP_SQUARE: 63,
              OP_CUBE: 64,
              OP_CUBEROOT: 65,
              OP_EXP2: 66,
              OP_LN: 67,
              OP_LOG2: 68,
              OP_LOG10: 69,
              OP_SIGN: 70,
              OP_POW: 71,
              OP_LEAST: 72,
              OP_GREATEST: 73,
              OP_DATE_DIFF_DAYS: 74,
              OP_COS: 75,
              OP_SIN: 76,
              OP_TAN: 77,
              OP_ACOS: 78,
              OP_ASIN: 79,
              OP_ATAN: 80,
              OP_ATAN2: 81,
              OP_IF_NULL: 82,
              OP_IF: 83,
              OP_RANDOM: 84,
              OP_ROUND: 85,
              OP_STRPOS: 86,
              OP_NOW: 87,
              OP_SUBSTR: 88,
              OP_SPHERICAL_DISTANCE: 89,
              OP_IS_WEEKEND: 90,
              OP_DAY_OF_WEEK_STR: 91,
              OP_DATE_ADD_DAYS: 92,
              OP_HOUR_IN_DAY: 93,
              OP_SECOND_IN_DAY: 94,
              OP_MONTH_IN_YEAR_STR: 95,
              OP_IDENTITY: 96,
              OP_HASH: 97,
              OP_COMBINE_HASH: 98,
              OP_DATE_PARSE: 99,
              OP_TIME_PART: 100,
              OP_STRCAT: 101,
              OP_IN: 102,
              OP_CONVERT_BOOL_NUMERIC: 103,
              OP_CONVERT_BOOL_STRING: 104,
              OP_CONVERT_NUMERIC_BOOL: 105,
              OP_CONVERT_STRING_BOOL: 106,
              OP_CONVERT_FLOAT_INTEGER: 107,
              OP_CONVERT_STRING_INT64: 108,
              OP_CONVERT_STRING_DOUBLE: 109,
              OP_CONVERT_INT64_STRING: 110,
              OP_CONVERT_DOUBLE_STRING: 111,
              OP_CONVERT_DATE_STRING: 112,
              OP_SPELLS_LIKE: 113,
              OP_SOUNDS_LIKE: 114,
              OP_LIKE: 115,
              OP_STRING_MATCH_SCORE: 116,
              OP_EDIT_DISTANCE: 117,
              OP_EDIT_DISTANCE_WITH_CAP: 118,
              OP_TODAY: 119,
              OP_APPROX_SET_CARDINALITY: 120,
              OP_CONTAINER_SIZE: 121,
              OP_CONVERT_STRING_FLOAT: 122,
              OP_WEEK_IN_YEAR_ISO: 123,
              OP_CONVERT_INTEGER_DOUBLE: 124,
              OP_DATE_ADD_WEEKS: 127,
              OP_DATE_ADD_MONTHS: 128,
              OP_DATE_TIME_ADD_SECONDS: 129,
              OP_DATE_TIME_ADD_MINUTES: 130,
              OP_DATE_ADD_YEARS: 131,
              OP_NORMALIZE_STRING: 132,
              OP_NORMALIZE_STRING_PRESERVE_CASE: 133,
              OP_LEFT: 134,
              OP_RIGHT: 135,
              OP_NUM_OPS: 136,
              NONE: 0,
              SUM: 1,
              DIFF: 2,
              MULT: 3,
              DIV: 4,
              MOD: 5,
              EXP: 6,
              ABS_YEAR: 7,
              ABS_QUARTER: 8,
              ABS_MONTH: 9,
              ABS_DAY: 10,
              QUARTER_IN_YEAR: 11,
              MONTH_IN_YEAR: 12,
              DAY_IN_YEAR: 13,
              MONTH_IN_QUARTER: 14,
              DAY_IN_QUARTER: 15,
              DAY_IN_MONTH: 16,
              DAY_OF_WEEK: 17,
              ABS_YEAR_AS_EPOCH: 21,
              YEAR_START_EPOCH: 21,
              ABS_QUARTER_AS_EPOCH: 22,
              QUARTER_START_EPOCH: 22,
              ABS_MONTH_AS_EPOCH: 23,
              MONTH_START_EPOCH: 23,
              ABS_DAY_AS_EPOCH: 24,
              DAY_START_EPOCH: 24,
              WEEK_IN_YEAR: 25,
              WEEK_IN_QUARTER: 26,
              WEEK_IN_MONTH: 27,
              WEEK_IN_YEAR_AS_EPOCH: 28,
              WEEK_IN_QUARTER_AS_EPOCH: 29,
              WEEK_IN_MONTH_AS_EPOCH: 30,
              ABS_HOUR: 31,
              ABS_HOUR_AS_EPOCH: 32,
              HOUR_START_EPOCH: 32,
              ABS_WEEK: 33,
              WEEK_START_EPOCH: 34
            }
          }
        }
      },
      PartitionWindow: {
        fields: {
          start: {
            type: "Point",
            id: 1
          },
          end: {
            type: "Point",
            id: 2
          },
          windowType: {
            type: "WindowType",
            id: 3,
            options: {
              "default": "RANGE"
            }
          }
        },
        nested: {
          PointType: {
            values: {
              UNBOUNDED_PRECEDING: 1,
              PRECEDING: 2,
              UNBOUNDED_FOLLOWING: 3,
              FOLLOWING: 4,
              CURRENT_ROW: 5
            }
          },
          WindowType: {
            values: {
              RANGE: 1,
              ROW: 2
            }
          },
          Point: {
            fields: {
              type: {
                type: "PointType",
                id: 1
              },
              n: {
                type: "sint64",
                id: 2
              }
            }
          }
        }
      },
      DDLOperation: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          createDatabase: {
            type: "CreateDatabaseRequest",
            id: 2
          },
          dropDatabase: {
            type: "DropDatabaseRequest",
            id: 3
          },
          useDatabase: {
            type: "UseDatabaseProto",
            id: 4
          },
          createUserSchema: {
            type: "CreateUserSchemaRequest",
            id: 5
          },
          dropUserSchema: {
            type: "DropUserSchemaRequest",
            id: 6
          },
          createTable: {
            type: "CreateTableRequest",
            id: 7
          },
          dropTable: {
            type: "DropTableRequest",
            id: 8
          },
          truncateTable: {
            type: "TruncateTableRequest",
            id: 9
          },
          addRelationship: {
            type: "AddRelationshipRequest",
            id: 10
          },
          dropRelationship: {
            type: "DropRelationshipRequest",
            id: 11
          },
          addPrimaryKey: {
            type: "AddPrimaryKeyRequest",
            id: 12
          },
          dropPrimaryKey: {
            type: "DropPrimaryKeyRequest",
            id: 13
          },
          setTableType: {
            type: "SetTableTypeRequest",
            id: 14
          },
          updateColumn: {
            type: "UpdateColumnsRequest",
            id: 15
          },
          showObject: {
            type: "ShowObject",
            id: 16
          },
          scriptObject: {
            type: "ScriptObject",
            id: 17
          },
          addColocation: {
            type: "AddColocationRequest",
            id: 18
          },
          dropColocation: {
            type: "DropColocationRequest",
            id: 19
          },
          createView: {
            type: "CreateViewRequest",
            id: 20
          },
          dropView: {
            type: "DropViewRequest",
            id: 21
          },
          getStatistics: {
            type: "GetStatisticsRequest",
            id: 22
          },
          getInputRowSize: {
            type: "GetInputRowSizeRequest",
            id: 23
          },
          compactTable: {
            type: "CompactTableRequest",
            id: 24
          },
          selectIntoTable: {
            type: "SelectIntoTableRequest",
            id: 25
          },
          dropUpdateTask: {
            type: "DropUpdateTaskRequest",
            id: 26
          },
          modifyLoadPriority: {
            type: "ModifyLoadPriorityRequest",
            id: 27
          },
          removeLoadPriority: {
            type: "RemoveLoadPriorityRequest",
            id: 28
          },
          createMaterializedView: {
            type: "CreateMaterializedViewRequest",
            id: 29
          },
          deleteMaterialziedView: {
            type: "DeleteMaterializedViewRequest",
            id: 30
          },
          setTableNumCopies: {
            type: "SetTableNumCopiesRequest",
            id: 31
          },
          setTableOffline: {
            type: "SetTableOfflineOnlineRequest",
            id: 32
          },
          setTableOnline: {
            type: "SetTableOfflineOnlineRequest",
            id: 33
          }
        },
        nested: {
          Type: {
            values: {
              CREATE_DATABASE: 0,
              DROP_DATABASE: 1,
              USE_DATABASE: 2,
              CREATE_USER_SCHEMA: 3,
              DROP_USER_SCHEMA: 4,
              CREATE_TABLE: 5,
              DROP_TABLE: 6,
              TRUNCATE_TABLE: 7,
              ADD_RELATIONSHIP: 8,
              DROP_RELATIONSHIP: 9,
              ADD_PRIMARY_KEY: 10,
              DROP_PRIMARY_KEY: 11,
              SET_TABLE_TYPE: 12,
              UPDATE_COLUMNS: 13,
              SHOW_OBJECT: 14,
              SCRIPT_OBJECT: 15,
              ADD_COLOCATION: 16,
              DROP_COLOCATION: 17,
              CREATE_VIEW: 18,
              DROP_VIEW: 19,
              GET_STATISTICS: 20,
              GET_INPUT_ROW_SIZE: 21,
              COMPACT_TABLE: 22,
              SELECT_INTO_TABLE: 23,
              DROP_UPDATE_TASK: 24,
              MODIFY_LOAD_PRIORITY: 25,
              REMOVE_LOAD_PRIORITY: 26,
              CREATE_MATERIALIZED_VIEW: 27,
              DELETE_MATERIALIZED_VIEW: 28,
              SET_TABLE_NUM_COPIES: 29,
              SET_TABLE_OFFLINE: 30,
              SET_TABLE_ONLINE: 31
            }
          }
        }
      },
      ColocationProto: {
        fields: {
          table: {
            rule: "repeated",
            type: "Table",
            id: 1
          }
        },
        nested: {
          Table: {
            fields: {
              dbId: {
                type: "ObjectId",
                id: 1
              },
              userSchemaId: {
                type: "ObjectId",
                id: 2
              },
              tableId: {
                type: "ObjectId",
                id: 3
              }
            }
          }
        }
      },
      CreateDatabaseRequest: {
        fields: {
          database: {
            type: "DatabaseProto",
            id: 1
          },
          generateGuids: {
            type: "bool",
            id: 2,
            options: {
              "default": true
            }
          },
          allowUnsafe: {
            type: "bool",
            id: 3,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "CreateDatabaseRequest",
            id: 1002,
            extend: "common.RpcBlog"
          }
        }
      },
      CreateDatabaseResponse: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      DropDatabaseRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "DropDatabaseRequest",
            id: 1003,
            extend: "common.RpcBlog"
          }
        }
      },
      DropDatabaseResponse: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      CreateUserSchemaRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchema: {
            type: "UserSchemaProto",
            id: 2
          },
          generateGuids: {
            type: "bool",
            id: 3,
            options: {
              "default": true
            }
          },
          allowUnsafe: {
            type: "bool",
            id: 4,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "CreateUserSchemaRequest",
            id: 1004,
            extend: "common.RpcBlog"
          }
        }
      },
      CreateUserSchemaResponse: {
        fields: {
          userSchemaId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      DropUserSchemaRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "DropUserSchemaRequest",
            id: 1005,
            extend: "common.RpcBlog"
          }
        }
      },
      DropUserSchemaResponse: {
        fields: {
          userSchemaId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      CreateTableRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          table: {
            type: "TableProto",
            id: 3
          },
          generateGuids: {
            type: "bool",
            id: 4,
            options: {
              "default": true
            }
          },
          colocation: {
            type: "ColocationProto",
            id: 5
          },
          allowUnsafe: {
            type: "bool",
            id: 6,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "CreateTableRequest",
            id: 1006,
            extend: "common.RpcBlog"
          }
        }
      },
      CreateTableResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      AlterTableRequest: {
        fields: {
          table: {
            type: "TableProto",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "AlterTableRequest",
            id: 1007,
            extend: "common.RpcBlog"
          }
        }
      },
      AlterTableResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          },
          schemaVersion: {
            type: "int64",
            id: 2
          }
        }
      },
      DropTableRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          }
        },
        nested: {
          rpcId: {
            type: "DropTableRequest",
            id: 1008,
            extend: "common.RpcBlog"
          }
        }
      },
      DropTableResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      CreateAndDropTablesRequest: {
        fields: {
          createTable: {
            rule: "repeated",
            type: "CreateTableRequest",
            id: 1
          },
          createDbIfNotPresent: {
            type: "bool",
            id: 2,
            options: {
              "default": true
            }
          },
          createUserschemaIfNotPresent: {
            type: "bool",
            id: 3,
            options: {
              "default": true
            }
          },
          dropTable: {
            rule: "repeated",
            type: "DropTableRequest",
            id: 4
          }
        },
        nested: {
          rpcId: {
            type: "CreateAndDropTablesRequest",
            id: 1264,
            extend: "common.RpcBlog"
          }
        }
      },
      CreateAndDropTablesResponse: {
        fields: {
          createdTable: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          },
          droppedTable: {
            rule: "repeated",
            type: "ObjectId",
            id: 2
          }
        }
      },
      DropTableSchemaVersionRequest: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          },
          schemaVersion: {
            type: "int64",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "DropTableSchemaVersionRequest",
            id: 1009,
            extend: "common.RpcBlog"
          }
        }
      },
      DropTableSchemaVersionResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          },
          schemaVersion: {
            type: "int64",
            id: 2
          }
        }
      },
      TruncateTableRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          }
        },
        nested: {
          rpcId: {
            type: "TruncateTableRequest",
            id: 1010,
            extend: "common.RpcBlog"
          }
        }
      },
      TruncateTableResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      CreateViewRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          view: {
            type: "ViewProto",
            id: 3
          },
          generateGuids: {
            type: "bool",
            id: 4,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "CreateViewRequest",
            id: 1085,
            extend: "common.RpcBlog"
          }
        }
      },
      CreateViewResponse: {
        fields: {
          viewId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      DropViewRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          viewId: {
            type: "ObjectId",
            id: 3
          }
        },
        nested: {
          rpcId: {
            type: "DropViewRequest",
            id: 1086,
            extend: "common.RpcBlog"
          }
        }
      },
      DropViewResponse: {
        fields: {
          viewId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      GetServerSchemaRequest: {
        fields: {
          detailed: {
            type: "bool",
            id: 1,
            options: {
              "default": false
            }
          }
        },
        nested: {
          rpcId: {
            type: "GetServerSchemaRequest",
            id: 1039,
            extend: "common.RpcBlog"
          }
        }
      },
      GetServerSchemaResponse: {
        fields: {
          serverSchema: {
            type: "FalconServerSchemaProto",
            id: 1
          }
        }
      },
      GetDatabaseRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          detailed: {
            type: "bool",
            id: 2,
            options: {
              "default": false
            }
          }
        },
        nested: {
          rpcId: {
            type: "GetDatabaseRequest",
            id: 1040,
            extend: "common.RpcBlog"
          }
        }
      },
      GetDatabaseResponse: {
        fields: {
          database: {
            type: "DatabaseProto",
            id: 1
          }
        }
      },
      GetUserSchemaRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          detailed: {
            type: "bool",
            id: 3,
            options: {
              "default": false
            }
          }
        },
        nested: {
          rpcId: {
            type: "GetUserSchemaRequest",
            id: 1041,
            extend: "common.RpcBlog"
          }
        }
      },
      GetUserSchemaResponse: {
        fields: {
          userSchema: {
            type: "UserSchemaProto",
            id: 1
          }
        }
      },
      GetTableRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          detailed: {
            type: "bool",
            id: 4,
            options: {
              "default": false
            }
          },
          assignment: {
            type: "bool",
            id: 5,
            options: {
              "default": false
            }
          },
          type: {
            type: "StorageType",
            id: 6,
            options: {
              "default": "MEMORY"
            }
          }
        },
        nested: {
          rpcId: {
            type: "GetTableRequest",
            id: 1011,
            extend: "common.RpcBlog"
          },
          StorageType: {
            values: {
              MEMORY: 1,
              HDD: 2
            }
          }
        }
      },
      GetTableResponse: {
        fields: {
          table: {
            type: "TableProto",
            id: 1
          },
          assignment: {
            rule: "repeated",
            type: "AssignmentSpec.Assignment",
            id: 2
          },
          isOffline: {
            type: "bool",
            id: 3
          }
        }
      },
      AddRelationshipRequest: {
        fields: {
          relation: {
            type: "Relationship",
            id: 1
          },
          allowUnsafe: {
            type: "bool",
            id: 2,
            options: {
              "default": false
            }
          },
          generateGuids: {
            type: "bool",
            id: 3,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "AddRelationshipRequest",
            id: 1012,
            extend: "common.RpcBlog"
          }
        }
      },
      AddRelationshipResponse: {
        fields: {
          relation: {
            type: "Relationship",
            id: 1
          }
        }
      },
      DropRelationshipRequest: {
        fields: {
          relation: {
            type: "Relationship",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "DropRelationshipRequest",
            id: 1013,
            extend: "common.RpcBlog"
          }
        }
      },
      DropRelationshipResponse: {
        fields: {
          relation: {
            rule: "repeated",
            type: "Relationship",
            id: 1
          }
        }
      },
      AddPrimaryKeyRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          primaryKey: {
            type: "TableKey",
            id: 4
          },
          allowUnsafe: {
            type: "bool",
            id: 5,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "AddPrimaryKeyRequest",
            id: 1014,
            extend: "common.RpcBlog"
          }
        }
      },
      AddPrimaryKeyResponse: {
        fields: {
          primaryKey: {
            type: "TableKey",
            id: 1
          }
        }
      },
      DropPrimaryKeyRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          dropRelations: {
            type: "bool",
            id: 4,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "DropPrimaryKeyRequest",
            id: 1015,
            extend: "common.RpcBlog"
          }
        }
      },
      DropPrimaryKeyResponse: {
        fields: {
          primaryKey: {
            type: "TableKey",
            id: 1
          }
        }
      },
      SetTableTypeRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          shardingKey: {
            type: "TableKey",
            id: 4
          },
          numShards: {
            type: "int64",
            id: 5
          },
          tableType: {
            type: "TableProto.Type",
            id: 6
          },
          allowUnsafe: {
            type: "bool",
            id: 7,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "SetTableTypeRequest",
            id: 1042,
            extend: "common.RpcBlog"
          }
        }
      },
      SetTableTypeResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      UpdateColumnsRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          addColumn: {
            rule: "repeated",
            type: "ColumnSchemaProto",
            id: 4
          },
          dropColumn: {
            rule: "repeated",
            type: "string",
            id: 5
          },
          renameColumn: {
            rule: "repeated",
            type: "Rename",
            id: 6
          },
          generateGuids: {
            type: "bool",
            id: 7,
            options: {
              "default": true
            }
          },
          modifyColumn: {
            rule: "repeated",
            type: "ColumnSchemaProto",
            id: 8
          },
          allowUnsafe: {
            type: "bool",
            id: 9,
            options: {
              "default": false
            }
          }
        },
        nested: {
          rpcId: {
            type: "UpdateColumnsRequest",
            id: 1043,
            extend: "common.RpcBlog"
          },
          Rename: {
            fields: {
              from: {
                type: "string",
                id: 1
              },
              to: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      UpdateColumnsResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      UseDatabaseProto: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      ShowObject: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          detailed: {
            type: "bool",
            id: 4,
            options: {
              "default": false
            }
          },
          rowFormat: {
            type: "bool",
            id: 5,
            options: {
              "default": true
            }
          },
          type: {
            type: "Type",
            id: 6
          }
        },
        nested: {
          Type: {
            values: {
              SHOW_DATABASES: 0,
              SHOW_DATABASE: 1,
              SHOW_USER_SCHEMAS: 2,
              SHOW_USER_SCHEMA: 3,
              SHOW_TABLES: 4,
              SHOW_TABLE: 5,
              SHOW_VIEWS: 6,
              SHOW_VIEW: 7
            }
          }
        }
      },
      ScriptObject: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          type: {
            type: "Type",
            id: 4
          }
        },
        nested: {
          Type: {
            values: {
              SCRIPT_DATABASE: 0,
              SCRIPT_TABLE: 1,
              SCRIPT_SERVER: 2,
              SCRIPT_VIEW: 3
            }
          }
        }
      },
      AddColocationRequest: {
        fields: {
          colocation: {
            type: "ColocationProto",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "AddColocationRequest",
            id: 1056,
            extend: "common.RpcBlog"
          }
        }
      },
      AddColocationResponse: {
        fields: {
          colocation: {
            type: "ColocationProto",
            id: 1
          }
        }
      },
      DropColocationRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          }
        },
        nested: {
          rpcId: {
            type: "DropColocationRequest",
            id: 1057,
            extend: "common.RpcBlog"
          }
        }
      },
      DropColocationResponse: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          schemaVersion: {
            type: "sint32",
            id: 4
          }
        }
      },
      SelectIntoTableRequest: {
        fields: {
          table: {
            type: "MultiPartTableNameProto",
            id: 1
          },
          querySet: {
            type: "FalconQuerySet",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "SelectIntoTableRequest",
            id: 1177,
            extend: "common.RpcBlog"
          }
        }
      },
      SelectIntoTableResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      DropUpdateTaskRequest: {
        fields: {
          table: {
            type: "MultiPartTableNameProto",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "DropUpdateTaskRequest",
            id: 1220,
            extend: "common.RpcBlog"
          }
        }
      },
      DropUpdateTaskResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      ModifyLoadPriorityRequest: {
        fields: {
          table: {
            type: "MultiPartTableNameProto",
            id: 1
          },
          loadPriority: {
            type: "int64",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "ModifyLoadPriorityRequest",
            id: 1225,
            extend: "common.RpcBlog"
          }
        }
      },
      RemoveLoadPriorityRequest: {
        fields: {
          table: {
            type: "MultiPartTableNameProto",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "RemoveLoadPriorityRequest",
            id: 1226,
            extend: "common.RpcBlog"
          }
        }
      },
      GetPartialServerSchemaRequest: {
        fields: {
          tableIds: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "GetPartialServerSchemaRequest",
            id: 1224,
            extend: "common.RpcBlog"
          }
        }
      },
      GetPartialServerSchemaResponse: {
        fields: {
          serverSchema: {
            type: "FalconServerSchemaProto",
            id: 1
          },
          missingTables: {
            rule: "repeated",
            type: "string",
            id: 2
          }
        }
      },
      CreateMaterializedViewRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          querySet: {
            type: "FalconQuerySet",
            id: 3
          },
          primaryKey: {
            type: "TableKey",
            id: 4
          },
          regionSpec: {
            type: "RegionSpec",
            id: 5
          },
          allowUnsafe: {
            type: "bool",
            id: 6
          },
          name: {
            type: "string",
            id: 7
          }
        },
        nested: {
          rpcId: {
            type: "CreateMaterializedViewRequest",
            id: 1233,
            extend: "common.RpcBlog"
          }
        }
      },
      CreateMaterializedViewResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      GetMaterializedViewStatusRequest: {
        fields: {
          tableId: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "GetMaterializedViewStatusRequest",
            id: 1234,
            extend: "common.RpcBlog"
          }
        }
      },
      MaterializedViewStatus: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          },
          summary: {
            type: "ObjectSummary",
            id: 2
          },
          state: {
            type: "TableStatProto.ServingStatus",
            id: 3
          },
          deleted: {
            type: "bool",
            id: 4
          },
          status: {
            type: "common.StatusProto",
            id: 5
          }
        }
      },
      GetMaterializedViewStatusResponse: {
        fields: {
          status: {
            rule: "repeated",
            type: "MaterializedViewStatus",
            id: 1
          }
        }
      },
      DeleteMaterializedViewRequest: {
        fields: {
          tableId: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "DeleteMaterializedViewRequest",
            id: 1235,
            extend: "common.RpcBlog"
          }
        }
      },
      DeleteMaterializedViewResponse: {
        fields: {
          status: {
            rule: "repeated",
            type: "common.StatusProto",
            id: 1
          }
        }
      },
      GetMaterializedViewSchemaRequest: {
        fields: {
          tableId: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "GetMaterializedViewSchemaRequest",
            id: 1236,
            extend: "common.RpcBlog"
          }
        }
      },
      GetMaterializedViewSchemaResponse: {
        fields: {
          tableSchema: {
            rule: "repeated",
            type: "TableSchemaProto",
            id: 1
          }
        }
      },
      RefreshMaterializedViewRequest: {
        fields: {
          tableId: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "RefreshMaterializedViewRequest",
            id: 1237,
            extend: "common.RpcBlog"
          }
        }
      },
      RefreshMaterializedViewResponse: {
        fields: {
          status: {
            rule: "repeated",
            type: "common.StatusProto",
            id: 1
          }
        }
      },
      FalconManagerMetricsRequest: {
        fields: {},
        nested: {
          rpcId: {
            type: "FalconManagerMetricsRequest",
            id: 1239,
            extend: "common.RpcBlog"
          }
        }
      },
      FalconManagerMetricsResponse: {
        fields: {
          metrics: {
            rule: "repeated",
            type: "common.MetricValue",
            id: 1
          }
        }
      },
      SetTableNumCopiesRequest: {
        fields: {
          table: {
            type: "MultiPartTableNameProto",
            id: 1
          },
          numMemCopies: {
            type: "int32",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "SetTableNumCopiesRequest",
            id: 1249,
            extend: "common.RpcBlog"
          }
        }
      },
      SetTableNumCopiesResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      SetTableOfflineOnlineRequest: {
        fields: {
          onlineTable: {
            rule: "repeated",
            type: "MultiPartTableNameProto",
            id: 1
          },
          offlineTable: {
            rule: "repeated",
            type: "MultiPartTableNameProto",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "SetTableOfflineOnlineRequest",
            id: 1251,
            extend: "common.RpcBlog"
          }
        }
      },
      SetTableOfflineOnlineResponse: {
        fields: {
          status: {
            type: "common.StatusProto",
            id: 1
          }
        }
      },
      AssignmentSpec: {
        fields: {},
        nested: {
          Table: {
            fields: {
              database: {
                type: "ObjectId",
                id: 1
              },
              userSchema: {
                type: "ObjectId",
                id: 2
              },
              table: {
                type: "ObjectId",
                id: 3
              },
              schemaVersion: {
                type: "int64",
                id: 4
              },
              dataVersion: {
                type: "int64",
                id: 5
              },
              regions: {
                type: "Regions",
                id: 6
              }
            },
            nested: {
              Regions: {
                fields: {
                  all: {
                    type: "bool",
                    id: 1,
                    options: {
                      "default": true
                    }
                  },
                  region: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          Tables: {
            fields: {
              all: {
                type: "bool",
                id: 1,
                options: {
                  "default": true
                }
              },
              table: {
                rule: "repeated",
                type: "Table",
                id: 2
              }
            }
          },
          Assignment: {
            fields: {
              address: {
                type: "net.AddressProto",
                id: 1
              },
              tables: {
                type: "Tables",
                id: 2
              }
            }
          }
        }
      },
      AssignmentRequest: {
        fields: {
          assign: {
            type: "AssignmentSpec.Tables",
            id: 1
          },
          mustInclude: {
            rule: "repeated",
            type: "AssignmentSpec.Assignment",
            id: 2
          },
          mustExclude: {
            rule: "repeated",
            type: "AssignmentSpec.Assignment",
            id: 3
          },
          excludeAddress: {
            rule: "repeated",
            type: "net.AddressProto",
            id: 4
          }
        },
        nested: {
          rpcId: {
            type: "AssignmentRequest",
            id: 1045,
            extend: "common.RpcBlog"
          }
        }
      },
      AssignmentResponse: {
        fields: {
          generated: {
            rule: "repeated",
            type: "AssignmentSpec.Assignment",
            id: 1
          }
        }
      },
      GetInputRowSizeRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          type: {
            type: "Type",
            id: 4
          }
        },
        nested: {
          Type: {
            values: {
              SERVER: 1,
              DATABASE: 2,
              USER_SCHEMA: 3,
              TABLE: 4
            }
          }
        }
      },
      LoadClient: {
        fields: {
          address: {
            type: "net.AddressProto",
            id: 1
          },
          fileName: {
            type: "string",
            id: 2
          }
        }
      },
      StartLoadCycleRequest: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          client: {
            type: "LoadClient",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "StartLoadCycleRequest",
            id: 1034,
            extend: "common.RpcBlog"
          }
        }
      },
      StartLoadCycleResponse: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          }
        }
      },
      LoadRequest: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          dmlOp: {
            type: "DMLOperation",
            id: 2
          },
          region: {
            type: "int32",
            id: 3
          },
          preSerializedDmlOp: {
            type: "PreSerializedDMLOperation",
            id: 4
          },
          client: {
            type: "LoadClient",
            id: 5
          }
        },
        nested: {
          rpcId: {
            type: "LoadRequest",
            id: 1035,
            extend: "common.RpcBlog"
          }
        }
      },
      LoadResponse: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          numRowsInserted: {
            type: "int64",
            id: 2
          },
          numRowsDeleted: {
            type: "int64",
            id: 3
          },
          numRowsUpdated: {
            type: "int64",
            id: 4
          }
        }
      },
      EndLoadCycleRequest: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          commit: {
            type: "bool",
            id: 2
          },
          client: {
            type: "LoadClient",
            id: 3
          },
          dataWriter: {
            rule: "repeated",
            type: "loader.DataWriterProto",
            id: 4
          }
        },
        nested: {
          rpcId: {
            type: "EndLoadCycleRequest",
            id: 1036,
            extend: "common.RpcBlog"
          }
        }
      },
      EndLoadCycleResponse: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          dataWriter: {
            rule: "repeated",
            type: "loader.DataWriterProto",
            id: 2
          }
        }
      },
      AutoCommitLoadCycleRequest: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          client: {
            type: "LoadClient",
            id: 2
          },
          dataWriter: {
            rule: "repeated",
            type: "loader.DataWriterProto",
            id: 3,
            options: {
              deprecated: true
            }
          },
          emptyTable: {
            type: "bool",
            id: 4,
            options: {
              deprecated: true
            }
          },
          table: {
            rule: "repeated",
            type: "TableHeaderProto",
            id: 5,
            options: {
              deprecated: true
            }
          },
          commitDetails: {
            rule: "repeated",
            type: "CommitDetails",
            id: 6
          }
        },
        nested: {
          rpcId: {
            type: "AutoCommitLoadCycleRequest",
            id: 1063,
            extend: "common.RpcBlog"
          },
          CommitDetails: {
            fields: {
              dataWriter: {
                rule: "repeated",
                type: "loader.DataWriterProto",
                id: 1
              },
              emptyTable: {
                type: "bool",
                id: 2
              },
              table: {
                type: "TableHeaderProto",
                id: 3
              },
              updatedFrom: {
                rule: "repeated",
                type: "TableHeaderProto",
                id: 4
              }
            }
          }
        }
      },
      AutoCommitLoadCycleResponse: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          }
        }
      },
      RemoveDataWriterRequest: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          dataWriter: {
            rule: "repeated",
            type: "loader.DataWriterProto",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "RemoveDataWriterRequest",
            id: 1073,
            extend: "common.RpcBlog"
          }
        }
      },
      RemoveDataWriterResponse: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          dataWriter: {
            rule: "repeated",
            type: "loader.DataWriterProto",
            id: 2
          }
        }
      },
      CompactTableRequest: {
        fields: {
          db: {
            type: "ObjectId",
            id: 1
          },
          userSchema: {
            type: "ObjectId",
            id: 2
          },
          table: {
            type: "ObjectId",
            id: 3
          }
        },
        nested: {
          rpcId: {
            type: "CompactTableRequest",
            id: 1123,
            extend: "common.RpcBlog"
          }
        }
      },
      InsertIntoTableRequest: {
        fields: {
          insertInto: {
            type: "InsertIntoDML",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "InsertIntoTableRequest",
            id: 1200,
            extend: "common.RpcBlog"
          }
        }
      },
      InsertIntoTableResponse: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          }
        }
      },
      loader: {
        nested: {
          DataWriterProto: {
            fields: {
              type: {
                type: "Type",
                id: 1
              },
              fileWriter: {
                type: "FileWriterProto",
                id: 2
              },
              table: {
                type: "TableHeaderProto",
                id: 3
              },
              region: {
                type: "string",
                id: 4
              }
            },
            nested: {
              FileWriterProto: {
                fields: {
                  fileName: {
                    type: "string",
                    id: 1
                  }
                }
              },
              Type: {
                values: {
                  FILE: 1
                }
              }
            }
          }
        }
      },
      DMLOperation: {
        fields: {
          table: {
            type: "ObjectId",
            id: 1
          },
          userSchema: {
            type: "ObjectId",
            id: 7
          },
          database: {
            type: "ObjectId",
            id: 8
          },
          schemaVersion: {
            type: "int64",
            id: 2
          },
          type: {
            type: "Type",
            id: 3
          },
          insertOp: {
            type: "Insert",
            id: 4
          },
          updateOp: {
            type: "Update",
            id: 5
          },
          deleteOp: {
            type: "Delete",
            id: 6
          },
          schemaUpdateOp: {
            type: "SchemaUpdate",
            id: 9
          }
        },
        nested: {
          Type: {
            values: {
              OP_INSERT: 0,
              OP_DELETE: 1,
              OP_UPDATE: 2,
              OP_SCHEMA_UPDATE: 3
            }
          },
          ColumnValue: {
            fields: {
              column: {
                type: "ObjectId",
                id: 1
              },
              value: {
                type: "ValueProto",
                id: 2
              }
            }
          },
          Row: {
            fields: {
              value: {
                rule: "repeated",
                type: "ValueProto",
                id: 1
              }
            }
          },
          RowPredicate: {
            fields: {
              column: {
                rule: "repeated",
                type: "ObjectId",
                id: 1
              },
              row: {
                rule: "repeated",
                type: "Row",
                id: 2
              }
            }
          },
          FilterPredicate: {
            fields: {
              predicate: {
                rule: "repeated",
                type: "PredicateNode",
                id: 1
              },
              definition: {
                type: "Definitions",
                id: 2
              }
            }
          },
          SerializedTable: {
            fields: {
              memblock: {
                type: "bytes",
                id: 1
              }
            }
          },
          Insert: {
            fields: {
              column: {
                rule: "repeated",
                type: "ObjectId",
                id: 1
              },
              row: {
                rule: "repeated",
                type: "Row",
                id: 2
              },
              serializedRow: {
                rule: "repeated",
                type: "bytes",
                id: 3
              },
              serializedTable: {
                type: "SerializedTable",
                id: 4
              }
            }
          },
          Delete: {
            fields: {
              predicate: {
                type: "RowPredicate",
                id: 1
              },
              filter: {
                type: "FilterPredicate",
                id: 2
              }
            }
          },
          Update: {
            fields: {
              predicate: {
                type: "RowPredicate",
                id: 1
              },
              filter: {
                type: "FilterPredicate",
                id: 3
              },
              value: {
                rule: "repeated",
                type: "ColumnValue",
                id: 2
              }
            }
          },
          SchemaUpdate: {
            fields: {
              current: {
                type: "TableSchemaProto",
                id: 1
              },
              proposed: {
                type: "TableSchemaProto",
                id: 2
              }
            }
          }
        }
      },
      PreSerializedDMLOperation: {
        fields: {
          buffer: {
            type: "bytes",
            id: 1
          },
          compressed: {
            type: "bool",
            id: 2
          }
        }
      },
      PredicateNode: {
        fields: {
          op: {
            type: "LogicalOp",
            id: 1
          },
          leafPredicate: {
            type: "Predicate",
            id: 2
          },
          leftNodeIndex: {
            type: "uint32",
            id: 3
          },
          rightNodeIndex: {
            type: "uint32",
            id: 4
          }
        },
        nested: {
          LogicalOp: {
            values: {
              UNKNOWN: 0,
              AND: 1,
              OR: 2,
              NOT: 3
            }
          },
          Predicate: {
            fields: {
              compareOp: {
                type: "CompareOp",
                id: 1
              },
              op0: {
                type: "string",
                id: 2,
                options: {
                  "(defn_ref)": true
                }
              },
              op1: {
                type: "string",
                id: 3,
                options: {
                  "(defn_ref)": true
                }
              },
              rest: {
                rule: "repeated",
                type: "string",
                id: 4,
                options: {
                  "(defn_ref)": true
                }
              }
            },
            nested: {
              CompareOp: {
                values: {
                  UNKNOWN: 0,
                  EQ: 1,
                  GT: 2,
                  GE: 3,
                  LT: 4,
                  LE: 5,
                  NE: 6,
                  BT: 7,
                  IN: 8,
                  BEGINS_WITH: 10,
                  ENDS_WITH: 11,
                  CONTAINS: 12,
                  EQ_NOCASE: 13,
                  GT_NOCASE: 14,
                  GE_NOCASE: 15,
                  LT_NOCASE: 16,
                  LE_NOCASE: 17,
                  NE_NOCASE: 18,
                  BEGINS_WITH_NOCASE: 19,
                  ENDS_WITH_NOCASE: 20,
                  CONTAINS_NOCASE: 21,
                  IS_NULL: 22,
                  LIKE: 23
                }
              }
            }
          }
        }
      },
      TableSchemaProto: {
        fields: {
          guid: {
            type: "string",
            id: 1,
            options: {
              deprecated: true
            }
          },
          name: {
            type: "string",
            id: 2,
            options: {
              deprecated: true
            }
          },
          id: {
            type: "ObjectId",
            id: 4
          },
          column: {
            rule: "repeated",
            type: "ColumnSchemaProto",
            id: 3
          },
          version: {
            type: "int64",
            id: 5
          },
          summary: {
            type: "ObjectSummary",
            id: 6
          },
          primaryKey: {
            type: "TableKey",
            id: 7
          },
          uniqueKey: {
            rule: "repeated",
            type: "TableKey",
            id: 8
          },
          region: {
            type: "RegionSpec",
            id: 9
          },
          relation: {
            rule: "repeated",
            type: "Relationship",
            id: 10
          },
          isCalendar: {
            type: "bool",
            id: 11
          }
        },
        extensions: [
          [
            10000,
            536870911
          ]
        ]
      },
      ColumnSchemaProto: {
        fields: {
          guid: {
            type: "string",
            id: 1,
            options: {
              deprecated: true
            }
          },
          name: {
            type: "string",
            id: 2,
            options: {
              deprecated: true
            }
          },
          id: {
            type: "ObjectId",
            id: 6
          },
          dataType: {
            type: "DataType",
            id: 3
          },
          containerType: {
            type: "ContainerType",
            id: 10,
            options: {
              "default": "CONTAINER_NONE"
            }
          },
          size: {
            type: "int32",
            id: 4
          },
          parsingHint: {
            type: "ParsingHint",
            id: 5
          },
          summary: {
            type: "ObjectSummary",
            id: 7
          },
          datetime: {
            type: "DateTimeType",
            id: 8,
            options: {
              "default": "TYPE_NOT_DATE"
            }
          },
          defaultValue: {
            type: "ValueProto",
            id: 9
          },
          disableCaseChanges: {
            type: "bool",
            id: 11
          }
        },
        extensions: [
          [
            10000,
            536870911
          ]
        ],
        nested: {
          DataType: {
            values: {
              TYPE_BOOL: 0,
              TYPE_INT32: 1,
              TYPE_INT64: 2,
              TYPE_FLOAT: 3,
              TYPE_DOUBLE: 4,
              TYPE_FIXED_CHAR: 5,
              TYPE_VAR_CHAR: 6,
              TYPE_INT8: 7,
              TYPE_INT16: 8
            }
          },
          ContainerType: {
            values: {
              CONTAINER_NONE: 0,
              CONTAINER_SET: 1
            }
          },
          DateTimeType: {
            values: {
              TYPE_DATE: 0,
              TYPE_DATE_TIME: 1,
              TYPE_TIME: 2,
              TYPE_NOT_DATE: 3
            }
          },
          ParsingHint: {
            fields: {
              dateFormat: {
                type: "string",
                id: 1
              },
              boolFormat: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      RegionSpec: {
        fields: {
          type: {
            type: "Strategy",
            id: 1,
            options: {
              "default": "HASH"
            }
          },
          numRegions: {
            type: "int32",
            id: 2
          },
          column: {
            rule: "repeated",
            type: "ObjectId",
            id: 3
          }
        },
        nested: {
          Strategy: {
            values: {
              HASH: 1
            }
          }
        }
      },
      TableKey: {
        fields: {
          column: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          }
        }
      },
      Relationship: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          column: {
            rule: "repeated",
            type: "RelatedColumn",
            id: 2
          },
          generic: {
            type: "Generic",
            id: 3
          },
          id: {
            type: "ObjectId",
            id: 4
          }
        },
        nested: {
          Type: {
            values: {
              FOREIGNKEY: 1,
              GENERIC: 2
            }
          },
          RelatedColumn: {
            fields: {
              source: {
                type: "ObjectId",
                id: 1
              },
              target: {
                type: "ObjectId",
                id: 2
              },
              targetTable: {
                type: "ObjectId",
                id: 3
              },
              targetSchema: {
                type: "ObjectId",
                id: 4
              },
              targetDatabase: {
                type: "ObjectId",
                id: 5
              },
              sourceTable: {
                type: "ObjectId",
                id: 6
              },
              sourceSchema: {
                type: "ObjectId",
                id: 7
              },
              sourceDatabase: {
                type: "ObjectId",
                id: 8
              }
            }
          },
          Generic: {
            fields: {
              sourceTable: {
                type: "MultiPartTableNameProto",
                id: 1
              },
              targetTable: {
                type: "MultiPartTableNameProto",
                id: 2
              },
              definition: {
                type: "Definitions",
                id: 3
              },
              joinCondition: {
                rule: "repeated",
                type: "PredicateNode",
                id: 4
              }
            }
          }
        }
      },
      InsertIntoDML: {
        fields: {
          column: {
            rule: "repeated",
            type: "ObjectId",
            id: 1
          },
          table: {
            type: "MultiPartTableNameProto",
            id: 2
          },
          querySet: {
            type: "FalconQuerySet",
            id: 3
          },
          emptyTable: {
            type: "bool",
            id: 4,
            options: {
              "default": false
            }
          },
          updatePolicy: {
            type: "UpdatePolicy",
            id: 5
          }
        }
      },
      FalconQuery: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          datascope: {
            type: "bool",
            id: 3,
            options: {
              "default": false
            }
          },
          returnResult: {
            type: "bool",
            id: 4,
            options: {
              "default": true
            }
          },
          outputColumns: {
            rule: "repeated",
            type: "string",
            id: 5,
            options: {
              "(defn_ref)": true
            }
          },
          outputColumnsStar: {
            type: "bool",
            id: 18,
            options: {
              "default": false
            }
          },
          filterConditions: {
            rule: "repeated",
            type: "PredicateNode",
            id: 6
          },
          groups: {
            type: "GroupingColumn",
            id: 7
          },
          distinct: {
            type: "Distinct",
            id: 35
          },
          orderingColumns: {
            rule: "repeated",
            type: "OrderingColumn",
            id: 8
          },
          topRowCountFilter: {
            type: "int64",
            id: 17,
            options: {
              "default": -1
            }
          },
          paginationStart: {
            type: "sint64",
            id: 9,
            options: {
              "default": 0
            }
          },
          paginationSize: {
            type: "sint64",
            id: 10
          },
          paginationLimit: {
            type: "sint64",
            id: 20
          },
          optimizeForPagination: {
            type: "bool",
            id: 21,
            options: {
              deprecated: true
            }
          },
          paginationContinue: {
            type: "bool",
            id: 23,
            options: {
              "default": false
            }
          },
          tableSpecs: {
            rule: "repeated",
            type: "TableSpec",
            id: 11
          },
          from: {
            type: "From",
            id: 19
          },
          rewrittenQuery: {
            type: "FalconQuery",
            id: 12
          },
          allowPartialResults: {
            type: "bool",
            id: 13,
            options: {
              "default": false
            }
          },
          deadlineMs: {
            type: "int64",
            id: 14
          },
          useJit: {
            type: "bool",
            id: 15,
            options: {
              "default": true
            }
          },
          identifier: {
            type: "string",
            id: 16,
            options: {
              deprecated: true
            }
          },
          internal: {
            type: "InternalParams",
            id: 22
          },
          skipResultCache: {
            type: "bool",
            id: 24,
            options: {
              "default": false
            }
          },
          allowCrossJoins: {
            type: "bool",
            id: 25,
            options: {
              "default": true
            }
          },
          responseSpec: {
            type: "ResponseSpec",
            id: 26
          },
          cacheResult: {
            type: "bool",
            id: 27,
            options: {
              "default": true
            }
          },
          enableDictionaryOptimizer: {
            type: "bool",
            id: 28,
            options: {
              "default": false
            }
          },
          materializedQueryId: {
            type: "string",
            id: 29
          },
          strictSampling: {
            type: "bool",
            id: 30,
            options: {
              "default": false
            }
          },
          returnCaseStrings: {
            type: "bool",
            id: 31,
            options: {
              "default": false
            }
          },
          countDistinctV2: {
            type: "bool",
            id: 32,
            options: {
              "default": false
            }
          },
          enableDenorm: {
            type: "bool",
            id: 33,
            options: {
              "default": true
            }
          },
          disableGroupbycolToOutput: {
            type: "bool",
            id: 34
          }
        },
        nested: {
          TableSpec: {
            fields: {
              table: {
                type: "string",
                id: 1
              },
              alias: {
                type: "string",
                id: 7
              },
              tableDisplayName: {
                type: "string",
                id: 2
              },
              schemaVersion: {
                type: "sint32",
                id: 3
              },
              tableType: {
                type: "TableType",
                id: 4,
                options: {
                  "default": "TABLE"
                }
              },
              dataVersion: {
                type: "sint32",
                id: 5
              },
              regions: {
                rule: "repeated",
                type: "string",
                id: 6
              }
            },
            nested: {
              TableType: {
                values: {
                  DEPRECATED_FACT: 1,
                  DEPRECATED_DIMENSION: 2,
                  DEPRECATED_UNKNOWN: 4,
                  QUERY: 3,
                  TABLE: 5
                }
              }
            }
          },
          ResponseSpec: {
            fields: {
              type: {
                type: "Type",
                id: 1,
                options: {
                  "default": "FALCON_RESPONSE"
                }
              },
              returnChecksum: {
                type: "bool",
                id: 4
              },
              onlyReturnChecksum: {
                type: "bool",
                id: 5
              },
              columnOrderAgnosticChecksum: {
                type: "bool",
                id: 6
              },
              serializedTable: {
                type: "string",
                id: 2
              },
              intoTable: {
                type: "IntoTable",
                id: 3
              }
            },
            nested: {
              Type: {
                values: {
                  FALCON_RESPONSE: 0,
                  SERIALIZED_TABLE: 1,
                  FALCON_TABLE: 2,
                  NO_RESULT: 3,
                  QUERY_SIGNATURE_ONLY: 4,
                  SERIALIZED_DICTIONARY: 5
                }
              },
              IntoTable: {
                fields: {
                  table: {
                    type: "MultiPartTableNameProto",
                    id: 1
                  },
                  schemaVersion: {
                    type: "sint32",
                    id: 2,
                    options: {
                      "default": 0
                    }
                  },
                  select: {
                    rule: "repeated",
                    type: "string",
                    id: 3,
                    options: {
                      "(defn_ref)": true
                    }
                  },
                  fileDir: {
                    type: "string",
                    id: 4
                  },
                  shard: {
                    type: "ShardingSpec",
                    id: 5
                  }
                }
              }
            }
          },
          From: {
            fields: {
              table: {
                type: "TableSpec",
                id: 1
              },
              join: {
                type: "Join",
                id: 2
              },
              unionSpec: {
                type: "UnionSpec",
                id: 3
              }
            },
            nested: {
              Join: {
                fields: {
                  type: {
                    type: "Type",
                    id: 2
                  },
                  condition: {
                    rule: "repeated",
                    type: "PredicateNode",
                    id: 3
                  },
                  left: {
                    type: "From",
                    id: 4
                  },
                  right: {
                    type: "From",
                    id: 5
                  },
                  joinNulls: {
                    type: "bool",
                    id: 6
                  }
                },
                nested: {
                  Type: {
                    values: {
                      CROSS: 0,
                      INNER: 1,
                      LEFT: 2,
                      RIGHT: 3,
                      FULL_OUTER: 4
                    }
                  }
                }
              },
              UnionSpec: {
                fields: {
                  name: {
                    type: "string",
                    id: 1
                  },
                  columnName: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  },
                  source: {
                    rule: "repeated",
                    type: "Source",
                    id: 3
                  }
                },
                nested: {
                  Source: {
                    fields: {
                      table: {
                        type: "TableSpec",
                        id: 1
                      },
                      column: {
                        rule: "repeated",
                        type: "string",
                        id: 2,
                        options: {
                          "(defn_ref)": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          OrderingColumn: {
            fields: {
              column: {
                type: "string",
                id: 1,
                options: {
                  "(defn_ref)": true
                }
              },
              ascending: {
                type: "bool",
                id: 2,
                options: {
                  "default": true
                }
              }
            }
          },
          GroupingColumn: {
            fields: {
              name: {
                type: "string",
                id: 1,
                options: {
                  deprecated: true
                }
              },
              displayName: {
                type: "string",
                id: 2,
                options: {
                  deprecated: true
                }
              },
              columns: {
                rule: "repeated",
                type: "string",
                id: 3,
                options: {
                  "(defn_ref)": true
                }
              },
              groupLimit: {
                type: "GroupLimit",
                id: 4
              },
              growth: {
                type: "Growth",
                id: 5
              },
              havingConditions: {
                rule: "repeated",
                type: "PredicateNode",
                id: 6
              }
            },
            nested: {
              GroupLimit: {
                fields: {
                  columns: {
                    rule: "repeated",
                    type: "string",
                    id: 1,
                    options: {
                      "(defn_ref)": true
                    }
                  },
                  orderingColumns: {
                    rule: "repeated",
                    type: "OrderingColumn",
                    id: 2
                  },
                  groupTopRowCountFilter: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": 10
                    }
                  }
                }
              },
              Growth: {
                fields: {
                  timeComparisonColumn: {
                    type: "string",
                    id: 3,
                    options: {
                      "(defn_ref)": true
                    }
                  }
                }
              }
            }
          },
          Distinct: {
            fields: {}
          },
          InternalParams: {
            fields: {
              groupSamplingThreshold: {
                type: "int64",
                id: 1,
                options: {
                  "default": -1
                }
              }
            }
          }
        }
      },
      Priority: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          priority: {
            type: "int64",
            id: 2
          },
          debug: {
            type: "string",
            id: 3
          }
        },
        nested: {
          Type: {
            values: {
              INTERACTIVE: 1,
              BATCH: 2
            }
          }
        }
      },
      FalconQuerySet: {
        fields: {
          identifier: {
            type: "string",
            id: 4
          },
          definitions: {
            type: "Definitions",
            id: 1
          },
          query: {
            rule: "repeated",
            type: "FalconQuery",
            id: 2
          },
          label: {
            type: "NamedTableSet.Label",
            id: 3
          },
          testOnly: {
            type: "TestOnly",
            id: 5
          },
          priority: {
            type: "Priority",
            id: 6
          }
        },
        nested: {
          TestOnly: {
            fields: {
              overrideToday: {
                type: "int64",
                id: 1
              },
              overrideNow: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      TableResult: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          numRowsReturned: {
            type: "int64",
            id: 4
          },
          numRowsTotal: {
            type: "int64",
            id: 5
          },
          column: {
            rule: "repeated",
            type: "ColumnResult",
            id: 3
          }
        }
      },
      ColumnResult: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          type: {
            type: "DataType.E",
            id: 3
          },
          value: {
            rule: "repeated",
            type: "ConstantValue",
            id: 4
          },
          userAnnotation: {
            type: "DeprecatedUserAnnotation",
            id: 5,
            options: {
              deprecated: true
            }
          }
        }
      },
      SerializedTableResult: {
        fields: {
          numRowsReturned: {
            type: "int64",
            id: 1
          }
        }
      },
      FalconRequest: {
        fields: {
          querySet: {
            type: "FalconQuerySet",
            id: 1
          },
          debugText: {
            type: "string",
            id: 2
          },
          incidentId: {
            type: "string",
            id: 17
          }
        },
        nested: {
          rpcId: {
            type: "FalconRequest",
            id: 1000,
            extend: "common.RpcBlog"
          }
        }
      },
      FalconResponse: {
        fields: {
          results: {
            rule: "repeated",
            type: "ResultSet",
            id: 1
          },
          incidentId: {
            type: "string",
            id: 2
          },
          priority: {
            type: "Priority",
            id: 3
          },
          userWaiting: {
            type: "sint32",
            id: 4
          },
          systemWaiting: {
            type: "sint32",
            id: 5
          },
          traceId: {
            type: "string",
            id: 6
          }
        },
        nested: {
          ResultSet: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              displayName: {
                type: "string",
                id: 2
              },
              status: {
                type: "common.StatusProto",
                id: 3
              },
              tables: {
                type: "TableResult",
                id: 4
              },
              serializedTable: {
                type: "SerializedTableResult",
                id: 15
              },
              checksum: {
                type: "uint64",
                id: 12
              },
              responseTimeMs: {
                type: "sint64",
                id: 5,
                options: {
                  deprecated: true
                }
              },
              responseTimeUs: {
                type: "sint64",
                id: 9
              },
              waitingTimeUs: {
                type: "sint64",
                id: 16
              },
              deadlineExceeded: {
                type: "bool",
                id: 6
              },
              completionRatio: {
                type: "double",
                id: 7,
                options: {
                  "default": 1
                }
              },
              samplingRatio: {
                type: "double",
                id: 8,
                options: {
                  "default": 1
                }
              },
              boundVersion: {
                rule: "repeated",
                type: "TableVersionInfo",
                id: 10
              },
              cacheHit: {
                type: "bool",
                id: 11,
                options: {
                  "default": false
                }
              },
              signature: {
                type: "string",
                id: 13
              },
              unboundSignature: {
                type: "string",
                id: 14
              },
              dictionaryMetadata: {
                type: "compression.DictionaryMetadata",
                id: 17
              }
            }
          }
        }
      },
      FalconCancelQueryRequest: {
        fields: {
          identifier: {
            type: "string",
            id: 1,
            options: {
              deprecated: true
            }
          },
          querysetId: {
            type: "string",
            id: 3
          },
          rebroadcast: {
            type: "bool",
            id: 2,
            options: {
              "default": true
            }
          }
        },
        nested: {
          rpcId: {
            type: "FalconCancelQueryRequest",
            id: 1001,
            extend: "common.RpcBlog"
          }
        }
      },
      FalconCancelQueryResponse: {
        fields: {
          cancelled: {
            type: "bool",
            id: 1
          }
        }
      },
      WorkerHealthzRequest: {
        fields: {
          wantTableStatus: {
            type: "bool",
            id: 1,
            options: {
              "default": false
            }
          }
        },
        nested: {
          rpcId: {
            type: "WorkerHealthzRequest",
            id: 1064,
            extend: "common.RpcBlog"
          }
        }
      },
      WorkerHealthzResponse: {
        fields: {
          healthy: {
            type: "bool",
            id: 1
          },
          tableStatus: {
            type: "bool",
            id: 2
          }
        }
      },
      ProbeQueryExecRequest: {
        fields: {
          wantResponse: {
            type: "bool",
            id: 1
          },
          request: {
            type: "FalconRequest",
            id: 2
          },
          sql: {
            type: "string",
            id: 3
          }
        },
        nested: {
          rpcId: {
            type: "ProbeQueryExecRequest",
            id: 1245,
            extend: "common.RpcBlog"
          }
        }
      },
      ProbeQueryExecResponse: {
        fields: {
          response: {
            type: "FalconResponse",
            id: 1
          }
        }
      },
      DeleteMaterializedQueryRequest: {
        fields: {
          materializedQueryId: {
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "DeleteMaterializedQueryRequest",
            id: 1165,
            extend: "common.RpcBlog"
          }
        }
      },
      DeleteMaterializedQueryResponse: {
        fields: {}
      },
      GetFalconSqlRequest: {
        fields: {
          request: {
            type: "FalconRequest",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "GetFalconSqlRequest",
            id: 1253,
            extend: "common.RpcBlog"
          }
        }
      },
      GetFalconSqlResponse: {
        fields: {
          sql: {
            type: "string",
            id: 1
          }
        }
      },
      compression: {
        nested: {
          DictionaryId: {
            fields: {
              tableGuid: {
                type: "string",
                id: 1
              },
              schemaVersion: {
                type: "int64",
                id: 2
              },
              dataVersion: {
                type: "int64",
                id: 3
              },
              columnIndex: {
                type: "int32",
                id: 4
              },
              proposalId: {
                type: "int64",
                id: 5
              }
            }
          },
          FileSystemPathProto: {
            fields: {
              fileSystem: {
                type: "FileSystem",
                id: 1,
                options: {
                  deprecated: true
                }
              },
              path: {
                type: "string",
                id: 2
              }
            },
            nested: {
              FileSystem: {
                values: {
                  POSIX: 0,
                  HDFS: 1,
                  S3A: 2
                }
              }
            }
          },
          DictionaryMetadata: {
            fields: {
              fingerprint: {
                type: "uint64",
                id: 6
              },
              path: {
                type: "FileSystemPathProto",
                id: 2
              },
              approxByteSize: {
                type: "int64",
                id: 3
              },
              numElements: {
                type: "int64",
                id: 4
              },
              publishedAt: {
                type: "int64",
                id: 5
              },
              id: {
                rule: "repeated",
                type: "DictionaryId",
                id: 1
              },
              version: {
                type: "int32",
                id: 7
              }
            }
          },
          DictionaryDepotMetadata: {
            fields: {
              metadata: {
                rule: "repeated",
                type: "DictionaryMetadata",
                id: 1
              }
            },
            nested: {
              znodeId: {
                type: "DictionaryDepotMetadata",
                id: 1035,
                extend: "net.zoo.ZnodeProto"
              }
            }
          }
        }
      },
      NamedTableSet: {
        fields: {
          label: {
            type: "Label",
            id: 1
          },
          table: {
            rule: "repeated",
            type: "TableHeaderProto",
            id: 2
          }
        },
        nested: {
          Label: {
            values: {
              FALCON_SERVING: 0,
              SAGE_BUILDING: 1,
              SAGE_SERVING: 2,
              FALCON_LOADED: 3
            }
          }
        }
      },
      UpdateTableSetMappingRequest: {
        fields: {
          from: {
            type: "NamedTableSet.Label",
            id: 1
          },
          table: {
            rule: "repeated",
            type: "string",
            id: 2
          },
          to: {
            type: "NamedTableSet.Label",
            id: 3
          },
          clearPin: {
            rule: "repeated",
            type: "string",
            id: 4
          }
        },
        nested: {
          rpcId: {
            type: "UpdateTableSetMappingRequest",
            id: 1028,
            extend: "common.RpcBlog"
          }
        }
      },
      UpdateTableSetMappingResponse: {
        fields: {
          table: {
            rule: "repeated",
            type: "NamedTableSet",
            id: 1
          }
        }
      },
      UpdateTableSetPinRequest: {
        fields: {
          label: {
            type: "NamedTableSet.Label",
            id: 1
          },
          retainPin: {
            rule: "repeated",
            type: "string",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "UpdateTableSetPinRequest",
            id: 1099,
            extend: "common.RpcBlog"
          }
        }
      },
      UpdateTableSetPinResponse: {
        fields: {
          table: {
            rule: "repeated",
            type: "NamedTableSet",
            id: 1
          }
        }
      },
      ShardingSpec: {
        fields: {
          cycleId: {
            type: "string",
            id: 1
          },
          worker: {
            rule: "repeated",
            type: "Worker",
            id: 2
          },
          schema: {
            type: "TableSchemaProto",
            id: 3
          }
        },
        nested: {
          Worker: {
            fields: {
              region: {
                type: "string",
                id: 1
              },
              worker: {
                type: "net.AddressProto",
                id: 2
              }
            }
          }
        }
      },
      ColocationSet: {
        fields: {
          table: {
            rule: "repeated",
            type: "Table",
            id: 1
          }
        },
        nested: {
          Table: {
            fields: {
              id: {
                type: "ObjectId",
                id: 3
              },
              schemaVersion: {
                type: "sint32",
                id: 4
              }
            }
          }
        }
      },
      LoadPriorityDescriptor: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          },
          priority: {
            type: "int64",
            id: 2
          }
        }
      },
      LoadCopyDescriptor: {
        fields: {
          tableId: {
            type: "ObjectId",
            id: 1
          },
          numMemCopies: {
            type: "int32",
            id: 2
          }
        }
      },
      OfflineTablesDescriptor: {
        fields: {
          table: {
            type: "ObjectId",
            id: 1
          },
          timestamp: {
            type: "int64",
            id: 2
          }
        }
      },
      FalconServerSchemaProto: {
        fields: {
          database: {
            rule: "repeated",
            type: "DatabaseProto",
            id: 1
          },
          empty: {
            type: "bool",
            id: 2
          },
          generationNum: {
            type: "int64",
            id: 3
          },
          colocationSet: {
            rule: "repeated",
            type: "ColocationSet",
            id: 4
          },
          updateTask: {
            rule: "repeated",
            type: "UpdateTaskDescriptor",
            id: 5
          },
          loadPriority: {
            rule: "repeated",
            type: "LoadPriorityDescriptor",
            id: 6
          },
          loadNumCopies: {
            rule: "repeated",
            type: "LoadCopyDescriptor",
            id: 7
          },
          offlineTable: {
            rule: "repeated",
            type: "OfflineTablesDescriptor",
            id: 8
          }
        },
        nested: {
          znodeId: {
            type: "FalconServerSchemaProto",
            id: 1014,
            extend: "net.zoo.ZnodeProto"
          }
        }
      },
      DatabaseProto: {
        fields: {
          id: {
            type: "ObjectId",
            id: 1
          },
          summary: {
            type: "ObjectSummary",
            id: 2
          },
          userSchema: {
            rule: "repeated",
            type: "UserSchemaProto",
            id: 3
          }
        }
      },
      UserSchemaProto: {
        fields: {
          id: {
            type: "ObjectId",
            id: 1
          },
          summary: {
            type: "ObjectSummary",
            id: 2
          },
          table: {
            rule: "repeated",
            type: "TableProto",
            id: 3
          },
          view: {
            rule: "repeated",
            type: "ViewProto",
            id: 4
          }
        }
      },
      TableProto: {
        fields: {
          id: {
            type: "ObjectId",
            id: 1
          },
          summary: {
            type: "ObjectSummary",
            id: 2
          },
          inUseSchemaVersion: {
            type: "int64",
            id: 3
          },
          schema: {
            rule: "repeated",
            type: "TableSchemaProto",
            id: 4
          },
          type: {
            type: "Type",
            id: 5,
            options: {
              "default": "UNKNOWN"
            }
          },
          maxSchemaVersion: {
            type: "int64",
            id: 6
          },
          internal: {
            type: "bool",
            id: 7,
            options: {
              "default": false
            }
          },
          isMaterializedView: {
            type: "bool",
            id: 8
          },
          isCalendarTable: {
            type: "bool",
            id: 9
          }
        },
        nested: {
          Type: {
            values: {
              UNKNOWN: 0,
              DIMENSION: 1,
              FACT: 2
            }
          }
        }
      },
      ViewProto: {
        fields: {
          table: {
            type: "TableProto",
            id: 1
          },
          querySet: {
            type: "FalconQuerySet",
            id: 2
          }
        }
      },
      UpdateTaskDescriptor: {
        fields: {
          summary: {
            type: "ObjectSummary",
            id: 1
          },
          taskId: {
            type: "ObjectId",
            id: 2
          },
          policy: {
            type: "UpdatePolicy",
            id: 3
          },
          table: {
            type: "Table",
            id: 4
          }
        },
        nested: {
          Table: {
            fields: {
              id: {
                type: "ObjectId",
                id: 1
              },
              insertInto: {
                type: "InsertIntoDML",
                id: 2
              },
              updatedFrom: {
                rule: "repeated",
                type: "string",
                id: 3
              }
            }
          }
        }
      },
      RegionStatProto: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          physical: {
            type: "Physical",
            id: 2
          }
        },
        nested: {
          Physical: {
            fields: {
              numRows: {
                type: "int64",
                id: 1
              },
              numDeletedRows: {
                type: "int64",
                id: 2
              },
              approximateByteSize: {
                type: "int64",
                id: 3
              },
              denormByteSize: {
                type: "int64",
                id: 4
              },
              compacted: {
                type: "bool",
                id: 5
              },
              column: {
                rule: "repeated",
                type: "Column",
                id: 6
              }
            }
          },
          Column: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              approximateByteSize: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      RamdiskStatProto: {
        fields: {
          totalSizeMb: {
            type: "uint64",
            id: 1
          },
          freeSizeMb: {
            type: "uint64",
            id: 2
          },
          populatedSizeMb: {
            type: "uint64",
            id: 3
          }
        }
      },
      WorkerStatProto: {
        fields: {
          id: {
            type: "sint32",
            id: 1,
            options: {
              "default": -1
            }
          },
          table: {
            rule: "repeated",
            type: "Table",
            id: 2
          },
          ramdiskStat: {
            type: "RamdiskStatProto",
            id: 3
          }
        },
        nested: {
          Table: {
            fields: {
              header: {
                type: "TableHeaderProto",
                id: 1
              },
              region: {
                rule: "repeated",
                type: "RegionStatProto",
                id: 2
              }
            }
          }
        }
      },
      GetWorkerStatisticsRequest: {
        fields: {
          tableId: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          includeColumns: {
            type: "bool",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "GetWorkerStatisticsRequest",
            id: 1091,
            extend: "common.RpcBlog"
          }
        }
      },
      GetWorkerStatisticsResponse: {
        fields: {
          stat: {
            type: "WorkerStatProto",
            id: 1
          }
        }
      },
      Distribution: {
        fields: {
          total: {
            type: "int64",
            id: 1
          },
          min: {
            type: "int64",
            id: 2
          },
          max: {
            type: "int64",
            id: 3
          },
          count: {
            type: "int64",
            id: 4
          },
          avg: {
            type: "double",
            id: 5
          },
          skew: {
            type: "int64",
            id: 6
          }
        }
      },
      ColumnStatProto: {
        fields: {
          columnId: {
            type: "ObjectId",
            id: 1
          },
          approxCardinality: {
            type: "int64",
            id: 2
          }
        }
      },
      TableStatProto: {
        fields: {
          id: {
            type: "ObjectId",
            id: 1
          },
          numRows: {
            type: "Distribution",
            id: 2
          },
          approximateByteSize: {
            type: "Distribution",
            id: 3
          },
          numDeletedRows: {
            type: "Distribution",
            id: 4
          },
          denormByteSize: {
            type: "Distribution",
            id: 12
          },
          numRegions: {
            type: "int32",
            id: 8
          },
          updated: {
            type: "VersionInfo",
            id: 5
          },
          serving: {
            type: "VersionInfo",
            id: 6
          },
          servingStatus: {
            type: "ServingStatus",
            id: 7,
            options: {
              "default": "READY"
            }
          },
          clusterMemoryUsageByte: {
            type: "int64",
            id: 9
          },
          avgCsvSizeRowByte: {
            type: "int64",
            id: 10
          },
          csvSizeReplicationByte: {
            type: "int64",
            id: 11
          },
          compacted: {
            type: "bool",
            id: 13
          }
        },
        nested: {
          ServingStatus: {
            values: {
              READY: 1,
              STALE: 2,
              INPROGRESS: 3,
              ERROR: 4,
              QUEUED: 5,
              OFFLINE: 6
            }
          },
          VersionInfo: {
            fields: {
              dataVersion: {
                type: "int64",
                id: 1
              },
              schemaVersion: {
                type: "int64",
                id: 2
              },
              createdOn: {
                type: "int64",
                id: 3
              },
              availability: {
                type: "Availability",
                id: 4
              },
              numRows: {
                type: "Distribution",
                id: 5
              },
              approximateByteSize: {
                type: "Distribution",
                id: 6
              },
              denormByteSize: {
                type: "Distribution",
                id: 10
              },
              numDeletedRows: {
                type: "Distribution",
                id: 7
              },
              numRegions: {
                type: "int32",
                id: 8
              },
              columnStat: {
                rule: "repeated",
                type: "ColumnStatProto",
                id: 9
              }
            },
            nested: {
              Availability: {
                values: {
                  READY: 1,
                  ERROR: 2,
                  NOT_YET_READY: 3,
                  OFFLINE: 4
                }
              }
            }
          }
        }
      },
      UserSchemaStatProto: {
        fields: {
          id: {
            type: "ObjectId",
            id: 1
          },
          table: {
            rule: "repeated",
            type: "TableStatProto",
            id: 2
          }
        }
      },
      DatabaseStatProto: {
        fields: {
          id: {
            type: "ObjectId",
            id: 1
          },
          userSchema: {
            rule: "repeated",
            type: "UserSchemaStatProto",
            id: 2
          }
        }
      },
      ServerStatProto: {
        fields: {
          database: {
            rule: "repeated",
            type: "DatabaseStatProto",
            id: 1
          }
        }
      },
      FormatProto: {
        fields: {
          timeFormat: {
            type: "string",
            id: 1,
            options: {
              "default": "%Y-%m-%d %H:%M:%S"
            }
          },
          fetchMaxRows: {
            type: "int64",
            id: 2,
            options: {
              "default": 10000
            }
          },
          rowSeparator: {
            type: "string",
            id: 3,
            options: {
              "default": "\n"
            }
          },
          fieldSeparator: {
            type: "string",
            id: 4,
            options: {
              "default": "|"
            }
          },
          dateAsEpoch: {
            type: "bool",
            id: 5,
            options: {
              "default": false
            }
          },
          dateTimeFormat: {
            type: "string",
            id: 6,
            options: {
              "default": "%Y-%m-%d %H:%M:%S"
            }
          },
          dateFormat: {
            type: "string",
            id: 7,
            options: {
              "default": "%Y-%m-%d"
            }
          }
        }
      },
      GetStatisticsRequest: {
        fields: {
          dbId: {
            type: "ObjectId",
            id: 1
          },
          userSchemaId: {
            type: "ObjectId",
            id: 2
          },
          tableId: {
            type: "ObjectId",
            id: 3
          },
          type: {
            type: "Type",
            id: 4
          },
          systemTablesOnly: {
            type: "bool",
            id: 5,
            options: {
              "default": true
            }
          },
          approximateCountDistinct: {
            type: "bool",
            id: 6,
            options: {
              "default": false
            }
          },
          includeCsvSize: {
            type: "bool",
            id: 7,
            options: {
              "default": false
            }
          },
          formatProto: {
            type: "FormatProto",
            id: 8
          }
        },
        nested: {
          rpcId: {
            type: "GetStatisticsRequest",
            id: 1092,
            extend: "common.RpcBlog"
          },
          Type: {
            values: {
              SERVER: 1,
              DATABASE: 2,
              USER_SCHEMA: 3,
              TABLE: 4
            }
          }
        }
      },
      GetStatisticsResponse: {
        fields: {
          server: {
            type: "ServerStatProto",
            id: 1
          }
        }
      }
    }
  },
  scriptability: {
    options: {
      java_package: "com.thoughtspot.callosum.metadata",
      java_outer_classname: "EDoc"
    },
    nested: {
      ColumnProperties: {
        fields: {
          columnType: {
            type: "string",
            id: 1
          },
          aggregation: {
            type: "string",
            id: 2
          },
          indexType: {
            type: "string",
            id: 3
          },
          indexPriority: {
            type: "double",
            id: 4,
            options: {
              "default": 1
            }
          },
          synonyms: {
            rule: "repeated",
            type: "string",
            id: 5
          },
          isAttributionDimension: {
            type: "bool",
            id: 6
          },
          isAdditive: {
            type: "bool",
            id: 7
          },
          calendar: {
            type: "string",
            id: 8
          },
          formatPattern: {
            type: "string",
            id: 9
          },
          currencyType: {
            type: "CurrencyFormat",
            id: 10
          },
          isHidden: {
            type: "bool",
            id: 11
          },
          geoConfig: {
            type: "GeoConfigProto",
            id: 12
          }
        },
        nested: {
          CurrencyFormat: {
            fields: {
              isBrowser: {
                type: "bool",
                id: 1
              },
              column: {
                type: "string",
                id: 2
              },
              isoCode: {
                type: "string",
                id: 3
              }
            }
          },
          GeoConfigProto: {
            fields: {
              latitude: {
                type: "bool",
                id: 1
              },
              longitude: {
                type: "bool",
                id: 2
              },
              country: {
                type: "bool",
                id: 3
              },
              regionName: {
                type: "SubRegion",
                id: 4
              }
            },
            nested: {
              SubRegion: {
                fields: {
                  country: {
                    type: "string",
                    id: 1
                  },
                  regionName: {
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          }
        }
      },
      Formula: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          alias: {
            type: "string",
            id: 2
          },
          expr: {
            type: "string",
            id: 3
          }
        }
      },
      Filter: {
        fields: {
          column: {
            type: "string",
            id: 1
          },
          condition: {
            rule: "repeated",
            type: "Condition",
            id: 2
          }
        },
        nested: {
          Condition: {
            fields: {
              oper: {
                type: "string",
                id: 1
              },
              value: {
                rule: "repeated",
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      Join: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          alias: {
            type: "string",
            id: 2
          },
          source: {
            type: "string",
            id: 3
          },
          destination: {
            type: "string",
            id: 4
          },
          on: {
            rule: "repeated",
            type: "string",
            id: 5
          },
          type: {
            type: "string",
            id: 6
          },
          isOneToOne: {
            type: "bool",
            id: 7
          }
        }
      },
      TablePath: {
        fields: {
          table: {
            type: "string",
            id: 1
          },
          alias: {
            type: "string",
            id: 2
          },
          joinPath: {
            rule: "repeated",
            type: "JoinPath",
            id: 3
          },
          column: {
            rule: "repeated",
            type: "string",
            id: 4
          }
        },
        nested: {
          JoinPath: {
            fields: {
              join: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          }
        }
      },
      Identity: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          alias: {
            type: "string",
            id: 2
          },
          fqn: {
            type: "string",
            id: 3
          }
        }
      },
      Token: {
        fields: {
          text: {
            type: "string",
            id: 1
          },
          alias: {
            type: "string",
            id: 2
          }
        }
      },
      ObjectEDocProto: {
        fields: {
          worksheet: {
            type: "WorksheetEDocProto",
            id: 1
          },
          view: {
            type: "ViewEDocProto",
            id: 2
          }
        }
      },
      WorksheetEDocProto: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          description: {
            type: "string",
            id: 2
          },
          tables: {
            rule: "repeated",
            type: "Identity",
            id: 3
          },
          joins: {
            rule: "repeated",
            type: "Join",
            id: 4
          },
          tablePaths: {
            rule: "repeated",
            type: "TablePath",
            id: 5
          },
          formulas: {
            rule: "repeated",
            type: "Formula",
            id: 6
          },
          filters: {
            rule: "repeated",
            type: "Filter",
            id: 7
          },
          worksheetColumns: {
            rule: "repeated",
            type: "WorksheetColumn",
            id: 8
          },
          properties: {
            type: "QueryProperties",
            id: 9
          }
        },
        nested: {
          QueryProperties: {
            fields: {
              isBypassRls: {
                type: "bool",
                id: 1
              },
              joinProgressive: {
                type: "bool",
                id: 2
              }
            }
          },
          WorksheetColumn: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              description: {
                type: "string",
                id: 2
              },
              column: {
                type: "string",
                id: 3
              },
              formula: {
                type: "string",
                id: 4
              },
              properties: {
                type: "ColumnProperties",
                id: 5
              }
            }
          }
        }
      },
      ViewEDocProto: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          tables: {
            rule: "repeated",
            type: "Identity",
            id: 2
          },
          joins: {
            rule: "repeated",
            type: "Join",
            id: 3
          },
          tablePaths: {
            rule: "repeated",
            type: "TablePath",
            id: 4
          },
          formulas: {
            rule: "repeated",
            type: "Formula",
            id: 5
          },
          filters: {
            rule: "repeated",
            type: "Filter",
            id: 6
          },
          viewColumns: {
            rule: "repeated",
            type: "ViewColumn",
            id: 7
          },
          query: {
            type: "string",
            id: 8
          }
        },
        nested: {
          ViewColumn: {
            fields: {
              phrase: {
                type: "string",
                id: 1
              },
              name: {
                type: "string",
                id: 2
              },
              alias: {
                type: "string",
                id: 3
              },
              properties: {
                type: "ColumnProperties",
                id: 4
              }
            }
          }
        }
      },
      ConnectionDoc: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          type: {
            type: "string",
            id: 2
          },
          properties: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 3
          },
          table: {
            rule: "repeated",
            type: "TableDoc",
            id: 4
          }
        },
        nested: {
          TableDoc: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              id: {
                type: "string",
                id: 2
              },
              externalTable: {
                type: "ExternalTableMapping",
                id: 3
              },
              column: {
                rule: "repeated",
                type: "ColumnDoc",
                id: 4
              }
            },
            nested: {
              ExternalTableMapping: {
                fields: {
                  dbName: {
                    type: "string",
                    id: 1
                  },
                  schemaName: {
                    type: "string",
                    id: 2
                  },
                  tableName: {
                    type: "string",
                    id: 3
                  }
                }
              },
              ColumnDoc: {
                fields: {
                  name: {
                    type: "string",
                    id: 1
                  },
                  id: {
                    type: "string",
                    id: 2
                  },
                  externalColumn: {
                    type: "string",
                    id: 3
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  callosum: {
    options: {
      java_package: "com.thoughtspot.callosum.metadata.manager.calendar",
      java_outer_classname: "VizSnapshotProto"
    },
    nested: {
      VisualizationColumnProto: {
        fields: {
          column: {
            type: "LogicalColumnProto",
            id: 1
          },
          sortAscending: {
            type: "bool",
            id: 2
          },
          sortIndex: {
            type: "int32",
            id: 3
          },
          userSorted: {
            type: "bool",
            id: 4
          },
          aggrTypeOverride: {
            type: "AggregateFunctionTypeEnumProto.E",
            id: 5
          },
          formatPatternOverride: {
            type: "string",
            id: 6
          },
          typeOverride: {
            type: "LogicalColumnProto.ColumnTypeEnumProto",
            id: 7
          },
          dataTypeOverrde: {
            type: "ColumnDataTypeEnumProto.E",
            id: 8
          },
          groupBy: {
            type: "bool",
            id: 9
          },
          sageColumnId: {
            type: "string",
            id: 10
          },
          sageOutputColumnGuid: {
            type: "string",
            id: 11
          },
          aggrApplied: {
            type: "bool",
            id: 12
          },
          metricDefinition: {
            type: "MetricDefinitionProto",
            id: 13
          }
        }
      },
      VisualizationProto: {
        fields: {
          header: {
            type: "MetadataHeaderProto",
            id: 1
          },
          title: {
            type: "string",
            id: 2
          },
          type: {
            type: "VisualizationTypeEnumProto",
            id: 3
          },
          tableContent: {
            type: "TableVisualizationContentProto",
            id: 4
          },
          chartContent: {
            type: "ChartVisualizationContentProto",
            id: 5
          },
          description: {
            type: "string",
            id: 6
          },
          shareYAxis: {
            type: "bool",
            id: 7,
            options: {
              "default": true
            }
          },
          imageContent: {
            type: "ImageVisualizationContentProto",
            id: 8
          },
          ranalysisContent: {
            type: "RanalysisVisualizationContentProto",
            id: 9
          },
          markersEnabled: {
            type: "bool",
            id: 10
          }
        },
        nested: {
          VisualizationTypeEnumProto: {
            values: {
              TABLE: 1,
              CHART: 2,
              HEADLINE: 3,
              IMAGE: 4,
              R_ANALYSIS: 5
            }
          },
          VisualizationContentProto: {
            fields: {
              locked: {
                type: "bool",
                id: 3
              },
              dataOnDemand: {
                type: "bool",
                id: 4
              }
            }
          },
          TableVisualizationContentProto: {
            fields: {
              content: {
                type: "VisualizationContentProto",
                id: 1
              },
              column: {
                rule: "repeated",
                type: "VisualizationColumnProto",
                id: 2
              }
            }
          },
          ImageVisualizationContentProto: {
            fields: {
              content: {
                type: "VisualizationContentProto",
                id: 1
              },
              rScript: {
                type: "string",
                id: 2
              }
            }
          },
          RanalysisVisualizationContentProto: {
            fields: {
              content: {
                type: "VisualizationContentProto",
                id: 1
              },
              dataVizType: {
                type: "VisualizationTypeEnumProto",
                id: 2
              }
            }
          },
          ChartVisualizationContentProto: {
            fields: {
              content: {
                type: "VisualizationContentProto",
                id: 1
              },
              column: {
                rule: "repeated",
                type: "VisualizationColumnProto",
                id: 2
              },
              axisConfig: {
                type: "AxisConfig",
                id: 3
              },
              chartType: {
                type: "ChartTypeEnumProto",
                id: 4
              }
            },
            nested: {
              ChartTypeEnumProto: {
                values: {
                  NONE: 0,
                  COLUMN: 1,
                  BAR: 2,
                  LINE: 3,
                  PIE: 4,
                  SCATTER: 5,
                  BUBBLE: 6,
                  STACKED_COLUMN: 7,
                  AREA: 8,
                  PARETO: 9,
                  GEO_AREA: 10,
                  GEO_BUBBLE: 11,
                  GEO_HEATMAP: 12,
                  GEO_EARTH_AREA: 13,
                  GEO_EARTH_BUBBLE: 14,
                  GEO_EARTH_BAR: 15,
                  GEO_EARTH_HEATMAP: 16,
                  GEO_EARTH_GRAPH: 17,
                  WATERFALL: 18,
                  TREEMAP: 19,
                  HEATMAP: 20,
                  STACKED_AREA: 21,
                  LINE_COLUMN: 22,
                  FUNNEL: 23,
                  PIVOT_TABLE: 24,
                  LINE_STACKED_COLUMN: 25,
                  SANKEY: 26,
                  GRID_TABLE: 27,
                  SPIDER_WEB: 28,
                  WHISKER_SCATTER: 29,
                  STACKED_BAR: 30,
                  CANDLESTICK: 31
                }
              },
              Axis: {
                fields: {
                  guid: {
                    type: "string",
                    id: 1
                  },
                  name: {
                    type: "string",
                    id: 2
                  },
                  metricDefinition: {
                    type: "MetricDefinitionProto",
                    id: 3
                  }
                }
              },
              AxisConfig: {
                fields: {
                  x: {
                    rule: "repeated",
                    type: "Axis",
                    id: 1
                  },
                  y: {
                    rule: "repeated",
                    type: "Axis",
                    id: 2
                  },
                  legend: {
                    rule: "repeated",
                    type: "Axis",
                    id: 3
                  },
                  radial: {
                    rule: "repeated",
                    type: "Axis",
                    id: 4
                  },
                  color: {
                    rule: "repeated",
                    type: "Axis",
                    id: 5
                  }
                }
              }
            }
          }
        }
      },
      VisualizationQueryProto: {
        fields: {
          serializedSageProgram: {
            type: "string",
            id: 1
          },
          sageProgram: {
            type: "sage.auto_complete.v2.SageProgram",
            id: 2
          },
          visualization: {
            type: "VisualizationProto",
            id: 3
          },
          context: {
            type: "sage.auto_complete.v2.ACContext",
            id: 4
          },
          tableIndex: {
            type: "int32",
            id: 5
          },
          explanation: {
            type: "sage.A3InsightExplanation",
            id: 6
          },
          customRAnalysis: {
            type: "sage.AnalysisDescriptor.CustomRAnalysis",
            id: 7
          },
          descriptionSummary: {
            type: "string",
            id: 8
          }
        }
      },
      InsightsInfo: {
        fields: {
          insightDetails: {
            rule: "repeated",
            type: "InsightDetailsProto",
            id: 1
          }
        },
        nested: {
          InsightDetailsProto: {
            fields: {
              visualizationQuery: {
                type: "callosum.VisualizationQueryProto",
                id: 1
              },
              sourceId: {
                type: "string",
                id: 2
              },
              sourceType: {
                type: "string",
                id: 3
              },
              computeTime: {
                type: "int64",
                id: 4
              }
            }
          }
        }
      },
      KeyValueProto: {
        fields: {
          key: {
            rule: "required",
            type: "falcon.ConstantValue",
            id: 1
          },
          value: {
            type: "falcon.ConstantValue",
            id: 2
          }
        }
      },
      ClientStateProto: {
        fields: {
          state: {
            rule: "repeated",
            type: "KeyValueProto",
            id: 1
          }
        }
      },
      ColumnDataTypeEnumProto: {
        fields: {},
        nested: {
          E: {
            values: {
              UNKNOWN: 0,
              BOOL: 1,
              CHAR: 2,
              VARCHAR: 3,
              DATE: 4,
              DATE_TIME: 5,
              TIME: 6,
              DATE_NUM: 7,
              DATE_NUM_QUARTER_IN_YEAR: 8,
              DATE_NUM_MONTH_IN_YEAR: 9,
              DATE_NUM_MONTH_IN_QUARTER: 10,
              DATE_NUM_WEEK_IN_YEAR: 11,
              DATE_NUM_WEEK_IN_QUARTER: 28,
              DATE_NUM_WEEK_IN_MONTH: 29,
              DATE_NUM_DAY_IN_YEAR: 12,
              DATE_NUM_DAY_IN_QUARTER: 13,
              DATE_NUM_DAY_IN_MONTH: 14,
              DATE_NUM_DAY_OF_WEEK: 15,
              DATE_NUM_DAY_OF_WEEK_STR: 16,
              DATE_NUM_HOUR_IN_DAY: 30,
              DATE_NUM_ABS_YEAR: 17,
              DATE_NUM_ABS_QUARTER: 18,
              DATE_NUM_ABS_DAY: 19,
              DATE_NUM_ABS_MONTH: 20,
              DATE_NUM_ABS_HOUR: 21,
              DATE_NUM_ABS_WEEK: 22,
              DATE_NUM_SEC_IN_DAY: 23,
              INT32: 24,
              INT64: 25,
              FLOAT: 26,
              DOUBLE: 27
            }
          }
        }
      },
      AggregateFunctionTypeEnumProto: {
        fields: {},
        nested: {
          E: {
            values: {
              NONE: 0,
              COUNT: 1,
              COUNT_DISTINCT: 2,
              SUM: 3,
              AVERAGE: 4,
              MIN: 5,
              MAX: 6,
              STD_DEVIATION: 7,
              VARIANCE: 8,
              GROWTH: 9,
              AGGR_DISTINCT: 10,
              TABLE_AGGR: 11,
              RANK: 12,
              RANK_PERCENTILE: 13
            }
          }
        }
      },
      GeoTypeEnumProto: {
        fields: {},
        nested: {
          E: {
            values: {
              NONE: 0,
              AREA_CODE: 1,
              CBSA_MSA: 2,
              CITY: 3,
              CONGRESSIONAL_DISTRICT: 4,
              COUNTRY_REGION: 5,
              COUNTY: 6,
              LATITUDE: 7,
              LONGITUDE: 8,
              STATE_PROVINCE: 9,
              ZIP_CODE: 10
            }
          }
        }
      },
      ColumnSpotiqPreferenceProto: {
        fields: {},
        nested: {
          E: {
            values: {
              DEFAULT: 0,
              EXCLUDE: 1
            }
          }
        }
      },
      GeoConfigProto: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          fixedValue: {
            type: "string",
            id: 2
          },
          columnGuid: {
            type: "string",
            id: 3
          },
          customFileGuid: {
            type: "string",
            id: 5
          },
          parent: {
            type: "GeoConfigProto",
            id: 4
          }
        },
        nested: {
          Type: {
            values: {
              LATITUDE: 0,
              LONGITUDE: 1,
              ZIP_CODE: 2,
              ADMIN_DIV_0: 3,
              ADMIN_DIV_1: 4,
              ADMIN_DIV_2: 5,
              CUSTOM_REGION: 6
            }
          }
        }
      },
      LogicalRelationshipJoinTypeEnumProto: {
        fields: {},
        nested: {
          E: {
            values: {
              INNER: 0,
              LEFT_OUTER: 1,
              RIGHT_OUTER: 2,
              OUTER: 3
            }
          }
        }
      },
      WorksheetTypeEnumProto: {
        fields: {},
        nested: {
          E: {
            values: {
              VIEW: 0,
              CONTAINER: 1
            }
          }
        }
      },
      LogicalTableTypeEnumProto: {
        fields: {},
        nested: {
          E: {
            values: {
              ONE_TO_ONE_LOGICAL: 1,
              WORKSHEET: 2,
              PRIVATE_WORKSHEET: 3,
              USER_DEFINED: 4,
              DB_VIEW: 5,
              AGGR_WORKSHEET: 6,
              MATERIALIZED_VIEW: 7,
              CALENDAR_TABLE: 8
            }
          }
        }
      },
      MetadataHeaderProto: {
        fields: {
          idGuid: {
            rule: "required",
            type: "string",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          },
          description: {
            type: "string",
            id: 3
          },
          authorGuid: {
            type: "string",
            id: 4
          },
          authorName: {
            type: "string",
            id: 5
          },
          authorDisplayName: {
            type: "string",
            id: 6
          },
          created: {
            type: "int64",
            id: 7
          },
          modified: {
            type: "int64",
            id: 8
          },
          modifiedBy: {
            type: "string",
            id: 9
          },
          generationNum: {
            type: "int64",
            id: 10
          },
          ownerGuid: {
            type: "string",
            id: 11
          },
          deleted: {
            type: "bool",
            id: 12
          },
          hidden: {
            type: "bool",
            id: 13
          },
          clientState: {
            type: "ClientStateProto",
            id: 14
          },
          databaseStripe: {
            type: "string",
            id: 15
          },
          schemaStripe: {
            type: "string",
            id: 16
          },
          tag: {
            rule: "repeated",
            type: "MetadataHeaderProto",
            id: 17
          },
          type: {
            type: "string",
            id: 18
          },
          metadataType: {
            type: "string",
            id: 19
          }
        }
      },
      SearchFilterProto: {
        fields: {
          subType: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          ownerType: {
            rule: "repeated",
            type: "string",
            id: 2
          },
          tagName: {
            rule: "repeated",
            type: "string",
            id: 3
          },
          namePattern: {
            type: "string",
            id: 4
          },
          skipId: {
            rule: "repeated",
            type: "string",
            id: 5
          },
          fetchId: {
            rule: "repeated",
            type: "string",
            id: 6
          },
          autoCreated: {
            type: "BoolFilterValue.E",
            id: 7
          },
          isAuthor: {
            type: "BoolFilterValue.E",
            id: 8
          },
          favorite: {
            type: "BoolFilterValue.E",
            id: 9
          },
          expertRequest: {
            type: "BoolFilterValue.E",
            id: 10
          },
          status: {
            type: "RequestStatus.E",
            id: 11
          }
        },
        nested: {
          RequestStatus: {
            fields: {},
            nested: {
              E: {
                values: {
                  ALL: 1,
                  RESOLVED: 2,
                  UNRESOLVED: 3
                }
              }
            }
          },
          BoolFilterValue: {
            fields: {},
            nested: {
              E: {
                values: {
                  IGNORE: 1,
                  TRUE: 2,
                  FALSE: 3
                }
              }
            }
          }
        }
      },
      MetricDefinitionProto: {
        fields: {
          row: {
            rule: "repeated",
            type: "Row",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          }
        },
        nested: {
          Range: {
            fields: {
              min: {
                type: "double",
                id: 1
              },
              max: {
                type: "double",
                id: 2
              }
            }
          },
          Action: {
            values: {
              NONE: 0,
              ALERT: 1,
              EMAIL: 2
            }
          },
          Row: {
            fields: {
              range: {
                type: "Range",
                id: 1
              },
              color: {
                type: "string",
                id: 2
              },
              iconPath: {
                type: "string",
                id: 3
              },
              action: {
                type: "Action",
                id: 4
              },
              plotAsBand: {
                type: "bool",
                id: 5
              }
            }
          }
        }
      },
      LogicalColumnProto: {
        fields: {
          header: {
            rule: "required",
            type: "MetadataHeaderProto",
            id: 1
          },
          content: {
            type: "LogicalColumnContentProto",
            id: 2
          },
          derived: {
            type: "bool",
            id: 3
          },
          derivationExpression: {
            type: "ExpressionProto",
            id: 4
          },
          physicalColumnGuid: {
            type: "string",
            id: 5
          }
        },
        nested: {
          ColumnTypeEnumProto: {
            values: {
              UNKNOWN: 0,
              ATTRIBUTE: 1,
              MEASURE: 2
            }
          },
          LogicalColumnContentProto: {
            fields: {
              dataType: {
                type: "ColumnDataTypeEnumProto.E",
                id: 1
              },
              type: {
                type: "ColumnTypeEnumProto",
                id: 2,
                options: {
                  "default": "UNKNOWN"
                }
              },
              defaultAggrType: {
                type: "AggregateFunctionTypeEnumProto.E",
                id: 3,
                options: {
                  "default": "NONE"
                }
              },
              sageFormulaId: {
                type: "string",
                id: 4
              },
              sageOutputColumnGuid: {
                type: "string",
                id: 5
              },
              defaultFormatPattern: {
                type: "string",
                id: 6
              },
              geoType: {
                type: "GeoTypeEnumProto.E",
                id: 7,
                options: {
                  deprecated: true
                }
              },
              geoConfig: {
                type: "GeoConfigProto",
                id: 18
              },
              attributionDimension: {
                type: "bool",
                id: 8
              },
              additive: {
                type: "bool",
                id: 9
              },
              primaryKey: {
                type: "bool",
                id: 10
              },
              foreignKey: {
                type: "bool",
                id: 11
              },
              indexType: {
                type: "sage.ColumnIndexType.E",
                id: 12
              },
              indexPriority: {
                type: "float",
                id: 13
              },
              physicalColumnName: {
                type: "string",
                id: 14
              },
              synonym: {
                rule: "repeated",
                type: "string",
                id: 15
              },
              metricDefinition: {
                type: "MetricDefinitionProto",
                id: 16
              },
              entityCategory: {
                type: "sage.EntityCategory.E",
                id: 17
              },
              spotiqPreference: {
                type: "ColumnSpotiqPreferenceProto.E",
                id: 19
              }
            }
          }
        }
      },
      LogicalTableProto: {
        fields: {
          header: {
            rule: "required",
            type: "MetadataHeaderProto",
            id: 1
          },
          content: {
            type: "LogicalTableContentProto",
            id: 2
          },
          column: {
            rule: "repeated",
            type: "LogicalColumnProto",
            id: 3
          },
          relationship: {
            rule: "repeated",
            type: "LogicalRelationshipProto",
            id: 4
          },
          physicalTableGuid: {
            type: "string",
            id: 5
          },
          physicalTableVersion: {
            type: "int64",
            id: 6
          },
          type: {
            type: "LogicalTableTypeEnumProto.E",
            id: 7,
            options: {
              "default": "ONE_TO_ONE_LOGICAL"
            }
          },
          dataSourceGuid: {
            type: "string",
            id: 8
          }
        },
        nested: {
          LogicalTableContentProto: {
            fields: {
              joinType: {
                type: "LogicalRelationshipJoinTypeEnumProto.E",
                id: 1
              },
              physicalTableName: {
                type: "string",
                id: 2
              },
              worksheetType: {
                type: "WorksheetTypeEnumProto.E",
                id: 3
              },
              aggregatedWorksheet: {
                type: "bool",
                id: 4
              }
            }
          }
        }
      },
      LogicalRelationshipProto: {
        fields: {
          header: {
            rule: "required",
            type: "MetadataHeaderProto",
            id: 1
          },
          content: {
            type: "LogicalRelationshipContentProto",
            id: 2
          },
          sourceTableGuid: {
            type: "string",
            id: 3
          },
          destinationTableGuid: {
            type: "string",
            id: 4
          },
          joinType: {
            type: "LogicalRelationshipJoinTypeEnumProto.E",
            id: 5
          },
          type: {
            type: "LogicalRelationshipTypeEnumProto",
            id: 6
          }
        },
        nested: {
          LogicalRelationshipContentProto: {
            fields: {
              relationship: {
                rule: "repeated",
                type: "SingleColumnLogicalRelationshipProto",
                id: 1
              },
              genericJoin: {
                type: "ExpressionProto",
                id: 2
              },
              weight: {
                type: "float",
                id: 3
              }
            },
            nested: {
              SingleColumnLogicalRelationshipProto: {
                fields: {
                  sourceColumnGuid: {
                    type: "string",
                    id: 1
                  },
                  destinationColumnGuid: {
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          LogicalRelationshipTypeEnumProto: {
            values: {
              USER_DEFINED: 1,
              PK_FK: 2,
              GENERIC: 3
            }
          }
        }
      },
      SchemaViewerProto: {
        fields: {
          table: {
            rule: "repeated",
            type: "LogicalTableProto",
            id: 1
          }
        }
      },
      ExpressionProto: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          id: {
            rule: "required",
            type: "string",
            id: 2
          },
          columnType: {
            type: "ColumnType",
            id: 3,
            options: {
              "default": "NONE"
            }
          },
          value: {
            rule: "repeated",
            type: "falcon.ConstantValue",
            id: 5
          },
          child: {
            rule: "repeated",
            type: "ExpressionProto",
            id: 6
          },
          aggregation: {
            type: "falcon.AggregateOp.E",
            id: 7
          },
          operator: {
            type: "falcon.ExpressionOp.E",
            id: 8
          },
          joinPaths: {
            rule: "repeated",
            type: "sage.JoinPathProto",
            id: 9
          }
        },
        nested: {
          ColumnType: {
            values: {
              NONE: 0,
              LOGICAL_COLUMN: 1,
              VIZ_COLUMN: 2
            }
          }
        }
      },
      DataRow: {
        fields: {
          dataValue: {
            rule: "repeated",
            type: "falcon.ConstantValue",
            id: 1
          }
        }
      },
      VisualizationDataProto: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          visualizationColumn: {
            rule: "repeated",
            type: "VisualizationColumnProto",
            id: 2
          },
          dataRow: {
            rule: "repeated",
            type: "DataRow",
            id: 3
          },
          samplingRatio: {
            type: "double",
            id: 4
          },
          boundVersion: {
            rule: "repeated",
            type: "falcon.TableVersionInfo",
            id: 5
          }
        }
      },
      RequestType: {
        fields: {},
        nested: {
          E: {
            values: {
              ANSWER_UNSAVED: 0,
              ANSWER_SAVED: 1,
              ANSWER_PINBOARD_CONTEXT: 2,
              VIEW_ANSWER_VIEW: 3,
              ANSWER_UPGRADE: 4,
              PINBOARD_VIEW: 5,
              PINBOARD_FILTER: 6,
              PINBOARD_AD_HOC: 7,
              DATA_CHART_CONFIG: 8,
              DATA_SHOW_UNDERLYING_ROW: 9,
              DATA_EXPORT: 10,
              PINBOARD_TSPUBLIC_RUNTIME_FILTER: 11,
              ANSWER_VIEW_LIST: 12,
              ANSWER_VIEW_SAVE: 13,
              ANSWER_ADD_NEW_FILTER: 14,
              DATA_SHOW_UNDERLYING_VIZ: 15,
              ANSWER_VIEW: 16,
              ANSWER_VIZ_CONTEXT_VIEW: 17,
              PINBOARD_INSIGHT_VIEW: 18,
              PINBOARD_ADMIN_VIEW: 19,
              PINBOARD_EMBED_VIEW: 20,
              PINBOARD_HOMEPAGE_VIEW: 21,
              PINBOARD_LEARN_VIEW: 22,
              PINBOARD_TSPUBLIC_NO_RUNTIME_FILTER: 23,
              ANSWER_HELP_REQUESTED: 24,
              PINBOARD_PRINT_VIEW: 25,
              PINBOARD_PRINT_FILTER: 26,
              UNKNOWN: 10000
            }
          }
        }
      },
      ClientType: {
        fields: {},
        nested: {
          E: {
            values: {
              BLINK: 0,
              MOBILE: 1,
              FULL_EMBED: 2,
              PUBLIC_API_DIRECT: 3
            }
          }
        }
      },
      ObjectType: {
        fields: {},
        nested: {
          E: {
            values: {
              TABLE: 0,
              COLUMN: 1,
              RELATIONSHIP: 2,
              ANSWER: 3,
              PINBOARD: 4,
              FILTER: 5
            }
          }
        }
      },
      SearchFeedRequest: {
        fields: {
          objectType: {
            type: "ObjectType",
            id: 1,
            options: {
              "default": "ALL"
            }
          },
          query: {
            type: "string",
            id: 2
          },
          maxResults: {
            type: "int32",
            id: 3
          },
          searchContext: {
            type: "SearchContext",
            id: 4
          },
          debug: {
            type: "bool",
            id: 5,
            options: {
              "default": false
            }
          }
        },
        nested: {
          ObjectType: {
            values: {
              ALL: 1,
              ANSWER: 2,
              PINBOARD: 3
            }
          },
          SearchContext: {
            fields: {
              inScopeTable: {
                rule: "repeated",
                type: "string",
                id: 1
              },
              userId: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      SearchFeedResponse: {
        fields: {
          results: {
            rule: "repeated",
            type: "Object",
            id: 1
          }
        },
        nested: {
          ObjectType: {
            values: {
              ANSWER: 1,
              PINBOARD: 2
            }
          },
          Viz: {
            fields: {
              guid: {
                type: "string",
                id: 1
              },
              title: {
                type: "string",
                id: 2
              },
              score: {
                type: "float",
                id: 3
              },
              vizType: {
                type: "string",
                id: 4
              },
              chartType: {
                type: "VisualizationProto.ChartVisualizationContentProto.ChartTypeEnumProto",
                id: 5
              },
              explanation: {
                type: "string",
                id: 6
              }
            }
          },
          Object: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              title: {
                type: "string",
                id: 2
              },
              description: {
                type: "string",
                id: 3
              },
              authorGuid: {
                type: "string",
                id: 4
              },
              authorName: {
                type: "string",
                id: 5
              },
              viz: {
                rule: "repeated",
                type: "Viz",
                id: 6
              },
              numViews: {
                type: "int32",
                id: 7
              },
              numFavorites: {
                type: "int32",
                id: 8
              },
              score: {
                type: "float",
                id: 9
              },
              objectType: {
                type: "ObjectType",
                id: 10
              },
              explanation: {
                type: "string",
                id: 11
              }
            }
          }
        }
      },
      SnapshotType: {
        values: {
          HTML: 1,
          JPEG: 2,
          SVG: 3
        }
      },
      VizSnapshot: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          version: {
            type: "int32",
            id: 2
          },
          queryHash: {
            type: "int64",
            id: 3
          },
          createdMs: {
            type: "int64",
            id: 4
          },
          vizContent: {
            type: "string",
            id: 5
          },
          snapshotType: {
            type: "SnapshotType",
            id: 6
          }
        }
      },
      GetVizSnapshotRequest: {
        fields: {
          request: {
            rule: "repeated",
            type: "VizSnapshotRequest",
            id: 1
          }
        },
        nested: {
          VizSnapshotRequest: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              queryHash: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      GetVizSnapshotResponse: {
        fields: {
          response: {
            rule: "repeated",
            type: "VizSnapshotResponse",
            id: 1
          }
        },
        nested: {
          VizSnapshotResponse: {
            fields: {
              status: {
                type: "common.StatusProto",
                id: 1
              },
              id: {
                type: "string",
                id: 2
              },
              vizContent: {
                type: "string",
                id: 3
              },
              snapshotType: {
                type: "SnapshotType",
                id: 4
              },
              createdMs: {
                type: "int64",
                id: 5
              }
            }
          }
        }
      },
      AddVizSnapshotRequest: {
        fields: {
          requests: {
            rule: "repeated",
            type: "AddVizSnapshot",
            id: 1
          }
        },
        nested: {
          AddVizSnapshot: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              version: {
                type: "int32",
                id: 2
              },
              vizContent: {
                type: "string",
                id: 3
              },
              snapshotType: {
                type: "SnapshotType",
                id: 4
              }
            }
          }
        }
      },
      AddVizSnapshotResponse: {
        fields: {
          status: {
            rule: "repeated",
            type: "common.StatusProto",
            id: 1
          }
        }
      },
      PreferenceProto: {
        fields: {
          a3: {
            type: "A3PreferenceProto",
            id: 1
          }
        },
        nested: {
          NotificationProto: {
            fields: {
              notifiy: {
                type: "bool",
                id: 1,
                options: {
                  "default": true
                }
              },
              onSuccess: {
                type: "bool",
                id: 2,
                options: {
                  "default": true
                }
              },
              onFailure: {
                type: "bool",
                id: 3,
                options: {
                  "default": true
                }
              },
              attachContent: {
                type: "bool",
                id: 4,
                options: {
                  "default": false
                }
              }
            }
          },
          A3PreferenceProto: {
            fields: {
              emailNotification: {
                type: "NotificationProto",
                id: 1
              },
              excludeColumns: {
                rule: "repeated",
                type: "string",
                id: 2
              },
              excludeNull: {
                type: "bool",
                id: 3,
                options: {
                  "default": true
                }
              },
              feedbackToken: {
                rule: "repeated",
                type: "FeedbackToken",
                id: 4
              },
              excludeZeroMeasure: {
                type: "bool",
                id: 5,
                options: {
                  "default": true
                }
              },
              autotuneDateBoundary: {
                type: "bool",
                id: 6,
                options: {
                  "default": true
                }
              },
              pValueThreshold: {
                type: "double",
                id: 7,
                options: {
                  "default": 0.05
                }
              },
              minCorrCoeff: {
                type: "double",
                id: 8,
                options: {
                  "default": 0.7
                }
              },
              maxCorrCoeff: {
                type: "double",
                id: 9,
                options: {
                  "default": 0.98
                }
              },
              maxLag: {
                type: "double",
                id: 10,
                options: {
                  "default": 50
                }
              },
              minRelativeDiff: {
                type: "double",
                id: 11,
                options: {
                  "default": 5
                }
              }
            }
          }
        }
      },
      FeedbackToken: {
        fields: {
          rating: {
            type: "sint32",
            id: 1
          },
          token: {
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 2
          },
          tokenValue: {
            rule: "repeated",
            type: "FeedbackTokenValue",
            id: 3
          }
        }
      },
      FeedbackTokenValue: {
        fields: {
          value: {
            type: "falcon.ConstantValue",
            id: 1
          },
          dateValue: {
            type: "sage.DateFilterProto",
            id: 2
          }
        }
      },
      A3FeedbackProto: {
        fields: {
          userId: {
            type: "string",
            id: 1
          },
          a3Request: {
            type: "sage.A3Request",
            id: 2
          },
          context: {
            type: "sage.auto_complete.v2.ACContext",
            id: 3
          },
          tableIndex: {
            type: "int32",
            id: 4,
            options: {
              "default": 0
            }
          },
          rating: {
            type: "sint32",
            id: 5,
            options: {
              "default": 0
            }
          },
          comment: {
            type: "string",
            id: 6
          },
          insightHash: {
            type: "string",
            id: 8
          },
          feedbackFeatures: {
            rule: "repeated",
            type: "sage.InsightFeature",
            id: 9
          },
          feedbackToken: {
            rule: "repeated",
            type: "FeedbackToken",
            id: 7
          }
        }
      },
      FeedbackProto: {
        fields: {
          a3: {
            type: "A3FeedbackProto",
            id: 1
          }
        }
      },
      FeedbackProtoV2: {
        fields: {
          insightFeedbackProto: {
            type: "InsightFeedbackProto",
            id: 1
          }
        }
      },
      InsightFeedbackProto: {
        fields: {
          rating: {
            type: "sint32",
            id: 1
          },
          insightSignature: {
            type: "string",
            id: 2
          },
          feedbackId: {
            type: "string",
            id: 3
          },
          userId: {
            type: "string",
            id: 4
          },
          type: {
            type: "string",
            id: 5
          },
          creationTime: {
            type: "int64",
            id: 6
          },
          modificationTime: {
            type: "int64",
            id: 7
          },
          isDeleted: {
            type: "bool",
            id: 8
          },
          insightObject: {
            type: "callosum.InsightsInfo.InsightDetailsProto",
            id: 10
          },
          feedbackFeatures: {
            rule: "repeated",
            type: "sage.InsightFeature",
            id: 11
          }
        }
      },
      CalendarConfig: {
        fields: {
          header: {
            type: "sage.EntityHeader",
            id: 1
          },
          daysOfWeek: {
            type: "DayOfWeekSpec",
            id: 2
          },
          months: {
            type: "MonthSpec",
            id: 3
          },
          quarters: {
            type: "QuarterSpec",
            id: 4
          },
          years: {
            type: "YearSpec",
            id: 5
          },
          dayNumberOfWeekRange: {
            type: "IntRange",
            id: 6
          },
          dayNumberOfMonthRange: {
            type: "IntRange",
            id: 7
          },
          dayNumberOfQuarterRange: {
            type: "IntRange",
            id: 8
          },
          dayNumberOfYearRange: {
            type: "IntRange",
            id: 9
          },
          weekNumberOfMonthRange: {
            type: "IntRange",
            id: 10
          },
          weekNumberOfQuarterRange: {
            type: "IntRange",
            id: 11
          },
          weekNumberOfYearRange: {
            type: "IntRange",
            id: 12
          },
          monthNumberOfQuarterRange: {
            type: "IntRange",
            id: 13
          },
          monthNumberOfYearRange: {
            type: "IntRange",
            id: 14
          },
          quarterNumberOfYearRange: {
            type: "IntRange",
            id: 15
          }
        },
        nested: {
          IntRange: {
            fields: {
              start: {
                type: "int64",
                id: 1
              },
              end: {
                type: "int64",
                id: 2
              }
            }
          },
          DayOfWeekSpec: {
            fields: {
              dayOfWeekName: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          },
          MonthSpec: {
            fields: {
              monthName: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          },
          QuarterSpec: {
            fields: {
              quarterName: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          },
          YearSpec: {
            fields: {
              yearName: {
                rule: "repeated",
                type: "string",
                id: 1
              },
              yearRange: {
                type: "IntRange",
                id: 2
              }
            }
          }
        }
      },
      CustomCalendarConfigurations: {
        fields: {
          calendarConfigurations: {
            rule: "repeated",
            type: "CalendarConfig",
            id: 1
          }
        },
        nested: {
          znodeId: {
            type: "CustomCalendarConfigurations",
            id: 1068,
            extend: "net.zoo.ZnodeProto"
          }
        }
      }
    }
  },
  scheduler: {
    options: {
      java_package: "com.thoughtspot.timely",
      go_package: "job_manager_interface_pb"
    },
    nested: {
      JobRunStateProto: {
        fields: {
          state: {
            type: "State",
            id: 1
          }
        },
        nested: {
          State: {
            values: {
              DEFAULT: 0,
              RUNNING: 1,
              FAILED: 2,
              SUCCESS: 3,
              DEADLINE: 4,
              DOES_NOT_EXIST: 5
            }
          }
        }
      },
      JobExitStatusProto: {
        fields: {
          state: {
            type: "JobRunStateProto",
            id: 4
          },
          messageCode: {
            type: "common.MessageCode",
            id: 1
          },
          detail: {
            type: "string",
            id: 2
          }
        }
      },
      JobRunProto: {
        fields: {
          runId: {
            type: "string",
            id: 1
          },
          jobId: {
            type: "string",
            id: 2
          },
          startTime: {
            type: "int64",
            id: 3
          },
          endTime: {
            type: "int64",
            id: 4
          },
          progress: {
            type: "util.ProgressReportProto",
            id: 5
          },
          exitStatus: {
            type: "JobExitStatusProto",
            id: 6
          },
          runState: {
            type: "JobRunStateProto",
            id: 7
          },
          keyValuePairs: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 8
          }
        }
      },
      JobStateProto: {
        fields: {
          state: {
            type: "State",
            id: 1
          }
        },
        nested: {
          State: {
            values: {
              DEFAULT: 0,
              SCHEDULED: 1,
              PAUSED: 2,
              STOPPED: 3,
              CLEANUP: 4,
              EXPIRED: 5
            }
          }
        }
      },
      ScheduledRpcJobProto: {
        fields: {
          easyAddress: {
            type: "string",
            id: 1
          },
          keyValuePairs: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 3
          }
        }
      },
      ScheduledHttpJobProto: {
        fields: {
          httpUrl: {
            type: "string",
            id: 1
          },
          easyAddress: {
            type: "string",
            id: 3
          },
          path: {
            type: "string",
            id: 4
          },
          keyValuePairs: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 2
          }
        }
      },
      ScheduledBashJobProto: {
        fields: {
          command: {
            type: "string",
            id: 2
          }
        }
      },
      JobHandler: {
        fields: {
          handler: {
            type: "Handler",
            id: 1
          }
        },
        nested: {
          Handler: {
            values: {
              NONE: 0,
              SCHEDULED_REPORT: 1,
              DATACONNECT: 2,
              TEST1: 3,
              TEST2: 4,
              DEFAULT: 5,
              A3_GC: 6,
              A3_Analysis: 7,
              A3_Executive_Summary: 8,
              MATERIALIZED_VIEW_REFRESH: 9,
              LIVEQUERY_DATA_IMPORT: 10,
              SUBSCRIBE: 11
            }
          }
        }
      },
      ScheduledJobProto: {
        fields: {
          schedule: {
            type: "TimeSchedule",
            id: 1
          },
          nodeSchedule: {
            type: "NodeSchedule",
            id: 20
          },
          id: {
            type: "string",
            id: 2
          },
          name: {
            type: "string",
            id: 4
          },
          description: {
            type: "string",
            id: 5
          },
          tags: {
            rule: "repeated",
            type: "string",
            id: 6
          },
          creationTime: {
            type: "int64",
            id: 7
          },
          lastModificationTime: {
            type: "int64",
            id: 8
          },
          creationAuthor: {
            type: "string",
            id: 9
          },
          creationAuthorHeader: {
            type: "common.EntityHeader",
            id: 22
          },
          lastModificationAuthor: {
            type: "string",
            id: 10
          },
          currentState: {
            type: "JobStateProto",
            id: 11
          },
          executorRetryPolicy: {
            type: "RetryPolicy",
            id: 12
          },
          schedulerRetryPolicy: {
            type: "RetryPolicy",
            id: 13
          },
          jobRunDeadline: {
            type: "int64",
            id: 18
          },
          jobRunStatusPollInterval: {
            type: "int64",
            id: 19
          },
          type: {
            type: "Type",
            id: 14
          },
          bashJob: {
            type: "ScheduledBashJobProto",
            id: 15
          },
          httpJob: {
            type: "ScheduledHttpJobProto",
            id: 16
          },
          rpcJob: {
            type: "ScheduledRpcJobProto",
            id: 17
          },
          jobHandler: {
            type: "JobHandler",
            id: 21
          }
        },
        nested: {
          Type: {
            values: {
              DEFAULT: 0,
              BASH: 1,
              HTTP: 2,
              RPC: 3
            }
          }
        }
      },
      CronSchedule: {
        fields: {
          second: {
            type: "string",
            id: 1
          },
          minute: {
            type: "string",
            id: 2
          },
          hour: {
            type: "string",
            id: 3
          },
          dayOfMonth: {
            type: "string",
            id: 4
          },
          month: {
            type: "string",
            id: 5
          },
          dayOfWeek: {
            type: "string",
            id: 6
          }
        }
      },
      OneTimeSchedule: {
        fields: {
          offset: {
            type: "int64",
            id: 1
          }
        }
      },
      PeriodicSchedule: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          cronSchedule: {
            type: "CronSchedule",
            id: 2
          },
          startTime: {
            type: "int64",
            id: 3
          },
          endTime: {
            type: "int64",
            id: 4
          }
        },
        nested: {
          Type: {
            values: {
              DEFAULT: 0,
              CRON: 1
            }
          }
        }
      },
      TimeSchedule: {
        fields: {
          periodicity: {
            type: "Periodicity",
            id: 1
          },
          oneTimeSchedule: {
            type: "OneTimeSchedule",
            id: 2
          },
          periodicSchedule: {
            type: "PeriodicSchedule",
            id: 3
          }
        },
        nested: {
          Periodicity: {
            values: {
              DEFAULT: 0,
              ONE_TIME: 1,
              PERIODIC: 2
            }
          }
        }
      },
      NodeSchedule: {
        fields: {
          schedule: {
            type: "Type",
            id: 1
          }
        },
        nested: {
          Type: {
            values: {
              DEFAULT: 0,
              SIZE: 1,
              HOST_LIST: 2,
              ALL_HOSTS: 3
            }
          }
        }
      },
      ConstantBackoff: {
        fields: {
          time: {
            type: "int64",
            id: 1
          }
        }
      },
      ExponentialBackoff: {
        fields: {
          offset: {
            type: "int64",
            id: 1
          },
          base: {
            type: "int64",
            id: 2
          },
          max: {
            type: "int64",
            id: 3
          }
        }
      },
      BackoffPolicy: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          constantBackoff: {
            type: "ConstantBackoff",
            id: 2
          },
          exponentialBackoff: {
            type: "ExponentialBackoff",
            id: 3
          }
        },
        nested: {
          Type: {
            values: {
              CONSTANT: 0,
              EXPONENTIAL: 1
            }
          }
        }
      },
      NumRetriesLimit: {
        fields: {
          numRetries: {
            type: "int64",
            id: 1
          }
        }
      },
      TimeDeadlineLimit: {
        fields: {
          timeDeadline: {
            type: "int64",
            id: 2
          }
        }
      },
      TerminationPolicy: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          numRetriesLimit: {
            type: "NumRetriesLimit",
            id: 2
          },
          timeDeadlineLimit: {
            type: "TimeDeadlineLimit",
            id: 3
          }
        },
        nested: {
          Type: {
            values: {
              NUM_RETRIES: 0,
              TIME_DEADLINE: 1,
              TILL_SUCCESS: 2
            }
          }
        }
      },
      RetryPolicy: {
        fields: {
          backoffPolicy: {
            type: "BackoffPolicy",
            id: 1
          },
          terminationPolicy: {
            type: "TerminationPolicy",
            id: 2
          }
        }
      },
      AddJobRequest: {
        fields: {
          job: {
            type: "ScheduledJobProto",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "AddJobRequest",
            id: 1167,
            extend: "common.RpcBlog"
          }
        }
      },
      AddJobResponse: {
        fields: {
          jobId: {
            type: "string",
            id: 1
          },
          addedJob: {
            type: "ScheduledJobProto",
            id: 2
          }
        }
      },
      DeleteJobRequest: {
        fields: {
          jobIds: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "DeleteJobRequest",
            id: 1168,
            extend: "common.RpcBlog"
          }
        }
      },
      DeleteJobResponse: {
        fields: {
          successIds: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          failedIds: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 2
          },
          notFoundIds: {
            rule: "repeated",
            type: "string",
            id: 3
          }
        }
      },
      UpdateJobRequest: {
        fields: {
          jobId: {
            type: "string",
            id: 1
          },
          job: {
            type: "ScheduledJobProto",
            id: 2
          }
        },
        nested: {
          rpcId: {
            type: "UpdateJobRequest",
            id: 1169,
            extend: "common.RpcBlog"
          }
        }
      },
      UpdateJobResponse: {
        fields: {
          updatedJob: {
            type: "ScheduledJobProto",
            id: 1
          }
        }
      },
      PauseJobRequest: {
        fields: {
          jobIds: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "PauseJobRequest",
            id: 1170,
            extend: "common.RpcBlog"
          }
        }
      },
      PauseJobResponse: {
        fields: {
          successIds: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          failedIds: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 2
          },
          notFoundIds: {
            rule: "repeated",
            type: "string",
            id: 3
          }
        }
      },
      ResumeJobRequest: {
        fields: {
          jobIds: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        },
        nested: {
          rpcId: {
            type: "ResumeJobRequest",
            id: 1171,
            extend: "common.RpcBlog"
          }
        }
      },
      ResumeJobResponse: {
        fields: {
          successIds: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          failedIds: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 2
          },
          notFoundIds: {
            rule: "repeated",
            type: "string",
            id: 3
          }
        }
      },
      GetJobRequest: {
        fields: {
          jobId: {
            type: "string",
            id: 1
          },
          createTimeRange: {
            type: "TimeRange",
            id: 3
          },
          creationAuthor: {
            type: "string",
            id: 5
          },
          tags: {
            rule: "repeated",
            type: "string",
            id: 6
          },
          limit: {
            type: "int64",
            id: 7
          },
          sortAscending: {
            type: "bool",
            id: 8
          },
          jobHandler: {
            type: "JobHandler",
            id: 9
          },
          sortColumn: {
            type: "string",
            id: 10
          },
          offset: {
            type: "int64",
            id: 11
          },
          jobNameFilter: {
            type: "string",
            id: 12
          }
        },
        nested: {
          rpcId: {
            type: "GetJobRequest",
            id: 1172,
            extend: "common.RpcBlog"
          },
          TimeRange: {
            fields: {
              begin: {
                type: "int64",
                id: 1
              },
              end: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      GetJobResponse: {
        fields: {
          job: {
            rule: "repeated",
            type: "ScheduledJobProto",
            id: 1
          }
        }
      },
      GetJobsWithRunsRequest: {
        fields: {
          getJobRequest: {
            type: "GetJobRequest",
            id: 1
          },
          maxJobRuns: {
            type: "int64",
            id: 2,
            options: {
              "default": 1
            }
          },
          jobRunsOffset: {
            type: "int64",
            id: 3,
            options: {
              "default": 0
            }
          }
        },
        nested: {
          rpcId: {
            type: "GetJobRequest",
            id: 1215,
            extend: "common.RpcBlog"
          }
        }
      },
      GetJobsWithRunsResponse: {
        fields: {
          jobsWithRuns: {
            rule: "repeated",
            type: "JobWithRuns",
            id: 1
          },
          lastPage: {
            type: "bool",
            id: 2,
            options: {
              "default": true
            }
          }
        },
        nested: {
          JobWithRuns: {
            fields: {
              job: {
                type: "ScheduledJobProto",
                id: 1
              },
              jobRun: {
                rule: "repeated",
                type: "JobRunProto",
                id: 2
              }
            }
          }
        }
      },
      GetJobRunRequest: {
        fields: {
          jobId: {
            type: "string",
            id: 1
          },
          runId: {
            type: "string",
            id: 2
          },
          startTimeRange: {
            type: "TimeRange",
            id: 3
          },
          limit: {
            type: "int64",
            id: 4
          },
          offset: {
            type: "int64",
            id: 5
          }
        },
        nested: {
          rpcId: {
            type: "GetJobRequest",
            id: 1166,
            extend: "common.RpcBlog"
          },
          TimeRange: {
            fields: {
              begin: {
                type: "int64",
                id: 1
              },
              end: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      GetJobRunResponse: {
        fields: {
          jobRun: {
            rule: "repeated",
            type: "JobRunProto",
            id: 1
          }
        }
      },
      AbortJobRunRequest: {
        fields: {
          jobIds: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      },
      AbortJobRunResponse: {
        fields: {
          successIds: {
            rule: "repeated",
            type: "string",
            id: 1
          },
          failedIds: {
            rule: "repeated",
            type: "common.KeyValueStr",
            id: 2
          },
          notFoundIds: {
            rule: "repeated",
            type: "string",
            id: 3
          }
        }
      },
      JobManagerService: {
        options: {
          "(net.rpc.RpcOptions.service).thrift.framed_transport": false
        },
        methods: {
          AddJob: {
            requestType: "AddJobRequest",
            responseType: "AddJobResponse"
          },
          DeleteJob: {
            requestType: "DeleteJobRequest",
            responseType: "DeleteJobResponse"
          },
          UpdateJob: {
            requestType: "UpdateJobRequest",
            responseType: "UpdateJobResponse"
          },
          PauseJob: {
            requestType: "PauseJobRequest",
            responseType: "PauseJobResponse"
          },
          ResumeJob: {
            requestType: "ResumeJobRequest",
            responseType: "ResumeJobResponse"
          },
          GetJob: {
            requestType: "GetJobRequest",
            responseType: "GetJobResponse"
          },
          GetJobsWithRuns: {
            requestType: "GetJobsWithRunsRequest",
            responseType: "GetJobsWithRunsResponse"
          },
          GetJobRun: {
            requestType: "GetJobRunRequest",
            responseType: "GetJobRunResponse"
          },
          AbortJobRun: {
            requestType: "AbortJobRunRequest",
            responseType: "AbortJobRunResponse"
          }
        }
      }
    }
  },
  util: {
    options: {
      go_package: "progress_report_pb",
      java_package: "com.thoughtspot.util"
    },
    nested: {
      ProgressReportProto: {
        fields: {
          name: {
            type: "string",
            id: 1
          },
          step: {
            rule: "repeated",
            type: "Step",
            id: 2
          },
          currentStep: {
            type: "int32",
            id: 3
          },
          description: {
            type: "string",
            id: 4
          }
        },
        nested: {
          Step: {
            fields: {
              stepNum: {
                type: "int32",
                id: 1
              },
              name: {
                type: "string",
                id: 2
              },
              startTime: {
                type: "int64",
                id: 3
              },
              currentProgress: {
                type: "int64",
                id: 4
              },
              totalWork: {
                type: "int64",
                id: 5
              },
              unit: {
                type: "string",
                id: 6
              },
              description: {
                type: "string",
                id: 7
              }
            }
          }
        }
      }
    }
  },
  bach: {
    options: {
      java_package: "com.thoughtspot.bach",
      java_outer_classname: "Common"
    },
    nested: {
      unaggregated_answer: {
        options: {
          java_package: "com.thoughtspot.bach",
          java_outer_classname: "UnaggregatedAnswer"
        },
        nested: {
          AnswerColumn: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              logicalColumnId: {
                type: "string",
                id: 2
              },
              dataType: {
                type: "falcon.DataType.E",
                id: 3
              }
            }
          },
          TableViz: {
            fields: {
              column: {
                rule: "repeated",
                type: "Column",
                id: 1
              }
            },
            nested: {
              Column: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  },
                  displayFormat: {
                    type: "ColumnDisplayFormat",
                    id: 2
                  }
                }
              }
            }
          },
          Visualization: {
            fields: {
              type: {
                type: "Type",
                id: 1
              },
              header: {
                type: "common.EntityHeader",
                id: 2
              },
              table: {
                type: "TableViz",
                id: 3
              }
            },
            nested: {
              Type: {
                values: {
                  TABLE: 1
                }
              }
            }
          },
          TableVizData: {
            fields: {
              data: {
                type: "TableData",
                id: 1
              }
            }
          },
          VizData: {
            fields: {
              type: {
                type: "Visualization.Type",
                id: 1
              },
              table: {
                type: "TableVizData",
                id: 2
              }
            }
          },
          AnswerModel: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              column: {
                rule: "repeated",
                type: "AnswerColumn",
                id: 2
              },
              visualization: {
                type: "Visualization",
                id: 4
              }
            }
          },
          AnswerRequest: {
            fields: {
              type: {
                type: "Type",
                id: 1
              },
              loadAnswer: {
                type: "LoadAnswerRequest",
                id: 2
              },
              addColumn: {
                type: "AddColumnRequest",
                id: 3
              },
              removeColumn: {
                type: "RemoveColumnRequest",
                id: 4
              },
              getData: {
                type: "GetVizDataRequest",
                id: 5
              }
            },
            nested: {
              unaggregatedAnswerRequest: {
                type: "AnswerRequest",
                id: 1250,
                extend: "BaseRequest"
              },
              Type: {
                values: {
                  LOAD_ANSWER: 1,
                  ADD_COLUMN: 2,
                  REMOVE_COLUMN: 3,
                  GET_DATA: 4
                }
              }
            }
          },
          AnswerResponse: {
            fields: {
              type: {
                type: "AnswerRequest.Type",
                id: 1
              },
              loadAnswer: {
                type: "LoadAnswerResponse",
                id: 2
              },
              addColumn: {
                type: "AddColumnResponse",
                id: 3
              },
              removeColumn: {
                type: "RemoveColumnResponse",
                id: 4
              },
              getData: {
                type: "GetVizDataResponse",
                id: 5
              }
            },
            nested: {
              unaggregatedAnswerResponse: {
                type: "AnswerResponse",
                id: 1250,
                extend: "BaseResponse"
              }
            }
          },
          LoadableAnswer: {
            fields: {
              answer: {
                type: "bytes",
                id: 1
              }
            }
          },
          LoadAnswerRequest: {
            fields: {
              answer: {
                type: "LoadableAnswer",
                id: 1
              }
            }
          },
          LoadAnswerResponse: {
            fields: {
              answerModel: {
                type: "AnswerModel",
                id: 1
              }
            }
          },
          AddColumnRequest: {
            fields: {
              logicalColumnId: {
                type: "string",
                id: 1
              },
              joinPaths: {
                rule: "repeated",
                type: "sage.JoinPathProto",
                id: 4
              }
            }
          },
          AddColumnResponse: {
            fields: {
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 3
              }
            }
          },
          RemoveColumnRequest: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              },
              logicalColumnId: {
                type: "string",
                id: 2
              }
            }
          },
          RemoveColumnResponse: {
            fields: {}
          },
          GetVizDataRequest: {
            fields: {}
          },
          GetVizDataResponse: {
            fields: {
              vizData: {
                type: "VizData",
                id: 1
              }
            }
          }
        }
      },
      BaseRequest: {
        fields: {
          generateResponse: {
            type: "bool",
            id: 1
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ]
      },
      BachRequest: {
        fields: {
          transactionId: {
            type: "string",
            id: 1
          },
          generationNumber: {
            type: "int64",
            id: 2,
            options: {
              "default": -1
            }
          },
          requestClass: {
            type: "RequestClass.E",
            id: 3
          },
          request: {
            rule: "repeated",
            type: "BaseRequest",
            id: 4
          }
        },
        nested: {
          RequestClass: {
            fields: {},
            nested: {
              E: {
                values: {
                  LOGICAL_TABLE: 1,
                  WORKSHEET: 2,
                  ANSWER: 3,
                  UNAGGREGATED_ANSWER: 4,
                  UNIVERSAL_SEARCH: 5,
                  VIZ_SNAPSHOT: 6
                }
              }
            }
          }
        }
      },
      CancelRequest: {
        fields: {
          transactionId: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      },
      Status: {
        fields: {
          statusCode: {
            type: "Class.E",
            id: 1
          },
          errorCode: {
            type: "int64",
            id: 2
          },
          errorMessage: {
            type: "string",
            id: 3
          }
        },
        nested: {
          Class: {
            fields: {},
            nested: {
              E: {
                values: {
                  OK: 1,
                  ERROR: 2,
                  PARTIALLY_EXECUTED: 3
                }
              }
            }
          }
        }
      },
      BaseResponse: {
        fields: {
          temp: {
            type: "string",
            id: 1
          }
        },
        extensions: [
          [
            1000,
            536870911
          ]
        ]
      },
      BachResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          },
          transactionId: {
            type: "string",
            id: 2
          },
          generationNumber: {
            type: "int64",
            id: 3
          },
          response: {
            rule: "repeated",
            type: "BaseResponse",
            id: 4
          },
          ambiguityRequestIdx: {
            type: "int64",
            id: 5
          }
        }
      },
      Value: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          isNull: {
            type: "bool",
            id: 2,
            options: {
              "default": false
            }
          },
          intValue: {
            type: "int64",
            id: 3
          },
          doubleValue: {
            type: "double",
            id: 4
          },
          boolValue: {
            type: "bool",
            id: 5
          },
          stringValue: {
            type: "StringValue",
            id: 6
          },
          dateValue: {
            type: "sage.DateFilterProto",
            id: 7
          }
        },
        nested: {
          Type: {
            values: {
              UNKNOWN: 0,
              INT: 1,
              DOUBLE: 2,
              CHAR: 3,
              BOOL: 4,
              DATE: 5
            }
          },
          StringValue: {
            fields: {
              value: {
                type: "string",
                id: 1
              },
              normalize: {
                type: "bool",
                id: 2,
                options: {
                  "default": true
                }
              }
            }
          }
        }
      },
      Filter: {
        fields: {
          filterId: {
            type: "string",
            id: 1
          },
          column: {
            type: "Column",
            id: 2
          },
          op: {
            type: "sage.CompareTypeProto.E",
            id: 3
          },
          values: {
            rule: "repeated",
            type: "Value",
            id: 4
          },
          isNegate: {
            type: "bool",
            id: 5
          },
          isEditable: {
            type: "bool",
            id: 6,
            options: {
              "default": true
            }
          }
        },
        nested: {
          Column: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              }
            }
          }
        }
      },
      JoinPathAmbiguityResponse: {
        fields: {
          joinPathAmbiguity: {
            rule: "repeated",
            type: "sage.auto_complete.v2.JoinPathCollection",
            id: 1
          },
          oldToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 2
          },
          newToken: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 3
          }
        }
      },
      JoinPathAmbiguityResolution: {
        fields: {
          token: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 1
          }
        }
      },
      ColumnData: {
        fields: {
          columnId: {
            type: "string",
            id: 1
          },
          dataValue: {
            rule: "repeated",
            type: "falcon.ConstantValue",
            id: 2
          }
        }
      },
      TableData: {
        fields: {
          columnData: {
            rule: "repeated",
            type: "ColumnData",
            id: 1
          }
        }
      },
      ColumnDisplayFormat: {
        fields: {
          format: {
            type: "atlas.ColumnFormat",
            id: 1
          },
          metricDefinition: {
            type: "callosum.MetricDefinitionProto",
            id: 7
          }
        }
      },
      ObjectType: {
        options: {
          deprecated: true
        },
        fields: {},
        nested: {
          E: {
            values: {
              TABLE: 0,
              COLUMN: 1,
              RELATIONSHIP: 2,
              ANSWER: 3,
              PINBOARD: 4,
              FILTER: 5
            }
          }
        }
      },
      IncompleteDetail: {
        fields: {
          code: {
            type: "string",
            id: 1
          },
          type: {
            type: "ObjectType.E",
            id: 2
          },
          header: {
            type: "common.EntityHeader",
            id: 3
          }
        }
      },
      CurrencyConfig: {
        fields: {
          isoCode: {
            type: "string",
            id: 1
          }
        }
      },
      SaveObjectResponse: {
        fields: {
          id: {
            type: "string",
            id: 1
          }
        },
        nested: {
          saveObjectResponse: {
            type: "SaveObjectResponse",
            id: 1001,
            extend: "BaseResponse"
          }
        }
      },
      answer: {
        options: {
          java_package: "com.thoughtspot.bach",
          java_outer_classname: "Answer"
        },
        nested: {
          SortType: {
            fields: {},
            nested: {
              E: {
                values: {
                  UNKNOWN: 0,
                  ASCENDING: 1,
                  DESCENDING: 2
                }
              }
            }
          },
          LogicalColumn: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              logicalTable: {
                type: "common.EntityHeader",
                id: 2
              },
              isAggregated: {
                type: "bool",
                id: 3
              },
              isFormula: {
                type: "bool",
                id: 4
              },
              isAdditive: {
                type: "bool",
                id: 5
              },
              dataRecency: {
                type: "int64",
                id: 6
              },
              geoConfig: {
                type: "atlas.GeoConfigProto",
                id: 8
              },
              currencyConfig: {
                type: "CurrencyConfig",
                id: 9
              }
            }
          },
          AnswerColumn: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              logicalColumnId: {
                type: "string",
                id: 2
              },
              dataType: {
                type: "falcon.DataType.E",
                id: 3
              },
              type: {
                type: "Type",
                id: 4
              },
              simpleAggregation: {
                type: "SimpleAggregation",
                id: 5
              },
              timeBucket: {
                type: "TimeBucket",
                id: 6
              },
              growth: {
                type: "Growth",
                id: 7
              },
              growthDimension: {
                type: "GrowthDimension",
                id: 8
              },
              sort: {
                type: "Sort",
                id: 9
              }
            },
            nested: {
              Sort: {
                fields: {
                  type: {
                    type: "SortType.E",
                    id: 1
                  },
                  idx: {
                    type: "int32",
                    id: 2
                  }
                }
              },
              Type: {
                values: {
                  SIMPLE_AGGREGATION: 0,
                  SIMPLE_GROUPING: 1,
                  TIME_BUCKET: 2,
                  GROWTH: 3,
                  GROWTH_DIMENSION: 4
                }
              },
              SimpleAggregation: {
                fields: {
                  type: {
                    type: "sage.AggregationType.E",
                    id: 1
                  }
                }
              },
              TimeBucket: {
                fields: {
                  type: {
                    type: "sage.TimeBucket.E",
                    id: 1
                  }
                }
              },
              Growth: {
                fields: {
                  aggregation: {
                    type: "sage.AggregationType.E",
                    id: 1
                  },
                  growthDimensionColumnId: {
                    type: "string",
                    id: 2
                  }
                }
              },
              GrowthDimension: {
                fields: {
                  timeBucket: {
                    type: "sage.TimeBucket.E",
                    id: 1
                  },
                  timeBucketQualifier: {
                    type: "sage.TimeBucketQualifierProto.E",
                    id: 2
                  }
                }
              }
            }
          },
          DisplayVizColumn: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              },
              displayFormat: {
                type: "ColumnDisplayFormat",
                id: 2
              }
            }
          },
          HeadlineViz: {
            fields: {
              column: {
                type: "DisplayVizColumn",
                id: 1
              },
              config: {
                type: "Config",
                id: 2
              }
            },
            nested: {
              TemplateType: {
                values: {
                  ATTRIBUTE: 0,
                  MEASURE: 1
                }
              },
              Config: {
                fields: {
                  aggregation: {
                    rule: "repeated",
                    type: "sage.AggregationType.E",
                    id: 1,
                    options: {
                      packed: false
                    }
                  },
                  templateType: {
                    type: "TemplateType",
                    id: 2
                  },
                  showSummaryAggrs: {
                    type: "bool",
                    id: 3
                  }
                }
              }
            }
          },
          TableViz: {
            fields: {
              column: {
                rule: "repeated",
                type: "DisplayVizColumn",
                id: 1
              }
            }
          },
          ChartViz: {
            fields: {
              column: {
                rule: "repeated",
                type: "DisplayVizColumn",
                id: 1
              },
              config: {
                type: "Config",
                id: 2
              }
            },
            nested: {
              Config: {
                fields: {
                  type: {
                    type: "callosum.VisualizationProto.ChartVisualizationContentProto.ChartTypeEnumProto",
                    id: 1
                  },
                  axisConfig: {
                    rule: "repeated",
                    type: "AxisConfig",
                    id: 2
                  },
                  visibleSeries: {
                    rule: "repeated",
                    type: "VisibleSeries",
                    id: 3
                  },
                  showDataLabel: {
                    type: "bool",
                    id: 4
                  },
                  yAxisShared: {
                    type: "bool",
                    id: 5
                  },
                  stackedAsPercent: {
                    type: "bool",
                    id: 6
                  }
                },
                nested: {
                  AxisConfig: {
                    fields: {
                      xAxis: {
                        rule: "repeated",
                        type: "string",
                        id: 1
                      },
                      yAxis: {
                        rule: "repeated",
                        type: "string",
                        id: 2
                      },
                      category: {
                        rule: "repeated",
                        type: "string",
                        id: 3
                      },
                      radial: {
                        type: "string",
                        id: 4
                      },
                      hidden: {
                        rule: "repeated",
                        type: "string",
                        id: 5
                      }
                    }
                  },
                  VisibleSeries: {
                    fields: {
                      column: {
                        type: "string",
                        id: 1
                      },
                      value: {
                        type: "string",
                        id: 2
                      },
                      color: {
                        type: "string",
                        id: 3
                      }
                    }
                  }
                }
              }
            }
          },
          RanalysisViz: {
            fields: {
              column: {
                rule: "repeated",
                type: "DisplayVizColumn",
                id: 1
              },
              config: {
                type: "Config",
                id: 2
              }
            },
            nested: {
              Config: {
                fields: {
                  rScript: {
                    type: "string",
                    id: 1
                  },
                  columnBinding: {
                    rule: "repeated",
                    type: "sage.AnalysisDescriptor.CustomRAnalysis.ColumnBinding",
                    id: 2
                  },
                  rOutputType: {
                    type: "sage.AnalysisDescriptor.CustomRAnalysis.ROutputType",
                    id: 3
                  }
                }
              }
            }
          },
          Visualization: {
            fields: {
              type: {
                type: "Type",
                id: 1
              },
              header: {
                type: "common.EntityHeader",
                id: 2
              },
              locked: {
                type: "bool",
                id: 3
              },
              headline: {
                type: "HeadlineViz",
                id: 4
              },
              table: {
                type: "TableViz",
                id: 5
              },
              chart: {
                type: "ChartViz",
                id: 6
              },
              ranalysis: {
                type: "RanalysisViz",
                id: 7
              }
            },
            nested: {
              Type: {
                values: {
                  HEADLINE: 1,
                  TABLE: 2,
                  CHART: 3,
                  R_ANALYSIS: 4
                }
              }
            }
          },
          HeadlineVizData: {
            fields: {
              headlineValue: {
                type: "falcon.ConstantValue",
                id: 1
              }
            }
          },
          TableVizData: {
            fields: {
              data: {
                type: "TableData",
                id: 1
              }
            }
          },
          ChartVizData: {
            fields: {
              data: {
                rule: "repeated",
                type: "TableData",
                id: 1
              }
            }
          },
          RanalysisVizData: {
            fields: {}
          },
          VizData: {
            fields: {
              type: {
                type: "Visualization.Type",
                id: 1
              },
              headline: {
                type: "HeadlineVizData",
                id: 2
              },
              table: {
                type: "TableVizData",
                id: 3
              },
              chart: {
                type: "ChartVizData",
                id: 4
              },
              ranalysis: {
                type: "RanalysisVizData",
                id: 5
              }
            }
          },
          FormulaPreview: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              error: {
                type: "sage.auto_complete.v2.ACFormulaError",
                id: 2
              }
            }
          },
          AnswerSheet: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              logicalColumn: {
                rule: "repeated",
                type: "LogicalColumn",
                id: 2
              },
              column: {
                rule: "repeated",
                type: "AnswerColumn",
                id: 3
              },
              filter: {
                rule: "repeated",
                type: "Filter",
                id: 4
              },
              visualization: {
                rule: "repeated",
                type: "Visualization",
                id: 5
              },
              formula: {
                rule: "repeated",
                type: "FormulaPreview",
                id: 6
              }
            }
          },
          AnswerModel: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              sheet: {
                rule: "repeated",
                type: "AnswerSheet",
                id: 2
              }
            }
          },
          LoadableAnswer: {
            fields: {
              answer: {
                type: "bytes",
                id: 1
              }
            }
          },
          SearchTokens: {
            fields: {
              token: {
                rule: "repeated",
                type: "sage.auto_complete.v2.RecognizedToken",
                id: 1
              },
              phrase: {
                rule: "repeated",
                type: "sage.auto_complete.v2.PhraseDefinition",
                id: 2
              }
            }
          },
          RelatedInsightPreview: {
            fields: {
              searchTokens: {
                type: "SearchTokens",
                id: 1
              },
              answerModel: {
                type: "AnswerModel",
                id: 2
              }
            }
          },
          AnswerRequest: {
            fields: {
              type: {
                type: "Type",
                id: 1
              },
              createAnswer: {
                type: "CreateAnswerRequest",
                id: 2
              },
              loadAnswer: {
                type: "LoadAnswerRequest",
                id: 3
              },
              saveAnswer: {
                type: "SaveAnswerRequest",
                id: 4
              },
              copyAnswer: {
                type: "CopyAnswerRequest",
                id: 5
              },
              updateAnswerProperties: {
                type: "UpdateAnswerPropertiesRequest",
                id: 6
              },
              updateSelectedSources: {
                type: "UpdateSelectedSourcesRequest",
                id: 7
              },
              addColumn: {
                type: "AddColumnRequest",
                id: 8
              },
              updateColumn: {
                type: "UpdateColumnRequest",
                id: 9
              },
              removeColumn: {
                type: "RemoveColumnRequest",
                id: 10
              },
              getFilterValues: {
                type: "GetColumnValuesRequest",
                id: 11
              },
              addFilter: {
                type: "AddFilterRequest",
                id: 12
              },
              updateFilter: {
                type: "UpdateFilterRequest",
                id: 13
              },
              removeFilter: {
                type: "RemoveFilterRequest",
                id: 14
              },
              includeOrExcludeValues: {
                type: "IncludeOrExcludeValuesRequest",
                id: 15
              },
              addFormula: {
                type: "AddFormulaRequest",
                id: 16
              },
              updateFormula: {
                type: "UpdateFormulaRequest",
                id: 17
              },
              removeFormula: {
                type: "RemoveFormulaRequest",
                id: 18
              },
              updateSort: {
                type: "UpdateSortRequest",
                id: 19
              },
              getUnaggregatedAnswer: {
                type: "GetUnaggregatedAnswerRequest",
                id: 20
              },
              updateHeadlineColumns: {
                type: "UpdateHeadlineColumnsRequest",
                id: 21
              },
              getDrillDownColumns: {
                type: "GetDrillDownColumnsRequest",
                id: 22
              },
              drillDown: {
                type: "DrillDownRequest",
                id: 23
              },
              a3AnalysisSubmission: {
                type: "A3AnalysisSubmissionRequest",
                id: 24
              },
              getRelatedInsights: {
                type: "GetRelatedInsightsRequest",
                id: 25
              },
              getQueryViewerSpec: {
                type: "GetQueryViewerSpecRequest",
                id: 26
              },
              getNaturalLanguageQuery: {
                type: "GetNaturalLanguageQueryRequest",
                id: 27
              },
              getTokens: {
                type: "GetTokensRequest",
                id: 28
              },
              getAnswerModel: {
                type: "GetAnswerModelRequest",
                id: 29
              },
              getVizData: {
                type: "GetVizDataRequest",
                id: 30
              },
              getAcContext: {
                type: "GetACContextRequest",
                id: 31
              },
              updateAc_Context: {
                type: "UpdateACContextRequest",
                id: 32
              }
            },
            nested: {
              answerRequest: {
                type: "AnswerRequest",
                id: 1200,
                extend: "BaseRequest"
              },
              Type: {
                values: {
                  CREATE_ANSWER: 1,
                  LOAD_ANSWER: 2,
                  SAVE_ANSWER: 3,
                  COPY_ANSWER: 4,
                  UPDATE_ANSWER_PROPERTIES: 5,
                  UPDATE_SELECTED_SOURCES: 6,
                  ADD_COLUMN: 7,
                  UPDATE_COLUMN: 8,
                  REMOVE_COLUMN: 9,
                  GET_COLUMN_VALUES: 10,
                  ADD_FILTER: 11,
                  UPDATE_FILTER: 12,
                  REMOVE_FILTER: 13,
                  INCLUDE_OR_EXCLUDE_VALUES: 14,
                  ADD_FORMULA: 15,
                  UPDATE_FORMULA: 16,
                  REMOVE_FORMULA: 17,
                  UPDATE_SORT: 18,
                  UPDATE_HEADLINE_COLUMNS: 19,
                  GET_UNAGGREGATED_ANSWER: 20,
                  GET_DRILL_DOWN_COLUMNS: 21,
                  DRILL_DOWN: 22,
                  A3_ANALYSIS_SUBMISSION: 23,
                  GET_RELATED_INSIGHTS: 24,
                  GET_QUERY_VIEWER_SPEC: 25,
                  GET_NATURAL_LANGUAGE_QUERY: 26,
                  GET_TOKENS: 27,
                  GET_ANSWER_MODEL: 28,
                  GET_VIZ_DATA: 29,
                  GET_AC_CONTEXT: 30,
                  UPDATE_AC_CONTEXT: 31
                }
              }
            }
          },
          AnswerResponse: {
            fields: {
              type: {
                type: "AnswerRequest.Type",
                id: 1
              },
              createAnswer: {
                type: "CreateAnswerResponse",
                id: 2
              },
              loadAnswer: {
                type: "LoadAnswerResponse",
                id: 3
              },
              saveAnswer: {
                type: "SaveAnswerResponse",
                id: 4
              },
              copyAnswer: {
                type: "CopyAnswerResponse",
                id: 5
              },
              updateAnswerProperties: {
                type: "UpdateAnswerPropertiesResponse",
                id: 6
              },
              updateSelectedSources: {
                type: "UpdateSelectedSourcesResponse",
                id: 7
              },
              addColumn: {
                type: "AddColumnResponse",
                id: 8
              },
              updateColumn: {
                type: "UpdateColumnResponse",
                id: 9
              },
              removeColumn: {
                type: "RemoveColumnResponse",
                id: 10
              },
              getFilterValues: {
                type: "GetColumnValuesResponse",
                id: 11
              },
              addFilter: {
                type: "AddFilterResponse",
                id: 12
              },
              updateFilter: {
                type: "UpdateFilterResponse",
                id: 13
              },
              removeFilter: {
                type: "RemoveFilterResponse",
                id: 14
              },
              includeOrExcludeValues: {
                type: "IncludeOrExcludeValuesResponse",
                id: 15
              },
              addFormula: {
                type: "AddFormulaResponse",
                id: 16
              },
              updateFormula: {
                type: "UpdateFormulaResponse",
                id: 17
              },
              removeFormula: {
                type: "RemoveFormulaResponse",
                id: 18
              },
              updateSort: {
                type: "UpdateSortResponse",
                id: 19
              },
              getUnaggregatedAnswer: {
                type: "GetUnaggregatedAnswerResponse",
                id: 20
              },
              updateHeadlineColumns: {
                type: "UpdateHeadlineColumnsResponse",
                id: 21
              },
              getDrillDownColumns: {
                type: "GetDrillDownColumnsResponse",
                id: 22
              },
              drillDown: {
                type: "DrillDownResponse",
                id: 23
              },
              a3AnalysisSubmission: {
                type: "A3AnalysisSubmissionResponse",
                id: 24
              },
              getRelatedInsights: {
                type: "GetRelatedInsightsResponse",
                id: 25
              },
              getQueryViewerSpec: {
                type: "GetQueryViewerSpecResponse",
                id: 26
              },
              getNaturalLanguageQuery: {
                type: "GetNaturalLanguageQueryResponse",
                id: 27
              },
              getTokens: {
                type: "GetTokensResponse",
                id: 28
              },
              getAnswerModel: {
                type: "GetAnswerModelResponse",
                id: 29
              },
              getVizData: {
                type: "GetVizDataResponse",
                id: 30
              },
              getAcContext: {
                type: "GetACContextResponse",
                id: 31
              },
              updateAc_Context: {
                type: "UpdateACContextResponse",
                id: 32
              }
            },
            nested: {
              answerResponse: {
                type: "AnswerResponse",
                id: 1200,
                extend: "BaseResponse"
              }
            }
          },
          CreateAnswerRequest: {
            fields: {}
          },
          CreateAnswerResponse: {
            fields: {}
          },
          LoadAnswerRequest: {
            fields: {
              savedAnswerId: {
                type: "string",
                id: 1
              },
              answer: {
                type: "LoadableAnswer",
                id: 2
              }
            }
          },
          LoadAnswerResponse: {
            fields: {
              searchTokens: {
                type: "SearchTokens",
                id: 1
              },
              answerModel: {
                type: "AnswerModel",
                id: 2
              },
              selectedSource: {
                rule: "repeated",
                type: "logicalTable.LogicalTablePreview",
                id: 3
              },
              accessibleTable: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 4
              }
            }
          },
          SaveAnswerRequest: {
            fields: {}
          },
          SaveAnswerResponse: {
            fields: {}
          },
          CopyAnswerRequest: {
            fields: {}
          },
          CopyAnswerResponse: {
            fields: {
              copiedAnswer: {
                type: "LoadableAnswer",
                id: 1
              }
            }
          },
          UpdateAnswerPropertiesRequest: {
            fields: {
              newName: {
                type: "string",
                id: 1
              },
              newDescription: {
                type: "string",
                id: 2
              }
            }
          },
          UpdateAnswerPropertiesResponse: {
            fields: {}
          },
          UpdateSelectedSourcesRequest: {
            fields: {
              newSelectedSource: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          },
          UpdateSelectedSourcesResponse: {
            fields: {}
          },
          AddColumnRequest: {
            fields: {
              logicalColumnId: {
                type: "string",
                id: 1
              },
              aggregation: {
                type: "sage.AggregationType.E",
                id: 2
              },
              timeBucket: {
                type: "sage.TimeBucket.E",
                id: 3,
                options: {
                  "default": "AUTO"
                }
              },
              joinPath: {
                rule: "repeated",
                type: "sage.JoinPathProto",
                id: 4
              }
            }
          },
          AddColumnResponse: {
            fields: {
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 3
              }
            }
          },
          UpdateColumnRequest: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              },
              newTimeBucket: {
                type: "sage.TimeBucket.E",
                id: 2
              },
              newAggregation: {
                type: "sage.AggregationType.E",
                id: 3
              },
              newJoinPath: {
                rule: "repeated",
                type: "sage.JoinPathProto",
                id: 4
              }
            }
          },
          UpdateColumnResponse: {
            fields: {}
          },
          RemoveColumnRequest: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              },
              logicalColumnId: {
                type: "string",
                id: 2
              }
            }
          },
          RemoveColumnResponse: {
            fields: {}
          },
          GetColumnValuesRequest: {
            fields: {
              column: {
                type: "Column",
                id: 1
              },
              getAllValues: {
                type: "bool",
                id: 3,
                options: {
                  "default": true
                }
              }
            },
            nested: {
              Column: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  },
                  logicalColumnId: {
                    type: "string",
                    id: 2
                  },
                  timeBucket: {
                    type: "sage.TimeBucket.E",
                    id: 3
                  },
                  joinPath: {
                    rule: "repeated",
                    type: "sage.JoinPathProto",
                    id: 4
                  }
                }
              }
            }
          },
          GetColumnValuesResponse: {
            fields: {
              value: {
                rule: "repeated",
                type: "Value",
                id: 1
              },
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 2
              }
            }
          },
          AddFilterRequest: {
            fields: {
              column: {
                type: "Column",
                id: 1
              },
              op: {
                type: "sage.CompareTypeProto.E",
                id: 2
              },
              isNegate: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              },
              value: {
                rule: "repeated",
                type: "Value",
                id: 4
              }
            },
            nested: {
              Column: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  },
                  logicalColumnId: {
                    type: "string",
                    id: 2
                  },
                  aggregation: {
                    type: "sage.AggregationType.E",
                    id: 3,
                    options: {
                      "default": "NONE"
                    }
                  },
                  joinPath: {
                    rule: "repeated",
                    type: "sage.JoinPathProto",
                    id: 4
                  }
                }
              }
            }
          },
          AddFilterResponse: {
            fields: {
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 1
              }
            }
          },
          UpdateFilterRequest: {
            fields: {
              filterId: {
                type: "string",
                id: 1
              },
              newOp: {
                type: "sage.CompareTypeProto.E",
                id: 2
              },
              newIsNegate: {
                type: "bool",
                id: 3
              },
              newValues: {
                type: "NewValues",
                id: 4
              }
            },
            nested: {
              NewValues: {
                fields: {
                  clearOldValues: {
                    type: "bool",
                    id: 1,
                    options: {
                      "default": false
                    }
                  },
                  addValue: {
                    rule: "repeated",
                    type: "Value",
                    id: 2
                  },
                  removeValue: {
                    rule: "repeated",
                    type: "Value",
                    id: 3
                  }
                }
              }
            }
          },
          UpdateFilterResponse: {
            fields: {}
          },
          RemoveFilterRequest: {
            fields: {
              filterId: {
                type: "string",
                id: 1
              }
            }
          },
          RemoveFilterResponse: {
            fields: {}
          },
          IncludeOrExcludeValuesRequest: {
            fields: {
              type: {
                type: "Type",
                id: 1,
                options: {
                  "default": "ONLY_INCLUDE"
                }
              },
              filterValues: {
                type: "TableData",
                id: 2
              }
            },
            nested: {
              Type: {
                values: {
                  ONLY_INCLUDE: 1,
                  EXCLUDE: 2
                }
              }
            }
          },
          IncludeOrExcludeValuesResponse: {
            fields: {}
          },
          AddFormulaRequest: {
            fields: {
              formula: {
                type: "sage.auto_complete.v2.ACFormula",
                id: 1
              }
            }
          },
          AddFormulaResponse: {
            fields: {}
          },
          UpdateFormulaRequest: {
            fields: {
              newFormula: {
                type: "sage.auto_complete.v2.ACFormula",
                id: 1
              }
            }
          },
          UpdateFormulaResponse: {
            fields: {
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 1
              }
            }
          },
          RemoveFormulaRequest: {
            fields: {
              formulaId: {
                type: "string",
                id: 1
              }
            }
          },
          RemoveFormulaResponse: {
            fields: {}
          },
          UpdateSortRequest: {
            fields: {
              newSort: {
                rule: "repeated",
                type: "Sort",
                id: 1
              }
            },
            nested: {
              Sort: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  },
                  type: {
                    type: "SortType.E",
                    id: 2,
                    options: {
                      "default": "ASCENDING"
                    }
                  }
                }
              }
            }
          },
          UpdateSortResponse: {
            fields: {}
          },
          UpdateHeadlineColumnsRequest: {
            fields: {
              column: {
                rule: "repeated",
                type: "Column",
                id: 1
              }
            },
            nested: {
              Column: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  }
                }
              }
            }
          },
          UpdateHeadlineColumnsResponse: {
            fields: {}
          },
          GetDrillDownColumnsRequest: {
            fields: {}
          },
          GetDrillDownColumnsResponse: {
            fields: {
              drillDownColumnGroup: {
                rule: "repeated",
                type: "DrillDownColumnGroup",
                id: 1
              }
            },
            nested: {
              DrillDownColumnGroup: {
                fields: {
                  table: {
                    type: "common.EntityHeader",
                    id: 1
                  },
                  column: {
                    rule: "repeated",
                    type: "common.EntityHeader",
                    id: 2
                  }
                }
              }
            }
          },
          DrillDownRequest: {
            fields: {
              drillDownValues: {
                type: "TableData",
                id: 1
              },
              drillDownColumn: {
                type: "DrillDownColumn",
                id: 2
              }
            },
            nested: {
              DrillDownColumn: {
                fields: {
                  logicalColumnId: {
                    type: "string",
                    id: 1
                  },
                  timeBucket: {
                    type: "sage.TimeBucket.E",
                    id: 2,
                    options: {
                      "default": "AUTO"
                    }
                  },
                  joinPath: {
                    rule: "repeated",
                    type: "sage.JoinPathProto",
                    id: 3
                  }
                }
              }
            }
          },
          DrillDownResponse: {
            fields: {
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 1
              }
            }
          },
          GetUnaggregatedAnswerRequest: {
            fields: {
              filterValues: {
                type: "TableData",
                id: 1
              }
            }
          },
          GetUnaggregatedAnswerResponse: {
            fields: {
              unaggregatedAnswer: {
                type: "unaggregated_answer.LoadableAnswer",
                id: 1
              }
            }
          },
          A3AnalysisSubmissionRequest: {
            fields: {
              visualization: {
                type: "Visualization",
                id: 1
              },
              analysisValues: {
                type: "TableData",
                id: 2
              },
              selectedColumn: {
                rule: "repeated",
                type: "Column",
                id: 3
              },
              excludedColumn: {
                rule: "repeated",
                type: "Column",
                id: 4
              },
              param: {
                type: "sage.AnalysisParam",
                id: 5
              },
              analyzeCurrentData: {
                type: "sage.VisualizationAnalysisRequest.CurrentDataOptions",
                id: 6,
                options: {
                  "default": "INCLUDE"
                }
              },
              sendEmail: {
                type: "bool",
                id: 7,
                options: {
                  "default": true
                }
              },
              analysisId: {
                type: "string",
                id: 8
              }
            },
            nested: {
              Visualization: {
                fields: {
                  vizId: {
                    type: "string",
                    id: 1
                  }
                }
              },
              Column: {
                fields: {
                  logicalColumnId: {
                    type: "string",
                    id: 1
                  }
                }
              }
            }
          },
          A3AnalysisSubmissionResponse: {
            fields: {}
          },
          GetRelatedInsightsRequest: {
            fields: {}
          },
          GetRelatedInsightsResponse: {
            fields: {
              relatedInsight: {
                rule: "repeated",
                type: "RelatedInsight",
                id: 1
              }
            },
            nested: {
              RelatedInsight: {
                fields: {
                  preview: {
                    type: "RelatedInsightPreview",
                    id: 1
                  },
                  completeAnswer: {
                    type: "LoadableAnswer",
                    id: 2
                  }
                }
              }
            }
          },
          GetQueryViewerSpecRequest: {
            fields: {}
          },
          GetQueryViewerSpecResponse: {
            fields: {
              queryViewerSpec: {
                type: "sage.QVSpecProto",
                id: 1
              }
            }
          },
          GetNaturalLanguageQueryRequest: {
            fields: {}
          },
          GetNaturalLanguageQueryResponse: {
            fields: {}
          },
          GetTokensRequest: {
            fields: {}
          },
          GetTokensResponse: {
            fields: {
              searchTokens: {
                type: "SearchTokens",
                id: 1
              },
              accessibleTable: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 2
              }
            }
          },
          GetAnswerModelRequest: {
            fields: {}
          },
          GetAnswerModelResponse: {
            fields: {
              answerModel: {
                type: "AnswerModel",
                id: 1
              }
            }
          },
          GetVizDataRequest: {
            fields: {
              vizId: {
                type: "string",
                id: 1
              }
            }
          },
          GetVizDataResponse: {
            fields: {
              vizData: {
                type: "VizData",
                id: 1
              }
            }
          },
          GetACContextRequest: {
            fields: {}
          },
          GetACContextResponse: {
            fields: {
              acContext: {
                type: "sage.auto_complete.v2.ACContext",
                id: 1
              }
            }
          },
          UpdateACContextRequest: {
            fields: {
              newAcContext: {
                type: "sage.auto_complete.v2.ACContext",
                id: 1
              }
            }
          },
          UpdateACContextResponse: {
            fields: {}
          }
        }
      },
      logicalTable: {
        options: {
          java_package: "com.thoughtspot.bach",
          java_outer_classname: "LogicalTable"
        },
        nested: {
          LogicalTablePreview: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              column: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 2
              },
              database: {
                type: "common.EntityHeader",
                id: 3
              },
              schema: {
                type: "common.EntityHeader",
                id: 4
              },
              author: {
                type: "common.EntityHeader",
                id: 5
              },
              createMs: {
                type: "int64",
                id: 6
              },
              lastUpdateMs: {
                type: "int64",
                id: 7
              }
            }
          },
          RelationshipPreview: {
            fields: {
              sourceTable: {
                type: "common.EntityHeader",
                id: 1
              },
              destTable: {
                type: "common.EntityHeader",
                id: 2
              },
              sourceColumn: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 3
              },
              destColumn: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 4
              },
              joinType: {
                type: "sage.JoinProto.JoinType",
                id: 5
              },
              relationshipHeader: {
                type: "common.EntityHeader",
                id: 6
              },
              oneToOne: {
                type: "bool",
                id: 7
              }
            }
          },
          RelationshipPreviewList: {
            fields: {
              relationshipPreview: {
                rule: "repeated",
                type: "RelationshipPreview",
                id: 1
              }
            }
          },
          GetPreviewRequest: {
            fields: {
              tableId: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            },
            nested: {
              getPreviewRequest: {
                type: "GetPreviewRequest",
                id: 1150,
                extend: "BaseRequest"
              }
            }
          },
          GetPreviewResponse: {
            fields: {
              table: {
                rule: "repeated",
                type: "LogicalTablePreview",
                id: 1
              }
            },
            nested: {
              getPreviewResponse: {
                type: "GetPreviewResponse",
                id: 1150,
                extend: "BaseResponse"
              }
            }
          }
        }
      },
      user: {
        options: {
          java_package: "com.thoughtspot.bach",
          java_outer_classname: "User"
        },
        nested: {
          UserPreview: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              imageUrl: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      worksheet: {
        options: {
          java_package: "com.thoughtspot.bach",
          java_outer_classname: "Worksheet"
        },
        nested: {
          WorksheetColumnDependents: {
            fields: {
              tableHeader: {
                type: "common.EntityHeader",
                id: 1
              },
              columnHeader: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 2
              }
            }
          },
          WorksheetColumn: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              columnDependents: {
                rule: "repeated",
                type: "WorksheetColumnDependents",
                id: 2
              },
              canEditJoinPath: {
                type: "bool",
                id: 3
              },
              incompleteDetail: {
                rule: "repeated",
                type: "IncompleteDetail",
                id: 4
              },
              dataType: {
                type: "string",
                id: 5
              },
              formatPattern: {
                type: "string",
                id: 6
              },
              joinPath: {
                rule: "repeated",
                type: "sage.JoinPathProto",
                id: 7
              }
            }
          },
          WorksheetColumnGroup: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              worksheetColumn: {
                rule: "repeated",
                type: "WorksheetColumn",
                id: 2
              }
            }
          },
          WorksheetFormulaPreview: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              }
            }
          },
          WorksheetProperties: {
            fields: {
              joinType: {
                type: "sage.JoinProto.JoinType",
                id: 1
              },
              joinRule: {
                type: "JoinRuleType.E",
                id: 2
              },
              disableRls: {
                type: "bool",
                id: 3
              }
            },
            nested: {
              JoinRuleType: {
                fields: {},
                nested: {
                  E: {
                    values: {
                      PROGRESSIVE: 0,
                      ALL: 1
                    }
                  }
                }
              }
            }
          },
          WorksheetModel: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              columnGroup: {
                rule: "repeated",
                type: "WorksheetColumnGroup",
                id: 2
              },
              formula: {
                rule: "repeated",
                type: "WorksheetFormulaPreview",
                id: 3
              },
              author: {
                type: "user.UserPreview",
                id: 4
              },
              properties: {
                type: "WorksheetProperties",
                id: 5
              },
              isCorrupt: {
                type: "bool",
                id: 6
              },
              filters: {
                rule: "repeated",
                type: "Filter",
                id: 7
              }
            }
          },
          DependentObject: {
            fields: {
              type: {
                type: "ObjectType.E",
                id: 1
              },
              header: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 2
              }
            }
          },
          DependencyModel: {
            fields: {
              header: {
                type: "common.EntityHeader",
                id: 1
              },
              dependent: {
                rule: "repeated",
                type: "DependentObject",
                id: 2
              }
            }
          },
          LoadRequest: {
            fields: {
              id: {
                type: "string",
                id: 1
              }
            },
            nested: {
              loadRequest: {
                type: "LoadRequest",
                id: 1100,
                extend: "BaseRequest"
              }
            }
          },
          SaveRequest: {
            fields: {},
            nested: {
              saveRequest: {
                type: "SaveRequest",
                id: 1101,
                extend: "BaseRequest"
              }
            }
          },
          SaveAsRequest: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              description: {
                type: "string",
                id: 2
              }
            },
            nested: {
              saveAsRequest: {
                type: "SaveAsRequest",
                id: 1102,
                extend: "BaseRequest"
              }
            }
          },
          TransformRequest: {
            fields: {
              addColumnsTransform: {
                type: "AddColumnsTransform",
                id: 1
              },
              renameColumnTransform: {
                type: "RenameColumnTransform",
                id: 2
              },
              deleteColumnTransform: {
                type: "DeleteColumnTransform",
                id: 3
              },
              renameTransform: {
                type: "RenameTransform",
                id: 4
              },
              updatePropertiesTransform: {
                type: "UpdatePropertiesTransform",
                id: 5
              },
              editColumnJoinPathTransform: {
                type: "EditColumnJoinPathTransform",
                id: 6
              },
              removeBrokenColumnsTransform: {
                type: "RemoveBrokenColumnsTransfrom",
                id: 7
              },
              removeFormulaTransform: {
                type: "RemoveFormulaTransform",
                id: 8
              },
              addNewFormulaTransform: {
                type: "AddNewFormulaTransform",
                id: 9
              },
              updateFormulaTransform: {
                type: "UpdateFormulaTransform",
                id: 10
              },
              resolveJoinPathAmbiguityTransform: {
                type: "ResolveJoinPathAmbiguityTransform",
                id: 11
              },
              addFilterTransform: {
                type: "AddFilterTransform",
                id: 12
              },
              editFilterTransform: {
                type: "EditFilterTransform",
                id: 13
              },
              removeFilterTransform: {
                type: "RemoveFilterTransform",
                id: 14
              },
              setScopeTransform: {
                type: "SetScopeTransform",
                id: 15
              }
            },
            nested: {
              AddColumnsTransform: {
                fields: {
                  id: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  }
                }
              },
              RenameColumnTransform: {
                fields: {
                  renameColumn: {
                    rule: "repeated",
                    type: "RenameColumn",
                    id: 1
                  }
                },
                nested: {
                  RenameColumn: {
                    fields: {
                      updatedHeader: {
                        type: "common.EntityHeader",
                        id: 1
                      }
                    }
                  }
                }
              },
              DeleteColumnTransform: {
                fields: {
                  columnId: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  }
                }
              },
              RenameTransform: {
                fields: {
                  name: {
                    type: "string",
                    id: 1
                  },
                  description: {
                    type: "string",
                    id: 2
                  }
                }
              },
              UpdatePropertiesTransform: {
                fields: {
                  properties: {
                    type: "WorksheetProperties",
                    id: 1
                  }
                }
              },
              EditColumnJoinPathTransform: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  }
                }
              },
              RemoveBrokenColumnsTransfrom: {
                fields: {}
              },
              RemoveFormulaTransform: {
                fields: {
                  formulaId: {
                    type: "string",
                    id: 1
                  }
                }
              },
              AddNewFormulaTransform: {
                fields: {
                  formula: {
                    type: "sage.auto_complete.v2.ACFormula",
                    id: 1
                  }
                }
              },
              UpdateFormulaTransform: {
                fields: {
                  formula: {
                    type: "sage.auto_complete.v2.ACFormula",
                    id: 1
                  }
                }
              },
              ResolveJoinPathAmbiguityTransform: {
                fields: {
                  joinPathAmbiguityResolution: {
                    type: "JoinPathAmbiguityResolution",
                    id: 1
                  }
                }
              },
              AddFilterTransform: {
                fields: {
                  columnId: {
                    type: "string",
                    id: 1
                  }
                }
              },
              EditFilterTransform: {
                fields: {
                  filterId: {
                    type: "string",
                    id: 1
                  },
                  newOp: {
                    type: "sage.CompareTypeProto.E",
                    id: 2
                  },
                  newNegate: {
                    type: "bool",
                    id: 3
                  },
                  newValues: {
                    type: "NewValues",
                    id: 4
                  }
                },
                nested: {
                  NewValues: {
                    fields: {
                      clearOldValues: {
                        type: "bool",
                        id: 1,
                        options: {
                          "default": false
                        }
                      },
                      addValue: {
                        rule: "repeated",
                        type: "Value",
                        id: 2
                      },
                      removeValue: {
                        rule: "repeated",
                        type: "Value",
                        id: 3
                      }
                    }
                  }
                }
              },
              RemoveFilterTransform: {
                fields: {
                  filterId: {
                    type: "string",
                    id: 1
                  }
                }
              },
              SetScopeTransform: {
                fields: {
                  tableId: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  }
                }
              },
              transformRequest: {
                type: "TransformRequest",
                id: 1103,
                extend: "BaseRequest"
              }
            }
          },
          LoadDataRequest: {
            fields: {
              worksheetId: {
                type: "string",
                id: 1
              }
            },
            nested: {
              loadDataRequest: {
                type: "LoadDataRequest",
                id: 1104,
                extend: "BaseRequest"
              }
            }
          },
          LoadFormulaRequest: {
            fields: {
              formulaId: {
                type: "string",
                id: 1
              }
            },
            nested: {
              loadRequest: {
                type: "LoadFormulaRequest",
                id: 1105,
                extend: "BaseRequest"
              }
            }
          },
          GetSageContextRequest: {
            fields: {},
            nested: {
              getSageContextRequest: {
                type: "GetSageContextRequest",
                id: 1106,
                extend: "BaseRequest"
              }
            }
          },
          CreateRequest: {
            fields: {},
            nested: {
              createRequest: {
                type: "CreateRequest",
                id: 1107,
                extend: "BaseRequest"
              }
            }
          },
          LoadColumnDataRequest: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              },
              cascadeTableFilters: {
                type: "bool",
                id: 2
              },
              clientFilter: {
                type: "callosum.ExpressionProto",
                id: 3
              }
            },
            nested: {
              loadColumnDataRequest: {
                type: "LoadColumnDataRequest",
                id: 1108,
                extend: "BaseRequest"
              }
            }
          },
          LoadResponse: {
            fields: {
              worksheetModel: {
                type: "WorksheetModel",
                id: 1
              },
              logicalTablePreview: {
                rule: "repeated",
                type: "logicalTable.LogicalTablePreview",
                id: 2
              },
              accessibleTable: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 3
              }
            },
            nested: {
              loadResponse: {
                type: "LoadResponse",
                id: 1100,
                extend: "BaseResponse"
              }
            }
          },
          SaveAsResponse: {
            fields: {
              worksheetModel: {
                type: "WorksheetModel",
                id: 1
              },
              accessibleTable: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 2
              },
              cloneWorksheetModel: {
                type: "WorksheetModel",
                id: 3
              }
            },
            nested: {
              saveAsResponse: {
                type: "SaveAsResponse",
                id: 1102,
                extend: "BaseResponse"
              }
            }
          },
          TransformResponse: {
            fields: {
              worksheetModel: {
                type: "WorksheetModel",
                id: 1
              },
              joinPathAmbiguityResponse: {
                type: "JoinPathAmbiguityResponse",
                id: 2
              },
              accessibleTable: {
                rule: "repeated",
                type: "common.EntityHeader",
                id: 3
              },
              deleteColumnResponse: {
                type: "DeleteColumnResponse",
                id: 4
              }
            },
            nested: {
              DeleteColumnResponse: {
                fields: {
                  deleteColumnDependents: {
                    rule: "repeated",
                    type: "DependencyModel",
                    id: 1
                  }
                }
              },
              transformResponse: {
                type: "TransformResponse",
                id: 1103,
                extend: "BaseResponse"
              }
            }
          },
          LoadDataResponse: {
            fields: {
              tableData: {
                type: "TableData",
                id: 1
              }
            },
            nested: {
              loadDataResponse: {
                type: "LoadDataResponse",
                id: 1104,
                extend: "BaseResponse"
              }
            }
          },
          LoadFormulaResponse: {
            fields: {
              acContext: {
                type: "sage.auto_complete.v2.ACContext",
                id: 1
              },
              sageOutputGuid: {
                type: "string",
                id: 2
              }
            },
            nested: {
              loadFormulaResponse: {
                type: "LoadFormulaResponse",
                id: 1105,
                extend: "BaseResponse"
              }
            }
          },
          GetSageContextResponse: {
            fields: {
              acContext: {
                type: "sage.auto_complete.v2.ACContext",
                id: 1
              }
            },
            nested: {
              getSageContextResponse: {
                type: "GetSageContextResponse",
                id: 1106,
                extend: "BaseResponse"
              }
            }
          },
          CreateResponse: {
            fields: {
              worksheetModel: {
                type: "WorksheetModel",
                id: 1
              }
            },
            nested: {
              createResponse: {
                type: "CreateResponse",
                id: 1107,
                extend: "BaseResponse"
              }
            }
          },
          LoadColumnDataResponse: {
            fields: {
              columnData: {
                type: "ColumnData",
                id: 1
              }
            },
            nested: {
              loadColumnDataResponse: {
                type: "LoadColumnDataResponse",
                id: 1108,
                extend: "BaseResponse"
              }
            }
          }
        }
      }
    }
  },
  atlas: {
    options: {
      java_package: "com.thoughtspot.atlas.common",
      java_outer_classname: "AtlasSchema"
    },
    nested: {
      ColumnDataType: {
        fields: {},
        nested: {
          E: {
            values: {
              UNKNOWN: 0,
              BOOL: 1,
              VARCHAR: 2,
              CHAR: 3,
              DATE: 4,
              DATE_TIME: 5,
              TIME: 6,
              DATE_NUM: 7,
              DATE_NUM_QUARTER_IN_YEAR: 8,
              DATE_NUM_MONTH_IN_YEAR: 9,
              DATE_NUM_MONTH_IN_QUARTER: 10,
              DATE_NUM_WEEK_IN_YEAR: 11,
              DATE_NUM_WEEK_IN_QUARTER: 27,
              DATE_NUM_WEEK_IN_MONTH: 28,
              DATE_NUM_DAY_IN_YEAR: 12,
              DATE_NUM_DAY_IN_QUARTER: 13,
              DATE_NUM_DAY_IN_MONTH: 14,
              DATE_NUM_DAY_OF_WEEK: 15,
              DATE_NUM_HOUR_IN_DAY: 29,
              DATE_NUM_ABS_YEAR: 16,
              DATE_NUM_ABS_QUARTER: 17,
              DATE_NUM_ABS_DAY: 18,
              DATE_NUM_ABS_MONTH: 19,
              DATE_NUM_ABS_HOUR: 20,
              DATE_NUM_ABS_WEEK: 21,
              DATE_NUM_SEC_IN_DAY: 22,
              INT32: 23,
              INT64: 24,
              FLOAT: 25,
              DOUBLE: 26
            }
          }
        }
      },
      ColumnType: {
        fields: {},
        nested: {
          E: {
            values: {
              UNKNOWN: 0,
              ATTRIBUTE: 1,
              MEASURE: 2
            }
          }
        }
      },
      AggregationType: {
        fields: {},
        nested: {
          E: {
            values: {
              NONE: 0,
              COUNT: 1,
              COUNT_DISTINCT: 2,
              SUM: 3,
              AVERAGE: 4,
              MIN: 5,
              MAX: 6,
              STD_DEVIATION: 7,
              VARIANCE: 8,
              CUMULATIVE_SUM: 9,
              MOVING_SUM: 10,
              CUMULATIVE_AVERAGE: 11,
              MOVING_AVERAGE: 12,
              CUMULATIVE_MIN: 13,
              MOVING_MIN: 14,
              CUMULATIVE_MAX: 15,
              MOVING_MAX: 16,
              GROWTH: 17,
              AGGREGATE_DISTINCT: 18,
              CUMULATIVE_COUNT: 19,
              MOVING_COUNT: 20,
              TABLE_AGGR: 21,
              RANK: 22,
              RANK_PERCENTILE: 23
            }
          }
        }
      },
      CompareTypeProto: {
        fields: {},
        nested: {
          E: {
            values: {
              EQ: 0,
              NE: 1,
              LT: 2,
              LE: 3,
              GT: 4,
              GE: 5,
              IN: 6,
              BW: 7,
              CONTAINS: 8,
              BEGINS_WITH: 9,
              ENDS_WITH: 10,
              BW_INC: 11,
              BW_INC_MIN: 12,
              BW_INC_MAX: 13,
              LIKE: 14
            }
          }
        }
      },
      GeoType: {
        fields: {},
        nested: {
          E: {
            values: {
              NONE: 0,
              AREA_CODE: 1,
              CBSA_MSA: 2,
              CITY: 3,
              CONGRESSIONAL_DISTRICT: 4,
              COUNTRY_REGION: 5,
              COUNTY: 6,
              LATITUDE: 7,
              LONGITUDE: 8,
              STATE_PROVINCE: 9,
              ZIP_CODE: 10
            }
          }
        }
      },
      GeoConfigProto: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          fixedValue: {
            type: "string",
            id: 2
          },
          columnGuid: {
            type: "string",
            id: 3
          },
          customFileGuid: {
            type: "string",
            id: 5
          },
          parent: {
            type: "GeoConfigProto",
            id: 4
          }
        },
        nested: {
          Type: {
            values: {
              LATITUDE: 0,
              LONGITUDE: 1,
              ZIP_CODE: 2,
              ADMIN_DIV_0: 3,
              ADMIN_DIV_1: 4,
              ADMIN_DIV_2: 5,
              CUSTOM_REGION: 6
            }
          }
        }
      },
      ColumnIndexType: {
        fields: {},
        nested: {
          E: {
            values: {
              DEFAULT: 0,
              DONT_INDEX: 1,
              PREFIX_ONLY: 2,
              PREFIX_AND_WORD_SUBSTRING: 3,
              PREFIX_AND_SUBSTRING: 4
            }
          }
        }
      },
      EntityCategory: {
        fields: {},
        nested: {
          E: {
            values: {
              DEFAULT: 0,
              PERSON: 1,
              PLACE: 2,
              TIME: 3,
              MONEY: 4,
              PRODUCT: 5,
              NUM_TYPES: 6
            }
          }
        }
      },
      Privilege: {
        fields: {},
        nested: {
          E: {
            values: {
              UNKNOWN: 0,
              ADMINISTRATION: 1,
              AUTHORING: 2,
              USER_DATA_UPLOADING: 3,
              DATA_DOWNLOADING: 4,
              USER_MANAGEMENT: 5,
              SECURITY_MANAGEMENT: 6,
              DATA_MANAGEMENT: 7,
              TAG_MANAGEMENT: 8,
              SHARE_WITH_ALL: 9,
              SYSTEM_MANAGEMENT: 10,
              JOB_SCHEDULING: 11,
              LOGICAL_MODELING: 12,
              A3_ANALYSIS: 13,
              BYPASSRLS: 14,
              EXPERIMENTAL_FEATURE_PRIVILEGE: 15,
              R_ANALYSIS: 16
            }
          }
        }
      },
      JoinType: {
        fields: {},
        nested: {
          E: {
            values: {
              CROSS: 0,
              INNER: 1,
              OUTER: 2,
              LEFT: 3,
              RIGHT: 4
            }
          }
        }
      },
      SchemaVersionHeader: {
        options: {
          "(NodeProto.node_id)": "__schema_header__"
        },
        fields: {
          physicalVersion: {
            type: "int64",
            id: 1
          },
          schemaVersion: {
            type: "string",
            id: 2
          },
          installedSchemaVersion: {
            type: "string",
            id: 3
          }
        },
        nested: {
          version: {
            type: "SchemaVersionHeader",
            id: 1007,
            extend: "NodeHeader"
          }
        }
      },
      SchemaVersionContent: {
        fields: {},
        nested: {
          version: {
            type: "SchemaVersionContent",
            id: 1007,
            extend: "NodeContent"
          }
        }
      },
      PrincipalVisibility: {
        fields: {},
        nested: {
          Type: {
            values: {
              DEFAULT: 0,
              NON_SHARABLE: 1
            }
          }
        }
      },
      UserHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          slackId: {
            type: "string",
            id: 3
          },
          visibility: {
            type: "PrincipalVisibility.Type",
            id: 4
          }
        },
        nested: {
          user: {
            type: "UserHeader",
            id: 1000,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              UNKNOWN: 0,
              LDAP_USER: 1,
              LOCAL_USER: 2,
              SAML_USER: 3,
              ADMIN_USER: 4,
              SUPER_USER: 5,
              SYSTEM_USER: 6
            }
          }
        }
      },
      UserActivityProto: {
        fields: {
          firstLogin: {
            type: "int64",
            id: 1
          },
          welcomeEmailSent: {
            type: "bool",
            id: 2
          }
        }
      },
      UserContent: {
        fields: {
          email: {
            type: "string",
            id: 1
          },
          notifyOnShare: {
            type: "bool",
            id: 2
          },
          userActivity: {
            type: "UserActivityProto",
            id: 6
          },
          properties: {
            type: "bytes",
            id: 3
          },
          preferences: {
            type: "bytes",
            id: 4
          },
          details: {
            type: "callosum.PreferenceProto",
            id: 5
          }
        },
        nested: {
          user: {
            type: "UserContent",
            id: 1000,
            extend: "NodeContent"
          }
        }
      },
      UserAuthInfoHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          password: {
            type: "string",
            id: 2
          },
          shortLivedToken: {
            type: "ShortLivedToken",
            id: 3
          },
          userId: {
            type: "string",
            id: 4
          }
        },
        nested: {
          authinfo: {
            type: "UserAuthInfoHeader",
            id: 1002,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              ENCRYPTED_PASSWORD: 0,
              SHORT_LIVED_TOKEN: 1
            }
          },
          ShortLivedToken: {
            fields: {
              token: {
                type: "string",
                id: 1
              },
              createMs: {
                type: "int64",
                id: 2
              },
              accessTypeEnum: {
                type: "AccessType",
                id: 3
              },
              objectId: {
                type: "string",
                id: 4
              }
            },
            nested: {
              AccessType: {
                values: {
                  FULL: 0,
                  REPORT_BOOK_VIEW: 1
                }
              }
            }
          }
        }
      },
      UserAuthInfoContent: {
        fields: {},
        nested: {
          authinfo: {
            type: "UserAuthInfoContent",
            id: 1002,
            extend: "NodeContent"
          }
        }
      },
      UserGroupHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          displayName: {
            type: "string",
            id: 2
          },
          metadataVersion: {
            type: "int64",
            id: 3
          },
          privilege: {
            rule: "repeated",
            type: "Privilege.E",
            id: 4,
            options: {
              packed: false
            }
          },
          visibility: {
            type: "PrincipalVisibility.Type",
            id: 5
          }
        },
        nested: {
          usergroup: {
            type: "UserGroupHeader",
            id: 1001,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              UNKNOWN: 0,
              LDAP_GROUP: 1,
              LOCAL_GROUP: 2,
              ADMIN_GROUP: 3,
              ALL_USER_GROUP: 4,
              SYSTEM_GROUP: 5,
              TENANT_GROUP: 6
            }
          }
        }
      },
      UserGroupContent: {
        fields: {
          idx: {
            type: "int64",
            id: 1
          }
        },
        nested: {
          usergroup: {
            type: "UserGroupContent",
            id: 1001,
            extend: "NodeContent"
          }
        }
      },
      TenantHeader: {
        fields: {
          displayName: {
            type: "string",
            id: 1
          },
          rootGroup: {
            type: "string",
            id: 2
          }
        },
        nested: {
          tenant: {
            type: "TenantHeader",
            id: 1024,
            extend: "NodeHeader"
          }
        }
      },
      TenantContent: {
        fields: {},
        nested: {
          tenant: {
            type: "TenantContent",
            id: 1024,
            extend: "NodeContent"
          }
        }
      },
      RoleHeader: {
        fields: {
          displayName: {
            type: "string",
            id: 1
          }
        },
        nested: {
          role: {
            type: "RoleHeader",
            id: 1003,
            extend: "NodeHeader"
          }
        }
      },
      RoleContent: {
        fields: {},
        nested: {
          role: {
            type: "RoleContent",
            id: 1003,
            extend: "NodeContent"
          }
        }
      },
      PhysicalTable: {
        fields: {},
        nested: {
          header: {
            type: "Header",
            id: 1011,
            extend: "NodeHeader"
          },
          content: {
            type: "Content",
            id: 1011,
            extend: "NodeContent"
          },
          Header: {
            fields: {
              db: {
                type: "string",
                id: 1
              },
              schema: {
                type: "string",
                id: 2
              },
              version: {
                type: "int64",
                id: 4
              }
            }
          },
          Content: {
            fields: {}
          }
        }
      },
      PhysicalColumn: {
        fields: {},
        nested: {
          header: {
            type: "Header",
            id: 1022,
            extend: "NodeHeader"
          },
          content: {
            type: "Content",
            id: 1022,
            extend: "NodeContent"
          },
          Header: {
            fields: {
              db: {
                type: "string",
                id: 1
              },
              schema: {
                type: "string",
                id: 2
              }
            }
          },
          Content: {
            fields: {}
          }
        }
      },
      PhysicalRelationship: {
        fields: {},
        nested: {
          header: {
            type: "Header",
            id: 1023,
            extend: "NodeHeader"
          },
          content: {
            type: "Content",
            id: 1023,
            extend: "NodeContent"
          },
          Header: {
            fields: {
              db: {
                type: "string",
                id: 1
              },
              schema: {
                type: "string",
                id: 2
              }
            }
          },
          Content: {
            fields: {}
          }
        }
      },
      ColumnFormat: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          pattern: {
            type: "string",
            id: 2
          }
        },
        nested: {
          Type: {
            values: {
              NONE: 0,
              PERCENTAGE: 1
            }
          }
        }
      },
      CurrencyFormat: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          column: {
            type: "string",
            id: 2
          },
          isoCode: {
            type: "string",
            id: 3
          }
        },
        nested: {
          Type: {
            values: {
              USER_LOCALE: 0,
              COLUMN: 1,
              ISO_CODE: 2
            }
          }
        }
      },
      ExpressionNode: {
        fields: {
          type: {
            type: "Type",
            id: 1,
            options: {
              "(common.sensitivity)": 0
            }
          },
          reference: {
            type: "Reference",
            id: 2
          },
          arithmetic: {
            type: "Arithmetic",
            id: 3
          },
          aggregate: {
            type: "Aggregate",
            id: 4
          },
          pinnedMeasure: {
            type: "PinnedMeasure",
            id: 5
          },
          constant: {
            type: "Constant",
            id: 6
          },
          variable: {
            type: "Variable",
            id: 7
          },
          windowing: {
            type: "Windowing",
            id: 8
          }
        },
        nested: {
          Type: {
            values: {
              ARITHMETIC_NODE: 0,
              AGGREGATE_NODE: 1,
              PINNED_MEASURE_NODE: 2,
              CONSTANT_NODE: 3,
              REFERENCE_NODE: 4,
              VARIABLE_NODE: 5,
              WINDOWING_NODE: 6
            }
          },
          Constant: {
            fields: {
              dataType: {
                type: "ColumnDataType.E",
                id: 1,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              stringVal: {
                type: "string",
                id: 2,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              intVal: {
                type: "int64",
                id: 3,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              doubleVal: {
                type: "double",
                id: 4,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              dateVal: {
                type: "int64",
                id: 5,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              boolVal: {
                type: "bool",
                id: 6,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              isNull: {
                type: "bool",
                id: 7,
                options: {
                  "default": false,
                  "(common.sensitivity)": 0
                }
              },
              name: {
                type: "string",
                id: 8,
                options: {
                  "(common.sensitivity)": 3
                }
              },
              shouldNormalize: {
                type: "bool",
                id: 9,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          Reference: {
            fields: {
              logicalColumn: {
                type: "string",
                id: 1,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              joinPath: {
                rule: "repeated",
                type: "JoinPath",
                id: 2
              }
            },
            nested: {
              JoinPath: {
                fields: {
                  join: {
                    rule: "repeated",
                    type: "Join",
                    id: 1
                  }
                },
                nested: {
                  Join: {
                    fields: {
                      joinId: {
                        type: "string",
                        id: 1,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          Variable: {
            fields: {
              id: {
                type: "string",
                id: 1,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              name: {
                type: "string",
                id: 2,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              dataType: {
                type: "ColumnDataType.E",
                id: 3,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              value: {
                rule: "repeated",
                type: "ExpressionNode",
                id: 4
              },
              defaultValue: {
                rule: "repeated",
                type: "ExpressionNode",
                id: 5
              }
            }
          },
          Windowing: {
            fields: {
              partitionOver: {
                type: "PartitionOverDefinition",
                id: 1
              },
              aggregate: {
                type: "Aggregate",
                id: 2,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              inheritAggregation: {
                type: "bool",
                id: 3,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            },
            nested: {
              PartitionOverDefinition: {
                fields: {
                  orderingColumn: {
                    rule: "repeated",
                    type: "OrderingColumn",
                    id: 1
                  },
                  partitionColumn: {
                    rule: "repeated",
                    type: "ExpressionNode",
                    id: 2
                  },
                  inheritPartitionColumns: {
                    type: "bool",
                    id: 3,
                    options: {
                      "(common.sensitivity)": 0
                    }
                  },
                  partitionWindow: {
                    type: "PartitionWindow",
                    id: 4
                  }
                },
                nested: {
                  OrderingColumn: {
                    fields: {
                      expressionNode: {
                        type: "ExpressionNode",
                        id: 1
                      },
                      sortAscending: {
                        type: "bool",
                        id: 2,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      }
                    }
                  },
                  PartitionWindow: {
                    fields: {
                      type: {
                        type: "Type",
                        id: 1,
                        options: {
                          "(common.sensitivity)": 0
                        }
                      },
                      start: {
                        type: "Point",
                        id: 2
                      },
                      end: {
                        type: "Point",
                        id: 3
                      }
                    },
                    nested: {
                      Type: {
                        values: {
                          RANGE: 1,
                          ROW: 2
                        }
                      },
                      Point: {
                        fields: {
                          type: {
                            type: "Type",
                            id: 1,
                            options: {
                              "(common.sensitivity)": 0
                            }
                          },
                          distance: {
                            type: "int64",
                            id: 2,
                            options: {
                              "(common.sensitivity)": 0
                            }
                          }
                        },
                        nested: {
                          Type: {
                            values: {
                              UNBOUNDED_PRECEDING: 1,
                              PRECEDING: 2,
                              UNBOUNDED_FOLLOWING: 3,
                              FOLLOWING: 4,
                              CURRENT_ROW: 5
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          Arithmetic: {
            fields: {
              child: {
                rule: "repeated",
                type: "ExpressionNode",
                id: 1
              },
              op: {
                type: "falcon.ExpressionOp.E",
                id: 2,
                options: {
                  "(common.sensitivity)": 0
                }
              },
              logicalOp: {
                type: "LogicalOp",
                id: 3,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            },
            nested: {
              LogicalOp: {
                values: {
                  DAY_OF_WEEK_NUM: 1,
                  NONE: 2,
                  OP_LESS_THAN: 3,
                  OP_LESSER_EQUALS: 4,
                  OP_GREATER_THAN: 5,
                  OP_GREATER_EQUALS: 6,
                  OP_EQUALS: 7,
                  OP_NOT_EQUALS: 8,
                  OP_AND: 9,
                  OP_OR: 10,
                  OP_NOT: 11,
                  OP_IF: 12,
                  OP_IF_NULL: 13,
                  OP_IS_NULL: 14,
                  OP_NEGATE: 15,
                  OP_SQRT: 16,
                  OP_ABS: 17,
                  OP_FLOOR: 18,
                  OP_CEIL: 19,
                  OP_RANDOM: 20,
                  OP_ROUND: 21,
                  OP_SQUARE: 22,
                  OP_CUBE: 23,
                  OP_CUBEROOT: 24,
                  OP_SIN: 25,
                  OP_COS: 26,
                  OP_TAN: 27,
                  OP_ASIN: 28,
                  OP_ACOS: 29,
                  OP_ATAN: 30,
                  OP_ATAN2: 31,
                  EXP: 32,
                  OP_EXP2: 33,
                  OP_LN: 34,
                  OP_LOG2: 35,
                  OP_LOG10: 36,
                  OP_SIGN: 37,
                  OP_POW: 38,
                  OP_LEAST: 39,
                  OP_GREATEST: 40,
                  SUM: 41,
                  DIFF: 42,
                  MULT: 43,
                  DIV: 44,
                  MOD: 45,
                  OP_SPHERICAL_DISTANCE: 46,
                  BEGINS_WITH: 47,
                  ENDS_WITH: 48,
                  OP_CONTAINS: 49,
                  OP_LIKE: 50,
                  OP_STRLEN: 51,
                  OP_SUBSTR: 52,
                  OP_SPELLS_LIKE: 53,
                  OP_STRING_MATCH_SCORE: 54,
                  OP_EDIT_DISTANCE: 55,
                  OP_EDIT_DISTANCE_WITH_CAP: 56,
                  OP_SOUNDS_LIKE: 57,
                  OP_STRPOS: 58,
                  OP_STRCAT: 59,
                  OP_EQUALS_NOCASE: 60,
                  OP_NOT_EQUALS_NOCASE: 61,
                  OP_LESS_THAN_NOCASE: 62,
                  OP_LESSER_EQUALS_NOCASE: 63,
                  OP_GREATER_THAN_NOCASE: 64,
                  OP_GREATER_EQUALS_NOCASE: 65,
                  OP_BEGINS_WITH: 66,
                  OP_BEGINS_WITH_NOCASE: 67,
                  OP_ENDS_WITH: 68,
                  OP_ENDS_WITH_NOCASE: 69,
                  OP_CONTAINS_NOCASE: 70,
                  OP_NOW: 71,
                  OP_TODAY: 72,
                  ABS_DATE: 73,
                  ABS_DATE_AS_EPOCH: 74,
                  ABS_YEAR: 75,
                  ABS_YEAR_AS_EPOCH: 76,
                  ABS_QUARTER: 77,
                  ABS_QUARTER_AS_EPOCH: 78,
                  ABS_MONTH: 79,
                  ABS_MONTH_AS_EPOCH: 80,
                  ABS_WEEK: 81,
                  ABS_WEEK_AS_EPOCH: 82,
                  WEEK_IN_YEAR_AS_EPOCH: 83,
                  ABS_DAY: 84,
                  ABS_DAY_AS_EPOCH: 85,
                  ABS_HOUR: 86,
                  ABS_HOUR_AS_EPOCH: 87,
                  QUARTER_IN_YEAR: 88,
                  QUARTER_OF_YEAR: 89,
                  MONTH_IN_YEAR: 90,
                  MONTH_OF_YEAR: 91,
                  MONTH_IN_QUARTER: 92,
                  MONTH_OF_QUARTER: 93,
                  WEEK_IN_YEAR: 94,
                  WEEK_IN_YEAR_ISO: 95,
                  WEEK_OF_YEAR_ISO: 96,
                  WEEK_OF_QUARTER: 97,
                  WEEK_OF_MONTH: 98,
                  DAY_IN_YEAR: 99,
                  DAY_IN_QUARTER: 100,
                  DAY_IN_MONTH: 101,
                  DAY_OF_YEAR: 102,
                  DAY_OF_QUARTER: 103,
                  DAY_OF_MONTH: 104,
                  DAY_OF_WEEK: 105,
                  DAY_OF_WEEK_STR: 106,
                  HOUR_OF_DAY: 107,
                  OP_HOUR_IN_DAY: 108,
                  OP_SECOND_IN_DAY: 109,
                  OP_DAY_OF_WEEK_STR: 110,
                  OP_DATE_DIFF_DAYS: 111,
                  OP_MONTH_IN_YEAR_STR: 112,
                  OP_DATE_ADD_DAYS: 113,
                  OP_IS_WEEKEND: 114,
                  OP_TIME_PART: 115,
                  PINNED_MEASURE: 116,
                  OP_CONTAINER_SIZE: 117,
                  OP_IN: 118,
                  OP_CONVERT_DATE_STRING: 119,
                  OP_CONVERT_BOOL_NUMERIC: 120,
                  OP_CONVERT_BOOL_STRING: 121,
                  OP_CONVERT_NUMERIC_BOOL: 122,
                  OP_CONVERT_STRING_BOOL: 123,
                  OP_CONVERT_FLOAT_INTEGER: 124,
                  OP_CONVERT_STRING_INT64: 125,
                  OP_CONVERT_DOUBLE_STRING: 126,
                  OP_CONVERT_INT64_STRING: 127,
                  OP_CONVERT_STRING_DOUBLE: 128,
                  OP_DATE_PARSE: 129,
                  PINNED_MEASURE_IF: 130,
                  OP_LIST: 131,
                  WEEK_IN_QUARTER: 132,
                  WEEK_IN_MONTH: 133,
                  OP_QUERY_GROUPS: 134,
                  OP_FISCAL_YEAR_NUMBER: 135,
                  OP_QUERY_FILTERS: 136,
                  OP_LIST_UNION: 137,
                  OP_LIST_DIFF: 138,
                  GROUP_AGGREGATE_IF: 139,
                  OP_QUARTER_IN_YEAR: 140,
                  OP_ABS_QUARTER_AS_EPOCH: 141,
                  OP_ABS_YEAR_AS_EPOCH: 142,
                  OP_DATE_TIME_ADD_SECONDS: 143,
                  OP_DATE_ADD_WEEKS: 144,
                  OP_DATE_ADD_YEARS: 145,
                  OP_DATE_ADD_MONTHS: 146,
                  ABS_WEEK_END_EX_AS_EPOCH: 147,
                  ABS_MONTH_END_EX_AS_EPOCH: 148,
                  ABS_QUARTER_END_EX_AS_EPOCH: 149,
                  ABS_YEAR_END_EX_AS_EPOCH: 150,
                  OP_MONTHLY_STR: 151,
                  OP_QUARTERLY_STR: 152,
                  OP_YEARLY_STR: 153,
                  OP_DATE_TIME_ADD_MINUTES: 154,
                  ABS_YEAR_NUMBER: 155,
                  OP_LEFT: 156,
                  OP_RIGHT: 157,
                  OP_QUARTER_IN_YEAR_STR: 158
                }
              }
            }
          },
          Aggregate: {
            fields: {
              child: {
                type: "ExpressionNode",
                id: 1
              },
              aggr: {
                type: "AggregationType.E",
                id: 2,
                options: {
                  "(common.sensitivity)": 0
                }
              }
            }
          },
          PinnedMeasure: {
            fields: {
              pinned: {
                type: "Aggregate",
                id: 1
              },
              child: {
                rule: "repeated",
                type: "ExpressionNode",
                id: 2
              }
            }
          }
        }
      },
      LogicalColumnHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          optionalType: {
            type: "OptionalType",
            id: 2
          }
        },
        nested: {
          column: {
            type: "LogicalColumnHeader",
            id: 1006,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              COLUMN_ONE_TO_ONE: 1,
              COLUMN_DERIVED: 2,
              COLUMN_UNKNOWN: 3
            }
          },
          OptionalType: {
            values: {
              FORMULA: 0
            }
          }
        }
      },
      LogicalColumnProperties: {
        fields: {
          type: {
            type: "ColumnType.E",
            id: 1
          },
          dataType: {
            type: "ColumnDataType.E",
            id: 2
          },
          aggregationType: {
            type: "AggregationType.E",
            id: 3
          },
          geoType: {
            type: "GeoType.E",
            id: 4,
            options: {
              "default": "NONE",
              deprecated: true
            }
          },
          geoConfig: {
            type: "GeoConfigProto",
            id: 5
          },
          entityCategory: {
            type: "sage.EntityCategory.E",
            id: 6
          },
          indexType: {
            type: "atlas.ColumnIndexType.E",
            id: 7
          },
          indexPriority: {
            type: "double",
            id: 8,
            options: {
              "default": 1
            }
          },
          synonym: {
            rule: "repeated",
            type: "string",
            id: 9
          },
          attributionDimension: {
            type: "bool",
            id: 10
          },
          additive: {
            type: "bool",
            id: 11,
            options: {
              "default": false
            }
          },
          continuous: {
            type: "bool",
            id: 12
          },
          position: {
            type: "int32",
            id: 13
          },
          primary: {
            type: "bool",
            id: 14
          },
          format: {
            type: "ColumnFormat",
            id: 15
          },
          currencyFormat: {
            type: "CurrencyFormat",
            id: 16
          },
          precision: {
            type: "int32",
            id: 17
          },
          scale: {
            type: "int32",
            id: 18
          },
          foreign: {
            type: "bool",
            id: 19
          },
          physicalColumnName: {
            type: "string",
            id: 20
          },
          injectedInlineValues: {
            rule: "repeated",
            type: "string",
            id: 21
          },
          spotiqPreference: {
            type: "callosum.ColumnSpotiqPreferenceProto.E",
            id: 22,
            options: {
              "default": "DEFAULT"
            }
          },
          searchiqPreferred: {
            type: "bool",
            id: 23
          }
        }
      },
      LogicalColumnContent: {
        fields: {
          properties: {
            type: "LogicalColumnProperties",
            id: 1
          },
          expression: {
            type: "ExpressionNode",
            id: 2
          },
          sageOutputId: {
            type: "string",
            id: 3
          },
          formulaId: {
            type: "string",
            id: 4
          },
          adhocFormula: {
            type: "bool",
            id: 5
          },
          metricDefinition: {
            type: "callosum.MetricDefinitionProto",
            id: 6
          },
          derivedColumnOwner: {
            type: "string",
            id: 7
          },
          timeBucketedOnTheFly: {
            type: "bool",
            id: 8
          },
          columnMappingInfo: {
            type: "ColumnMappingInfo",
            id: 9
          }
        },
        nested: {
          column: {
            type: "LogicalColumnContent",
            id: 1006,
            extend: "NodeContent"
          },
          ColumnMappingInfo: {
            fields: {
              columnName: {
                type: "string",
                id: 1
              }
            }
          }
        }
      },
      Variable: {
        fields: {},
        nested: {
          header: {
            type: "Variable.Header",
            id: 1021,
            extend: "NodeHeader"
          },
          content: {
            type: "Variable.Content",
            id: 1021,
            extend: "NodeContent"
          },
          Type: {
            values: {
              SYSTEM: 0,
              GLOBAL: 1
            }
          },
          Header: {
            fields: {
              type: {
                type: "Type",
                id: 1
              }
            }
          },
          Content: {
            fields: {
              dataType: {
                type: "ColumnDataType.E",
                id: 1
              },
              expressionNode: {
                type: "ExpressionNode",
                id: 2
              }
            }
          }
        }
      },
      WorksheetType: {
        fields: {},
        nested: {
          E: {
            values: {
              VIEW: 0,
              CONTAINER: 1
            }
          }
        }
      },
      Question: {
        fields: {
          context: {
            type: "sage.auto_complete.v2.ACContext",
            id: 1
          },
          idx: {
            type: "int32",
            id: 2
          },
          text: {
            type: "string",
            id: 3
          },
          customRAnalysis: {
            type: "sage.AnalysisDescriptor.CustomRAnalysis",
            id: 4
          },
          a3InsightExplanation: {
            type: "sage.A3InsightExplanation",
            id: 5
          }
        }
      },
      LogicalTableHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          datasourceName: {
            type: "string",
            id: 2
          },
          isExternal: {
            type: "bool",
            id: 3,
            options: {
              "default": false
            }
          }
        },
        nested: {
          table: {
            type: "LogicalTableHeader",
            id: 1008,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              ONE_TO_ONE_TABLE: 0,
              USER_DEFINED_TABLE: 1,
              DB_VIEW_TABLE: 2,
              WORKSHEET_TABLE: 3,
              PRIVATE_WORKSHEET_TABLE: 4,
              AGGR_WORKSHEET_TABLE: 5,
              MATERIALIZED_VIEW_TABLE: 6,
              CALENDAR_TABLE: 7
            }
          }
        }
      },
      LogicalTableContent: {
        fields: {
          dataSourceId: {
            type: "string",
            id: 1
          },
          worksheet: {
            type: "Worksheet",
            id: 2
          },
          shardingInfo: {
            type: "ShardingInfo",
            id: 3
          },
          materializedViewInfo: {
            type: "MaterializedViewInfo",
            id: 4
          },
          tableMappingInfo: {
            type: "TableMappingInfo",
            id: 5
          },
          isOptimized: {
            type: "bool",
            id: 6
          }
        },
        nested: {
          table: {
            type: "LogicalTableContent",
            id: 1008,
            extend: "NodeContent"
          },
          Worksheet: {
            fields: {
              type: {
                type: "WorksheetType.E",
                id: 1
              },
              question: {
                type: "Question",
                id: 2
              },
              joinType: {
                type: "JoinType.E",
                id: 3
              },
              bypassRLS: {
                type: "bool",
                id: 4
              },
              joinOverride: {
                rule: "repeated",
                type: "JoinOverride",
                id: 5
              }
            },
            nested: {
              JoinOverride: {
                fields: {
                  joinId: {
                    type: "string",
                    id: 1
                  },
                  joinType: {
                    type: "JoinType.E",
                    id: 2
                  },
                  oneToOne: {
                    type: "bool",
                    id: 3
                  }
                }
              }
            }
          },
          ShardingInfo: {
            fields: {
              primaryKeyColumnId: {
                rule: "repeated",
                type: "string",
                id: 1
              },
              shardingKeyColumnId: {
                rule: "repeated",
                type: "string",
                id: 2
              },
              numberOfShards: {
                type: "int32",
                id: 3
              }
            }
          },
          MaterializedViewInfo: {
            fields: {
              status: {
                type: "falcon.MaterializedViewStatus",
                id: 1
              },
              columnToIndexMap: {
                rule: "repeated",
                type: "common.KeyValue",
                id: 2
              }
            }
          },
          TableMappingInfo: {
            fields: {
              databaseName: {
                type: "string",
                id: 1
              },
              schemaName: {
                type: "string",
                id: 2
              },
              tableName: {
                type: "string",
                id: 3
              },
              cachingInfo: {
                type: "CachingInfo",
                id: 4
              }
            },
            nested: {
              CachingInfo: {
                fields: {
                  isCached: {
                    type: "bool",
                    id: 1
                  },
                  lastLoadTime: {
                    type: "int64",
                    id: 2
                  },
                  type: {
                    type: "Type",
                    id: 3
                  }
                },
                nested: {
                  Type: {
                    values: {
                      UNKNOWN: 0,
                      MANUALLY: 1,
                      SCHEDULED: 2,
                      UNSYNCED: 3
                    }
                  }
                }
              }
            }
          }
        }
      },
      LogicalRelationshipHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          }
        },
        nested: {
          relationship: {
            type: "LogicalRelationshipHeader",
            id: 1009,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              FOREIGN_KEY: 0,
              GENERIC: 1,
              USER_DEFINED: 2
            }
          }
        }
      },
      LogicalRelationshipContent: {
        fields: {
          source: {
            type: "string",
            id: 1
          },
          destination: {
            type: "string",
            id: 2
          },
          physicalRelationship: {
            type: "string",
            id: 3
          },
          weight: {
            type: "float",
            id: 4
          },
          joinType: {
            type: "JoinType.E",
            id: 5
          },
          userDefined: {
            type: "bool",
            id: 6
          },
          foreign: {
            type: "Foreign",
            id: 7
          },
          generic: {
            type: "Generic",
            id: 8
          }
        },
        nested: {
          relationship: {
            type: "LogicalRelationshipContent",
            id: 1009,
            extend: "NodeContent"
          },
          Foreign: {
            fields: {
              related: {
                rule: "repeated",
                type: "RelatedColumn",
                id: 1
              }
            },
            nested: {
              RelatedColumn: {
                fields: {
                  source: {
                    type: "string",
                    id: 1
                  },
                  destination: {
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          Generic: {
            fields: {
              expression: {
                type: "ExpressionNode.Arithmetic",
                id: 1
              }
            }
          }
        }
      },
      TableFilterHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          }
        },
        nested: {
          header: {
            type: "TableFilterHeader",
            id: 1010,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              DATA_FILTER: 0,
              ROW_SECURITY_FILTER: 1
            }
          }
        }
      },
      TableFilterContent: {
        fields: {
          text: {
            rule: "repeated",
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 1
          },
          token: {
            type: "sage.auto_complete.v2.RecognizedToken",
            id: 2
          },
          filter: {
            type: "sage.SageExpression",
            id: 3
          },
          expression: {
            type: "ExpressionNode",
            id: 4
          }
        },
        nested: {
          content: {
            type: "TableFilterContent",
            id: 1010,
            extend: "NodeContent"
          }
        }
      },
      FileHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          mimeType: {
            type: "string",
            id: 2
          }
        },
        nested: {
          file: {
            type: "FileHeader",
            id: 1004,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              NONE: 0,
              USER_PROFILE: 1,
              THUMBNAIL: 2,
              JSON: 3,
              GEO_CUSTOM_REGION: 4,
              FILE: 5
            }
          }
        }
      },
      FileContent: {
        fields: {
          data: {
            type: "bytes",
            id: 1
          }
        },
        nested: {
          file: {
            type: "FileContent",
            id: 1004,
            extend: "NodeContent"
          }
        }
      },
      RelatedLinkHeader: {
        fields: {
          answerId: {
            type: "string",
            id: 1
          },
          vizId: {
            type: "string",
            id: 2
          }
        },
        nested: {
          relatedLink: {
            type: "RelatedLinkHeader",
            id: 1005,
            extend: "NodeHeader"
          }
        }
      },
      SingleColumnRelatedRelationship: {
        fields: {
          sourceColumnName: {
            type: "string",
            id: 1
          },
          destinationColumnName: {
            type: "string",
            id: 2
          },
          operator: {
            type: "CompareTypeProto.E",
            id: 3
          }
        }
      },
      RelatedLinkContent: {
        fields: {
          relationships: {
            rule: "repeated",
            type: "SingleColumnRelatedRelationship",
            id: 1
          }
        },
        nested: {
          relatedLink: {
            type: "RelatedLinkContent",
            id: 1005,
            extend: "NodeContent"
          }
        }
      },
      DataRowFilter: {
        fields: {
          group: {
            type: "string",
            id: 1
          },
          table: {
            type: "string",
            id: 2
          }
        }
      },
      DataSource: {
        fields: {
          type: {
            type: "Type",
            id: 1
          },
          config: {
            rule: "repeated",
            type: "common.KeyValue",
            id: 2
          },
          statistics: {
            rule: "repeated",
            type: "common.KeyValue",
            id: 3
          },
          loadInfo: {
            rule: "repeated",
            type: "common.KeyValue",
            id: 4
          }
        },
        nested: {
          dataSource: {
            type: "DataSource",
            id: 1013,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              DEFAULT: 0,
              RDBMS_MYSQL: 1,
              RDBMS_POSTGRES: 2,
              RDBMS_SQLSERVER: 3,
              SAAS_SALESFORCE: 4,
              FILE_CSV: 5,
              INFORMATICA: 6,
              IPAAS_INFORMATICA: 7,
              RDBMS_REDSHIFT: 8,
              RDBMS_GCP_BIGQUERY: 9,
              RDBMS_SQL_DATAWAREHOUSE: 10,
              RDBMS_SNOWFLAKE: 11,
              RDBMS_SALESFORCE: 12,
              RDBMS_SAP_HANA: 13,
              RDBMS_MARKETO: 14,
              RDBMS_SERVICE_NOW: 15,
              RDBMS_ORACLE: 16
            }
          }
        }
      },
      DataSourceContent: {
        fields: {},
        nested: {
          dataSource: {
            type: "DataSourceContent",
            id: 1013,
            extend: "NodeContent"
          }
        }
      },
      DataLoadStatisticsHeader: {
        fields: {
          scheduled: {
            type: "bool",
            id: 1
          },
          connectionType: {
            type: "string",
            id: 2
          },
          connectionName: {
            type: "string",
            id: 3
          }
        },
        nested: {
          header: {
            type: "DataLoadStatisticsHeader",
            id: 1026,
            extend: "NodeHeader"
          }
        }
      },
      DataLoadStatisticsContent: {
        fields: {
          objStatus: {
            rule: "repeated",
            type: "DataLoadObjStatus",
            id: 1
          }
        },
        nested: {
          content: {
            type: "DataLoadStatisticsContent",
            id: 1026,
            extend: "NodeContent"
          },
          LoadStatus: {
            values: {
              INPROGRESS: 0,
              SUCCESS: 1,
              FAILED: 2,
              SCHEDULED: 3,
              QUEUED: 4,
              UNKNOWN: 5
            }
          },
          DataLoadObjStatus: {
            fields: {
              taskId: {
                type: "string",
                id: 1
              },
              status: {
                type: "LoadStatus",
                id: 2
              },
              statusMessage: {
                type: "string",
                id: 3
              },
              lastStartTimeUtc: {
                type: "int64",
                id: 4
              },
              lastLoadTime: {
                type: "int64",
                id: 5
              },
              runId: {
                type: "int64",
                id: 6
              }
            }
          }
        }
      },
      RTemplateHeader: {
        fields: {},
        nested: {
          header: {
            type: "RTemplateHeader",
            id: 1025,
            extend: "NodeHeader"
          }
        }
      },
      RTemplateContent: {
        fields: {
          rScript: {
            type: "string",
            id: 1
          }
        },
        nested: {
          content: {
            type: "RTemplateContent",
            id: 1025,
            extend: "NodeContent"
          }
        }
      },
      GrowthDimensionType: {
        fields: {},
        nested: {
          E: {
            values: {
              TIME_BUCKET: 0,
              TIME_BUCKET_OUTPUT: 1,
              TIME_COMPARISON: 2
            }
          }
        }
      },
      CustomCalendarColumnType: {
        fields: {},
        nested: {
          E: {
            values: {
              FORMATTED_DATE_BUCKET_STRING: 0,
              END_OF_DATE_BUCKET: 1
            }
          }
        }
      },
      L10NText: {
        fields: {
          langCode: {
            type: "string",
            id: 1
          },
          text: {
            type: "string",
            id: 2
          }
        }
      },
      Title: {
        fields: {
          text: {
            type: "L10NText",
            id: 1
          }
        }
      },
      VisualizationColumn: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          logicalColumn: {
            type: "string",
            id: 2
          },
          columnType: {
            type: "ColumnType.E",
            id: 3
          },
          dataType: {
            type: "ColumnDataType.E",
            id: 4
          },
          aggregationType: {
            type: "AggregationType.E",
            id: 5
          },
          format: {
            type: "ColumnFormat",
            id: 6
          },
          metricDefinition: {
            type: "callosum.MetricDefinitionProto",
            id: 7
          },
          sort: {
            type: "Sort",
            id: 8
          },
          groupBy: {
            type: "bool",
            id: 11
          },
          growth: {
            type: "bool",
            id: 12,
            options: {
              "default": false
            }
          },
          growthDimensionType: {
            type: "GrowthDimensionType.E",
            id: 13
          },
          timeBucketOnTheFly: {
            type: "bool",
            id: 14
          },
          aggregated: {
            type: "bool",
            id: 15
          },
          visible: {
            type: "bool",
            id: 16
          },
          title: {
            type: "Title",
            id: 17
          },
          numUniqueValues: {
            type: "int64",
            id: 18
          },
          clientState: {
            type: "bytes",
            id: 20
          },
          sageColumnId: {
            type: "string",
            id: 21
          },
          tokenOutputId: {
            type: "string",
            id: 22
          },
          columnToFormatPatternType: {
            type: "bytes",
            id: 23
          },
          customCalendarColumnType: {
            type: "CustomCalendarColumnType.E",
            id: 24
          }
        },
        nested: {
          Sort: {
            fields: {
              order: {
                type: "Order",
                id: 1
              },
              idx: {
                type: "int32",
                id: 2
              },
              userSorted: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              }
            },
            nested: {
              Order: {
                values: {
                  SORT_ASCENDING: 0,
                  SORT_DESCENDING: 1
                }
              }
            }
          }
        }
      },
      HeadlineViz: {
        fields: {
          column: {
            type: "Column",
            id: 1
          },
          config: {
            type: "Config",
            id: 2
          },
          templateType: {
            type: "TemplateType",
            id: 3
          },
          showSummaryAggrs: {
            type: "bool",
            id: 4
          }
        },
        nested: {
          TemplateType: {
            values: {
              TEMPLATE_ATTRIBUTE_COLUMN: 0,
              TEMPLATE_MEASURE_COLUMN: 1
            }
          },
          Column: {
            fields: {
              column: {
                type: "VisualizationColumn",
                id: 1
              }
            }
          },
          Config: {
            fields: {
              aggr: {
                rule: "repeated",
                type: "AggregationType.E",
                id: 1,
                options: {
                  packed: false
                }
              }
            }
          }
        }
      },
      TableViz: {
        fields: {
          column: {
            rule: "repeated",
            type: "Column",
            id: 1
          },
          config: {
            type: "Config",
            id: 2
          },
          hiddenColumn: {
            rule: "repeated",
            type: "Column",
            id: 3
          }
        },
        nested: {
          Column: {
            fields: {
              column: {
                type: "VisualizationColumn",
                id: 1
              }
            }
          },
          Config: {
            fields: {
              columnOrdering: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          }
        }
      },
      ChartViz: {
        fields: {
          column: {
            rule: "repeated",
            type: "Column",
            id: 1
          },
          config: {
            type: "Config",
            id: 2
          }
        },
        nested: {
          Column: {
            fields: {
              column: {
                type: "VisualizationColumn",
                id: 1
              }
            }
          },
          Config: {
            fields: {
              chartType: {
                type: "callosum.VisualizationProto.ChartVisualizationContentProto.ChartTypeEnumProto",
                id: 1
              },
              axisConfig: {
                rule: "repeated",
                type: "AxisConfig",
                id: 2
              },
              visibleSeries: {
                rule: "repeated",
                type: "VisibleSeries",
                id: 3
              },
              locked: {
                type: "bool",
                id: 4
              },
              showDataLabel: {
                type: "bool",
                id: 5
              },
              yAxisShared: {
                type: "bool",
                id: 6
              },
              stackedAsPercent: {
                type: "bool",
                id: 7
              }
            },
            nested: {
              AxisConfig: {
                fields: {
                  xAxis: {
                    rule: "repeated",
                    type: "string",
                    id: 1
                  },
                  yAxis: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  },
                  category: {
                    rule: "repeated",
                    type: "string",
                    id: 3
                  },
                  radial: {
                    type: "string",
                    id: 4
                  },
                  hidden: {
                    rule: "repeated",
                    type: "string",
                    id: 5
                  }
                }
              },
              VisibleSeries: {
                fields: {
                  column: {
                    type: "string",
                    id: 1
                  },
                  value: {
                    type: "string",
                    id: 2
                  },
                  color: {
                    type: "string",
                    id: 3
                  }
                }
              }
            }
          }
        }
      },
      PinboardViz: {
        fields: {
          answerSheet: {
            type: "string",
            id: 1,
            options: {
              deprecated: true
            }
          },
          visualization: {
            type: "string",
            id: 2
          },
          effectiveQuestion: {
            type: "Question",
            id: 3
          },
          answerBook: {
            type: "string",
            id: 4
          },
          answerSheetIndex: {
            type: "int32",
            id: 5
          }
        }
      },
      GenericViz: {
        fields: {
          subType: {
            type: "string",
            id: 1
          }
        }
      },
      FilterViz: {
        fields: {
          idx: {
            rule: "repeated",
            type: "int32",
            id: 1,
            options: {
              packed: false
            }
          }
        }
      },
      ClusterViz: {
        fields: {
          refVizId: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      },
      RanalysisViz: {
        fields: {
          rScript: {
            type: "string",
            id: 1
          },
          columnBinding: {
            rule: "repeated",
            type: "sage.AnalysisDescriptor.CustomRAnalysis.ColumnBinding",
            id: 2
          },
          column: {
            rule: "repeated",
            type: "Column",
            id: 3
          },
          rOutputType: {
            type: "sage.AnalysisDescriptor.CustomRAnalysis.ROutputType",
            id: 4
          }
        },
        nested: {
          Column: {
            fields: {
              column: {
                type: "VisualizationColumn",
                id: 1
              }
            }
          }
        }
      },
      VisualizationHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          }
        },
        nested: {
          visualization: {
            type: "VisualizationHeader",
            id: 1020,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              HEADLINE_VIZ: 0,
              TABLE_VIZ: 1,
              CHART_VIZ: 2,
              FILTER_VIZ: 3,
              PINBOARD_VIZ: 4,
              GENERIC_VIZ: 5,
              CLUSTER_VIZ: 6,
              R_ANALYSIS_VIZ: 7
            }
          }
        }
      },
      VisualizationContent: {
        fields: {
          title: {
            type: "Title",
            id: 1
          },
          customTitle: {
            type: "bool",
            id: 2
          },
          topN: {
            type: "TopN",
            id: 3
          },
          locked: {
            type: "bool",
            id: 4
          },
          dataOnDemand: {
            type: "bool",
            id: 5
          },
          headline: {
            type: "HeadlineViz",
            id: 6
          },
          chart: {
            type: "ChartViz",
            id: 7
          },
          table: {
            type: "TableViz",
            id: 8
          },
          filter: {
            type: "FilterViz",
            id: 9
          },
          pinboard: {
            type: "PinboardViz",
            id: 10
          },
          generic: {
            type: "GenericViz",
            id: 11
          },
          cluster: {
            type: "ClusterViz",
            id: 12
          },
          ranalysis: {
            type: "RanalysisViz",
            id: 13
          }
        },
        nested: {
          visualization: {
            type: "VisualizationContent",
            id: 1020,
            extend: "NodeContent"
          },
          TopN: {
            fields: {
              groupLimitId: {
                rule: "repeated",
                type: "VisualizationColumn",
                id: 1
              },
              topCount: {
                type: "int64",
                id: 2
              }
            }
          }
        }
      },
      FilterHeader: {
        fields: {
          type: {
            type: "Type",
            id: 1
          }
        },
        nested: {
          filter: {
            type: "FilterHeader",
            id: 1019,
            extend: "NodeHeader"
          },
          Type: {
            values: {
              SIMPLE: 0,
              COMPOUND: 1
            }
          }
        }
      },
      FilterContent: {
        fields: {
          row: {
            rule: "repeated",
            type: "Row",
            id: 1
          }
        },
        nested: {
          filter: {
            type: "FilterContent",
            id: 1019,
            extend: "NodeContent"
          },
          Value: {
            fields: {
              display: {
                type: "string",
                id: 1
              },
              selected: {
                type: "bool",
                id: 2
              },
              value: {
                type: "common.ValueProto",
                id: 3
              },
              key: {
                type: "string",
                id: 4
              }
            }
          },
          Predicate: {
            fields: {
              op: {
                type: "CompareTypeProto.E",
                id: 2
              },
              value: {
                rule: "repeated",
                type: "Value",
                id: 3
              },
              filterValueQuery: {
                type: "sage.auto_complete.v2.SageQuery.Filter.FilterValueQuery",
                id: 4
              }
            }
          },
          Row: {
            fields: {
              column: {
                type: "VisualizationColumn",
                id: 1
              },
              predicate: {
                rule: "repeated",
                type: "Predicate",
                id: 2
              },
              negate: {
                type: "bool",
                id: 3
              },
              dateFilterProto: {
                rule: "repeated",
                type: "string",
                id: 4
              },
              type: {
                type: "sage.auto_complete.v2.SageQuery.FilterType",
                id: 5
              },
              isAutoGenerated: {
                type: "bool",
                id: 6,
                options: {
                  "default": false
                }
              },
              isEditable: {
                type: "bool",
                id: 7,
                options: {
                  "default": true
                }
              }
            }
          }
        }
      },
      SheetLayout: {
        fields: {
          mode: {
            type: "Mode",
            id: 1
          },
          template: {
            type: "string",
            id: 2
          },
          tile: {
            rule: "repeated",
            type: "Tile",
            id: 3
          }
        },
        nested: {
          Mode: {
            values: {
              AUTO: 0,
              CUSTOM: 1
            }
          },
          Tile: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              x: {
                type: "double",
                id: 2
              },
              y: {
                type: "double",
                id: 3
              },
              height: {
                type: "double",
                id: 4
              },
              width: {
                type: "double",
                id: 5
              },
              order: {
                type: "int32",
                id: 6
              },
              size: {
                type: "Size",
                id: 7
              },
              state: {
                rule: "repeated",
                type: "common.KeyValue",
                id: 8
              }
            },
            nested: {
              Size: {
                values: {
                  EXTRA_SMALL: 0,
                  SMALL: 1,
                  MEDIUM: 2,
                  LARGE: 3,
                  EXTRA_LARGE: 4,
                  MEDIUM_SMALL: 5,
                  LARGE_SMALL: 6
                }
              }
            }
          }
        }
      },
      AnswerSheetHeader: {
        fields: {},
        nested: {
          answerSheet: {
            type: "AnswerSheetHeader",
            id: 1015,
            extend: "NodeHeader"
          }
        }
      },
      AnswerSheetContent: {
        fields: {
          question: {
            type: "Question",
            id: 1
          },
          layout: {
            type: "SheetLayout",
            id: 2
          },
          customRAnalysis: {
            type: "sage.AnalysisDescriptor.CustomRAnalysis",
            id: 3,
            options: {
              deprecated: true
            }
          },
          headlineVisibilityMap: {
            rule: "repeated",
            type: "common.KeyValue",
            id: 4
          }
        },
        nested: {
          answerSheet: {
            type: "AnswerSheetContent",
            id: 1015,
            extend: "NodeContent"
          }
        }
      },
      AnswerHeader: {
        fields: {
          autoCreated: {
            type: "bool",
            id: 1
          },
          autoDelete: {
            type: "bool",
            id: 2
          }
        },
        nested: {
          answer: {
            type: "AnswerHeader",
            id: 1016,
            extend: "NodeHeader"
          }
        }
      },
      AnswerContent: {
        fields: {},
        nested: {
          answer: {
            type: "AnswerContent",
            id: 1016,
            extend: "NodeContent"
          }
        }
      },
      DataFormat: {
        fields: {},
        nested: {
          E: {
            values: {
              CSV: 0,
              PDF: 1,
              XLXS: 2
            }
          }
        }
      },
      PinboardSheetHeader: {
        fields: {},
        nested: {
          pinboardSheet: {
            type: "PinboardSheetHeader",
            id: 1017,
            extend: "NodeHeader"
          }
        }
      },
      PinboardSheetContent: {
        fields: {
          type: {
            type: "Type",
            id: 1,
            options: {
              "default": "PINBOARD"
            }
          },
          layout: {
            type: "SheetLayout",
            id: 2
          },
          filter: {
            type: "Filter",
            id: 3
          },
          a3Details: {
            type: "A3Details",
            id: 4
          }
        },
        nested: {
          pinboardSheet: {
            type: "PinboardSheetContent",
            id: 1017,
            extend: "NodeContent"
          },
          Type: {
            values: {
              PINBOARD: 0,
              INSIGHT: 1
            }
          },
          TableToFilterVizMap: {
            fields: {
              entry: {
                rule: "repeated",
                type: "Entry",
                id: 1
              }
            },
            nested: {
              Entry: {
                fields: {
                  tableId: {
                    type: "string",
                    id: 1
                  },
                  filterVizId: {
                    rule: "repeated",
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          Filter: {
            fields: {
              answerId: {
                rule: "repeated",
                type: "string",
                id: 1
              },
              tableId: {
                rule: "repeated",
                type: "string",
                id: 2
              },
              tableToFilterViz: {
                type: "TableToFilterVizMap",
                id: 3
              }
            }
          },
          A3Details: {
            fields: {
              request: {
                type: "sage.A3Request",
                id: 1
              },
              facts: {
                type: "sage.AnalysisFacts",
                id: 2
              }
            }
          }
        }
      },
      PinboardHeader: {
        fields: {
          autoCreated: {
            type: "bool",
            id: 1
          },
          autoDelete: {
            type: "bool",
            id: 2
          }
        },
        nested: {
          pinboard: {
            type: "PinboardHeader",
            id: 1018,
            extend: "NodeHeader"
          }
        }
      },
      PinboardContent: {
        fields: {},
        nested: {
          pinboard: {
            type: "PinboardContent",
            id: 1018,
            extend: "NodeContent"
          }
        }
      },
      Comment: {
        fields: {
          ownerType: {
            type: "CommentableType",
            id: 1
          },
          parentId: {
            type: "string",
            id: 2
          },
          body: {
            type: "string",
            id: 3
          }
        },
        nested: {
          comment: {
            type: "Comment",
            id: 1014,
            extend: "NodeHeader"
          },
          CommentableType: {
            values: {
              PINBOARD_SHEET: 0
            }
          }
        }
      },
      CommentContent: {
        fields: {},
        nested: {
          comment: {
            type: "CommentContent",
            id: 1014,
            extend: "NodeContent"
          }
        }
      },
      Tag: {
        fields: {
          taggedCount: {
            type: "int32",
            id: 1
          }
        },
        nested: {
          tag: {
            type: "Tag",
            id: 1012,
            extend: "NodeHeader"
          }
        }
      },
      TagContent: {
        fields: {},
        nested: {
          tag: {
            type: "TagContent",
            id: 1012,
            extend: "NodeContent"
          }
        }
      },
      UserQuestionHeader: {
        fields: {
          status: {
            type: "Status",
            id: 1,
            options: {
              "default": "UNRESOLVED"
            }
          }
        },
        nested: {
          userQuestion: {
            type: "UserQuestionHeader",
            id: 1027,
            extend: "NodeHeader"
          },
          Status: {
            values: {
              UNRESOLVED: 0,
              RESOLVED: 1
            }
          }
        }
      },
      UserQuestionContent: {
        fields: {
          question: {
            type: "string",
            id: 1
          },
          notes: {
            type: "string",
            id: 2
          }
        },
        nested: {
          userQuestion: {
            type: "UserQuestionContent",
            id: 1027,
            extend: "NodeContent"
          }
        }
      },
      CustomCalendarStatisticsHeader: {
        fields: {},
        nested: {
          header: {
            type: "CustomCalendarStatisticsHeader",
            id: 1028,
            extend: "NodeHeader"
          }
        }
      },
      CustomCalendarStatisticsContent: {
        fields: {
          calendarConfig: {
            type: "callosum.CalendarConfig",
            id: 1
          }
        },
        nested: {
          content: {
            type: "CustomCalendarStatisticsContent",
            id: 1028,
            extend: "NodeContent"
          }
        }
      },
      DataRow: {
        fields: {
          value: {
            rule: "repeated",
            type: "common.ValueProto",
            id: 1
          }
        }
      },
      StorableVersionId: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          },
          version: {
            type: "int64",
            id: 3
          }
        }
      },
      Storable: {
        fields: {
          vid: {
            type: "StorableVersionId",
            id: 1,
            options: {
              "(Storable.in_commit)": true
            }
          },
          commit: {
            rule: "repeated",
            type: "int64",
            id: 2,
            options: {
              deprecated: true,
              packed: false
            }
          },
          createdMs: {
            type: "int64",
            id: 3,
            options: {
              "(Storable.in_commit)": true
            }
          },
          author: {
            type: "string",
            id: 4,
            options: {
              "(Storable.in_commit)": true
            }
          },
          modifiedMs: {
            type: "int64",
            id: 5,
            options: {
              "(Storable.in_commit)": true
            }
          },
          deleted: {
            type: "bool",
            id: 6,
            options: {
              "(Storable.in_commit)": true
            }
          },
          type: {
            type: "Type",
            id: 7,
            options: {
              "(Storable.in_commit)": true
            }
          },
          node: {
            type: "NodeProto",
            id: 8
          },
          edge: {
            type: "EdgeProto",
            id: 9,
            options: {
              "(Storable.in_commit)": true
            }
          },
          nodeHeader: {
            type: "NodeHeader",
            id: 10
          },
          nodeContent: {
            type: "NodeContent",
            id: 11
          },
          content: {
            type: "bytes",
            id: 12
          }
        },
        nested: {
          inCommit: {
            type: "bool",
            id: 60001,
            extend: "google.protobuf.FieldOptions"
          },
          Type: {
            values: {
              NODE: 0,
              EDGE: 1,
              NODE_HEADER: 2,
              NODE_CONTENT: 3
            }
          }
        }
      },
      FullNodeStorable: {
        fields: {
          nodeStorable: {
            type: "Storable",
            id: 1
          },
          headerStorable: {
            type: "Storable",
            id: 2
          },
          contentStorable: {
            type: "Storable",
            id: 3
          }
        }
      },
      CommitProto: {
        fields: {
          commitNum: {
            type: "int64",
            id: 1
          },
          epochMs: {
            type: "int64",
            id: 2
          },
          author: {
            type: "string",
            id: 3
          },
          msg: {
            type: "string",
            id: 4
          },
          change: {
            rule: "repeated",
            type: "Change",
            id: 5
          }
        },
        nested: {
          Change: {
            fields: {
              storable: {
                type: "Storable",
                id: 1
              },
              prevVersion: {
                type: "int64",
                id: 3
              },
              currentVersion: {
                type: "int64",
                id: 4
              }
            }
          }
        }
      },
      FileStore: {
        fields: {
          storable: {
            rule: "repeated",
            type: "Storable",
            id: 1
          },
          commit: {
            rule: "repeated",
            type: "CommitProto",
            id: 2
          }
        }
      },
      ObjectHeader: {
        fields: {
          id: {
            type: "string",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          },
          author: {
            type: "string",
            id: 3
          },
          createdEpoch: {
            type: "int64",
            id: 4
          },
          modifiedBy: {
            type: "string",
            id: 5
          },
          modifiedEpoch: {
            type: "int64",
            id: 6
          },
          version: {
            type: "int64",
            id: 7
          },
          deleted: {
            type: "bool",
            id: 8
          },
          hidden: {
            type: "bool",
            id: 9
          },
          indexVersion: {
            type: "int64",
            id: 10
          },
          owner: {
            type: "string",
            id: 11
          },
          description: {
            type: "string",
            id: 12
          },
          statistics: {
            type: "bytes",
            id: 13
          },
          clientState: {
            type: "bytes",
            id: 14
          }
        }
      },
      NodeProto: {
        fields: {
          headerId: {
            type: "string",
            id: 1
          },
          headerTypeId: {
            type: "int32",
            id: 2
          },
          contentId: {
            type: "string",
            id: 3
          },
          contentTypeId: {
            type: "int32",
            id: 4
          },
          header: {
            type: "ObjectHeader",
            id: 5
          }
        },
        nested: {
          nodeId: {
            type: "string",
            id: 50001,
            extend: "google.protobuf.MessageOptions"
          }
        }
      },
      EdgeProto: {
        fields: {
          edgeTypeId: {
            type: "int32",
            id: 10
          },
          source: {
            type: "string",
            id: 1
          },
          destination: {
            type: "string",
            id: 2
          },
          index: {
            type: "int32",
            id: 5
          },
          name: {
            type: "string",
            id: 3
          },
          constraint: {
            type: "EdgeDefinition.Constraint",
            id: 4
          },
          prefetch: {
            type: "bool",
            id: 6
          },
          cycleCheck: {
            type: "bool",
            id: 7
          },
          signature: {
            type: "bool",
            id: 8
          },
          signatureRec: {
            type: "bool",
            id: 9
          }
        },
        nested: {
          Key: {
            fields: {
              source: {
                type: "string",
                id: 1
              },
              destination: {
                type: "string",
                id: 2
              },
              name: {
                type: "string",
                id: 3
              }
            }
          }
        }
      },
      EdgeSortOrder: {
        values: {
          INDEX: 0,
          CREATED_MS: 1
        }
      },
      NodeHeader: {
        fields: {},
        extensions: [
          [
            900,
            910
          ],
          [
            1000,
            536870911
          ]
        ]
      },
      NodeContent: {
        fields: {},
        extensions: [
          [
            900,
            910
          ],
          [
            1000,
            536870911
          ]
        ]
      },
      TestNodeHeader: {
        fields: {
          i: {
            type: "int32",
            id: 1
          },
          s: {
            type: "string",
            id: 2
          }
        },
        nested: {
          header: {
            type: "TestNodeHeader",
            id: 900,
            extend: "NodeHeader"
          }
        }
      },
      TestNodeContent: {
        fields: {
          i: {
            type: "int32",
            id: 1
          },
          s: {
            type: "string",
            id: 2
          }
        },
        nested: {
          content: {
            type: "TestNodeContent",
            id: 900,
            extend: "NodeContent"
          }
        }
      },
      TestNodeHeader1: {
        fields: {
          i: {
            type: "int32",
            id: 1
          },
          s: {
            type: "string",
            id: 2
          }
        },
        nested: {
          header: {
            type: "TestNodeHeader1",
            id: 901,
            extend: "NodeHeader"
          }
        }
      },
      TestNodeContent1: {
        fields: {
          s: {
            type: "string",
            id: 1
          },
          i: {
            type: "int32",
            id: 2
          }
        },
        nested: {
          content: {
            type: "TestNodeContent1",
            id: 901,
            extend: "NodeContent"
          }
        }
      },
      TestNodeHeaderUniqueName: {
        fields: {
          i: {
            type: "int32",
            id: 1
          },
          s: {
            type: "string",
            id: 2
          }
        },
        nested: {
          header: {
            type: "TestNodeHeaderUniqueName",
            id: 902,
            extend: "NodeHeader"
          }
        }
      },
      TestNodeContentUniqueName: {
        fields: {
          i: {
            type: "int32",
            id: 1
          },
          s: {
            type: "string",
            id: 2
          }
        },
        nested: {
          content: {
            type: "TestNodeContentUniqueName",
            id: 902,
            extend: "NodeContent"
          }
        }
      },
      Status: {
        fields: {
          code: {
            type: "Code",
            id: 1
          },
          msg: {
            type: "string",
            id: 2
          }
        },
        nested: {
          Code: {
            values: {
              OK: 0,
              FAILED: 1,
              NOT_READY: 2,
              NOT_IMPLEMENTED: 3,
              TIMED_OUT: 15,
              INVALID_PIN_TOKEN: 4,
              INVALID_NODE_ID: 5,
              INVALID_NODE_VERSION: 6,
              NODE_VERIFICATION_FAILED: 7,
              INCOMPLETE_NODE: 8,
              VERSION_CONFLICT: 9,
              DELETE_RESTRICTED: 10,
              PERSISTENT_STORAGE_ERROR: 11,
              INVALID_EDGE_KEY: 12,
              DUPLICATE_STORE_NAME: 13,
              INVALID_STORE_NAME: 14,
              DUPLICATE_NODE_NAME: 16,
              CYCLE_GENERATED: 17
            }
          }
        }
      },
      CreateStoreRequest: {
        fields: {
          name: {
            type: "string",
            id: 1
          }
        }
      },
      CreateStoreResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          }
        }
      },
      DropStoreRequest: {
        fields: {
          name: {
            type: "string",
            id: 1
          }
        }
      },
      DropStoreResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          }
        }
      },
      GetHistoryRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          },
          id: {
            type: "string",
            id: 2
          },
          limit: {
            type: "int64",
            id: 3
          }
        }
      },
      GetHistoryResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          },
          histories: {
            rule: "repeated",
            type: "NodeVersionHistory",
            id: 2
          }
        },
        nested: {
          NodeVersionHistory: {
            fields: {
              version: {
                type: "int64",
                id: 1
              },
              modifiedBy: {
                type: "string",
                id: 2
              },
              modifiedEpoch: {
                type: "int64",
                id: 3
              },
              isDeleted: {
                type: "bool",
                id: 4
              }
            }
          }
        }
      },
      PinLatestRequest: {
        fields: {
          commit: {
            type: "int64",
            id: 1
          },
          user: {
            type: "string",
            id: 2
          },
          storeName: {
            type: "string",
            id: 3
          },
          pinToken: {
            type: "string",
            id: 4
          },
          storablesStartOffset: {
            type: "int64",
            id: 5
          },
          storablesEndOffset: {
            type: "int64",
            id: 6
          },
          type: {
            type: "Type",
            id: 7
          }
        },
        nested: {
          Type: {
            values: {
              PIN_FULL_NO_DATA: 0,
              PIN_FULL_DATA: 1,
              PIN_INCREMENTAL: 2
            }
          }
        }
      },
      PinLatestResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          },
          pinnedCommit: {
            type: "int64",
            id: 2
          },
          pinToken: {
            type: "string",
            id: 3
          },
          expiryDurationMs: {
            type: "int64",
            id: 4
          },
          delta: {
            type: "Delta",
            id: 5
          },
          totalStorables: {
            type: "int64",
            id: 6
          }
        },
        nested: {
          Delta: {
            fields: {
              type: {
                type: "Type",
                id: 1
              },
              parentCommit: {
                type: "int64",
                id: 2
              },
              commit: {
                rule: "repeated",
                type: "CommitProto",
                id: 3
              }
            },
            nested: {
              Type: {
                values: {
                  INCREMENTAL: 0,
                  FULL: 1
                }
              }
            }
          }
        }
      },
      KeepPinnedRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          }
        }
      },
      KeepPinnedResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          },
          expiryDurationMs: {
            type: "int64",
            id: 2
          }
        }
      },
      UnpinRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          }
        }
      },
      UnpinResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          }
        }
      },
      GetNodesRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          },
          requestType: {
            type: "RequestType",
            id: 2
          },
          getById: {
            type: "NodesById",
            id: 3
          },
          getByType: {
            type: "NodesByType",
            id: 4
          }
        },
        nested: {
          RequestType: {
            values: {
              BY_ID: 0,
              BY_TYPE: 1
            }
          },
          OrderBy: {
            fields: {
              order: {
                type: "Order",
                id: 1
              },
              reverse: {
                type: "bool",
                id: 2
              }
            },
            nested: {
              Order: {
                values: {
                  NONE: 0,
                  NAME: 1,
                  MODIFIED_DATE: 2,
                  CREATED_DATE: 3,
                  ID: 4,
                  AUTHOR: 5
                }
              }
            }
          },
          NodeDef: {
            fields: {
              skipHeader: {
                type: "bool",
                id: 1
              },
              skipContent: {
                type: "bool",
                id: 2
              }
            }
          },
          NodesById: {
            fields: {
              node: {
                rule: "repeated",
                type: "NodeById",
                id: 1
              }
            },
            nested: {
              NodeById: {
                fields: {
                  vid: {
                    type: "StorableVersionId",
                    id: 1
                  },
                  def: {
                    type: "NodeDef",
                    id: 2
                  }
                }
              }
            }
          },
          NodesByType: {
            fields: {
              typeId: {
                type: "int32",
                id: 1
              },
              orderBy: {
                type: "OrderBy",
                id: 2
              },
              maxNodes: {
                type: "int64",
                id: 3
              },
              def: {
                type: "NodeDef",
                id: 4
              }
            }
          }
        }
      },
      GetNodesResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          },
          node: {
            rule: "repeated",
            type: "NodeStatus",
            id: 2
          }
        },
        nested: {
          NodeStatus: {
            fields: {
              status: {
                type: "Status",
                id: 1
              },
              vid: {
                type: "StorableVersionId",
                id: 2
              },
              node: {
                type: "Storable",
                id: 3
              },
              header: {
                type: "Storable",
                id: 4
              },
              content: {
                type: "Storable",
                id: 5
              }
            }
          }
        }
      },
      CommitRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          },
          author: {
            type: "string",
            id: 2
          },
          msg: {
            type: "string",
            id: 3
          },
          change: {
            rule: "repeated",
            type: "Change",
            id: 4
          }
        },
        nested: {
          ChangeType: {
            values: {
              PUT_NODE: 1,
              DELETE_NODE: 2,
              VERIFY_NODE: 3,
              PUT_EDGE: 4,
              DELETE_EDGE: 5,
              ROLLBACK: 6,
              UPDATE_TO_COMMIT_NUM: 7
            }
          },
          PutNode: {
            fields: {
              node: {
                type: "Storable",
                id: 1
              },
              header: {
                type: "Storable",
                id: 2
              },
              content: {
                type: "Storable",
                id: 3
              }
            }
          },
          DeleteNode: {
            fields: {
              id: {
                type: "string",
                id: 1
              }
            }
          },
          VerifyNode: {
            fields: {
              id: {
                type: "string",
                id: 1
              }
            }
          },
          PutEdge: {
            fields: {
              edge: {
                type: "Storable",
                id: 1
              }
            }
          },
          DeleteEdge: {
            fields: {
              edgeKey: {
                type: "EdgeProto.Key",
                id: 1
              }
            }
          },
          Rollback: {
            fields: {
              commit: {
                type: "int64",
                id: 1
              },
              id: {
                rule: "repeated",
                type: "string",
                id: 2
              }
            }
          },
          UpdateToCommitNum: {
            fields: {
              nodeId: {
                type: "string",
                id: 1
              },
              fieldNumber: {
                type: "int32",
                id: 2
              }
            }
          },
          Change: {
            fields: {
              type: {
                type: "ChangeType",
                id: 1
              },
              putNode: {
                type: "PutNode",
                id: 2
              },
              deleteNode: {
                type: "DeleteNode",
                id: 3
              },
              verifyNode: {
                type: "VerifyNode",
                id: 4
              },
              putEdge: {
                type: "PutEdge",
                id: 5
              },
              deleteEdge: {
                type: "DeleteEdge",
                id: 6
              },
              rollback: {
                type: "Rollback",
                id: 7
              },
              updateToCommitNum: {
                type: "UpdateToCommitNum",
                id: 8
              }
            }
          }
        }
      },
      CommitResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          }
        }
      },
      GetCommitsRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          },
          commit: {
            rule: "repeated",
            type: "int64",
            id: 2,
            options: {
              packed: false
            }
          }
        }
      },
      GetLatestCommitsRequest: {
        fields: {
          pinToken: {
            type: "string",
            id: 1
          },
          maxCommits: {
            type: "int32",
            id: 2
          }
        }
      },
      GetCommitsResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          },
          commit: {
            rule: "repeated",
            type: "CommitProto",
            id: 2
          }
        }
      },
      ClearCacheRequest: {
        fields: {
          type: {
            type: "Type",
            id: 1
          }
        },
        nested: {
          Type: {
            values: {
              ALL: 0,
              COMMIT: 1,
              CONTENT: 2
            }
          }
        }
      },
      ClearCacheResponse: {
        fields: {
          status: {
            type: "Status",
            id: 1
          }
        }
      },
      AtlasService: {
        options: {
          "(net.rpc.RpcOptions.service).thrift.socket_timeout_ms": 2000
        },
        methods: {
          CreateStore: {
            requestType: "CreateStoreRequest",
            responseType: "CreateStoreResponse"
          },
          DropStore: {
            requestType: "DropStoreRequest",
            responseType: "DropStoreResponse"
          },
          PinLatest: {
            requestType: "PinLatestRequest",
            responseType: "PinLatestResponse"
          },
          KeepPinned: {
            requestType: "KeepPinnedRequest",
            responseType: "KeepPinnedResponse"
          },
          Unpin: {
            requestType: "UnpinRequest",
            responseType: "UnpinResponse"
          },
          GetNodes: {
            requestType: "GetNodesRequest",
            responseType: "GetNodesResponse"
          },
          GetCommits: {
            requestType: "GetCommitsRequest",
            responseType: "GetCommitsResponse"
          },
          GetLatestCommits: {
            requestType: "GetLatestCommitsRequest",
            responseType: "GetCommitsResponse"
          },
          Commit: {
            requestType: "CommitRequest",
            responseType: "CommitResponse"
          },
          ClearCache: {
            requestType: "ClearCacheRequest",
            responseType: "ClearCacheResponse"
          },
          GetHistory: {
            requestType: "GetHistoryRequest",
            responseType: "GetHistoryResponse"
          }
        }
      },
      NodeDefinition: {
        fields: {
          typeId: {
            type: "int32",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          },
          hasUniqueName: {
            type: "bool",
            id: 3
          },
          isTopLevel: {
            type: "bool",
            id: 4
          }
        }
      },
      EdgeDefinition: {
        fields: {
          edgeTypeId: {
            type: "int32",
            id: 1
          },
          name: {
            type: "string",
            id: 2
          },
          constraint: {
            type: "Constraint",
            id: 3
          },
          isPrefetchRequired: {
            type: "bool",
            id: 4
          },
          isCycleCheckRequired: {
            type: "bool",
            id: 5
          },
          isSignature: {
            type: "bool",
            id: 6
          },
          isSignatureRec: {
            type: "bool",
            id: 7
          }
        },
        nested: {
          Constraint: {
            values: {
              REFERENCES: 1,
              CASCADE_DELETE: 2,
              RESTRICT_DELETE: 3
            }
          }
        }
      },
      GraphDefinition: {
        fields: {
          nodeDefinition: {
            rule: "repeated",
            type: "NodeDefinition",
            id: 1
          },
          edgeDefinition: {
            rule: "repeated",
            type: "EdgeDefinition",
            id: 2
          }
        }
      }
    }
  },
  blink: {
    nested: {
      workflow: {
        nested: {
          UserWorkflowActionType: {
            fields: {},
            nested: {
              E: {
                values: {
                  LOAD_PINBOARD: 0,
                  CREATE_PINBOARD: 1,
                  UPDATE_PINBOARD: 2,
                  DELETE_PINBOARDS: 3,
                  ADD_VIZ_TO_NEW_PINBOARD: 4,
                  ADD_VIZ_TO_EXISTING_PINBOARD: 5,
                  LOAD_ANSWER: 100,
                  CREATE_ANSWER: 101,
                  UPDATE_ANSWER: 102,
                  DELETE_ANSWERS: 103,
                  ADD_FILTER_TO_ANSWER: 104,
                  SAGE_SEARCH: 200,
                  ADD_COLUMN_FROM_LEFT_PANEL_TO_SEARCH: 201,
                  ADD_FORMULA_FROM_LEFT_PANEL_TO_SEARCH: 202,
                  DRILL_DOWN: 203,
                  TRANSFORM_TABLE: 204,
                  FOLLOWUP_WORKFLOW: 205,
                  LOAD_NEW_WORKSHEET: 301,
                  LOAD_WORKSHEET: 302,
                  SAVE_WORKSHEET: 303,
                  CREATE_WORKSHEET: 304,
                  CLONE_WORKSHEET: 305,
                  DELETE_COLUMNS_IN_WORKSHEET: 310,
                  RENAME_COLUMNS_IN_WORKSHEET: 311,
                  EDIT_EXISTING_MJP_IN_WORKSHEET: 312,
                  UPDATE_MJP_IN_WORKSHEET: 313,
                  ADD_COLUMN_TO_WORKSHEET: 314,
                  REMOVE_ALL_COLUMNS_IN_WORKSHEET: 315,
                  REMOVE_FORMULA_IN_WORKSHEET: 316,
                  ADD_FORMULA_TO_WORKSHEET: 317,
                  UPDATE_PROPERTIES_OF_WORKSHEET: 318,
                  RENAME_WORKSHEET: 319,
                  ADD_NEW_FORMULA_TO_WORKSHEET: 320,
                  UPDATE_FORMULA_IN_WORKSHEET: 321,
                  REMOVE_BROKEN_COLUMNS_IN_WORKSHEET: 322,
                  DELETE_TABLES: 500,
                  LOAD_FROM_TRENDING: 600,
                  LOAD_FROM_RECENTLY_VIEWED: 601,
                  LOAD_FROM_RECENT_ACTIVITY: 602,
                  NONE: 10000
                }
              }
            }
          },
          WorkflowDebugInfo: {
            fields: {
              action: {
                type: "UserWorkflowActionType.E",
                id: 1
              },
              userTerminated: {
                type: "bool",
                id: 2
              },
              userDiscarded: {
                type: "bool",
                id: 3
              }
            },
            nested: {
              workflowDebugInfo: {
                type: "WorkflowDebugInfo",
                id: 1010,
                extend: "net.TraceEvent"
              }
            }
          }
        }
      },
      numberFormatConfig: {
        options: {
          java_package: "com.thoughtspot.callosum.metadata"
        },
        nested: {
          FormatConfig: {
            oneofs: {
              formatConfigDetails: {
                oneof: [
                  "numberFormatConfig",
                  "percentageFormatConfig",
                  "currencyFormatConfig",
                  "dateFormatConfig",
                  "dateTimeFormatConfig",
                  "timeFormatConfig",
                  "customFormatConfig"
                ]
              }
            },
            fields: {
              category: {
                type: "CategoryType",
                id: 1
              },
              numberFormatConfig: {
                type: "NumberFormatConfig",
                id: 2
              },
              percentageFormatConfig: {
                type: "PercentageFormatConfig",
                id: 3
              },
              currencyFormatConfig: {
                type: "CurrencyFormatConfig",
                id: 4
              },
              dateFormatConfig: {
                type: "DateFormatConfig",
                id: 5
              },
              dateTimeFormatConfig: {
                type: "DateTimeFormatConfig",
                id: 6
              },
              timeFormatConfig: {
                type: "TimeFormatConfig",
                id: 7
              },
              customFormatConfig: {
                type: "CustomFormatConfig",
                id: 8
              }
            },
            nested: {
              CategoryType: {
                values: {
                  NUMBER: 1,
                  PERCENTAGE: 2,
                  CURRENCY: 3,
                  DATE: 4,
                  TIME: 5,
                  DATE_TIME: 6,
                  CUSTOM: 7
                }
              },
              Unit: {
                values: {
                  NONE: 1,
                  THOUSANDS: 2,
                  MILLION: 3,
                  BILLION: 4
                }
              },
              NegativeValueFormat: {
                values: {
                  PREFIX_DASH: 1,
                  SUFFIX_DASH: 2,
                  BRACES_NODASH: 3
                }
              },
              DateFormat: {
                values: {
                  DDMMYY: 1,
                  MMDDYY: 2
                }
              },
              TimeFormat: {
                values: {
                  _12HRS: 1,
                  _24HRS: 2
                }
              },
              DateTimeFormat: {
                values: {
                  DDMMYY_12HRS: 1,
                  DDMMYY_24HRS: 2,
                  MMDDYY_12HRS: 3,
                  MMDDYY_24HRS: 4
                }
              },
              NumberFormatConfig: {
                fields: {
                  unit: {
                    type: "Unit",
                    id: 1,
                    options: {
                      "default": 3
                    }
                  },
                  decimals: {
                    type: "int32",
                    id: 2,
                    options: {
                      "default": 2
                    }
                  },
                  negativeValueFormat: {
                    type: "NegativeValueFormat",
                    id: 3,
                    options: {
                      "default": 1
                    }
                  },
                  toSeparateThousands: {
                    type: "bool",
                    id: 4,
                    options: {
                      "default": true
                    }
                  }
                }
              },
              PercentageFormatConfig: {
                fields: {
                  decimals: {
                    type: "int32",
                    id: 1,
                    options: {
                      "default": 2
                    }
                  }
                }
              },
              CurrencyFormatConfig: {
                fields: {
                  locale: {
                    type: "string",
                    id: 1
                  },
                  unit: {
                    type: "Unit",
                    id: 2,
                    options: {
                      "default": 3
                    }
                  },
                  decimals: {
                    type: "int32",
                    id: 3,
                    options: {
                      "default": 2
                    }
                  },
                  toSeparateThousands: {
                    type: "bool",
                    id: 5,
                    options: {
                      "default": true
                    }
                  }
                }
              },
              DateFormatConfig: {
                fields: {
                  dateFormat: {
                    type: "DateFormat",
                    id: 1,
                    options: {
                      "default": 2
                    }
                  }
                }
              },
              TimeFormatConfig: {
                fields: {
                  timeFormat: {
                    type: "TimeFormat",
                    id: 1,
                    options: {
                      "default": 1
                    }
                  }
                }
              },
              DateTimeFormatConfig: {
                fields: {
                  dateTimeFormat: {
                    type: "DateTimeFormat",
                    id: 1,
                    options: {
                      "default": 3
                    }
                  }
                }
              },
              CustomFormatConfig: {
                fields: {
                  format: {
                    type: "string",
                    id: 1
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  export_service: {
    options: {
      java_package: "com.thoughtspot.common",
      java_outer_classname: "ExportServiceProto"
    },
    nested: {
      ShortLivedAuthParams: {
        fields: {
          userGuid: {
            type: "string",
            id: 1
          },
          authToken: {
            type: "string",
            id: 2
          }
        }
      },
      ObjectType: {
        values: {
          ANSWER: 1,
          PINBOARD: 2
        }
      },
      PinboardParams: {
        oneofs: {
          layoutTypeParams: {
            oneof: [
              "visualizationFormatOptions"
            ]
          }
        },
        fields: {
          pinboardGuid: {
            type: "string",
            id: 1
          },
          vizIds: {
            rule: "repeated",
            type: "string",
            id: 2
          },
          layoutType: {
            type: "LayoutType",
            id: 3,
            options: {
              "default": "VISUALIZATION"
            }
          },
          visualizationFormatOptions: {
            type: "VisualizationFormatOptions",
            id: 4
          }
        },
        nested: {
          LayoutType: {
            values: {
              PINBOARD: 0,
              VISUALIZATION: 1
            }
          },
          VisualizationFormatOptions: {
            fields: {
              groupHeadlines: {
                type: "bool",
                id: 1
              }
            }
          }
        }
      },
      AnswerParams: {
        fields: {
          answerGuid: {
            type: "string",
            id: 1
          },
          vizIds: {
            rule: "repeated",
            type: "string",
            id: 2
          }
        }
      },
      ExportRequest: {
        oneofs: {
          outputParams: {
            oneof: [
              "pdfParams",
              "pngParams"
            ]
          },
          objectParams: {
            oneof: [
              "pinboardParams",
              "answerParams"
            ]
          }
        },
        fields: {
          pdfParams: {
            type: "PdfParams",
            id: 1
          },
          pngParams: {
            type: "PngParams",
            id: 2
          },
          pinboardParams: {
            type: "PinboardParams",
            id: 3
          },
          answerParams: {
            type: "AnswerParams",
            id: 4
          },
          shortLivedAuthParams: {
            type: "ShortLivedAuthParams",
            id: 5
          },
          relayQueryParams: {
            keyType: "string",
            type: "string",
            id: 6
          },
          objectType: {
            type: "ObjectType",
            id: 7
          },
          outputType: {
            type: "OutputType",
            id: 8
          }
        }
      },
      PageSize: {
        values: {
          A4: 1
        }
      },
      Orientation: {
        values: {
          PORTRAIT: 1,
          LANDSCAPE: 2
        }
      },
      PdfParams: {
        fields: {
          pageSize: {
            type: "PageSize",
            id: 1,
            options: {
              "default": "A4"
            }
          },
          orientation: {
            type: "Orientation",
            id: 2,
            options: {
              "default": "LANDSCAPE"
            }
          }
        }
      },
      PngParams: {
        fields: {
          omitBackground: {
            type: "bool",
            id: 1,
            options: {
              "default": false
            }
          }
        }
      },
      OutputType: {
        values: {
          PDF: 1,
          PNG: 2
        }
      }
    }
  },
  a3: {
    nested: {
      results: {
        options: {
          java_package: "com.thoughtspot.a3.watch.results",
          java_outer_classname: "Results"
        },
        nested: {
          TableMetadata: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              displayName: {
                type: "string",
                id: 2
              },
              numRowsTotal: {
                type: "int64",
                id: 3
              },
              snapshotTimestamp: {
                type: "uint64",
                id: 4
              },
              column: {
                rule: "repeated",
                type: "ColumnMetadata",
                id: 5
              }
            }
          },
          ColumnMetadata: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              displayName: {
                type: "string",
                id: 2
              },
              snapshotTimestamp: {
                type: "uint64",
                id: 3
              },
              colType: {
                type: "ColumnType",
                id: 4
              },
              dataType: {
                type: "falcon.DataType.E",
                id: 5
              }
            },
            nested: {
              ColumnType: {
                values: {
                  UNKNOWN_COLUMN_TYPE: 0,
                  MEASURE: 1,
                  MEASURE_DIFF: 2,
                  ATTRIBUTE: 3,
                  SNAPSHOT_TIMESTAMP: 4
                }
              }
            }
          },
          WatchID: {
            fields: {
              userId: {
                type: "string",
                id: 1
              },
              watchTitle: {
                type: "string",
                id: 2
              },
              vizType: {
                type: "VizType",
                id: 3
              },
              vizId: {
                type: "string",
                id: 4
              },
              pinboardId: {
                type: "string",
                id: 5
              }
            },
            nested: {
              VizType: {
                values: {
                  UNKNOWN: 0,
                  PINBOARD: 1,
                  ANSWER: 2
                }
              }
            }
          },
          WatchOverviewResult: {
            fields: {
              watchId: {
                type: "WatchID",
                id: 1
              },
              watchTitle: {
                type: "string",
                id: 3
              },
              displayDescription: {
                type: "string",
                id: 6
              },
              keyMeasureName: {
                type: "string",
                id: 7
              },
              keyMeasureDiff: {
                type: "string",
                id: 8
              },
              insightCount: {
                type: "uint32",
                id: 9
              },
              lastSnapshotTimestamp: {
                type: "uint64",
                id: 10
              },
              userId: {
                rule: "repeated",
                type: "string",
                id: 11
              },
              analysisParams: {
                type: "analyzer.AnalysisParameters",
                id: 12
              },
              notificationParams: {
                type: "subscription.NotificationParameters",
                id: 13
              }
            }
          },
          WatchOverviewRequest: {
            fields: {
              userId: {
                type: "string",
                id: 1
              },
              paginationStart: {
                type: "sint64",
                id: 3,
                options: {
                  "default": 0
                }
              },
              paginationSize: {
                type: "sint64",
                id: 4
              },
              paginationLimit: {
                type: "sint64",
                id: 5
              },
              paginationContinue: {
                type: "bool",
                id: 6,
                options: {
                  "default": false
                }
              }
            }
          },
          WatchOverviewResponse: {
            fields: {
              isLastPage: {
                type: "bool",
                id: 1,
                options: {
                  "default": false
                }
              },
              resultSet: {
                rule: "repeated",
                type: "WatchOverviewResult",
                id: 2
              }
            }
          },
          WatchDetailResultMode: {
            values: {
              UNKNOWN: 0,
              CHART_MODE: 1,
              TABLE_MODE: 2
            }
          },
          WatchDetailResult: {
            fields: {
              watchId: {
                type: "WatchID",
                id: 1
              },
              watchTitle: {
                type: "string",
                id: 2
              },
              startSnapshotTimestamp: {
                type: "uint64",
                id: 3
              },
              endSnapshotTimestamp: {
                type: "uint64",
                id: 4
              },
              latestSnapshotTimestamp: {
                type: "uint64",
                id: 5
              },
              result: {
                type: "falcon.TableResult",
                id: 7
              },
              metadata: {
                type: "TableMetadata",
                id: 8
              },
              analysisParams: {
                type: "analyzer.AnalysisParameters",
                id: 9
              },
              notificationParams: {
                type: "subscription.NotificationParameters",
                id: 10
              }
            }
          },
          SnapshotTopDiffResult: {
            fields: {
              snapshotDiffResult: {
                type: "WatchDetailResult",
                id: 1
              },
              topDiffResult: {
                type: "analyzer.TopDiff",
                id: 2
              }
            }
          },
          WatchDetailRequest: {
            fields: {
              watchId: {
                type: "WatchID",
                id: 1
              },
              resultMode: {
                type: "WatchDetailResultMode",
                id: 2
              },
              startTimestamp: {
                type: "uint64",
                id: 3
              },
              endTimestamp: {
                type: "uint64",
                id: 4
              }
            }
          },
          WatchDetailResponse: {
            fields: {
              resultMode: {
                type: "WatchDetailResultMode",
                id: 1
              },
              result: {
                type: "WatchDetailResult",
                id: 2
              }
            }
          },
          DailyDiffInsightResult: {
            fields: {
              keyMeasureName: {
                type: "string",
                id: 1
              },
              attributeNames: {
                rule: "repeated",
                type: "string",
                id: 2
              },
              keyMeasureOld: {
                type: "falcon.ConstantValue",
                id: 3
              },
              keyMeasureNew: {
                type: "falcon.ConstantValue",
                id: 4
              },
              fromTimestamp: {
                type: "uint64",
                id: 5
              },
              toTimestamp: {
                type: "uint64",
                id: 6
              }
            }
          },
          TrendInsightResult: {
            fields: {
              keyMeasureName: {
                type: "string",
                id: 1
              },
              attributeNames: {
                rule: "repeated",
                type: "string",
                id: 2
              },
              trendType: {
                type: "TrendType",
                id: 3
              }
            },
            nested: {
              TrendType: {
                values: {
                  UNKNOWN: 0,
                  TREND_UP: 1,
                  TREND_DOWN: 2
                }
              }
            }
          },
          ComparativeResult: {
            fields: {
              keyMeasureName: {
                type: "string",
                id: 1
              },
              attributeNames: {
                rule: "repeated",
                type: "string",
                id: 2
              },
              changePercent: {
                type: "double",
                id: 3
              }
            }
          },
          WatchInsightResult: {
            fields: {
              watchId: {
                type: "WatchID",
                id: 1
              },
              insightType: {
                type: "InsightType",
                id: 2
              },
              result: {
                type: "InsightResult",
                id: 3
              },
              insightTimestamp: {
                type: "uint64",
                id: 4
              }
            },
            nested: {
              InsightType: {
                values: {
                  UNKNOWN: 0,
                  DAILY_DIFF_INSIGHT: 1,
                  TREND_INSIGHT: 2,
                  COMPARATIVE_INSIGHT: 3
                }
              },
              InsightResult: {
                fields: {
                  dailyDiffInsight: {
                    type: "DailyDiffInsightResult",
                    id: 1
                  },
                  trendInsight: {
                    type: "TrendInsightResult",
                    id: 2
                  },
                  comparativeInsight: {
                    type: "ComparativeResult",
                    id: 3
                  }
                }
              }
            }
          },
          WatchInsightRequest: {
            fields: {
              watchId: {
                type: "WatchID",
                id: 1
              },
              startTimestamp: {
                type: "uint64",
                id: 2
              },
              endTimestamp: {
                type: "uint64",
                id: 3
              }
            }
          },
          WatchInsightResponse: {
            fields: {
              results: {
                rule: "repeated",
                type: "WatchInsightResult",
                id: 1
              }
            }
          }
        }
      },
      subscription: {
        options: {
          java_package: "com.thoughtspot.a3.watch.subscription",
          java_outer_classname: "Subscription"
        },
        nested: {
          Subscriptions: {
            fields: {
              subscriptionId: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          },
          SubscriptionDetails: {
            fields: {
              subscriptionId: {
                type: "string",
                id: 1
              },
              timestamp: {
                type: "uint64",
                id: 2
              },
              visualizationId: {
                type: "string",
                id: 3
              },
              userId: {
                type: "string",
                id: 4
              },
              pinboardId: {
                type: "string",
                id: 5
              },
              querySignature: {
                type: "string",
                id: 6
              },
              userEmail: {
                type: "string",
                id: 7
              },
              analysisParams: {
                type: "analyzer.AnalysisParameters",
                id: 8
              },
              vizInfo: {
                type: "VizInfo",
                id: 9
              },
              notificationParams: {
                type: "NotificationParameters",
                id: 10
              },
              topDiff: {
                type: "analyzer.TopDiff",
                id: 11
              }
            },
            nested: {
              VizInfo: {
                fields: {
                  query: {
                    type: "sage.auto_complete.v2.ACContext",
                    id: 1
                  },
                  querySet: {
                    type: "falcon.FalconQuerySet",
                    id: 2
                  },
                  title: {
                    type: "string",
                    id: 3
                  },
                  vizType: {
                    type: "string",
                    id: 4
                  }
                }
              }
            }
          },
          NotificationParameters: {
            fields: {
              absThreshold: {
                type: "uint64",
                id: 1
              },
              percentageThreshold: {
                type: "uint32",
                id: 2
              }
            }
          },
          CheckSubscriptionQuery: {
            fields: {
              userId: {
                type: "string",
                id: 1
              },
              subscriptionId: {
                type: "string",
                id: 2
              },
              vizId: {
                rule: "repeated",
                type: "string",
                id: 3
              },
              analysisParams: {
                type: "analyzer.AnalysisParameters",
                id: 4
              }
            }
          },
          UserSubscriptionsSummary: {
            fields: {
              userSubscriptions: {
                rule: "repeated",
                type: "SubscriptionHeader",
                id: 1
              }
            },
            nested: {
              SubscriptionHeader: {
                fields: {
                  subscriptionId: {
                    type: "string",
                    id: 1
                  },
                  vizId: {
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          AddSubscriptionRequest: {
            fields: {
              subscriptionDetails: {
                type: "SubscriptionDetails",
                id: 1
              }
            }
          },
          AddSubscriptionResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          CheckSubscriptionRequest: {
            fields: {
              checkSubscriptionQuery: {
                type: "CheckSubscriptionQuery",
                id: 1
              }
            }
          },
          CheckSubscriptionResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              },
              subscriptionDetails: {
                rule: "repeated",
                type: "SubscriptionDetails",
                id: 2
              }
            }
          },
          DeleteSubscriptionResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          DeleteSubscriptionRequest: {
            fields: {
              subscriptionQuery: {
                type: "SubscriptionDetails",
                id: 1
              }
            }
          },
          ListUserSubscriptionResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              },
              subscriptions: {
                rule: "repeated",
                type: "SubscriptionDetails",
                id: 2
              }
            }
          },
          ListUserSubscriptionRequest: {
            fields: {
              userId: {
                type: "string",
                id: 1
              }
            }
          },
          EditSubscriptionResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          EditSubscriptionRequest: {
            fields: {
              subscription: {
                type: "SubscriptionDetails",
                id: 1
              }
            }
          },
          GetUserSubscriptionPreferenceResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              },
              subscription: {
                type: "SubscriptionDetails",
                id: 2
              }
            }
          },
          GetUserSubscriptionPreferenceRequest: {
            fields: {
              subscription: {
                type: "SubscriptionDetails",
                id: 1
              }
            }
          },
          EditTopDiffResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          EditTopDiffRequest: {
            fields: {
              subscription: {
                type: "SubscriptionDetails",
                id: 1
              }
            }
          }
        }
      },
      analyzer: {
        options: {
          java_package: "com.thoughtspot.a3.watch.analyzer",
          java_outer_classname: "Analyzer"
        },
        nested: {
          AnalyzerInput: {
            fields: {
              attributeData: {
                rule: "repeated",
                type: "AttributeDataPoint",
                id: 1
              }
            }
          },
          AttributePair: {
            fields: {
              attributeId: {
                type: "string",
                id: 1
              },
              attributeValue: {
                type: "string",
                id: 2
              }
            }
          },
          AttributeDataPoint: {
            fields: {
              attributePair: {
                rule: "repeated",
                type: "AttributePair",
                id: 1
              },
              measureValues: {
                rule: "repeated",
                type: "MeasureValues",
                id: 2
              }
            },
            nested: {
              MeasureValues: {
                fields: {
                  measureId: {
                    type: "string",
                    id: 1
                  },
                  timestampData: {
                    rule: "repeated",
                    type: "TimeStampDataPoint",
                    id: 2
                  },
                  isDouble: {
                    type: "bool",
                    id: 3
                  }
                }
              }
            }
          },
          TimeStampDataPoint: {
            fields: {
              timestamp: {
                type: "int64",
                id: 1
              },
              value: {
                type: "double",
                id: 2
              }
            }
          },
          TopDiff: {
            fields: {
              attributePair: {
                rule: "repeated",
                type: "analyzer.AttributePair",
                id: 1
              },
              measureDesc: {
                rule: "repeated",
                type: "MeasureDesc",
                id: 2
              },
              keyChange: {
                type: "KeyMeasureChange",
                id: 3
              }
            },
            nested: {
              MeasureDesc: {
                fields: {
                  measureId: {
                    type: "string",
                    id: 1
                  },
                  newValue: {
                    type: "falcon.ConstantValue",
                    id: 2
                  },
                  oldValue: {
                    type: "falcon.ConstantValue",
                    id: 3
                  },
                  diff: {
                    type: "falcon.ConstantValue",
                    id: 4
                  }
                }
              },
              KeyMeasureChange: {
                fields: {
                  keyChangeName: {
                    type: "string",
                    id: 1
                  },
                  keyMeasureChange: {
                    type: "string",
                    id: 2
                  },
                  displayDesc: {
                    type: "string",
                    id: 3
                  }
                }
              }
            }
          },
          AnalyzerOutput: {
            fields: {
              attributeOutput: {
                rule: "repeated",
                type: "AttributeOutput",
                id: 1
              },
              rOutput: {
                rule: "repeated",
                type: "ROutput",
                id: 2
              },
              insights: {
                rule: "repeated",
                type: "callosum.VisualizationQueryProto",
                id: 3
              },
              timelyJobId: {
                type: "string",
                id: 4
              },
              newInsights: {
                rule: "repeated",
                type: "callosum.VisualizationQueryProto",
                id: 5
              },
              insightsComputed: {
                type: "bool",
                id: 6,
                options: {
                  "default": false
                }
              },
              lostInsights: {
                rule: "repeated",
                type: "callosum.VisualizationQueryProto",
                id: 7
              },
              dailyDiffDesc: {
                type: "string",
                id: 8
              },
              topDiff: {
                type: "TopDiff",
                id: 9
              }
            },
            nested: {
              ROutput: {
                fields: {
                  visualization: {
                    type: "string",
                    id: 1
                  },
                  title: {
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          AttributeOutput: {
            fields: {
              measureResult: {
                rule: "repeated",
                type: "MeasureResult",
                id: 1
              },
              attributePair: {
                rule: "repeated",
                type: "AttributePair",
                id: 2
              }
            },
            nested: {
              AnalysisMethod: {
                values: {
                  SNAPSHOT_DIFF: 1,
                  TREND: 2,
                  COMPARATIVE: 3
                }
              },
              ResultPair: {
                fields: {
                  method: {
                    type: "AnalysisMethod",
                    id: 1
                  },
                  result: {
                    rule: "repeated",
                    type: "double",
                    id: 2,
                    options: {
                      packed: false
                    }
                  }
                }
              },
              MeasureResult: {
                fields: {
                  measureId: {
                    type: "string",
                    id: 1
                  },
                  resultPair: {
                    rule: "repeated",
                    type: "ResultPair",
                    id: 2
                  },
                  isDouble: {
                    type: "bool",
                    id: 3
                  }
                }
              }
            }
          },
          AnalyzerParam: {
            fields: {
              multiplier: {
                type: "double",
                id: 1
              },
              threshold: {
                type: "int64",
                id: 2
              }
            }
          },
          AnalysisQuery: {
            fields: {
              querySignature: {
                type: "string",
                id: 1
              },
              startDate: {
                type: "int64",
                id: 2
              },
              endDate: {
                type: "int64",
                id: 3
              },
              analysisParams: {
                type: "AnalysisParameters",
                id: 4
              }
            }
          },
          AnalysisParameters: {
            fields: {
              baseline: {
                type: "AnalysisBaseline",
                id: 1
              },
              comparativeAnalysisParams: {
                type: "ComparativeAnalysisParameters",
                id: 2
              }
            }
          },
          AnalysisBaseline: {
            values: {
              DAILY: 0,
              WEEKLY: 1,
              QUARERLY: 2,
              YEARLY: 3
            }
          },
          ComparativeAnalysisMode: {
            values: {
              NO_ANALYSIS: 0,
              AUTO_ANALYSIS: 1,
              CUSTOM_ANALYSIS: 2
            }
          },
          ColumnSelectionInfo: {
            fields: {
              columnId: {
                type: "string",
                id: 1
              },
              columnName: {
                type: "string",
                id: 2
              },
              selected: {
                type: "bool",
                id: 3
              }
            }
          },
          ComparativeAnalysisParameters: {
            fields: {
              analysisMode: {
                type: "ComparativeAnalysisMode",
                id: 1
              },
              columnSelection: {
                rule: "repeated",
                type: "ColumnSelectionInfo",
                id: 2
              }
            }
          },
          AnalysisType: {
            values: {
              SNAPSHOT_DIFF: 1,
              TREND: 2,
              COMPARATIVE: 3
            }
          },
          AnalysisResult: {
            fields: {
              querySignature: {
                type: "string",
                id: 1
              },
              timestamp: {
                type: "uint64",
                id: 2
              },
              output: {
                type: "AnalyzerOutput",
                id: 3
              },
              userId: {
                type: "string",
                id: 5
              },
              analysisType: {
                type: "AnalysisType",
                id: 6
              },
              analysisParameters: {
                type: "AnalysisParameters",
                id: 7
              }
            }
          },
          AnalyzerRequest: {
            fields: {
              analyzerInput: {
                type: "AnalyzerInput",
                id: 1
              }
            }
          },
          AnalyzerResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          AddAnalysisResultRequest: {
            fields: {
              analysisResult: {
                type: "AnalysisResult",
                id: 1
              },
              ttlDays: {
                type: "int32",
                id: 2
              }
            }
          },
          AddAnalysisResultResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          DeleteAnalysisResultsRequest: {
            fields: {
              analysisResultQuery: {
                type: "AnalysisQuery",
                id: 1
              }
            }
          },
          DeleteAnalysisResultsResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              }
            }
          },
          GetAnalysisSignaturesRequest: {
            fields: {
              timestamp: {
                type: "int64",
                id: 1
              },
              maxResults: {
                type: "int32",
                id: 2
              }
            }
          },
          AnalysisDetails: {
            fields: {
              querySignature: {
                type: "string",
                id: 1
              },
              querySet: {
                type: "falcon.FalconQuerySet",
                id: 2
              },
              query: {
                type: "sage.auto_complete.v2.ACContext",
                id: 3
              },
              userId: {
                type: "string",
                id: 4
              },
              visualizationId: {
                type: "string",
                id: 7
              }
            }
          },
          GetAnalysisSignaturesResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              },
              analysisDetails: {
                rule: "repeated",
                type: "AnalysisDetails",
                id: 2
              }
            }
          },
          GetAnalysisResultsRequest: {
            fields: {
              analysisQuery: {
                type: "AnalysisQuery",
                id: 1
              }
            }
          },
          GetAnalysisResultsResponse: {
            fields: {
              status: {
                type: "status.Status",
                id: 1
              },
              analysisResult: {
                rule: "repeated",
                type: "AnalysisResult",
                id: 2
              }
            }
          }
        }
      },
      status: {
        options: {
          java_package: "com.thoughtspot.a3.watch.status",
          java_outer_classname: "SnapshotStatus"
        },
        nested: {
          Status: {
            fields: {
              code: {
                type: "Code",
                id: 1
              },
              msg: {
                type: "string",
                id: 2
              }
            },
            nested: {
              Code: {
                values: {
                  OK: 0,
                  FAILED: 1,
                  NOT_READY: 2,
                  NOT_IMPLEMENTED: 3,
                  INVALID_SNAPSHOT_QUERY: 4,
                  INVALID_SNAPSHOT: 5,
                  PERSISTENT_STORE_ERROR: 6,
                  SUBSCRIPTION_LIMIT_REACHED_PER_USER: 7,
                  INVALID_SUBSCRIPTION: 8
                }
              }
            }
          }
        }
      }
    }
  }
});

const a3 = processProto($root.lookup('a3'));
const atlas = processProto($root.lookup('atlas'));
const bach = processProto($root.lookup('bach'));
const blink$1 = processProto($root.lookup('blink'));
const callosum = processProto($root.lookup('callosum'));
const common = processProto($root.lookup('common'));
const falcon = processProto($root.lookup('falcon'));
const net = processProto($root.lookup('net'));
const sage = processProto($root.lookup('sage'));
const scheduler = processProto($root.lookup('scheduler'));
const util = processProto($root.lookup('util'));
const export_service = processProto($root.lookup('export_service'));

function processProto(protoRoot) {
    if(!protoRoot) {
        return;
    } else if (protoRoot.values) {
        return protoRoot.values;
    }

    let result = protoRoot.ctor || {};

    if(protoRoot.nestedArray) {
        protoRoot.nestedArray.forEach((nestedProtoItem) => {
            result[nestedProtoItem.name] = processProto(nestedProtoItem);
        });
    }

    return result;
}

var protoRoot = /*#__PURE__*/Object.freeze({
a3: a3,
atlas: atlas,
bach: bach,
blink: blink$1,
callosum: callosum,
common: common,
falcon: falcon,
net: net,
sage: sage,
scheduler: scheduler,
util: util,
export_service: export_service
});

var cldr = createCommonjsModule(function (module) {
/**
 * CLDR JavaScript Library v0.5.1
 * http://jquery.com/
 *
 * Copyright 2013 Rafael Xavier de Souza
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-01-21T13:43Z
 */
/*!
 * CLDR JavaScript Library v0.5.1 2019-01-21T13:43Z MIT license © Rafael Xavier
 * http://git.io/h4lmVg
 */
(function( root, factory ) {

	{
		// Node. CommonJS.
		module.exports = factory();
	}

}( commonjsGlobal, function() {


	var arrayIsArray = Array.isArray || function( obj ) {
		return Object.prototype.toString.call( obj ) === "[object Array]";
	};




	var pathNormalize = function( path, attributes ) {
		if ( arrayIsArray( path ) ) {
			path = path.join( "/" );
		}
		if ( typeof path !== "string" ) {
			throw new Error( "invalid path \"" + path + "\"" );
		}
		// 1: Ignore leading slash `/`
		// 2: Ignore leading `cldr/`
		path = path
			.replace( /^\// , "" ) /* 1 */
			.replace( /^cldr\// , "" ); /* 2 */

		// Replace {attribute}'s
		path = path.replace( /{[a-zA-Z]+}/g, function( name ) {
			name = name.replace( /^{([^}]*)}$/, "$1" );
			return attributes[ name ];
		});

		return path.split( "/" );
	};




	var arraySome = function( array, callback ) {
		var i, length;
		if ( array.some ) {
			return array.some( callback );
		}
		for ( i = 0, length = array.length; i < length; i++ ) {
			if ( callback( array[ i ], i, array ) ) {
				return true;
			}
		}
		return false;
	};




	/**
	 * Return the maximized language id as defined in
	 * http://www.unicode.org/reports/tr35/#Likely_Subtags
	 * 1. Canonicalize.
	 * 1.1 Make sure the input locale is in canonical form: uses the right
	 * separator, and has the right casing.
	 * TODO Right casing? What df? It seems languages are lowercase, scripts are
	 * Capitalized, territory is uppercase. I am leaving this as an exercise to
	 * the user.
	 *
	 * 1.2 Replace any deprecated subtags with their canonical values using the
	 * <alias> data in supplemental metadata. Use the first value in the
	 * replacement list, if it exists. Language tag replacements may have multiple
	 * parts, such as "sh" ➞ "sr_Latn" or mo" ➞ "ro_MD". In such a case, the
	 * original script and/or region are retained if there is one. Thus
	 * "sh_Arab_AQ" ➞ "sr_Arab_AQ", not "sr_Latn_AQ".
	 * TODO What <alias> data?
	 *
	 * 1.3 If the tag is grandfathered (see <variable id="$grandfathered"
	 * type="choice"> in the supplemental data), then return it.
	 * TODO grandfathered?
	 *
	 * 1.4 Remove the script code 'Zzzz' and the region code 'ZZ' if they occur.
	 * 1.5 Get the components of the cleaned-up source tag (languages, scripts,
	 * and regions), plus any variants and extensions.
	 * 2. Lookup. Lookup each of the following in order, and stop on the first
	 * match:
	 * 2.1 languages_scripts_regions
	 * 2.2 languages_regions
	 * 2.3 languages_scripts
	 * 2.4 languages
	 * 2.5 und_scripts
	 * 3. Return
	 * 3.1 If there is no match, either return an error value, or the match for
	 * "und" (in APIs where a valid language tag is required).
	 * 3.2 Otherwise there is a match = languagem_scriptm_regionm
	 * 3.3 Let xr = xs if xs is not empty, and xm otherwise.
	 * 3.4 Return the language tag composed of languager _ scriptr _ regionr +
	 * variants + extensions.
	 *
	 * @subtags [Array] normalized language id subtags tuple (see init.js).
	 */
	var coreLikelySubtags = function( Cldr, cldr, subtags, options ) {
		var match, matchFound,
			language = subtags[ 0 ],
			script = subtags[ 1 ],
			sep = Cldr.localeSep,
			territory = subtags[ 2 ],
			variants = subtags.slice( 3, 4 );
		options = options || {};

		// Skip if (language, script, territory) is not empty [3.3]
		if ( language !== "und" && script !== "Zzzz" && territory !== "ZZ" ) {
			return [ language, script, territory ].concat( variants );
		}

		// Skip if no supplemental likelySubtags data is present
		if ( typeof cldr.get( "supplemental/likelySubtags" ) === "undefined" ) {
			return;
		}

		// [2]
		matchFound = arraySome([
			[ language, script, territory ],
			[ language, territory ],
			[ language, script ],
			[ language ],
			[ "und", script ]
		], function( test ) {
			return match = !(/\b(Zzzz|ZZ)\b/).test( test.join( sep ) ) /* [1.4] */ && cldr.get( [ "supplemental/likelySubtags", test.join( sep ) ] );
		});

		// [3]
		if ( matchFound ) {
			// [3.2 .. 3.4]
			match = match.split( sep );
			return [
				language !== "und" ? language : match[ 0 ],
				script !== "Zzzz" ? script : match[ 1 ],
				territory !== "ZZ" ? territory : match[ 2 ]
			].concat( variants );
		} else if ( options.force ) {
			// [3.1.2]
			return cldr.get( "supplemental/likelySubtags/und" ).split( sep );
		} else {
			// [3.1.1]
			return;
		}
	};



	/**
	 * Given a locale, remove any fields that Add Likely Subtags would add.
	 * http://www.unicode.org/reports/tr35/#Likely_Subtags
	 * 1. First get max = AddLikelySubtags(inputLocale). If an error is signaled,
	 * return it.
	 * 2. Remove the variants from max.
	 * 3. Then for trial in {language, language _ region, language _ script}. If
	 * AddLikelySubtags(trial) = max, then return trial + variants.
	 * 4. If you do not get a match, return max + variants.
	 * 
	 * @maxLanguageId [Array] maxLanguageId tuple (see init.js).
	 */
	var coreRemoveLikelySubtags = function( Cldr, cldr, maxLanguageId ) {
		var match, matchFound,
			language = maxLanguageId[ 0 ],
			script = maxLanguageId[ 1 ],
			territory = maxLanguageId[ 2 ],
			variants = maxLanguageId[ 3 ];

		// [3]
		matchFound = arraySome([
			[ [ language, "Zzzz", "ZZ" ], [ language ] ],
			[ [ language, "Zzzz", territory ], [ language, territory ] ],
			[ [ language, script, "ZZ" ], [ language, script ] ]
		], function( test ) {
			var result = coreLikelySubtags( Cldr, cldr, test[ 0 ] );
			match = test[ 1 ];
			return result && result[ 0 ] === maxLanguageId[ 0 ] &&
				result[ 1 ] === maxLanguageId[ 1 ] &&
				result[ 2 ] === maxLanguageId[ 2 ];
		});

		if ( matchFound ) {
			if ( variants ) {
				match.push( variants );
			}
			return match;
		}

		// [4]
		return maxLanguageId;
	};




	/**
	 * subtags( locale )
	 *
	 * @locale [String]
	 */
	var coreSubtags = function( locale ) {
		var aux, unicodeLanguageId,
			subtags = [];

		locale = locale.replace( /_/, "-" );

		// Unicode locale extensions.
		aux = locale.split( "-u-" );
		if ( aux[ 1 ] ) {
			aux[ 1 ] = aux[ 1 ].split( "-t-" );
			locale = aux[ 0 ] + ( aux[ 1 ][ 1 ] ? "-t-" + aux[ 1 ][ 1 ] : "");
			subtags[ 4 /* unicodeLocaleExtensions */ ] = aux[ 1 ][ 0 ];
		}

		// TODO normalize transformed extensions. Currently, skipped.
		// subtags[ x ] = locale.split( "-t-" )[ 1 ];
		unicodeLanguageId = locale.split( "-t-" )[ 0 ];

		// unicode_language_id = "root"
		//   | unicode_language_subtag         
		//     (sep unicode_script_subtag)? 
		//     (sep unicode_region_subtag)?
		//     (sep unicode_variant_subtag)* ;
		//
		// Although unicode_language_subtag = alpha{2,8}, I'm using alpha{2,3}. Because, there's no language on CLDR lengthier than 3.
		aux = unicodeLanguageId.match( /^(([a-z]{2,3})(-([A-Z][a-z]{3}))?(-([A-Z]{2}|[0-9]{3}))?)((-([a-zA-Z0-9]{5,8}|[0-9][a-zA-Z0-9]{3}))*)$|^(root)$/ );
		if ( aux === null ) {
			return [ "und", "Zzzz", "ZZ" ];
		}
		subtags[ 0 /* language */ ] = aux[ 10 ] /* root */ || aux[ 2 ] || "und";
		subtags[ 1 /* script */ ] = aux[ 4 ] || "Zzzz";
		subtags[ 2 /* territory */ ] = aux[ 6 ] || "ZZ";
		if ( aux[ 7 ] && aux[ 7 ].length ) {
			subtags[ 3 /* variant */ ] = aux[ 7 ].slice( 1 ) /* remove leading "-" */;
		}

		// 0: language
		// 1: script
		// 2: territory (aka region)
		// 3: variant
		// 4: unicodeLocaleExtensions
		return subtags;
	};




	var arrayForEach = function( array, callback ) {
		var i, length;
		if ( array.forEach ) {
			return array.forEach( callback );
		}
		for ( i = 0, length = array.length; i < length; i++ ) {
			callback( array[ i ], i, array );
		}
	};




	/**
	 * bundleLookup( minLanguageId )
	 *
	 * @Cldr [Cldr class]
	 *
	 * @cldr [Cldr instance]
	 *
	 * @minLanguageId [String] requested languageId after applied remove likely subtags.
	 */
	var bundleLookup = function( Cldr, cldr, minLanguageId ) {
		var availableBundleMap = Cldr._availableBundleMap,
			availableBundleMapQueue = Cldr._availableBundleMapQueue;

		if ( availableBundleMapQueue.length ) {
			arrayForEach( availableBundleMapQueue, function( bundle ) {
				var existing, maxBundle, minBundle, subtags;
				subtags = coreSubtags( bundle );
				maxBundle = coreLikelySubtags( Cldr, cldr, subtags );
				minBundle = coreRemoveLikelySubtags( Cldr, cldr, maxBundle );
				minBundle = minBundle.join( Cldr.localeSep );
				existing = availableBundleMap[ minBundle ];
				if ( existing && existing.length < bundle.length ) {
					return;
				}
				availableBundleMap[ minBundle ] = bundle;
			});
			Cldr._availableBundleMapQueue = [];
		}

		return availableBundleMap[ minLanguageId ] || null;
	};




	var objectKeys = function( object ) {
		var i,
			result = [];

		if ( Object.keys ) {
			return Object.keys( object );
		}

		for ( i in object ) {
			result.push( i );
		}

		return result;
	};




	var createError = function( code, attributes ) {
		var error, message;

		message = code + ( attributes && JSON ? ": " + JSON.stringify( attributes ) : "" );
		error = new Error( message );
		error.code = code;

		// extend( error, attributes );
		arrayForEach( objectKeys( attributes ), function( attribute ) {
			error[ attribute ] = attributes[ attribute ];
		});

		return error;
	};




	var validate = function( code, check, attributes ) {
		if ( !check ) {
			throw createError( code, attributes );
		}
	};




	var validatePresence = function( value, name ) {
		validate( "E_MISSING_PARAMETER", typeof value !== "undefined", {
			name: name
		});
	};




	var validateType = function( value, name, check, expected ) {
		validate( "E_INVALID_PAR_TYPE", check, {
			expected: expected,
			name: name,
			value: value
		});
	};




	var validateTypePath = function( value, name ) {
		validateType( value, name, typeof value === "string" || arrayIsArray( value ), "String or Array" );
	};




	/**
	 * Function inspired by jQuery Core, but reduced to our use case.
	 */
	var isPlainObject = function( obj ) {
		return obj !== null && "" + obj === "[object Object]";
	};




	var validateTypePlainObject = function( value, name ) {
		validateType( value, name, typeof value === "undefined" || isPlainObject( value ), "Plain Object" );
	};




	var validateTypeString = function( value, name ) {
		validateType( value, name, typeof value === "string", "a string" );
	};




	// @path: normalized path
	var resourceGet = function( data, path ) {
		var i,
			node = data,
			length = path.length;

		for ( i = 0; i < length - 1; i++ ) {
			node = node[ path[ i ] ];
			if ( !node ) {
				return undefined;
			}
		}
		return node[ path[ i ] ];
	};




	/**
	 * setAvailableBundles( Cldr, json )
	 *
	 * @Cldr [Cldr class]
	 *
	 * @json resolved/unresolved cldr data.
	 *
	 * Set available bundles queue based on passed json CLDR data. Considers a bundle as any String at /main/{bundle}.
	 */
	var coreSetAvailableBundles = function( Cldr, json ) {
		var bundle,
			availableBundleMapQueue = Cldr._availableBundleMapQueue,
			main = resourceGet( json, [ "main" ] );

		if ( main ) {
			for ( bundle in main ) {
				if ( main.hasOwnProperty( bundle ) && bundle !== "root" &&
							availableBundleMapQueue.indexOf( bundle ) === -1 ) {
					availableBundleMapQueue.push( bundle );
				}
			}
		}
	};



	var alwaysArray = function( somethingOrArray ) {
		return arrayIsArray( somethingOrArray ) ?  somethingOrArray : [ somethingOrArray ];
	};


	var jsonMerge = (function() {

	// Returns new deeply merged JSON.
	//
	// Eg.
	// merge( { a: { b: 1, c: 2 } }, { a: { b: 3, d: 4 } } )
	// -> { a: { b: 3, c: 2, d: 4 } }
	//
	// @arguments JSON's
	// 
	var merge = function() {
		var destination = {},
			sources = [].slice.call( arguments, 0 );
		arrayForEach( sources, function( source ) {
			var prop;
			for ( prop in source ) {
				if ( prop in destination && typeof destination[ prop ] === "object" && !arrayIsArray( destination[ prop ] ) ) {

					// Merge Objects
					destination[ prop ] = merge( destination[ prop ], source[ prop ] );

				} else {

					// Set new values
					destination[ prop ] = source[ prop ];

				}
			}
		});
		return destination;
	};

	return merge;

}());


	/**
	 * load( Cldr, source, jsons )
	 *
	 * @Cldr [Cldr class]
	 *
	 * @source [Object]
	 *
	 * @jsons [arguments]
	 */
	var coreLoad = function( Cldr, source, jsons ) {
		var i, j, json;

		validatePresence( jsons[ 0 ], "json" );

		// Support arbitrary parameters, e.g., `Cldr.load({...}, {...})`.
		for ( i = 0; i < jsons.length; i++ ) {

			// Support array parameters, e.g., `Cldr.load([{...}, {...}])`.
			json = alwaysArray( jsons[ i ] );

			for ( j = 0; j < json.length; j++ ) {
				validateTypePlainObject( json[ j ], "json" );
				source = jsonMerge( source, json[ j ] );
				coreSetAvailableBundles( Cldr, json[ j ] );
			}
		}

		return source;
	};



	var itemGetResolved = function( Cldr, path, attributes ) {
		// Resolve path
		var normalizedPath = pathNormalize( path, attributes );

		return resourceGet( Cldr._resolved, normalizedPath );
	};




	/**
	 * new Cldr()
	 */
	var Cldr = function( locale ) {
		this.init( locale );
	};

	// Build optimization hack to avoid duplicating functions across modules.
	Cldr._alwaysArray = alwaysArray;
	Cldr._coreLoad = coreLoad;
	Cldr._createError = createError;
	Cldr._itemGetResolved = itemGetResolved;
	Cldr._jsonMerge = jsonMerge;
	Cldr._pathNormalize = pathNormalize;
	Cldr._resourceGet = resourceGet;
	Cldr._validatePresence = validatePresence;
	Cldr._validateType = validateType;
	Cldr._validateTypePath = validateTypePath;
	Cldr._validateTypePlainObject = validateTypePlainObject;

	Cldr._availableBundleMap = {};
	Cldr._availableBundleMapQueue = [];
	Cldr._resolved = {};

	// Allow user to override locale separator "-" (default) | "_". According to http://www.unicode.org/reports/tr35/#Unicode_language_identifier, both "-" and "_" are valid locale separators (eg. "en_GB", "en-GB"). According to http://unicode.org/cldr/trac/ticket/6786 its usage must be consistent throughout the data set.
	Cldr.localeSep = "-";

	/**
	 * Cldr.load( json [, json, ...] )
	 *
	 * @json [JSON] CLDR data or [Array] Array of @json's.
	 *
	 * Load resolved cldr data.
	 */
	Cldr.load = function() {
		Cldr._resolved = coreLoad( Cldr, Cldr._resolved, arguments );
	};

	/**
	 * .init() automatically run on instantiation/construction.
	 */
	Cldr.prototype.init = function( locale ) {
		var attributes, language, maxLanguageId, minLanguageId, script, subtags, territory, unicodeLocaleExtensions, variant,
			sep = Cldr.localeSep,
			unicodeLocaleExtensionsRaw = "";

		validatePresence( locale, "locale" );
		validateTypeString( locale, "locale" );

		subtags = coreSubtags( locale );

		if ( subtags.length === 5 ) {
			unicodeLocaleExtensions = subtags.pop();
			unicodeLocaleExtensionsRaw = sep + "u" + sep + unicodeLocaleExtensions;
			// Remove trailing null when there is unicodeLocaleExtensions but no variants.
			if ( !subtags[ 3 ] ) {
				subtags.pop();
			}
		}
		variant = subtags[ 3 ];

		// Normalize locale code.
		// Get (or deduce) the "triple subtags": language, territory (also aliased as region), and script subtags.
		// Get the variant subtags (calendar, collation, currency, etc).
		// refs:
		// - http://www.unicode.org/reports/tr35/#Field_Definitions
		// - http://www.unicode.org/reports/tr35/#Language_and_Locale_IDs
		// - http://www.unicode.org/reports/tr35/#Unicode_locale_identifier

		// When a locale id does not specify a language, or territory (region), or script, they are obtained by Likely Subtags.
		maxLanguageId = coreLikelySubtags( Cldr, this, subtags, { force: true } ) || subtags;
		language = maxLanguageId[ 0 ];
		script = maxLanguageId[ 1 ];
		territory = maxLanguageId[ 2 ];

		minLanguageId = coreRemoveLikelySubtags( Cldr, this, maxLanguageId ).join( sep );

		// Set attributes
		this.attributes = attributes = {
			bundle: bundleLookup( Cldr, this, minLanguageId ),

			// Unicode Language Id
			minLanguageId: minLanguageId + unicodeLocaleExtensionsRaw,
			maxLanguageId: maxLanguageId.join( sep ) + unicodeLocaleExtensionsRaw,

			// Unicode Language Id Subtabs
			language: language,
			script: script,
			territory: territory,
			region: territory, /* alias */
			variant: variant
		};

		// Unicode locale extensions.
		unicodeLocaleExtensions && ( "-" + unicodeLocaleExtensions ).replace( /-[a-z]{3,8}|(-[a-z]{2})-([a-z]{3,8})/g, function( attribute, key, type ) {

			if ( key ) {

				// Extension is in the `keyword` form.
				attributes[ "u" + key ] = type;
			} else {

				// Extension is in the `attribute` form.
				attributes[ "u" + attribute ] = true;
			}
		});

		this.locale = locale;
	};

	/**
	 * .get()
	 */
	Cldr.prototype.get = function( path ) {

		validatePresence( path, "path" );
		validateTypePath( path, "path" );

		return itemGetResolved( Cldr, path, this.attributes );
	};

	/**
	 * .main()
	 */
	Cldr.prototype.main = function( path ) {
		validatePresence( path, "path" );
		validateTypePath( path, "path" );

		validate( "E_MISSING_BUNDLE", this.attributes.bundle !== null, {
			locale: this.locale
		});

		path = alwaysArray( path );
		return this.get( [ "main/{bundle}" ].concat( path ) );
	};

	return Cldr;




}));
});

var event = createCommonjsModule(function (module) {
/**
 * CLDR JavaScript Library v0.5.1
 * http://jquery.com/
 *
 * Copyright 2013 Rafael Xavier de Souza
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-01-21T13:43Z
 */
/*!
 * CLDR JavaScript Library v0.5.1 2019-01-21T13:43Z MIT license © Rafael Xavier
 * http://git.io/h4lmVg
 */
(function( factory ) {

	{
		// Node. CommonJS.
		module.exports = factory( cldr );
	}

}(function( Cldr ) {

	// Build optimization hack to avoid duplicating functions across modules.
	var pathNormalize = Cldr._pathNormalize,
		validatePresence = Cldr._validatePresence,
		validateType = Cldr._validateType;

/*!
 * EventEmitter v4.2.7 - git.io/ee
 * Oliver Caldwell
 * MIT license
 * @preserve
 */

var EventEmitter;
/* jshint ignore:start */
EventEmitter = (function () {


	/**
	 * Class for managing events.
	 * Can be extended to provide event functionality in other classes.
	 *
	 * @class EventEmitter Manages event registering and emitting.
	 */
	function EventEmitter() {}

	// Shortcuts to improve speed and size
	var proto = EventEmitter.prototype;
	

	/**
	 * Finds the index of the listener for the event in it's storage array.
	 *
	 * @param {Function[]} listeners Array of listeners to search through.
	 * @param {Function} listener Method to look for.
	 * @return {Number} Index of the specified listener, -1 if not found
	 * @api private
	 */
	function indexOfListener(listeners, listener) {
		var i = listeners.length;
		while (i--) {
			if (listeners[i].listener === listener) {
				return i;
			}
		}

		return -1;
	}

	/**
	 * Alias a method while keeping the context correct, to allow for overwriting of target method.
	 *
	 * @param {String} name The name of the target method.
	 * @return {Function} The aliased method
	 * @api private
	 */
	function alias(name) {
		return function aliasClosure() {
			return this[name].apply(this, arguments);
		};
	}

	/**
	 * Returns the listener array for the specified event.
	 * Will initialise the event object and listener arrays if required.
	 * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	 * Each property in the object response is an array of listener functions.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Function[]|Object} All listener functions for the event.
	 */
	proto.getListeners = function getListeners(evt) {
		var events = this._getEvents();
		var response;
		var key;

		// Return a concatenated array of all matching events if
		// the selector is a regular expression.
		if (evt instanceof RegExp) {
			response = {};
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					response[key] = events[key];
				}
			}
		}
		else {
			response = events[evt] || (events[evt] = []);
		}

		return response;
	};

	/**
	 * Takes a list of listener objects and flattens it into a list of listener functions.
	 *
	 * @param {Object[]} listeners Raw listener objects.
	 * @return {Function[]} Just the listener functions.
	 */
	proto.flattenListeners = function flattenListeners(listeners) {
		var flatListeners = [];
		var i;

		for (i = 0; i < listeners.length; i += 1) {
			flatListeners.push(listeners[i].listener);
		}

		return flatListeners;
	};

	/**
	 * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Object} All listener functions for an event in an object.
	 */
	proto.getListenersAsObject = function getListenersAsObject(evt) {
		var listeners = this.getListeners(evt);
		var response;

		if (listeners instanceof Array) {
			response = {};
			response[evt] = listeners;
		}

		return response || listeners;
	};

	/**
	 * Adds a listener function to the specified event.
	 * The listener will not be added if it is a duplicate.
	 * If the listener returns true then it will be removed after it is called.
	 * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListener = function addListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var listenerIsWrapped = typeof listener === 'object';
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
				listeners[key].push(listenerIsWrapped ? listener : {
					listener: listener,
					once: false
				});
			}
		}

		return this;
	};

	/**
	 * Alias of addListener
	 */
	proto.on = alias('addListener');

	/**
	 * Semi-alias of addListener. It will add a listener that will be
	 * automatically removed after it's first execution.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addOnceListener = function addOnceListener(evt, listener) {
		return this.addListener(evt, {
			listener: listener,
			once: true
		});
	};

	/**
	 * Alias of addOnceListener.
	 */
	proto.once = alias('addOnceListener');

	/**
	 * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	 * You need to tell it what event names should be matched by a regex.
	 *
	 * @param {String} evt Name of the event to create.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvent = function defineEvent(evt) {
		this.getListeners(evt);
		return this;
	};

	/**
	 * Uses defineEvent to define multiple events.
	 *
	 * @param {String[]} evts An array of event names to define.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvents = function defineEvents(evts) {
		for (var i = 0; i < evts.length; i += 1) {
			this.defineEvent(evts[i]);
		}
		return this;
	};

	/**
	 * Removes a listener function from the specified event.
	 * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to remove the listener from.
	 * @param {Function} listener Method to remove from the event.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListener = function removeListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var index;
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				index = indexOfListener(listeners[key], listener);

				if (index !== -1) {
					listeners[key].splice(index, 1);
				}
			}
		}

		return this;
	};

	/**
	 * Alias of removeListener
	 */
	proto.off = alias('removeListener');

	/**
	 * Adds listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	 * You can also pass it a regular expression to add the array of listeners to all events that match it.
	 * Yeah, this function does quite a bit. That's probably a bad thing.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListeners = function addListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(false, evt, listeners);
	};

	/**
	 * Removes listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be removed.
	 * You can also pass it a regular expression to remove the listeners from all events that match it.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListeners = function removeListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(true, evt, listeners);
	};

	/**
	 * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	 * The first argument will determine if the listeners are removed (true) or added (false).
	 * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be added/removed.
	 * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	 *
	 * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
		var i;
		var value;
		var single = remove ? this.removeListener : this.addListener;
		var multiple = remove ? this.removeListeners : this.addListeners;

		// If evt is an object then pass each of it's properties to this method
		if (typeof evt === 'object' && !(evt instanceof RegExp)) {
			for (i in evt) {
				if (evt.hasOwnProperty(i) && (value = evt[i])) {
					// Pass the single listener straight through to the singular method
					if (typeof value === 'function') {
						single.call(this, i, value);
					}
					else {
						// Otherwise pass back to the multiple function
						multiple.call(this, i, value);
					}
				}
			}
		}
		else {
			// So evt must be a string
			// And listeners must be an array of listeners
			// Loop over it and pass each one to the multiple method
			i = listeners.length;
			while (i--) {
				single.call(this, evt, listeners[i]);
			}
		}

		return this;
	};

	/**
	 * Removes all listeners from a specified event.
	 * If you do not specify an event then all listeners will be removed.
	 * That means every event will be emptied.
	 * You can also pass a regex to remove all events that match it.
	 *
	 * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeEvent = function removeEvent(evt) {
		var type = typeof evt;
		var events = this._getEvents();
		var key;

		// Remove different things depending on the state of evt
		if (type === 'string') {
			// Remove all listeners for the specified event
			delete events[evt];
		}
		else if (evt instanceof RegExp) {
			// Remove all events matching the regex.
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					delete events[key];
				}
			}
		}
		else {
			// Remove all listeners in all events
			delete this._events;
		}

		return this;
	};

	/**
	 * Alias of removeEvent.
	 *
	 * Added to mirror the node API.
	 */
	proto.removeAllListeners = alias('removeEvent');

	/**
	 * Emits an event of your choice.
	 * When emitted, every listener attached to that event will be executed.
	 * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	 * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	 * So they will not arrive within the array on the other side, they will be separate.
	 * You can also pass a regular expression to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {Array} [args] Optional array of arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emitEvent = function emitEvent(evt, args) {
		var listeners = this.getListenersAsObject(evt);
		var listener;
		var i;
		var key;
		var response;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				i = listeners[key].length;

				while (i--) {
					// If the listener returns true then it shall be removed from the event
					// The function is executed either with a basic call or an apply if there is an args array
					listener = listeners[key][i];

					if (listener.once === true) {
						this.removeListener(evt, listener.listener);
					}

					response = listener.listener.apply(this, args || []);

					if (response === this._getOnceReturnValue()) {
						this.removeListener(evt, listener.listener);
					}
				}
			}
		}

		return this;
	};

	/**
	 * Alias of emitEvent
	 */
	proto.trigger = alias('emitEvent');

	/**
	 * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	 * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {...*} Optional additional arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emit = function emit(evt) {
		var args = Array.prototype.slice.call(arguments, 1);
		return this.emitEvent(evt, args);
	};

	/**
	 * Sets the current value to check against when executing listeners. If a
	 * listeners return value matches the one set here then it will be removed
	 * after execution. This value defaults to true.
	 *
	 * @param {*} value The new value to check for when executing listeners.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.setOnceReturnValue = function setOnceReturnValue(value) {
		this._onceReturnValue = value;
		return this;
	};

	/**
	 * Fetches the current value to check against when executing listeners. If
	 * the listeners return value matches this one then it should be removed
	 * automatically. It will return true by default.
	 *
	 * @return {*|Boolean} The current value to check for or the default, true.
	 * @api private
	 */
	proto._getOnceReturnValue = function _getOnceReturnValue() {
		if (this.hasOwnProperty('_onceReturnValue')) {
			return this._onceReturnValue;
		}
		else {
			return true;
		}
	};

	/**
	 * Fetches the events object and creates one if required.
	 *
	 * @return {Object} The events storage object.
	 * @api private
	 */
	proto._getEvents = function _getEvents() {
		return this._events || (this._events = {});
	};

	/**
	 * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	 *
	 * @return {Function} Non conflicting EventEmitter class.
	 */
	EventEmitter.noConflict = function noConflict() {
		return EventEmitter;
	};

	return EventEmitter;
}());
/* jshint ignore:end */



	var validateTypeFunction = function( value, name ) {
		validateType( value, name, typeof value === "undefined" || typeof value === "function", "Function" );
	};




	var superGet, superInit,
		globalEe = new EventEmitter();

	function validateTypeEvent( value, name ) {
		validateType( value, name, typeof value === "string" || value instanceof RegExp, "String or RegExp" );
	}

	function validateThenCall( method, self ) {
		return function( event, listener ) {
			validatePresence( event, "event" );
			validateTypeEvent( event, "event" );

			validatePresence( listener, "listener" );
			validateTypeFunction( listener, "listener" );

			return self[ method ].apply( self, arguments );
		};
	}

	function off( self ) {
		return validateThenCall( "off", self );
	}

	function on( self ) {
		return validateThenCall( "on", self );
	}

	function once( self ) {
		return validateThenCall( "once", self );
	}

	Cldr.off = off( globalEe );
	Cldr.on = on( globalEe );
	Cldr.once = once( globalEe );

	/**
	 * Overload Cldr.prototype.init().
	 */
	superInit = Cldr.prototype.init;
	Cldr.prototype.init = function() {
		var ee;
		this.ee = ee = new EventEmitter();
		this.off = off( ee );
		this.on = on( ee );
		this.once = once( ee );
		superInit.apply( this, arguments );
	};

	/**
	 * getOverload is encapsulated, because of cldr/unresolved. If it's loaded
	 * after cldr/event (and note it overwrites .get), it can trigger this
	 * overload again.
	 */
	function getOverload() {

		/**
		 * Overload Cldr.prototype.get().
		 */
		superGet = Cldr.prototype.get;
		Cldr.prototype.get = function( path ) {
			var value = superGet.apply( this, arguments );
			path = pathNormalize( path, this.attributes ).join( "/" );
			globalEe.trigger( "get", [ path, value ] );
			this.ee.trigger( "get", [ path, value ] );
			return value;
		};
	}

	Cldr._eventInit = getOverload;
	getOverload();

	return Cldr;




}));
});

var supplemental = createCommonjsModule(function (module) {
/**
 * CLDR JavaScript Library v0.5.1
 * http://jquery.com/
 *
 * Copyright 2013 Rafael Xavier de Souza
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-01-21T13:43Z
 */
/*!
 * CLDR JavaScript Library v0.5.1 2019-01-21T13:43Z MIT license © Rafael Xavier
 * http://git.io/h4lmVg
 */
(function( factory ) {

	{
		// Node. CommonJS.
		module.exports = factory( cldr );
	}

}(function( Cldr ) {

	// Build optimization hack to avoid duplicating functions across modules.
	var alwaysArray = Cldr._alwaysArray;



	var supplementalMain = function( cldr ) {

		var prepend, supplemental;
		
		prepend = function( prepend ) {
			return function( path ) {
				path = alwaysArray( path );
				return cldr.get( [ prepend ].concat( path ) );
			};
		};

		supplemental = prepend( "supplemental" );

		// Week Data
		// http://www.unicode.org/reports/tr35/tr35-dates.html#Week_Data
		supplemental.weekData = prepend( "supplemental/weekData" );

		supplemental.weekData.firstDay = function() {
			return cldr.get( "supplemental/weekData/firstDay/{territory}" ) ||
				cldr.get( "supplemental/weekData/firstDay/001" );
		};

		supplemental.weekData.minDays = function() {
			var minDays = cldr.get( "supplemental/weekData/minDays/{territory}" ) ||
				cldr.get( "supplemental/weekData/minDays/001" );
			return parseInt( minDays, 10 );
		};

		// Time Data
		// http://www.unicode.org/reports/tr35/tr35-dates.html#Time_Data
		supplemental.timeData = prepend( "supplemental/timeData" );

		supplemental.timeData.allowed = function() {
			return cldr.get( "supplemental/timeData/{territory}/_allowed" ) ||
				cldr.get( "supplemental/timeData/001/_allowed" );
		};

		supplemental.timeData.preferred = function() {
			return cldr.get( "supplemental/timeData/{territory}/_preferred" ) ||
				cldr.get( "supplemental/timeData/001/_preferred" );
		};

		return supplemental;

	};




	var initSuper = Cldr.prototype.init;

	/**
	 * .init() automatically ran on construction.
	 *
	 * Overload .init().
	 */
	Cldr.prototype.init = function() {
		initSuper.apply( this, arguments );
		this.supplemental = supplementalMain( this );
	};

	return Cldr;




}));
});

var unresolved = createCommonjsModule(function (module) {
/**
 * CLDR JavaScript Library v0.5.1
 * http://jquery.com/
 *
 * Copyright 2013 Rafael Xavier de Souza
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-01-21T13:43Z
 */
/*!
 * CLDR JavaScript Library v0.5.1 2019-01-21T13:43Z MIT license © Rafael Xavier
 * http://git.io/h4lmVg
 */
(function( factory ) {

	{
		// Node. CommonJS.
		module.exports = factory( cldr );
	}

}(function( Cldr ) {

	// Build optimization hack to avoid duplicating functions across modules.
	var coreLoad = Cldr._coreLoad;
	var jsonMerge = Cldr._jsonMerge;
	var pathNormalize = Cldr._pathNormalize;
	var resourceGet = Cldr._resourceGet;
	var validatePresence = Cldr._validatePresence;
	var validateTypePath = Cldr._validateTypePath;



	var bundleParentLookup = function( Cldr, locale ) {
		var normalizedPath, parent;

		if ( locale === "root" ) {
			return;
		}

		// First, try to find parent on supplemental data.
		normalizedPath = pathNormalize( [ "supplemental/parentLocales/parentLocale", locale ] );
		parent = resourceGet( Cldr._resolved, normalizedPath ) || resourceGet( Cldr._raw, normalizedPath );
		if ( parent ) {
			return parent;
		}

		// Or truncate locale.
		parent = locale.substr( 0, locale.lastIndexOf( Cldr.localeSep ) );
		if ( !parent ) {
			return "root";
		}

		return parent;
	};




	// @path: normalized path
	var resourceSet = function( data, path, value ) {
		var i,
			node = data,
			length = path.length;

		for ( i = 0; i < length - 1; i++ ) {
			if ( !node[ path[ i ] ] ) {
				node[ path[ i ] ] = {};
			}
			node = node[ path[ i ] ];
		}
		node[ path[ i ] ] = value;
	};


	var itemLookup = (function() {

	var lookup;

	lookup = function( Cldr, locale, path, attributes, childLocale ) {
		var normalizedPath, parent, value;

		// 1: Finish recursion
		// 2: Avoid infinite loop
		if ( typeof locale === "undefined" /* 1 */ || locale === childLocale /* 2 */ ) {
			return;
		}

		// Resolve path
		normalizedPath = pathNormalize( path, attributes );

		// Check resolved (cached) data first
		// 1: Due to #16, never use the cached resolved non-leaf nodes. It may not
		//    represent its leafs in its entirety.
		value = resourceGet( Cldr._resolved, normalizedPath );
		if ( value !== undefined && typeof value !== "object" /* 1 */ ) {
			return value;
		}

		// Check raw data
		value = resourceGet( Cldr._raw, normalizedPath );

		if ( value === undefined ) {
			// Or, lookup at parent locale
			parent = bundleParentLookup( Cldr, locale );
			value = lookup( Cldr, parent, path, jsonMerge( attributes, { bundle: parent }), locale );
		}

		if ( value !== undefined ) {
			// Set resolved (cached)
			resourceSet( Cldr._resolved, normalizedPath, value );
		}

		return value;
	};

	return lookup;

}());


	Cldr._raw = {};

	/**
	 * Cldr.load( json [, json, ...] )
	 *
	 * @json [JSON] CLDR data or [Array] Array of @json's.
	 *
	 * Load resolved or unresolved cldr data.
	 * Overwrite Cldr.load().
	 */
	Cldr.load = function() {
		Cldr._raw = coreLoad( Cldr, Cldr._raw, arguments );
	};

	/**
	 * Overwrite Cldr.prototype.get().
	 */
	Cldr.prototype.get = function( path ) {
		validatePresence( path, "path" );
		validateTypePath( path, "path" );

		// 1: use bundle as locale on item lookup for simplification purposes, because no other extended subtag is used anyway on bundle parent lookup.
		// 2: during init(), this method is called, but bundle is yet not defined. Use "" as a workaround in this very specific scenario.
		return itemLookup( Cldr, this.attributes && this.attributes.bundle /* 1 */ || "" /* 2 */, path, this.attributes );
	};

	// In case cldr/unresolved is loaded after cldr/event, we trigger its overloads again. Because, .get is overwritten in here.
	if ( Cldr._eventInit ) {
		Cldr._eventInit();
	}

	return Cldr;




}));
});

/**
 * CLDR JavaScript Library v0.5.1
 * http://jquery.com/
 *
 * Copyright 2013 Rafael Xavier de Souza
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-01-21T13:43Z
 */
/*!
 * CLDR JavaScript Library v0.5.1 2019-01-21T13:43Z MIT license © Rafael Xavier
 * http://git.io/h4lmVg
 */

// Cldr
var node_main = cldr;

var globalize = createCommonjsModule(function (module, exports) {
/**
 * Globalize v1.4.2
 *
 * http://github.com/jquery/globalize
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-03-07T13:47Z
 */
/*!
 * Globalize v1.4.2 2019-03-07T13:47Z Released under the MIT license
 * http://git.io/TrdQbw
 */
(function( root, factory ) {

	// UMD returnExports
	{

		// Node, CommonJS
		module.exports = factory( node_main );
	}
}( commonjsGlobal, function( Cldr ) {


/**
 * A toString method that outputs meaningful values for objects or arrays and
 * still performs as fast as a plain string in case variable is string, or as
 * fast as `"" + number` in case variable is a number.
 * Ref: http://jsperf.com/my-stringify
 */
var toString = function( variable ) {
	return typeof variable === "string" ? variable : ( typeof variable === "number" ? "" +
		variable : JSON.stringify( variable ) );
};




/**
 * formatMessage( message, data )
 *
 * @message [String] A message with optional {vars} to be replaced.
 *
 * @data [Array or JSON] Object with replacing-variables content.
 *
 * Return the formatted message. For example:
 *
 * - formatMessage( "{0} second", [ 1 ] ); // 1 second
 *
 * - formatMessage( "{0}/{1}", ["m", "s"] ); // m/s
 *
 * - formatMessage( "{name} <{email}>", {
 *     name: "Foo",
 *     email: "bar@baz.qux"
 *   }); // Foo <bar@baz.qux>
 */
var formatMessage = function( message, data ) {

	// Replace {attribute}'s
	message = message.replace( /{[0-9a-zA-Z-_. ]+}/g, function( name ) {
		name = name.replace( /^{([^}]*)}$/, "$1" );
		return toString( data[ name ] );
	});

	return message;
};




var objectExtend = function() {
	var destination = arguments[ 0 ],
		sources = [].slice.call( arguments, 1 );

	sources.forEach(function( source ) {
		var prop;
		for ( prop in source ) {
			destination[ prop ] = source[ prop ];
		}
	});

	return destination;
};




var createError = function( code, message, attributes ) {
	var error;

	message = code + ( message ? ": " + formatMessage( message, attributes ) : "" );
	error = new Error( message );
	error.code = code;

	objectExtend( error, attributes );

	return error;
};




var runtimeStringify = function( args ) {
	return JSON.stringify( args, function( key, value ) {
		if ( value && value.runtimeKey ) {
			return value.runtimeKey;
		}
		return value;
	} );
};




// Based on http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery
var stringHash = function( str ) {
	return [].reduce.call( str, function( hash, i ) {
		var chr = i.charCodeAt( 0 );
		hash = ( ( hash << 5 ) - hash ) + chr;
		return hash | 0;
	}, 0 );
};




var runtimeKey = function( fnName, locale, args, argsStr ) {
	var hash;
	argsStr = argsStr || runtimeStringify( args );
	hash = stringHash( fnName + locale + argsStr );
	return hash > 0 ? "a" + hash : "b" + Math.abs( hash );
};




var functionName = function( fn ) {
	if ( fn.name !== undefined ) {
		return fn.name;
	}

	// fn.name is not supported by IE.
	var matches = /^function\s+([\w\$]+)\s*\(/.exec( fn.toString() );

	if ( matches && matches.length > 0 ) {
		return matches[ 1 ];
	}
};




var runtimeBind = function( args, cldr, fn, runtimeArgs ) {

	var argsStr = runtimeStringify( args ),
		fnName = functionName( fn ),
		locale = cldr.locale;

	// If name of the function is not available, this is most likely due to uglification,
	// which most likely means we are in production, and runtimeBind here is not necessary.
	if ( !fnName ) {
		return fn;
	}

	fn.runtimeKey = runtimeKey( fnName, locale, null, argsStr );

	fn.generatorString = function() {
		return "Globalize(\"" + locale + "\")." + fnName + "(" + argsStr.slice( 1, -1 ) + ")";
	};

	fn.runtimeArgs = runtimeArgs;

	return fn;
};




var validate = function( code, message, check, attributes ) {
	if ( !check ) {
		throw createError( code, message, attributes );
	}
};




var alwaysArray = function( stringOrArray ) {
	return Array.isArray( stringOrArray ) ? stringOrArray : stringOrArray ? [ stringOrArray ] : [];
};




var validateCldr = function( path, value, options ) {
	var skipBoolean;
	options = options || {};

	skipBoolean = alwaysArray( options.skip ).some(function( pathRe ) {
		return pathRe.test( path );
	});

	validate( "E_MISSING_CLDR", "Missing required CLDR content `{path}`.", value || skipBoolean, {
		path: path
	});
};




var validateDefaultLocale = function( value ) {
	validate( "E_DEFAULT_LOCALE_NOT_DEFINED", "Default locale has not been defined.",
		value !== undefined, {} );
};




var validateParameterPresence = function( value, name ) {
	validate( "E_MISSING_PARAMETER", "Missing required parameter `{name}`.",
		value !== undefined, { name: name });
};




/**
 * range( value, name, minimum, maximum )
 *
 * @value [Number].
 *
 * @name [String] name of variable.
 *
 * @minimum [Number]. The lowest valid value, inclusive.
 *
 * @maximum [Number]. The greatest valid value, inclusive.
 */
var validateParameterRange = function( value, name, minimum, maximum ) {
	validate(
		"E_PAR_OUT_OF_RANGE",
		"Parameter `{name}` has value `{value}` out of range [{minimum}, {maximum}].",
		value === undefined || value >= minimum && value <= maximum,
		{
			maximum: maximum,
			minimum: minimum,
			name: name,
			value: value
		}
	);
};




var validateParameterType = function( value, name, check, expected ) {
	validate(
		"E_INVALID_PAR_TYPE",
		"Invalid `{name}` parameter ({value}). {expected} expected.",
		check,
		{
			expected: expected,
			name: name,
			value: value
		}
	);
};




var validateParameterTypeLocale = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || typeof value === "string" || value instanceof Cldr,
		"String or Cldr instance"
	);
};




/**
 * Function inspired by jQuery Core, but reduced to our use case.
 */
var isPlainObject = function( obj ) {
	return obj !== null && "" + obj === "[object Object]";
};




var validateParameterTypePlainObject = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || isPlainObject( value ),
		"Plain Object"
	);
};




var alwaysCldr = function( localeOrCldr ) {
	return localeOrCldr instanceof Cldr ? localeOrCldr : new Cldr( localeOrCldr );
};




// ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&redirectslug=JavaScript%2FGuide%2FRegular_Expressions
var regexpEscape = function( string ) {
	return string.replace( /([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1" );
};




var stringPad = function( str, count, right ) {
	var length;
	if ( typeof str !== "string" ) {
		str = String( str );
	}
	for ( length = str.length; length < count; length += 1 ) {
		str = ( right ? ( str + "0" ) : ( "0" + str ) );
	}
	return str;
};




function validateLikelySubtags( cldr ) {
	cldr.once( "get", validateCldr );
	cldr.get( "supplemental/likelySubtags" );
}

/**
 * [new] Globalize( locale|cldr )
 *
 * @locale [String]
 *
 * @cldr [Cldr instance]
 *
 * Create a Globalize instance.
 */
function Globalize( locale ) {
	if ( !( this instanceof Globalize ) ) {
		return new Globalize( locale );
	}

	validateParameterPresence( locale, "locale" );
	validateParameterTypeLocale( locale, "locale" );

	this.cldr = alwaysCldr( locale );

	validateLikelySubtags( this.cldr );
}

/**
 * Globalize.load( json, ... )
 *
 * @json [JSON]
 *
 * Load resolved or unresolved cldr data.
 * Somewhat equivalent to previous Globalize.addCultureInfo(...).
 */
Globalize.load = function() {

	// validations are delegated to Cldr.load().
	Cldr.load.apply( Cldr, arguments );
};

/**
 * Globalize.locale( [locale|cldr] )
 *
 * @locale [String]
 *
 * @cldr [Cldr instance]
 *
 * Set default Cldr instance if locale or cldr argument is passed.
 *
 * Return the default Cldr instance.
 */
Globalize.locale = function( locale ) {
	validateParameterTypeLocale( locale, "locale" );

	if ( arguments.length ) {
		this.cldr = alwaysCldr( locale );
		validateLikelySubtags( this.cldr );
	}
	return this.cldr;
};

/**
 * Optimization to avoid duplicating some internal functions across modules.
 */
Globalize._alwaysArray = alwaysArray;
Globalize._createError = createError;
Globalize._formatMessage = formatMessage;
Globalize._isPlainObject = isPlainObject;
Globalize._objectExtend = objectExtend;
Globalize._regexpEscape = regexpEscape;
Globalize._runtimeBind = runtimeBind;
Globalize._stringPad = stringPad;
Globalize._validate = validate;
Globalize._validateCldr = validateCldr;
Globalize._validateDefaultLocale = validateDefaultLocale;
Globalize._validateParameterPresence = validateParameterPresence;
Globalize._validateParameterRange = validateParameterRange;
Globalize._validateParameterTypePlainObject = validateParameterTypePlainObject;
Globalize._validateParameterType = validateParameterType;

return Globalize;




}));
});

var numeral = createCommonjsModule(function (module) {
/*! @preserve
 * numeral.js
 * version : 1.5.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function() {

    /************************************
        Variables
    ************************************/

    var numeral,
        VERSION = '1.5.6',
        // internal storage for language config files
        languages = {},
        defaults = {
            currentLanguage: 'en',
            zeroFormat: null,
            nullFormat: null,
            defaultFormat: '0,0'
        },
        options = {
            currentLanguage: defaults.currentLanguage,
            zeroFormat: defaults.zeroFormat,
            nullFormat: defaults.nullFormat,
            defaultFormat: defaults.defaultFormat
        },
        byteSuffixes = {
            bytes: ['B','KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            iec: ['B','KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
        };


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral(number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, maxDecimals, roundingFunction, optionals) {
        var splitValue = value.toString().split('.'),
            minDecimals = maxDecimals - (optionals || 0),
            boundedPrecision,
            optionalsRegExp,
            power,
            output;

        // Use the smallest precision value possible to avoid errors from floating point representation
        if (splitValue.length === 2) {
          boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
        } else {
          boundedPrecision = minDecimals;
        }

        power = Math.pow(10, boundedPrecision);

        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);

        if (optionals > maxDecimals - boundedPrecision) {
            optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral(n, format, roundingFunction) {
        var output;

        if (n._value === 0 && options.zeroFormat !== null) {
            output = options.zeroFormat;
        } else if (n._value === null && options.nullFormat !== null) {
            output = options.nullFormat;
        } else {
            // figure out what kind of format we are dealing with
            if (format.indexOf('$') > -1) {
                output = formatCurrency(n, format, roundingFunction);
            } else if (format.indexOf('%') > -1) {
                output = formatPercentage(n, format, roundingFunction);
            } else if (format.indexOf(':') > -1) {
                output = formatTime(n);
            } else if (format.indexOf('b') > -1 || format.indexOf('ib') > -1) {
                output = formatBytes(n, format, roundingFunction);
            } else if (format.indexOf('o') > -1) {
                output = formatOrdinal(n, format, roundingFunction);
            } else {
                output = formatNumber(n._value, format, roundingFunction);
            }
        }

        return output;
    }

    function formatCurrency(n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[options.currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[options.currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[options.currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[options.currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage(n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);

        if (output.indexOf(')') > -1) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatBytes(n, format, roundingFunction) {
        var output,
            suffixes = format.indexOf('ib') > -1 ? byteSuffixes.iec : byteSuffixes.bytes,
            value = n._value,
            suffix = '',
            power,
            min,
            max;

        // check for space before
        if (format.indexOf(' b') > -1 || format.indexOf(' ib') > -1) {
            suffix = ' ';
            format = format.replace(' ib', '').replace(' b', '');
        } else {
            format = format.replace('ib', '').replace('b', '');
        }

        for (power = 0; power <= suffixes.length; power++) {
            min = Math.pow(1024, power);
            max = Math.pow(1024, power + 1);

            if (value === null || value === 0 || value >= min && value < max) {
                suffix += suffixes[power];

                if (min > 0) {
                    value = value / min;
                }

                break;
            }
        }

        output = formatNumber(value, format, roundingFunction);

        return output + suffix;
    }

    function formatOrdinal(n, format, roundingFunction) {
        var output,
            ordinal = '';

        // check for space before
        if (format.indexOf(' o') > -1) {
            ordinal = ' ';
            format = format.replace(' o', '');
        } else {
            format = format.replace('o', '');
        }

        ordinal += languages[options.currentLanguage].ordinal(n._value);

        output = formatNumber(n._value, format, roundingFunction);

        return output + ordinal;
    }

    function formatTime(n) {
        var hours = Math.floor(n._value / 60 / 60),
            minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));

        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function formatNumber(value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            abs,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        if (value === null) {
            value = 0;
        }

        abs = Math.abs(value);

        // see if we should use parentheses for negative number or if we should prefix with a sign
        // if both are present we default to parentheses
        if (format.indexOf('(') > -1) {
            negP = true;
            format = format.slice(1, -1);
        } else if (format.indexOf('+') > -1) {
            signed = true;
            format = format.replace(/\+/g, '');
        }

        // see if abbreviation is wanted
        if (format.indexOf('a') > -1) {
            // check if abbreviation is specified
            abbrK = format.indexOf('aK') >= 0;
            abbrM = format.indexOf('aM') >= 0;
            abbrB = format.indexOf('aB') >= 0;
            abbrT = format.indexOf('aT') >= 0;
            abbrForce = abbrK || abbrM || abbrB || abbrT;

            // check for space before abbreviation
            if (format.indexOf(' a') > -1) {
                abbr = ' ';
            }

            format = format.replace(new RegExp(abbr + 'a[KMBT]?'), '');

            if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                // trillion
                abbr = abbr + languages[options.currentLanguage].abbreviations.trillion;
                value = value / Math.pow(10, 12);
            } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                // billion
                abbr = abbr + languages[options.currentLanguage].abbreviations.billion;
                value = value / Math.pow(10, 9);
            } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                // million
                abbr = abbr + languages[options.currentLanguage].abbreviations.million;
                value = value / Math.pow(10, 6);
            } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                // thousand
                abbr = abbr + languages[options.currentLanguage].abbreviations.thousand;
                value = value / Math.pow(10, 3);
            }
        }


        if (format.indexOf('[.]') > -1) {
            optDec = true;
            format = format.replace('[.]', '.');
        }

        w = value.toString().split('.')[0];
        precision = format.split('.')[1];
        thousands = format.indexOf(',');

        if (precision) {
            if (precision.indexOf('[') > -1) {
                precision = precision.replace(']', '');
                precision = precision.split('[');
                d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
            } else {
                d = toFixed(value, precision.length, roundingFunction);
            }

            w = d.split('.')[0];

            if (d.indexOf('.') > -1) {
                d = languages[options.currentLanguage].delimiters.decimal + d.split('.')[1];
            } else {
                d = '';
            }

            if (optDec && Number(d.slice(1)) === 0) {
                d = '';
            }
        } else {
            w = toFixed(value, null, roundingFunction);
        }

        // format number
        if (w.indexOf('-') > -1) {
            w = w.slice(1);
            neg = true;
        }

        if (thousands > -1) {
            w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[options.currentLanguage].delimiters.thousands);
        }

        if (format.indexOf('.') === 0) {
            w = '';
        }

        return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((abbr) ? abbr : '') + ((negP && neg) ? ')' : '');
    }


    /************************************
        Unformatting
    ************************************/

    // revert to number
    function unformatNumeral(n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            bytesMultiplier = false,
            power,
            value;

        if (string.indexOf(':') > -1) {
            value = unformatTime(string);
        } else {
            if (string === options.zeroFormat || string === options.nullFormat) {
                value = 0;
            } else {
                if (languages[options.currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g, '').replace(languages[options.currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 1; power <= byteSuffixes.bytes.length; power++) {
                    bytesMultiplier = ((string.indexOf(byteSuffixes.bytes[power]) > -1) || (string.indexOf(byteSuffixes.iec[power]) > -1))? Math.pow(1024, power) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                value = bytesMultiplier ? bytesMultiplier : 1;
                value *= stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1;
                value *= stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1;
                value *= stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1;
                value *= stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1;
                // check for percentage
                value *= string.indexOf('%') > -1 ? 0.01 : 1;
                // check for negative number
                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;
                // remove non numbers
                value *= Number(string.replace(/[^0-9\.]+/g, ''));
                // round if we are talking about bytes
                value = bytesMultiplier ? Math.ceil(value) : value;
            }
        }

        n._value = value;

        return n._value;
    }
    function unformatTime(string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }


    /************************************
        Top Level Functions
    ************************************/

    numeral = function(input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (input === null) {
            input = null;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        } else {
            input = Number(input);
        }

        return new Numeral(input);
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function(obj) {
        return obj instanceof Numeral;
    };


    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function(key, values) {
        if (!key) {
            return options.currentLanguage;
        }

        key = key.toLowerCase();

        if (key && !values) {
            if (!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }

            options.currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };

    numeral.reset = function() {
        for (var property in defaults) {
            options[property] = defaults[property];
        }
    };

    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function(key) {
        if (!key) {
            return languages[options.currentLanguage];
        }

        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }

        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function(number) {
            var b = number % 10;
            return (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function(format) {
        options.zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.nullFormat = function (format) {
        options.nullFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function(format) {
        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    numeral.validate = function(val, culture) {
        var _decimalSep,
            _thousandSep,
            _currSymbol,
            _valArray,
            _abbrObj,
            _thousandRegEx,
            languageData,
            temp;

        //coerce val to string
        if (typeof val !== 'string') {
            val += '';
            if (console.warn) {
                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
            }
        }

        //trim whitespaces from either sides
        val = val.trim();

        //if val is just digits return true
        if ( !! val.match(/^\d+$/)) {
            return true;
        }

        //if val is empty return false
        if (val === '') {
            return false;
        }

        //get the decimal and thousands separator from numeral.languageData
        try {
            //check if the culture is understood by numeral. if not, default it to current language
            languageData = numeral.languageData(culture);
        } catch (e) {
            languageData = numeral.languageData(numeral.language());
        }

        //setup the delimiters and currency symbol based on culture/language
        _currSymbol = languageData.currency.symbol;
        _abbrObj = languageData.abbreviations;
        _decimalSep = languageData.delimiters.decimal;
        if (languageData.delimiters.thousands === '.') {
            _thousandSep = '\\.';
        } else {
            _thousandSep = languageData.delimiters.thousands;
        }

        // validating currency symbol
        temp = val.match(/^[^\d]+/);
        if (temp !== null) {
            val = val.substr(1);
            if (temp[0] !== _currSymbol) {
                return false;
            }
        }

        //validating abbreviation symbol
        temp = val.match(/[^\d]+$/);
        if (temp !== null) {
            val = val.slice(0, -1);
            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                return false;
            }
        }

        _thousandRegEx = new RegExp(_thousandSep + '{2}');

        if (!val.match(/[^\d.,]/g)) {
            _valArray = val.split(_decimalSep);
            if (_valArray.length > 2) {
                return false;
            } else {
                if (_valArray.length < 2) {
                    return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
                } else {
                    if (_valArray[0].length === 1) {
                        return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    } else {
                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    }
                }
            }
        }

        return false;
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    // Production steps of ECMA-262, Edition 5, 15.4.4.21
    // Reference: http://es5.github.io/#x15.4.4.21
    if (!Array.prototype.reduce) {
        Array.prototype.reduce = function(callback /*, initialValue*/) {
            if (this === null) {
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }

            if (typeof callback !== 'function') {
                throw new TypeError(callback + ' is not a function');
            }

            var t = Object(this), len = t.length >>> 0, k = 0, value;

            if (arguments.length === 2) {
                value = arguments[1];
            } else {
                while (k < len && !(k in t)) {
                    k++;
                }

                if (k >= len) {
                    throw new TypeError('Reduce of empty array with no initial value');
                }

                value = t[k++];
            }
            for (; k < len; k++) {
                if (k in t) {
                    value = callback(value, t[k], k, t);
                }
            }
            return value;
        };
    }

    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function(prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
            return mp > mn ? mp : mn;
        }, -Infinity);
    }


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone: function() {
            return numeral(this);
        },

        format: function (inputString, roundingFunction) {
            return formatNumeral(this,
                inputString ? inputString : options.defaultFormat,
                roundingFunction !== undefined ? roundingFunction : Math.round
            );
        },

        unformat: function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') {
                return inputString;
            }

            return unformatNumeral(this, inputString ? inputString : options.defaultFormat);
        },

        value: function() {
            return this._value;
        },

        valueOf: function() {
            return this._value;
        },

        set: function(value) {
            this._value = Number(value);
            return this;
        },

        add: function(value) {
            var corrFactor = correctionFactor.call(null, this._value, value);

            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract: function(value) {
            var corrFactor = correctionFactor.call(null, this._value, value);

            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
            return this;
        },

        multiply: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);
            return this;
        },

        difference: function(value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (module.exports) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }
}).call(commonjsGlobal);
});

var number = createCommonjsModule(function (module, exports) {
/**
 * Globalize v1.4.2
 *
 * http://github.com/jquery/globalize
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-03-07T13:47Z
 */
/*!
 * Globalize v1.4.2 2019-03-07T13:47Z Released under the MIT license
 * http://git.io/TrdQbw
 */
(function( root, factory ) {

	// UMD returnExports
	{

		// Node, CommonJS
		module.exports = factory( node_main, globalize );
	}
}(commonjsGlobal, function( Cldr, Globalize ) {

var createError = Globalize._createError,
	regexpEscape = Globalize._regexpEscape,
	runtimeBind = Globalize._runtimeBind,
	stringPad = Globalize._stringPad,
	validateCldr = Globalize._validateCldr,
	validateDefaultLocale = Globalize._validateDefaultLocale,
	validateParameterPresence = Globalize._validateParameterPresence,
	validateParameterRange = Globalize._validateParameterRange,
	validateParameterType = Globalize._validateParameterType,
	validateParameterTypePlainObject = Globalize._validateParameterTypePlainObject;


var createErrorUnsupportedFeature = function( feature ) {
	return createError( "E_UNSUPPORTED", "Unsupported {feature}.", {
		feature: feature
	});
};




var validateParameterTypeNumber = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || typeof value === "number",
		"Number"
	);
};




var validateParameterTypeString = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || typeof value === "string",
		"a string"
	);
};




/**
 * EBNF representation:
 *
 * compact_pattern_re =       prefix?
 *                            number_pattern_re
 *                            suffix?
 *
 * number_pattern_re =        0+
 *
 * Regexp groups:
 *
 *  0: compact_pattern_re
 *  1: prefix
 *  2: number_pattern_re (the number pattern to use in compact mode)
 *  3: suffix
 */
var numberCompactPatternRe = ( /^([^0]*)(0+)([^0]*)$/ );




/**
 * goupingSeparator( number, primaryGroupingSize, secondaryGroupingSize )
 *
 * @number [Number].
 *
 * @primaryGroupingSize [Number]
 *
 * @secondaryGroupingSize [Number]
 *
 * Return the formatted number with group separator.
 */
var numberFormatGroupingSeparator = function( number, primaryGroupingSize, secondaryGroupingSize ) {
	var index,
		currentGroupingSize = primaryGroupingSize,
		ret = "",
		sep = ",",
		switchToSecondary = secondaryGroupingSize ? true : false;

	number = String( number ).split( "." );
	index = number[ 0 ].length;

	while ( index > currentGroupingSize ) {
		ret = number[ 0 ].slice( index - currentGroupingSize, index ) +
			( ret.length ? sep : "" ) + ret;
		index -= currentGroupingSize;
		if ( switchToSecondary ) {
			currentGroupingSize = secondaryGroupingSize;
			switchToSecondary = false;
		}
	}

	number[ 0 ] = number[ 0 ].slice( 0, index ) + ( ret.length ? sep : "" ) + ret;
	return number.join( "." );
};




/**
 * integerFractionDigits( number, minimumIntegerDigits, minimumFractionDigits,
 * maximumFractionDigits, round, roundIncrement )
 *
 * @number [Number]
 *
 * @minimumIntegerDigits [Number]
 *
 * @minimumFractionDigits [Number]
 *
 * @maximumFractionDigits [Number]
 *
 * @round [Function]
 *
 * @roundIncrement [Function]
 *
 * Return the formatted integer and fraction digits.
 */
var numberFormatIntegerFractionDigits = function( number, minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, round,
	roundIncrement ) {

	// Fraction
	if ( maximumFractionDigits ) {

		// Rounding
		if ( roundIncrement ) {
			number = round( number, roundIncrement );

		// Maximum fraction digits
		} else {
			number = round( number, { exponent: -maximumFractionDigits } );
		}

	} else {
		number = round( number );
	}

	number = String( number );

	// Maximum integer digits (post string phase)
	if ( maximumFractionDigits && /e-/.test( number ) ) {

		// Use toFixed( maximumFractionDigits ) to make sure small numbers like 1e-7 are
		// displayed using plain digits instead of scientific notation.
		// 1: Remove leading decimal zeros.
		// 2: Remove leading decimal separator.
		// Note: String() is still preferred so it doesn't mess up with a number precision
		// unnecessarily, e.g., (123456789.123).toFixed(10) === "123456789.1229999959",
		// String(123456789.123) === "123456789.123".
		number = ( +number ).toFixed( maximumFractionDigits )
			.replace( /0+$/, "" ) /* 1 */
			.replace( /\.$/, "" ) /* 2 */;
	}

	// Minimum fraction digits (post string phase)
	if ( minimumFractionDigits ) {
		number = number.split( "." );
		number[ 1 ] = stringPad( number[ 1 ] || "", minimumFractionDigits, true );
		number = number.join( "." );
	}

	// Minimum integer digits
	if ( minimumIntegerDigits ) {
		number = number.split( "." );
		number[ 0 ] = stringPad( number[ 0 ], minimumIntegerDigits );
		number = number.join( "." );
	}

	return number;
};




/**
 * toPrecision( number, precision, round )
 *
 * @number (Number)
 *
 * @precision (Number) significant figures precision (not decimal precision).
 *
 * @round (Function)
 *
 * Return number.toPrecision( precision ) using the given round function.
 */
var numberToPrecision = function( number, precision, round ) {
	var roundOrder;

	roundOrder = Math.ceil( Math.log( Math.abs( number ) ) / Math.log( 10 ) );
	roundOrder -= precision;

	return round( number, { exponent: roundOrder } );
};




/**
 * toPrecision( number, minimumSignificantDigits, maximumSignificantDigits, round )
 *
 * @number [Number]
 *
 * @minimumSignificantDigits [Number]
 *
 * @maximumSignificantDigits [Number]
 *
 * @round [Function]
 *
 * Return the formatted significant digits number.
 */
var numberFormatSignificantDigits = function( number, minimumSignificantDigits, maximumSignificantDigits, round ) {
	var atMinimum, atMaximum;

	// Sanity check.
	if ( minimumSignificantDigits > maximumSignificantDigits ) {
		maximumSignificantDigits = minimumSignificantDigits;
	}

	atMinimum = numberToPrecision( number, minimumSignificantDigits, round );
	atMaximum = numberToPrecision( number, maximumSignificantDigits, round );

	// Use atMaximum only if it has more significant digits than atMinimum.
	number = +atMinimum === +atMaximum ? atMinimum : atMaximum;

	// Expand integer numbers, eg. 123e5 to 12300.
	number = ( +number ).toString( 10 );

	if ( ( /e/ ).test( number ) ) {
		throw createErrorUnsupportedFeature({
			feature: "integers out of (1e21, 1e-7)"
		});
	}

	// Add trailing zeros if necessary.
	if ( minimumSignificantDigits - number.replace( /^0+|\./g, "" ).length > 0 ) {
		number = number.split( "." );
		number[ 1 ] = stringPad( number[ 1 ] || "", minimumSignificantDigits - number[ 0 ].replace( /^0+/, "" ).length, true );
		number = number.join( "." );
	}

	return number;
};




/**
 * EBNF representation:
 *
 * number_pattern_re =        prefix?
 *                            padding?
 *                            (integer_fraction_pattern | significant_pattern)
 *                            scientific_notation?
 *                            suffix?
 *
 * prefix =                   non_number_stuff
 *
 * padding =                  "*" regexp(.)
 *
 * integer_fraction_pattern = integer_pattern
 *                            fraction_pattern?
 *
 * integer_pattern =          regexp([#,]*[0,]*0+)
 *
 * fraction_pattern =         "." regexp(0*[0-9]*#*)
 *
 * significant_pattern =      regexp([#,]*@+#*)
 *
 * scientific_notation =      regexp(E\+?0+)
 *
 * suffix =                   non_number_stuff
 *
 * non_number_stuff =         regexp(('[^']+'|''|[^*#@0,.E])*)
 *
 *
 * Regexp groups:
 *
 *  0: number_pattern_re
 *  1: prefix
 *  2: -
 *  3: -
 *  4: padding
 *  5: (integer_fraction_pattern | significant_pattern)
 *  6: integer_fraction_pattern
 *  7: integer_pattern
 *  8: fraction_pattern
 *  9: significant_pattern
 * 10: scientific_notation
 * 11: suffix
 * 12: -
 */
var numberPatternRe = ( /^(('([^']|'')*'|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/ );




/**
 * removeLiteralQuotes( string )
 *
 * Return:
 * - `` if input string is `''`.
 * - `o'clock` if input string is `'o''clock'`.
 * - `foo` if input string is `foo`, i.e., return the same value in case it isn't a single-quoted
 *   string.
 */
var removeLiteralQuotes = function( string ) {
	if ( string[ 0 ] + string[ string.length - 1 ] !== "''" ) {
		return string;
	}
	if ( string === "''" ) {
		return "";
	}
	return string.replace( /''/g, "'" ).slice( 1, -1 );
};




/**
 * format( number, properties )
 *
 * @number [Number].
 *
 * @properties [Object] Output of number/format-properties.
 *
 * Return the formatted number.
 * ref: http://www.unicode.org/reports/tr35/tr35-numbers.html
 */
var numberFormat = function( number, properties, pluralGenerator ) {
	var compactMap, infinitySymbol, maximumFractionDigits, maximumSignificantDigits,
	minimumFractionDigits, minimumIntegerDigits, minimumSignificantDigits, nanSymbol, nuDigitsMap,
	padding, prefix, primaryGroupingSize, pattern, ret, round, roundIncrement,
	secondaryGroupingSize, suffix, symbolMap;

	padding = properties[ 1 ];
	minimumIntegerDigits = properties[ 2 ];
	minimumFractionDigits = properties[ 3 ];
	maximumFractionDigits = properties[ 4 ];
	minimumSignificantDigits = properties[ 5 ];
	maximumSignificantDigits = properties[ 6 ];
	roundIncrement = properties[ 7 ];
	primaryGroupingSize = properties[ 8 ];
	secondaryGroupingSize = properties[ 9 ];
	round = properties[ 15 ];
	infinitySymbol = properties[ 16 ];
	nanSymbol = properties[ 17 ];
	symbolMap = properties[ 18 ];
	nuDigitsMap = properties[ 19 ];
	compactMap = properties[ 20 ];

	// NaN
	if ( isNaN( number ) ) {
		return nanSymbol;
	}

	if ( number < 0 ) {
		pattern = properties[ 12 ];
		prefix = properties[ 13 ];
		suffix = properties[ 14 ];
	} else {
		pattern = properties[ 11 ];
		prefix = properties[ 0 ];
		suffix = properties[ 10 ];
	}

	// Infinity
	if ( !isFinite( number ) ) {
		return prefix + infinitySymbol + suffix;
	}

	// Percent
	if ( pattern.indexOf( "%" ) !== -1 ) {
		number *= 100;

	// Per mille
	} else if ( pattern.indexOf( "\u2030" ) !== -1 ) {
		number *= 1000;
	}

	var compactPattern, compactDigits, compactProperties, divisor, numberExponent, pluralForm;

	// Compact mode: initial number digit processing
	if ( compactMap ) {
		numberExponent = Math.abs( Math.floor( number ) ).toString().length - 1;
		numberExponent = Math.min( numberExponent, compactMap.maxExponent );

		// Use default plural form to perform initial decimal shift
		if ( numberExponent >= 3 ) {
			compactPattern = compactMap[ numberExponent ] && compactMap[ numberExponent ].other;
		}

		if ( compactPattern === "0" ) {
			compactPattern = null;
		} else if ( compactPattern ) {
			compactDigits = compactPattern.split( "0" ).length - 1;
			divisor = numberExponent - ( compactDigits - 1 );
			number = number / Math.pow( 10, divisor );
		}
	}

	// Significant digit format
	if ( !isNaN( minimumSignificantDigits * maximumSignificantDigits ) ) {
		number = numberFormatSignificantDigits( number, minimumSignificantDigits,
			maximumSignificantDigits, round );

	// Integer and fractional format
	} else {
		number = numberFormatIntegerFractionDigits( number, minimumIntegerDigits,
			minimumFractionDigits, maximumFractionDigits, round, roundIncrement );
	}

	// Compact mode: apply formatting
	if ( compactMap && compactPattern ) {

		// Get plural form after possible roundings
		pluralForm = pluralGenerator ? pluralGenerator( +number ) : "other";

		compactPattern = compactMap[ numberExponent ][ pluralForm ] || compactPattern;
		compactProperties = compactPattern.match( numberCompactPatternRe );

		// update prefix/suffix with compact prefix/suffix
		prefix += compactProperties[ 1 ];
		suffix = compactProperties[ 3 ] + suffix;
	}

	// Remove the possible number minus sign
	number = number.replace( /^-/, "" );

	// Grouping separators
	if ( primaryGroupingSize ) {
		number = numberFormatGroupingSeparator( number, primaryGroupingSize,
			secondaryGroupingSize );
	}

	ret = prefix;

	ret += number;

	// Scientific notation
	// TODO implement here

	// Padding/'([^']|'')+'|''|[.,\-+E%\u2030]/g
	// TODO implement here

	ret += suffix;

	return ret.replace( /('([^']|'')+'|'')|./g, function( character, literal ) {

		// Literals
		if ( literal ) {
			return removeLiteralQuotes( literal );
		}

		// Symbols
		character = character.replace( /[.,\-+E%\u2030]/, function( symbol ) {
			return symbolMap[ symbol ];
		});

		// Numbering system
		if ( nuDigitsMap ) {
			character = character.replace( /[0-9]/, function( digit ) {
				return nuDigitsMap[ +digit ];
			});
		}

		return character;
	});
};




var numberFormatterFn = function( properties, pluralGenerator ) {
	return function numberFormatter( value ) {
		validateParameterPresence( value, "value" );
		validateParameterTypeNumber( value, "value" );

		return numberFormat( value, properties, pluralGenerator );
	};
};




/**
 * NumberingSystem( cldr )
 *
 * - http://www.unicode.org/reports/tr35/tr35-numbers.html#otherNumberingSystems
 * - http://cldr.unicode.org/index/bcp47-extension
 * - http://www.unicode.org/reports/tr35/#u_Extension
 */
var numberNumberingSystem = function( cldr ) {
	var nu = cldr.attributes[ "u-nu" ];

	if ( nu ) {
		if ( nu === "traditio" ) {
			nu = "traditional";
		}
		if ( [ "native", "traditional", "finance" ].indexOf( nu ) !== -1 ) {

			// Unicode locale extension `u-nu` is set using either (native, traditional or
			// finance). So, lookup the respective locale's numberingSystem and return it.
			return cldr.main([ "numbers/otherNumberingSystems", nu ]);
		}

		// Unicode locale extension `u-nu` is set with an explicit numberingSystem. Return it.
		return nu;
	}

	// Return the default numberingSystem.
	return cldr.main( "numbers/defaultNumberingSystem" );
};




/**
 * Compact( name, cldr )
 *
 * @compactType [String] Compact mode, `short` or `long`.
 *
 * @cldr [Cldr instance].
 *
 * Return the localized compact map for the given compact mode.
 */
var numberCompact = function( compactType, cldr ) {
	var maxExponent = 0;

	var object = cldr.main([
		"numbers/decimalFormats-numberSystem-" + numberNumberingSystem( cldr ),
		compactType,
		"decimalFormat"
	]);

	object = Object.keys( object ).reduce(function( newObject, compactKey ) {
		var numberExponent = compactKey.split( "0" ).length - 1;
		var pluralForm = compactKey.split( "-" )[ 2 ];
		newObject[ numberExponent ] = newObject[ numberExponent ] || {};
		newObject[ numberExponent ][ pluralForm ] = object[ compactKey ];
		maxExponent = Math.max( numberExponent, maxExponent );
		return newObject;
	}, {});

	object.maxExponent = maxExponent;

	return object;
};




/**
 * nuMap( cldr )
 *
 * @cldr [Cldr instance].
 *
 * Return digits map if numbering system is different than `latn`.
 */
var numberNumberingSystemDigitsMap = function( cldr ) {
	var aux,
		nu = numberNumberingSystem( cldr );

	if ( nu === "latn" ) {
		return;
	}

	aux = cldr.supplemental([ "numberingSystems", nu ]);

	if ( aux._type !== "numeric" ) {
		throw createErrorUnsupportedFeature( "`" + aux._type + "` numbering system" );
	}

	return aux._digits;
};




/**
 * format( number, pattern )
 *
 * @number [Number].
 *
 * @pattern [String] raw pattern for numbers.
 *
 * Return the formatted number.
 * ref: http://www.unicode.org/reports/tr35/tr35-numbers.html
 */
var numberPatternProperties = function( pattern ) {
	var aux1, aux2, fractionPattern, integerFractionOrSignificantPattern, integerPattern,
		maximumFractionDigits, maximumSignificantDigits, minimumFractionDigits,
		minimumIntegerDigits, minimumSignificantDigits, padding, prefix, primaryGroupingSize,
		roundIncrement, scientificNotation, secondaryGroupingSize, significantPattern, suffix;

	pattern = pattern.match( numberPatternRe );
	if ( !pattern ) {
		throw new Error( "Invalid pattern: " + pattern );
	}

	prefix = pattern[ 1 ];
	padding = pattern[ 4 ];
	integerFractionOrSignificantPattern = pattern[ 5 ];
	significantPattern = pattern[ 9 ];
	scientificNotation = pattern[ 10 ];
	suffix = pattern[ 11 ];

	// Significant digit format
	if ( significantPattern ) {
		significantPattern.replace( /(@+)(#*)/, function( match, minimumSignificantDigitsMatch, maximumSignificantDigitsMatch ) {
			minimumSignificantDigits = minimumSignificantDigitsMatch.length;
			maximumSignificantDigits = minimumSignificantDigits +
				maximumSignificantDigitsMatch.length;
		});

	// Integer and fractional format
	} else {
		fractionPattern = pattern[ 8 ];
		integerPattern = pattern[ 7 ];

		if ( fractionPattern ) {

			// Minimum fraction digits, and rounding.
			fractionPattern.replace( /[0-9]+/, function( match ) {
				minimumFractionDigits = match;
			});
			if ( minimumFractionDigits ) {
				roundIncrement = +( "0." + minimumFractionDigits );
				minimumFractionDigits = minimumFractionDigits.length;
			} else {
				minimumFractionDigits = 0;
			}

			// Maximum fraction digits
			// 1: ignore decimal character
			maximumFractionDigits = fractionPattern.length - 1 /* 1 */;
		} else {
			minimumFractionDigits = 0;
			maximumFractionDigits = 0;
		}

		// Minimum integer digits
		integerPattern.replace( /0+$/, function( match ) {
			minimumIntegerDigits = match.length;
		});
	}

	// Scientific notation
	if ( scientificNotation ) {
		throw createErrorUnsupportedFeature({
			feature: "scientific notation (not implemented)"
		});
	}

	// Padding
	if ( padding ) {
		throw createErrorUnsupportedFeature({
			feature: "padding (not implemented)"
		});
	}

	// Grouping
	if ( ( aux1 = integerFractionOrSignificantPattern.lastIndexOf( "," ) ) !== -1 ) {

		// Primary grouping size is the interval between the last group separator and the end of
		// the integer (or the end of the significant pattern).
		aux2 = integerFractionOrSignificantPattern.split( "." )[ 0 ];
		primaryGroupingSize = aux2.length - aux1 - 1;

		// Secondary grouping size is the interval between the last two group separators.
		if ( ( aux2 = integerFractionOrSignificantPattern.lastIndexOf( ",", aux1 - 1 ) ) !== -1 ) {
			secondaryGroupingSize = aux1 - 1 - aux2;
		}
	}

	// Return:
	//  0: @prefix String
	//  1: @padding Array [ <character>, <count> ] TODO
	//  2: @minimumIntegerDigits non-negative integer Number value indicating the minimum integer
	//        digits to be used. Numbers will be padded with leading zeroes if necessary.
	//  3: @minimumFractionDigits and
	//  4: @maximumFractionDigits are non-negative integer Number values indicating the minimum and
	//        maximum fraction digits to be used. Numbers will be rounded or padded with trailing
	//        zeroes if necessary.
	//  5: @minimumSignificantDigits and
	//  6: @maximumSignificantDigits are positive integer Number values indicating the minimum and
	//        maximum fraction digits to be shown. Either none or both of these properties are
	//        present; if they are, they override minimum and maximum integer and fraction digits
	//        – the formatter uses however many integer and fraction digits are required to display
	//        the specified number of significant digits.
	//  7: @roundIncrement Decimal round increment or null
	//  8: @primaryGroupingSize
	//  9: @secondaryGroupingSize
	// 10: @suffix String
	return [
		prefix,
		padding,
		minimumIntegerDigits,
		minimumFractionDigits,
		maximumFractionDigits,
		minimumSignificantDigits,
		maximumSignificantDigits,
		roundIncrement,
		primaryGroupingSize,
		secondaryGroupingSize,
		suffix
	];
};




/**
 * Symbol( name, cldr )
 *
 * @name [String] Symbol name.
 *
 * @cldr [Cldr instance].
 *
 * Return the localized symbol given its name.
 */
var numberSymbol = function( name, cldr ) {
	return cldr.main([
		"numbers/symbols-numberSystem-" + numberNumberingSystem( cldr ),
		name
	]);
};




var numberSymbolName = {
	".": "decimal",
	",": "group",
	"%": "percentSign",
	"+": "plusSign",
	"-": "minusSign",
	"E": "exponential",
	"\u2030": "perMille"
};




/**
 * symbolMap( cldr )
 *
 * @cldr [Cldr instance].
 *
 * Return the (localized symbol, pattern symbol) key value pair, eg. {
 *   ".": "٫",
 *   ",": "٬",
 *   "%": "٪",
 *   ...
 * };
 */
var numberSymbolMap = function( cldr ) {
	var symbol,
		symbolMap = {};

	for ( symbol in numberSymbolName ) {
		symbolMap[ symbol ] = numberSymbol( numberSymbolName[ symbol ], cldr );
	}

	return symbolMap;
};




var numberTruncate = function( value ) {
	if ( isNaN( value ) ) {
		return NaN;
	}
	return Math[ value < 0 ? "ceil" : "floor" ]( value );
};




/**
 * round( method )
 *
 * @method [String] with either "round", "ceil", "floor", or "truncate".
 *
 * Return function( value, incrementOrExp ):
 *
 *   @value [Number] eg. 123.45.
 *
 *   @incrementOrExp [Number] optional, eg. 0.1; or
 *     [Object] Either { increment: <value> } or { exponent: <value> }
 *
 *   Return the rounded number, eg:
 *   - round( "round" )( 123.45 ): 123;
 *   - round( "ceil" )( 123.45 ): 124;
 *   - round( "floor" )( 123.45 ): 123;
 *   - round( "truncate" )( 123.45 ): 123;
 *   - round( "round" )( 123.45, 0.1 ): 123.5;
 *   - round( "round" )( 123.45, 10 ): 120;
 *
 *   Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
 *   Ref: #376
 */
var numberRound = function( method ) {
	method = method || "round";
	method = method === "truncate" ? numberTruncate : Math[ method ];

	return function( value, incrementOrExp ) {
		var exp, increment;

		value = +value;

		// If the value is not a number, return NaN.
		if ( isNaN( value ) ) {
			return NaN;
		}

		// Exponent given.
		if ( typeof incrementOrExp === "object" && incrementOrExp.exponent ) {
			exp = +incrementOrExp.exponent;
			increment = 1;

			if ( exp === 0 ) {
				return method( value );
			}

			// If the exp is not an integer, return NaN.
			if ( !( typeof exp === "number" && exp % 1 === 0 ) ) {
				return NaN;
			}

		// Increment given.
		} else {
			increment = +incrementOrExp || 1;

			if ( increment === 1 ) {
				return method( value );
			}

			// If the increment is not a number, return NaN.
			if ( isNaN( increment ) ) {
				return NaN;
			}

			increment = increment.toExponential().split( "e" );
			exp = +increment[ 1 ];
			increment = +increment[ 0 ];
		}

		// Shift & Round
		value = value.toString().split( "e" );
		value[ 0 ] = +value[ 0 ] / increment;
		value[ 1 ] = value[ 1 ] ? ( +value[ 1 ] - exp ) : -exp;
		value = method( +( value[ 0 ] + "e" + value[ 1 ] ) );

		// Shift back
		value = value.toString().split( "e" );
		value[ 0 ] = +value[ 0 ] * increment;
		value[ 1 ] = value[ 1 ] ? ( +value[ 1 ] + exp ) : exp;
		return +( value[ 0 ] + "e" + value[ 1 ] );
	};
};




/**
 * formatProperties( pattern, cldr [, options] )
 *
 * @pattern [String] raw pattern for numbers.
 *
 * @cldr [Cldr instance].
 *
 * @options [Object]:
 * - minimumIntegerDigits [Number]
 * - minimumFractionDigits, maximumFractionDigits [Number]
 * - minimumSignificantDigits, maximumSignificantDigits [Number]
 * - round [String] "ceil", "floor", "round" (default), or "truncate".
 * - useGrouping [Boolean] default true.
 *
 * Return the processed properties that will be used in number/format.
 * ref: http://www.unicode.org/reports/tr35/tr35-numbers.html
 */
var numberFormatProperties = function( pattern, cldr, options ) {
	var negativePattern, negativePrefix, negativeProperties, negativeSuffix, positivePattern,
		roundFn, properties;

	function getOptions( attribute, propertyIndex ) {
		if ( attribute in options ) {
			properties[ propertyIndex ] = options[ attribute ];
		}
	}

	options = options || {};
	pattern = pattern.split( ";" );

	positivePattern = pattern[ 0 ];

	negativePattern = pattern[ 1 ] || "-" + positivePattern;
	negativeProperties = numberPatternProperties( negativePattern );
	negativePrefix = negativeProperties[ 0 ];
	negativeSuffix = negativeProperties[ 10 ];

	// Have runtime code to refer to numberRound() instead of including it explicitly.
	roundFn = numberRound( options.round );
	roundFn.generatorString = function() {
		return "numberRound(" + ( options.round ? "\"" + options.round + "\"" : "" ) + ")";
	};

	properties = numberPatternProperties( positivePattern ).concat([
		positivePattern,
		negativePrefix + positivePattern + negativeSuffix,
		negativePrefix,
		negativeSuffix,
		roundFn,
		numberSymbol( "infinity", cldr ),
		numberSymbol( "nan", cldr ),
		numberSymbolMap( cldr ),
		numberNumberingSystemDigitsMap( cldr )
	]);

	if ( options.compact ) {

		// The compact digits number pattern is always `0+`, so override the following properties.
		// Note: minimumIntegerDigits would actually range from `0` to `000` based on the scale of
		// the value to be formatted, though we're always using 1 as a simplification, because the
		// number won't be zero-padded since we chose the right format based on the scale, i.e.,
		// we'd never see something like `003M` anyway.
		properties[ 2 ] = 1; // minimumIntegerDigits
		properties[ 3 ] = 0; // minimumFractionDigits
		properties[ 4 ] = 0; // maximumFractionDigits
		properties[ 5 ] = // minimumSignificantDigits &
			properties[ 6 ] = undefined ; // maximumSignificantDigits

		properties[20] = numberCompact( options.compact, cldr );
	}

	getOptions( "minimumIntegerDigits", 2 );
	getOptions( "minimumFractionDigits", 3 );
	getOptions( "maximumFractionDigits", 4 );
	getOptions( "minimumSignificantDigits", 5 );
	getOptions( "maximumSignificantDigits", 6 );

	// Grouping separators
	if ( options.useGrouping === false ) {
		properties[ 8 ] = null;
	}

	// Normalize number of digits if only one of either minimumFractionDigits or
	// maximumFractionDigits is passed in as an option
	if ( "minimumFractionDigits" in options && !( "maximumFractionDigits" in options ) ) {

		// maximumFractionDigits = Math.max( minimumFractionDigits, maximumFractionDigits );
		properties[ 4 ] = Math.max( properties[ 3 ], properties[ 4 ] );
	} else if ( !( "minimumFractionDigits" in options ) &&
			"maximumFractionDigits" in options ) {

		// minimumFractionDigits = Math.min( minimumFractionDigits, maximumFractionDigits );
		properties[ 3 ] = Math.min( properties[ 3 ], properties[ 4 ] );
	}

	// Return:
	// 0-10: see number/pattern-properties.
	// 11: @positivePattern [String] Positive pattern.
	// 12: @negativePattern [String] Negative pattern.
	// 13: @negativePrefix [String] Negative prefix.
	// 14: @negativeSuffix [String] Negative suffix.
	// 15: @round [Function] Round function.
	// 16: @infinitySymbol [String] Infinity symbol.
	// 17: @nanSymbol [String] NaN symbol.
	// 18: @symbolMap [Object] A bunch of other symbols.
	// 19: @nuDigitsMap [Array] Digits map if numbering system is different than `latn`.
	// 20: @compactMap [Object] Map of per-digit-count format patterns for specified compact mode.
	return properties;
};




/**
 * Generated by:
 *
 * var regenerate = require( "regenerate" );
 * var formatSymbols = require( * "unicode-8.0.0/General_Category/Format/symbols" );
 * regenerate().add( formatSymbols ).toString();
 *
 * https://github.com/mathiasbynens/regenerate
 * https://github.com/mathiasbynens/unicode-8.0.0
 */
var regexpCfG = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804\uDCBD|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/g;




/**
 * Generated by:
 *
 * var regenerate = require( "regenerate" );
 * var dashSymbols = require( * "unicode-8.0.0/General_Category/Dash_Punctuation/symbols" );
 * regenerate().add( dashSymbols ).toString();
 *
 * https://github.com/mathiasbynens/regenerate
 * https://github.com/mathiasbynens/unicode-8.0.0
 *
 * NOTE: In addition to [:dash:],  the below includes MINUS SIGN U+2212.
 */
var regexpDashG = /[\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D\u2212]/g;




/**
 * Generated by:
 *
 * var regenerate = require( "regenerate" );
 * var spaceSeparatorSymbols = require( "unicode-8.0.0/General_Category/Space_Separator/symbols" );
 * regenerate().add( spaceSeparatorSymbols ).toString();
 *
 * https://github.com/mathiasbynens/regenerate
 * https://github.com/mathiasbynens/unicode-8.0.0
 */
var regexpZsG = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/g;




/**
 * Loose Matching:
 * - Ignore all format characters, which includes RLM, LRM or ALM used to control BIDI
 *   formatting.
 * - Map all characters in [:Zs:] to U+0020 SPACE;
 * - Map all characters in [:Dash:] to U+002D HYPHEN-MINUS;
 */
var looseMatching = function( value ) {
	return value
		.replace( regexpCfG, "" )
		.replace( regexpDashG, "-" )
		.replace( regexpZsG, " " );
};




/**
 * parse( value, properties )
 *
 * @value [String].
 *
 * @properties [Object] Parser properties is a reduced pre-processed cldr
 * data set returned by numberParserProperties().
 *
 * Return the parsed Number (including Infinity) or NaN when value is invalid.
 * ref: http://www.unicode.org/reports/tr35/tr35-numbers.html
 */
var numberParse = function( value, properties ) {
	var grammar, invertedNuDigitsMap, invertedSymbolMap, negative, number, prefix, prefixNSuffix,
		suffix, tokenizer, valid;

	// Grammar:
	// - Value <=           NaN | PositiveNumber | NegativeNumber
	// - PositiveNumber <=  PositivePrefix NumberOrInf PositiveSufix
	// - NegativeNumber <=  NegativePrefix NumberOrInf
	// - NumberOrInf <=     Number | Inf
	grammar = [
		[ "nan" ],
		[ "prefix", "infinity", "suffix" ],
		[ "prefix", "number", "suffix" ],
		[ "negativePrefix", "infinity", "negativeSuffix" ],
		[ "negativePrefix", "number", "negativeSuffix" ]
	];

	invertedSymbolMap = properties[ 0 ];
	invertedNuDigitsMap = properties[ 1 ] || {};
	tokenizer = properties[ 2 ];

	value = looseMatching( value );

	function parse( type ) {
		return function( lexeme ) {

			// Reverse localized symbols and numbering system.
			lexeme = lexeme.split( "" ).map(function( character ) {
				return invertedSymbolMap[ character ] ||
					invertedNuDigitsMap[ character ] ||
					character;
			}).join( "" );

			switch ( type ) {
				case "infinity":
					number = Infinity;
					break;

				case "nan":
					number = NaN;
					break;

				case "number":

					// Remove grouping separators.
					lexeme = lexeme.replace( /,/g, "" );

					number = +lexeme;
					break;

				case "prefix":
				case "negativePrefix":
					prefix = lexeme;
					break;

				case "suffix":
					suffix = lexeme;
					break;

				case "negativeSuffix":
					suffix = lexeme;
					negative = true;
					break;

				// This should never be reached.
				default:
					throw new Error( "Internal error" );
			}
			return "";
		};
	}

	function tokenizeNParse( _value, grammar ) {
		return grammar.some(function( statement ) {
			var value = _value;

			// The whole grammar statement should be used (i.e., .every() return true) and value be
			// entirely consumed (i.e., !value.length).
			return statement.every(function( type ) {
				if ( value.match( tokenizer[ type ] ) === null ) {
					return false;
				}

				// Consume and parse it.
				value = value.replace( tokenizer[ type ], parse( type ) );
				return true;
			}) && !value.length;
		});
	}

	valid = tokenizeNParse( value, grammar );

	// NaN
	if ( !valid || isNaN( number ) ) {
		return NaN;
	}

	prefixNSuffix = "" + prefix + suffix;

	// Percent
	if ( prefixNSuffix.indexOf( "%" ) !== -1 ) {
		number /= 100;

	// Per mille
	} else if ( prefixNSuffix.indexOf( "\u2030" ) !== -1 ) {
		number /= 1000;
	}

	// Negative number
	if ( negative ) {
		number *= -1;
	}

	return number;
};




var numberParserFn = function( properties ) {
	return function numberParser( value ) {
		validateParameterPresence( value, "value" );
		validateParameterTypeString( value, "value" );

		return numberParse( value, properties );
	};

};




/**
 * symbolMap( cldr )
 *
 * @cldr [Cldr instance].
 *
 * Return the (localized symbol, pattern symbol) key value pair, eg. {
 *   "٫": ".",
 *   "٬": ",",
 *   "٪": "%",
 *   ...
 * };
 */
var numberSymbolInvertedMap = function( cldr ) {
	var symbol,
		symbolMap = {};

	for ( symbol in numberSymbolName ) {
		symbolMap[ numberSymbol( numberSymbolName[ symbol ], cldr ) ] = symbol;
	}

	return symbolMap;
};




/**
 * objectMap( object, fn)
 *
 * - object
 *
 * - fn( pair ) => pair
 */
var objectMap = function( object, fn ) {
	return Object.keys( object ).map(function( key ) {
		return fn([ key, object[ key ] ]);
	}).reduce(function( object, pair ) {
		object[ pair[ 0 ] ] = pair[ 1 ];
		return object;
	}, {});
};




/**
 * parseProperties( pattern, cldr )
 *
 * @pattern [String] raw pattern for numbers.
 *
 * @cldr [Cldr instance].
 *
 * Return parser properties, used to feed parser function.
 *
 * TODO:
 * - Scientific_notation;
 * - Padding;
 */
var numberParseProperties = function( pattern, cldr, options ) {
	var aux, decimalSymbolRe, digitsRe, groupingSeparatorRe, infinitySymbol, invertedNuDigitsMap,
		invertedSymbolMap, maximumFractionDigits, maximumSignificantDigits,
		minimumSignificantDigits, nanSymbol, negativePrefix, negativeSuffix, nuDigitsMap,
		numberTokenizer, prefix, primaryGroupingSize, secondaryGroupingSize, suffix, symbolMap,
		formatProperties = numberFormatProperties( pattern, cldr, options );

	prefix = looseMatching( formatProperties[ 0 ] );
	maximumFractionDigits = formatProperties[ 4 ];
	minimumSignificantDigits = formatProperties[ 5 ];
	maximumSignificantDigits = formatProperties[ 6 ];
	primaryGroupingSize = formatProperties[ 8 ];
	secondaryGroupingSize = formatProperties[ 9 ];
	suffix = looseMatching( formatProperties[ 10 ] );
	negativePrefix = looseMatching( formatProperties[ 13 ] );
	negativeSuffix = looseMatching( formatProperties[ 14 ] );
	infinitySymbol = looseMatching( formatProperties[ 16 ] );
	nanSymbol = looseMatching( formatProperties[ 17 ] );
	symbolMap = objectMap( formatProperties[ 18 ], function( pair ) {
		return [ pair[ 0 ], looseMatching( pair[ 1 ] ) ];
	});
	nuDigitsMap = formatProperties[ 19 ];

	invertedSymbolMap = objectMap( numberSymbolInvertedMap( cldr ), function( pair ) {
		return [ looseMatching( pair[ 0 ] ), pair[ 1 ] ];
	});

	digitsRe = nuDigitsMap ? "[" + nuDigitsMap + "]" : "\\d";
	groupingSeparatorRe = regexpEscape( symbolMap[ "," ] );
	decimalSymbolRe = regexpEscape( symbolMap[ "." ] );

	if ( nuDigitsMap ) {
		invertedNuDigitsMap = nuDigitsMap.split( "" ).reduce(function( object, localizedDigit, i ) {
			object[ localizedDigit ] = String( i );
			return object;
		}, {} );
	}

	aux = [ prefix, suffix, negativePrefix, negativeSuffix ].map(function( value ) {
		return value.replace( /('([^']|'')+'|'')|./g, function( character, literal ) {

			// Literals
			if ( literal ) {
				return removeLiteralQuotes( literal );
			}

			// Symbols
			character = character.replace( /[\-+E%\u2030]/, function( symbol ) {
				return symbolMap[ symbol ];
			});

			return character;
		});
	});

	prefix = aux[ 0 ];
	suffix = aux[ 1 ];
	negativePrefix = aux[ 2 ];
	negativeSuffix = aux[ 3 ];

	// Number
	//
	// number_re =                       integer fraction?
	//
	// integer =                         digits | digits_using_grouping_separators
	//
	// fraction =                        regexp((.\d+)?)
	//
	// digits =                          regexp(\d+)
	//
	// digits_w_grouping_separators =    digits_w_1_grouping_separators |
	//                                   digits_w_2_grouping_separators
	//
	// digits_w_1_grouping_separators =  regexp(\d{1,3}(,\d{3})+)
	//
	// digits_w_2_grouping_separators =  regexp(\d{1,2}((,\d{2})*(,\d{3})))

	// Integer part
	numberTokenizer = digitsRe + "+";

	// Grouping separators
	if ( primaryGroupingSize ) {
		if ( secondaryGroupingSize ) {
			aux = digitsRe + "{1," + secondaryGroupingSize + "}((" + groupingSeparatorRe +
				digitsRe + "{" + secondaryGroupingSize + "})*(" + groupingSeparatorRe +
				digitsRe + "{" + primaryGroupingSize + "}))";
		} else {
			aux = digitsRe + "{1," + primaryGroupingSize + "}(" + groupingSeparatorRe +
				digitsRe + "{" + primaryGroupingSize + "})+";
		}
		numberTokenizer = "(" + aux + "|" + numberTokenizer + ")";
	}

	// Fraction part? Only included if 1 or 2.
	// 1: Using significant digit format.
	// 2: Using integer and fractional format && it has a maximumFractionDigits.
	if ( !isNaN( minimumSignificantDigits * maximumSignificantDigits ) || /* 1 */
				maximumFractionDigits /* 2 */ ) {

		// 1: Handle trailing decimal separator, e.g., `"1." => `1``.
		aux = decimalSymbolRe + digitsRe + "+";
		numberTokenizer = numberTokenizer + "(" + aux + "|" + decimalSymbolRe /* 1 */ + ")?" +

			// Handle non-padded decimals, e.g., `".12"` => `0.12` by making the integer part
			// optional.
			"|(" + numberTokenizer + ")?" + aux;

		numberTokenizer = "(" + numberTokenizer + ")";
	}

	// 0: @invertedSymbolMap [Object] Inverted symbol map.
	// 1: @invertedNuDigitsMap [Object] Inverted digits map if numbering system is different than
	//    `latn`.
	// 2: @tokenizer [Object] Tokenizer map, used by parser to consume input.
	return [
		invertedSymbolMap,
		invertedNuDigitsMap,
		{
			infinity: new RegExp( "^" + regexpEscape( infinitySymbol ) ),
			nan:  new RegExp( "^" + regexpEscape( nanSymbol ) ),
			negativePrefix: new RegExp( "^" + regexpEscape( negativePrefix ) ),
			negativeSuffix: new RegExp( "^" + regexpEscape( negativeSuffix ) ),
			number: new RegExp( "^" + numberTokenizer ),
			prefix: new RegExp( "^" + regexpEscape( prefix ) ),
			suffix: new RegExp( "^" + regexpEscape( suffix ) )
		}
	];

};




/**
 * Pattern( style )
 *
 * @style [String] "decimal" (default) or "percent".
 *
 * @cldr [Cldr instance].
 */
var numberPattern = function( style, cldr ) {
	if ( style !== "decimal" && style !== "percent" ) {
		throw new Error( "Invalid style" );
	}

	return cldr.main([
		"numbers",
		style + "Formats-numberSystem-" + numberNumberingSystem( cldr ),
		"standard"
	]);
};




function validateDigits( properties ) {
	var minimumIntegerDigits = properties[ 2 ],
		minimumFractionDigits = properties[ 3 ],
		maximumFractionDigits = properties[ 4 ],
		minimumSignificantDigits = properties[ 5 ],
		maximumSignificantDigits = properties[ 6 ];

	// Validate significant digit format properties
	if ( !isNaN( minimumSignificantDigits * maximumSignificantDigits ) ) {
		validateParameterRange( minimumSignificantDigits, "minimumSignificantDigits", 1, 21 );
		validateParameterRange( maximumSignificantDigits, "maximumSignificantDigits",
			minimumSignificantDigits, 21 );

	} else if ( !isNaN( minimumSignificantDigits ) || !isNaN( maximumSignificantDigits ) ) {
		throw new Error( "Neither or both the minimum and maximum significant digits must be " +
			"present" );

	// Validate integer and fractional format
	} else {
		validateParameterRange( minimumIntegerDigits, "minimumIntegerDigits", 1, 21 );
		validateParameterRange( minimumFractionDigits, "minimumFractionDigits", 0, 20 );
		validateParameterRange( maximumFractionDigits, "maximumFractionDigits",
			minimumFractionDigits, 20 );
	}
}

/**
 * .numberFormatter( [options] )
 *
 * @options [Object]:
 * - style: [String] "decimal" (default) or "percent".
 * - see also number/format options.
 *
 * Return a function that formats a number according to the given options and default/instance
 * locale.
 */
Globalize.numberFormatter =
Globalize.prototype.numberFormatter = function( options ) {
	var args, cldr, fnArgs, pattern, properties, returnFn;

	validateParameterTypePlainObject( options, "options" );

	options = options || {};
	cldr = this.cldr;

	args = [ options ];

	validateDefaultLocale( cldr );

	cldr.on( "get", validateCldr );

	if ( options.raw ) {
		pattern = options.raw;
	} else {
		pattern = numberPattern( options.style || "decimal", cldr );
	}

	properties = numberFormatProperties( pattern, cldr, options );
	fnArgs = [ properties ];

	cldr.off( "get", validateCldr );

	validateDigits( properties );

	if ( options.compact ) {
		fnArgs.push( this.pluralGenerator() );
	}
	returnFn = numberFormatterFn.apply( null, fnArgs );
	runtimeBind( args, cldr, returnFn, fnArgs );

	return returnFn;
};

/**
 * .numberParser( [options] )
 *
 * @options [Object]:
 * - style: [String] "decimal" (default) or "percent".
 *
 * Return the number parser according to the default/instance locale.
 */
Globalize.numberParser =
Globalize.prototype.numberParser = function( options ) {
	var args, cldr, pattern, properties, returnFn;

	validateParameterTypePlainObject( options, "options" );

	options = options || {};
	cldr = this.cldr;

	args = [ options ];

	validateDefaultLocale( cldr );
	if ( options.compact ) {
		throw createErrorUnsupportedFeature({
			feature: "compact number parsing (not implemented)"
		});
	}

	cldr.on( "get", validateCldr );

	if ( options.raw ) {
		pattern = options.raw;
	} else {
		pattern = numberPattern( options.style || "decimal", cldr );
	}

	properties = numberParseProperties( pattern, cldr, options );

	cldr.off( "get", validateCldr );

	returnFn = numberParserFn( properties );

	runtimeBind( args, cldr, returnFn, [ properties ] );

	return returnFn;
};

/**
 * .formatNumber( value [, options] )
 *
 * @value [Number] number to be formatted.
 *
 * @options [Object]: see number/format-properties.
 *
 * Format a number according to the given options and default/instance locale.
 */
Globalize.formatNumber =
Globalize.prototype.formatNumber = function( value, options ) {
	validateParameterPresence( value, "value" );
	validateParameterTypeNumber( value, "value" );

	return this.numberFormatter( options )( value );
};

/**
 * .parseNumber( value [, options] )
 *
 * @value [String]
 *
 * @options [Object]: See numberParser().
 *
 * Return the parsed Number (including Infinity) or NaN when value is invalid.
 */
Globalize.parseNumber =
Globalize.prototype.parseNumber = function( value, options ) {
	validateParameterPresence( value, "value" );
	validateParameterTypeString( value, "value" );

	return this.numberParser( options )( value );
};

/**
 * Optimization to avoid duplicating some internal functions across modules.
 */
Globalize._createErrorUnsupportedFeature = createErrorUnsupportedFeature;
Globalize._numberNumberingSystem = numberNumberingSystem;
Globalize._numberNumberingSystemDigitsMap = numberNumberingSystemDigitsMap;
Globalize._numberPattern = numberPattern;
Globalize._numberSymbol = numberSymbol;
Globalize._looseMatching = looseMatching;
Globalize._removeLiteralQuotes = removeLiteralQuotes;
Globalize._stringPad = stringPad;
Globalize._validateParameterTypeNumber = validateParameterTypeNumber;
Globalize._validateParameterTypeString = validateParameterTypeString;

return Globalize;




}));
});

var currency = createCommonjsModule(function (module, exports) {
/*!
 * Globalize v1.4.2
 *
 * http://github.com/jquery/globalize
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-03-07T13:47Z
 */
(function( root, factory ) {

	// UMD returnExports
	{

		// Node, CommonJS
		module.exports = factory( node_main, globalize );
	}
}(commonjsGlobal, function( Cldr, Globalize ) {

var alwaysArray = Globalize._alwaysArray,
	formatMessage = Globalize._formatMessage,
	numberNumberingSystem = Globalize._numberNumberingSystem,
	numberPattern = Globalize._numberPattern,
	runtimeBind = Globalize._runtimeBind,
	stringPad = Globalize._stringPad,
	validateCldr = Globalize._validateCldr,
	validateDefaultLocale = Globalize._validateDefaultLocale,
	validateParameterPresence = Globalize._validateParameterPresence,
	validateParameterType = Globalize._validateParameterType,
	validateParameterTypeNumber = Globalize._validateParameterTypeNumber,
	validateParameterTypePlainObject = Globalize._validateParameterTypePlainObject;


var validateParameterTypeCurrency = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || typeof value === "string" && ( /^[A-Za-z]{3}$/ ).test( value ),
		"3-letter currency code string as defined by ISO 4217"
	);
};




/**
 * supplementalOverride( currency, pattern, cldr )
 *
 * Return pattern with fraction digits overriden by supplemental currency data.
 */
var currencySupplementalOverride = function( currency, pattern, cldr ) {
	var digits,
		fraction = "",
		fractionData = cldr.supplemental([ "currencyData/fractions", currency ]) ||
			cldr.supplemental( "currencyData/fractions/DEFAULT" );

	digits = +fractionData._digits;

	if ( digits ) {
		fraction = "." + stringPad( "0", digits ).slice( 0, -1 ) + fractionData._rounding;
	}

	return pattern.replace( /\.(#+|0*[0-9]|0+[0-9]?)/g, fraction );
};




var objectFilter = function( object, testRe ) {
	var key,
		copy = {};

	for ( key in object ) {
		if ( testRe.test( key ) ) {
			copy[ key ] = object[ key ];
		}
	}

	return copy;
};




var currencyUnitPatterns = function( cldr ) {
	return objectFilter( cldr.main([
		"numbers",
		"currencyFormats-numberSystem-" + numberNumberingSystem( cldr )
	]), /^unitPattern/ );
};




/**
 * codeProperties( currency, cldr )
 *
 * Return number pattern with the appropriate currency code in as literal.
 */
var currencyCodeProperties = function( currency, cldr ) {
	var pattern = numberPattern( "decimal", cldr );

	// The number of decimal places and the rounding for each currency is not locale-specific. Those
	// values overridden by Supplemental Currency Data.
	pattern = currencySupplementalOverride( currency, pattern, cldr );

	return {
		currency: currency,
		pattern: pattern,
		unitPatterns: currencyUnitPatterns( cldr )
	};
};




/**
 * nameFormat( formattedNumber, pluralForm, properties )
 *
 * Return the appropriate name form currency format.
 */
var currencyNameFormat = function( formattedNumber, pluralForm, properties ) {
	var displayName, unitPattern,
		displayNames = properties.displayNames || {},
		unitPatterns = properties.unitPatterns;

	displayName = displayNames[ "displayName-count-" + pluralForm ] ||
		displayNames[ "displayName-count-other" ] ||
		displayNames.displayName ||
		properties.currency;
	unitPattern = unitPatterns[ "unitPattern-count-" + pluralForm ] ||
		unitPatterns[ "unitPattern-count-other" ];

	return formatMessage( unitPattern, [ formattedNumber, displayName ]);
};




var currencyFormatterFn = function( numberFormatter, pluralGenerator, properties ) {
	var fn;

	// Return formatter when style is "code" or "name".
	if ( pluralGenerator && properties ) {
		fn = function currencyFormatter( value ) {
			validateParameterPresence( value, "value" );
			validateParameterTypeNumber( value, "value" );
			return currencyNameFormat(
				numberFormatter( value ),
				pluralGenerator( value ),
				properties
			);
		};

	// Return formatter when style is "symbol" or "accounting".
	} else {
		fn = function currencyFormatter( value ) {
			return numberFormatter( value );
		};
	}

	return fn;
};




/**
 * nameProperties( currency, cldr )
 *
 * Return number pattern with the appropriate currency code in as literal.
 */
var currencyNameProperties = function( currency, cldr ) {
	var properties = currencyCodeProperties( currency, cldr );

	properties.displayNames = objectFilter( cldr.main([
		"numbers/currencies",
		currency
	]), /^displayName/ );

	return properties;
};




/**
 * Unicode regular expression for: everything except math symbols, currency signs, dingbats, and
 * box-drawing characters.
 *
 * Generated by:
 *
 * regenerate()
 *   .addRange( 0x0, 0x10FFFF )
 *   .remove( require( "unicode-7.0.0/categories/S/symbols" ) ).toString();
 *
 * https://github.com/mathiasbynens/regenerate
 * https://github.com/mathiasbynens/unicode-7.0.0
 */
var regexpNotS = /[\0-#%-\*,-;\?-\]_a-\{\}\x7F-\xA1\xA7\xAA\xAB\xAD\xB2\xB3\xB5-\xB7\xB9-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376-\u0383\u0386-\u03F5\u03F7-\u0481\u0483-\u058C\u0590-\u0605\u0609\u060A\u060C\u060D\u0610-\u06DD\u06DF-\u06E8\u06EA-\u06FC\u06FF-\u07F5\u07F7-\u09F1\u09F4-\u09F9\u09FC-\u0AF0\u0AF2-\u0B6F\u0B71-\u0BF2\u0BFB-\u0C7E\u0C80-\u0D78\u0D7A-\u0E3E\u0E40-\u0F00\u0F04-\u0F12\u0F14\u0F18\u0F19\u0F20-\u0F33\u0F35\u0F37\u0F39-\u0FBD\u0FC6\u0FCD\u0FD0-\u0FD4\u0FD9-\u109D\u10A0-\u138F\u139A-\u17DA\u17DC-\u193F\u1941-\u19DD\u1A00-\u1B60\u1B6B-\u1B73\u1B7D-\u1FBC\u1FBE\u1FC2-\u1FCC\u1FD0-\u1FDC\u1FE0-\u1FEC\u1FF0-\u1FFC\u1FFF-\u2043\u2045-\u2051\u2053-\u2079\u207D-\u2089\u208D-\u209F\u20BE-\u20FF\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u218F\u2308-\u230B\u2329\u232A\u23FB-\u23FF\u2427-\u243F\u244B-\u249B\u24EA-\u24FF\u2768-\u2793\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2CE4\u2CEB-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u3003\u3005-\u3011\u3014-\u301F\u3021-\u3035\u3038-\u303D\u3040-\u309A\u309D-\u318F\u3192-\u3195\u31A0-\u31BF\u31E4-\u31FF\u321F-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u32FF\u3400-\u4DBF\u4E00-\uA48F\uA4C7-\uA6FF\uA717-\uA71F\uA722-\uA788\uA78B-\uA827\uA82C-\uA835\uA83A-\uAA76\uAA7A-\uAB5A\uAB5C-\uD7FF\uDC00-\uFB28\uFB2A-\uFBB1\uFBC2-\uFDFB\uFDFE-\uFE61\uFE63\uFE67\uFE68\uFE6A-\uFF03\uFF05-\uFF0A\uFF0C-\uFF1B\uFF1F-\uFF3D\uFF3F\uFF41-\uFF5B\uFF5D\uFF5F-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF]|\uD800[\uDC00-\uDD36\uDD40-\uDD78\uDD8A\uDD8B\uDD8D-\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFD-\uDFFF]|[\uD801\uD803-\uD819\uD81B-\uD82E\uD830-\uD833\uD836-\uD83A\uD83F-\uDBFF][\uDC00-\uDFFF]|\uD802[\uDC00-\uDC76\uDC79-\uDEC7\uDEC9-\uDFFF]|\uD81A[\uDC00-\uDF3B\uDF40-\uDF44\uDF46-\uDFFF]|\uD82F[\uDC00-\uDC9B\uDC9D-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD65-\uDD69\uDD6D-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDDDE-\uDDFF\uDE42-\uDE44\uDE46-\uDEFF\uDF57-\uDFFF]|\uD835[\uDC00-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFFF]|\uD83B[\uDC00-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDD0F\uDD2F\uDD6C-\uDD6F\uDD9B-\uDDE5\uDE03-\uDE0F\uDE3B-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF\uDF2D-\uDF2F\uDF7E\uDF7F\uDFCF-\uDFD3\uDFF8-\uDFFF]|\uD83D[\uDCFF\uDD4B-\uDD4F\uDD7A\uDDA4\uDE43\uDE44\uDED0-\uDEDF\uDEED-\uDEEF\uDEF4-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDFFF]|[\uD800-\uDBFF]/;




/**
 * symbolProperties( currency, cldr )
 *
 * Return pattern replacing `¤` with the appropriate currency symbol literal.
 */
var currencySymbolProperties = function( currency, cldr, options ) {
	var currencySpacing, pattern, symbol,
		symbolEntries = [ "symbol" ],
		regexp = {
			"[:digit:]": /\d/,
			"[:^S:]": regexpNotS
		};

	// If options.symbolForm === "narrow" was passed, prepend it.
	if ( options.symbolForm === "narrow" ) {
		symbolEntries.unshift( "symbol-alt-narrow" );
	}

	symbolEntries.some(function( symbolEntry ) {
		return symbol = cldr.main([
			"numbers/currencies",
			currency,
			symbolEntry
		]);
	});

	currencySpacing = [ "beforeCurrency", "afterCurrency" ].map(function( position ) {
		return cldr.main([
			"numbers",
			"currencyFormats-numberSystem-" + numberNumberingSystem( cldr ),
			"currencySpacing",
			position
		]);
	});

	pattern = cldr.main([
		"numbers",
		"currencyFormats-numberSystem-" + numberNumberingSystem( cldr ),
		options.style === "accounting" ? "accounting" : "standard"
	]);

	pattern =

		// The number of decimal places and the rounding for each currency is not locale-specific.
		// Those values are overridden by Supplemental Currency Data.
		currencySupplementalOverride( currency, pattern, cldr )

		// Replace "¤" (\u00A4) with the appropriate symbol literal.
		.split( ";" ).map(function( pattern ) {

			return pattern.split( "\u00A4" ).map(function( part, i ) {
				var currencyMatch = regexp[ currencySpacing[ i ].currencyMatch ],
					surroundingMatch = regexp[ currencySpacing[ i ].surroundingMatch ],
					insertBetween = "";

				// For currencyMatch and surroundingMatch definitions, read [1].
				// When i === 0, beforeCurrency is being handled. Otherwise, afterCurrency.
				// 1: http://www.unicode.org/reports/tr35/tr35-numbers.html#Currencies
				currencyMatch = currencyMatch.test( symbol.charAt( i ? symbol.length - 1 : 0 ) );
				surroundingMatch = surroundingMatch.test(
					part.charAt( i ? 0 : part.length - 1 ).replace( /[#@,.]/g, "0" )
				);

				if ( currencyMatch && part && surroundingMatch ) {
					insertBetween = currencySpacing[ i ].insertBetween;
				}

				return ( i ? insertBetween : "" ) + part + ( i ? "" : insertBetween );
			}).join( "'" + symbol + "'" );
		}).join( ";" );

	return {
		pattern: pattern
	};
};




/**
 * objectOmit( object, keys )
 *
 * Return a copy of the object, filtered to omit the blacklisted key or array of keys.
 */
var objectOmit = function( object, keys ) {
	var key,
		copy = {};

	keys = alwaysArray( keys );

	for ( key in object ) {
		if ( keys.indexOf( key ) === -1 ) {
			copy[ key ] = object[ key ];
		}
	}

	return copy;
};




function validateRequiredCldr( path, value ) {
	validateCldr( path, value, {
		skip: [
			/numbers\/currencies\/[^/]+\/symbol-alt-/,
			/supplemental\/currencyData\/fractions\/[A-Za-z]{3}$/
		]
	});
}

/**
 * .currencyFormatter( currency [, options] )
 *
 * @currency [String] 3-letter currency code as defined by ISO 4217.
 *
 * @options [Object]:
 * - style: [String] "symbol" (default), "accounting", "code" or "name".
 * - see also number/format options.
 *
 * Return a function that formats a currency according to the given options and default/instance
 * locale.
 */
Globalize.currencyFormatter =
Globalize.prototype.currencyFormatter = function( currency, options ) {
	var args, cldr, numberFormatter, pluralGenerator, properties, returnFn, style;

	validateParameterPresence( currency, "currency" );
	validateParameterTypeCurrency( currency, "currency" );

	validateParameterTypePlainObject( options, "options" );

	cldr = this.cldr;
	options = options || {};

	args = [ currency, options ];
	style = options.style || "symbol";

	validateDefaultLocale( cldr );

	// Get properties given style ("symbol" default, "code" or "name").
	cldr.on( "get", validateRequiredCldr );
	properties = ({
		accounting: currencySymbolProperties,
		code: currencyCodeProperties,
		name: currencyNameProperties,
		symbol: currencySymbolProperties
	}[ style ] )( currency, cldr, options );
	cldr.off( "get", validateRequiredCldr );

	// options = options minus style, plus raw pattern.
	options = objectOmit( options, "style" );
	options.raw = properties.pattern;

	// Return formatter when style is "symbol" or "accounting".
	if ( style === "symbol" || style === "accounting" ) {
		numberFormatter = this.numberFormatter( options );

		returnFn = currencyFormatterFn( numberFormatter );

		runtimeBind( args, cldr, returnFn, [ numberFormatter ] );

	// Return formatter when style is "code" or "name".
	} else {
		numberFormatter = this.numberFormatter( options );
		pluralGenerator = this.pluralGenerator();

		returnFn = currencyFormatterFn( numberFormatter, pluralGenerator, properties );

		runtimeBind( args, cldr, returnFn, [ numberFormatter, pluralGenerator, properties ] );
	}

	return returnFn;
};

/**
 * .currencyParser( currency [, options] )
 *
 * @currency [String] 3-letter currency code as defined by ISO 4217.
 *
 * @options [Object] see currencyFormatter.
 *
 * Return the currency parser according to the given options and the default/instance locale.
 */
Globalize.currencyParser =
Globalize.prototype.currencyParser = function( /* currency, options */ ) {

	// TODO implement parser.

};

/**
 * .formatCurrency( value, currency [, options] )
 *
 * @value [Number] number to be formatted.
 *
 * @currency [String] 3-letter currency code as defined by ISO 4217.
 *
 * @options [Object] see currencyFormatter.
 *
 * Format a currency according to the given options and the default/instance locale.
 */
Globalize.formatCurrency =
Globalize.prototype.formatCurrency = function( value, currency, options ) {
	validateParameterPresence( value, "value" );
	validateParameterTypeNumber( value, "value" );

	return this.currencyFormatter( currency, options )( value );
};

/**
 * .parseCurrency( value, currency [, options] )
 *
 * @value [String]
 *
 * @currency [String] 3-letter currency code as defined by ISO 4217.
 *
 * @options [Object]: See currencyFormatter.
 *
 * Return the parsed currency or NaN when value is invalid.
 */
Globalize.parseCurrency =
Globalize.prototype.parseCurrency = function( /* value, currency, options */ ) {
};

return Globalize;




}));
});

var plural = createCommonjsModule(function (module, exports) {
/**
 * Globalize v1.4.2
 *
 * http://github.com/jquery/globalize
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2019-03-07T13:47Z
 */
/*!
 * Globalize v1.4.2 2019-03-07T13:47Z Released under the MIT license
 * http://git.io/TrdQbw
 */
(function( root, factory ) {

	// UMD returnExports
	{

		// Node, CommonJS
		module.exports = factory( node_main, globalize );
	}
}(commonjsGlobal, function( Cldr, Globalize ) {

var runtimeBind = Globalize._runtimeBind,
	validateCldr = Globalize._validateCldr,
	validateDefaultLocale = Globalize._validateDefaultLocale,
	validateParameterPresence = Globalize._validateParameterPresence,
	validateParameterType = Globalize._validateParameterType,
	validateParameterTypePlainObject = Globalize._validateParameterTypePlainObject;
var MakePlural;
/* jshint ignore:start */
MakePlural = (function() {

var _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };

var _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();


/**
 * make-plural.js -- https://github.com/eemeli/make-plural.js/
 * Copyright (c) 2014-2015 by Eemeli Aro <eemeli@gmail.com>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * The software is provided "as is" and the author disclaims all warranties
 * with regard to this software including all implied warranties of
 * merchantability and fitness. In no event shall the author be liable for
 * any special, direct, indirect, or consequential damages or any damages
 * whatsoever resulting from loss of use, data or profits, whether in an
 * action of contract, negligence or other tortious action, arising out of
 * or in connection with the use or performance of this software.
 */

var Parser = (function () {
    function Parser() {
        _classCallCheck(this, Parser);
    }

    _createClass(Parser, [{
        key: 'parse',
        value: function parse(cond) {
            var _this = this;

            if (cond === 'i = 0 or n = 1') {
                return 'n >= 0 && n <= 1';
            }if (cond === 'i = 0,1') {
                return 'n >= 0 && n < 2';
            }if (cond === 'i = 1 and v = 0') {
                this.v0 = 1;
                return 'n == 1 && v0';
            }
            return cond.replace(/([tv]) (!?)= 0/g, function (m, sym, noteq) {
                var sn = sym + '0';
                _this[sn] = 1;
                return noteq ? '!' + sn : sn;
            }).replace(/\b[fintv]\b/g, function (m) {
                _this[m] = 1;
                return m;
            }).replace(/([fin]) % (10+)/g, function (m, sym, num) {
                var sn = sym + num;
                _this[sn] = 1;
                return sn;
            }).replace(/n10+ = 0/g, 't0 && $&').replace(/(\w+ (!?)= )([0-9.]+,[0-9.,]+)/g, function (m, se, noteq, x) {
                if (m === 'n = 0,1') return '(n == 0 || n == 1)';
                if (noteq) return se + x.split(',').join(' && ' + se);
                return '(' + se + x.split(',').join(' || ' + se) + ')';
            }).replace(/(\w+) (!?)= ([0-9]+)\.\.([0-9]+)/g, function (m, sym, noteq, x0, x1) {
                if (Number(x0) + 1 === Number(x1)) {
                    if (noteq) return '' + sym + ' != ' + x0 + ' && ' + sym + ' != ' + x1;
                    return '(' + sym + ' == ' + x0 + ' || ' + sym + ' == ' + x1 + ')';
                }
                if (noteq) return '(' + sym + ' < ' + x0 + ' || ' + sym + ' > ' + x1 + ')';
                if (sym === 'n') {
                    _this.t0 = 1;return '(t0 && n >= ' + x0 + ' && n <= ' + x1 + ')';
                }
                return '(' + sym + ' >= ' + x0 + ' && ' + sym + ' <= ' + x1 + ')';
            }).replace(/ and /g, ' && ').replace(/ or /g, ' || ').replace(/ = /g, ' == ');
        }
    }, {
        key: 'vars',
        value: (function (_vars) {
            function vars() {
                return _vars.apply(this, arguments);
            }

            vars.toString = function () {
                return _vars.toString();
            };

            return vars;
        })(function () {
            var vars = [];
            if (this.i) vars.push('i = s[0]');
            if (this.f || this.v) vars.push('f = s[1] || \'\'');
            if (this.t) vars.push('t = (s[1] || \'\').replace(/0+$/, \'\')');
            if (this.v) vars.push('v = f.length');
            if (this.v0) vars.push('v0 = !s[1]');
            if (this.t0 || this.n10 || this.n100) vars.push('t0 = Number(s[0]) == n');
            for (var k in this) {
                if (/^.10+$/.test(k)) {
                    var k0 = k[0] === 'n' ? 't0 && s[0]' : k[0];
                    vars.push('' + k + ' = ' + k0 + '.slice(-' + k.substr(2).length + ')');
                }
            }if (!vars.length) return '';
            return 'var ' + ['s = String(n).split(\'.\')'].concat(vars).join(', ');
        })
    }]);

    return Parser;
})();



var MakePlural = (function () {
    function MakePlural(lc) {
        var _ref = arguments[1] === undefined ? MakePlural : arguments[1];

        var cardinals = _ref.cardinals;
        var ordinals = _ref.ordinals;

        _classCallCheck(this, MakePlural);

        if (!cardinals && !ordinals) throw new Error('At least one type of plural is required');
        this.lc = lc;
        this.categories = { cardinal: [], ordinal: [] };
        this.parser = new Parser();
        
        this.fn = this.buildFunction(cardinals, ordinals);
        this.fn._obj = this;
        this.fn.categories = this.categories;
        
        this.fn.toString = this.fnToString.bind(this);
        return this.fn;
    }

    _createClass(MakePlural, [{
        key: 'compile',
        value: function compile(type, req) {
            var cases = [];
            var rules = MakePlural.rules[type][this.lc];
            if (!rules) {
                if (req) throw new Error('Locale "' + this.lc + '" ' + type + ' rules not found');
                this.categories[type] = ['other'];
                return '\'other\'';
            }
            for (var r in rules) {
                var _rules$r$trim$split = rules[r].trim().split(/\s*@\w*/);

                var _rules$r$trim$split2 = _toArray(_rules$r$trim$split);

                var cond = _rules$r$trim$split2[0];
                var examples = _rules$r$trim$split2.slice(1);
                var cat = r.replace('pluralRule-count-', '');
                if (cond) cases.push([this.parser.parse(cond), cat]);
                
            }
            this.categories[type] = cases.map(function (c) {
                return c[1];
            }).concat('other');
            if (cases.length === 1) {
                return '(' + cases[0][0] + ') ? \'' + cases[0][1] + '\' : \'other\'';
            } else {
                return [].concat(_toConsumableArray(cases.map(function (c) {
                    return '(' + c[0] + ') ? \'' + c[1] + '\'';
                })), ['\'other\'']).join('\n      : ');
            }
        }
    }, {
        key: 'buildFunction',
        value: function buildFunction(cardinals, ordinals) {
            var _this3 = this;

            var compile = function compile(c) {
                return c ? (c[1] ? 'return ' : 'if (ord) return ') + _this3.compile.apply(_this3, _toConsumableArray(c)) : '';
            },
                fold = { vars: function vars(str) {
                    return ('  ' + str + ';').replace(/(.{1,78})(,|$) ?/g, '$1$2\n      ');
                },
                cond: function cond(str) {
                    return ('  ' + str + ';').replace(/(.{1,78}) (\|\| |$) ?/gm, '$1\n          $2');
                } },
                cond = [ordinals && ['ordinal', !cardinals], cardinals && ['cardinal', true]].map(compile).map(fold.cond),
                body = [fold.vars(this.parser.vars())].concat(_toConsumableArray(cond)).join('\n').replace(/\s+$/gm, '').replace(/^[\s;]*[\r\n]+/gm, ''),
                args = ordinals && cardinals ? 'n, ord' : 'n';
            return new Function(args, body);
        }
    }, {
        key: 'fnToString',
        value: function fnToString(name) {
            return Function.prototype.toString.call(this.fn).replace(/^function( \w+)?/, name ? 'function ' + name : 'function').replace('\n/**/', '');
        }
    }], [{
        key: 'load',
        value: function load() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            args.forEach(function (cldr) {
                var data = cldr && cldr.supplemental || null;
                if (!data) throw new Error('Data does not appear to be CLDR data');
                MakePlural.rules = {
                    cardinal: data['plurals-type-cardinal'] || MakePlural.rules.cardinal,
                    ordinal: data['plurals-type-ordinal'] || MakePlural.rules.ordinal
                };
            });
            return MakePlural;
        }
    }]);

    return MakePlural;
})();



MakePlural.cardinals = true;
MakePlural.ordinals = false;
MakePlural.rules = { cardinal: {}, ordinal: {} };


return MakePlural;
}());
/* jshint ignore:end */


var validateParameterTypeNumber = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || typeof value === "number",
		"Number"
	);
};




var validateParameterTypePluralType = function( value, name ) {
	validateParameterType(
		value,
		name,
		value === undefined || value === "cardinal" || value === "ordinal",
		"String \"cardinal\" or \"ordinal\""
	);
};




var pluralGeneratorFn = function( plural ) {
	return function pluralGenerator( value ) {
		validateParameterPresence( value, "value" );
		validateParameterTypeNumber( value, "value" );

		return plural( value );
	};
};




/**
 * .plural( value )
 *
 * @value [Number]
 *
 * Return the corresponding form (zero | one | two | few | many | other) of a
 * value given locale.
 */
Globalize.plural =
Globalize.prototype.plural = function( value, options ) {
	validateParameterPresence( value, "value" );
	validateParameterTypeNumber( value, "value" );
	return this.pluralGenerator( options )( value );
};

/**
 * .pluralGenerator( [options] )
 *
 * Return a plural function (of the form below).
 *
 * fn( value )
 *
 * @value [Number]
 *
 * Return the corresponding form (zero | one | two | few | many | other) of a value given the
 * default/instance locale.
 */
Globalize.pluralGenerator =
Globalize.prototype.pluralGenerator = function( options ) {
	var args, cldr, isOrdinal, plural, returnFn, type;

	validateParameterTypePlainObject( options, "options" );

	options = options || {};
	cldr = this.cldr;

	args = [ options ];
	type = options.type || "cardinal";

	validateParameterTypePluralType( options.type, "options.type" );

	validateDefaultLocale( cldr );

	isOrdinal = type === "ordinal";

	cldr.on( "get", validateCldr );
	cldr.supplemental([ "plurals-type-" + type, "{language}" ]);
	cldr.off( "get", validateCldr );

	MakePlural.rules = {};
	MakePlural.rules[ type ] = cldr.supplemental( "plurals-type-" + type );

	plural = new MakePlural( cldr.attributes.language, {
		"ordinals": isOrdinal,
		"cardinals": !isOrdinal
	});

	returnFn = pluralGeneratorFn( plural );

	runtimeBind( args, cldr, returnFn, [ plural ] );

	return returnFn;
};

return Globalize;




}));
});

var numberFormat = createCommonjsModule(function (module, exports) {
var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = commonjsGlobal;
Object.defineProperty(exports, "__esModule", { value: true });
var globalize_1 = __importDefault(globalize);



var _$1 = __importStar(_);
var Logger = __importStar(logger);
var _logger = Logger.create('number-util');
var cachedCurrenciesJson;
var currentLocale;
var cldrCurrencyDataLoader;
var cldrNumbersDataLoader;
var supplementalCurrencyDataJson;
var getCountryCode = function (locale) {
    var parts = locale.split('_');
    if (parts.length === 2) {
        return parts[1];
    }
    parts = locale.split('-');
    if (parts.length === 2) {
        return parts[1];
    }
    return locale;
};
var getDefaultCurrencyCode = function () {
    var countryCode = _$1.upperCase(getCountryCode(currentLocale));
    var regionalCurrencyDetails = supplementalCurrencyDataJson.supplemental.currencyData.region[countryCode];
    return Object.keys(_$1.last(regionalCurrencyDetails))[0];
};
exports.getDefaultCurrencyCode = getDefaultCurrencyCode;
var sanitizeFormat = function (format) {
    var sanitizedFormat = format.replace(/#\./, '0.');
    if (!sanitizedFormat.includes('.')) {
        sanitizedFormat = sanitizedFormat.replace(/#(%?)$/, '0$1');
    }
    return sanitizedFormat;
};
var isValidNumericString = function (num) {
    return !isNaN(parseFloat(num));
};
var combineCurrencyAndFormatPattern = function (currencyFormattedValue, businessFormattedValue) {
    var currencyPrefix = '', currencySuffix = '';
    for (var i = 0; i < currencyFormattedValue.length; i++) {
        var c = currencyFormattedValue.charAt(i);
        if (!isValidNumericString(c)) {
            currencyPrefix += c;
        }
        else {
            break;
        }
    }
    for (var i = currencyFormattedValue.length - 1; i >= 0; i--) {
        var c = currencyFormattedValue.charAt(i);
        if (!isValidNumericString(c)) {
            currencySuffix = c + currencySuffix;
        }
        else {
            break;
        }
    }
    if (currencySuffix) {
        var endsWithNumShorteningSymbol = !isValidNumericString(businessFormattedValue.slice(-1));
        if (endsWithNumShorteningSymbol && currencySuffix.charAt(0) !== ' ') {
            currencySuffix = ' ' + currencySuffix;
        }
        return businessFormattedValue + currencySuffix;
    }
    if (currencyPrefix) {
        var businessFormattedValueCharLength = businessFormattedValue.length;
        if (businessFormattedValue.charAt(0) === '-') {
            businessFormattedValue = businessFormattedValue
                .slice(1, businessFormattedValueCharLength);
        }
        else {
            var startsWithNumShorteningSymbol = !isValidNumericString(businessFormattedValue.charAt(0));
            if (currencyPrefix.slice(-1) !== ' ' && startsWithNumShorteningSymbol) {
                currencyPrefix = currencyPrefix + ' ';
            }
        }
        return currencyPrefix + businessFormattedValue;
    }
    return businessFormattedValue;
};
function initialize(locale, inputSupplementalLikelySubtags, inputSupplementalNumberingSystem, inputSupplementalCurrencyDataJson, inputSupplementalPluralJson, inputCldrCurrencyDataLoader, inputCldrNumbersDataLoader) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    globalize_1.default.load(inputSupplementalLikelySubtags, inputSupplementalNumberingSystem, inputSupplementalCurrencyDataJson, inputSupplementalPluralJson);
                    supplementalCurrencyDataJson = inputSupplementalCurrencyDataJson;
                    cldrCurrencyDataLoader = inputCldrCurrencyDataLoader;
                    cldrNumbersDataLoader = inputCldrNumbersDataLoader;
                    return [4, setLocale(locale)];
                case 1:
                    _a.sent();
                    return [2];
            }
        });
    });
}
exports.initialize = initialize;
var setLocale = function (locale) { return __awaiter(_this, void 0, void 0, function () {
    var previousLanguage, languageId, localeJsons;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                previousLanguage = _$1.get(globalize_1.default, 'cldr.attributes.minLanguageId');
                globalize_1.default.locale(locale);
                languageId = _$1.get(globalize_1.default, 'cldr.attributes.minLanguageId');
                if (!(previousLanguage !== languageId)) return [3, 2];
                return [4, Promise.all([
                        cldrCurrencyDataLoader(languageId),
                        cldrNumbersDataLoader(languageId)
                    ])];
            case 1:
                localeJsons = _a.sent();
                cachedCurrenciesJson = localeJsons[0];
                globalize_1.default.load(localeJsons[0], localeJsons[1]);
                globalize_1.default.locale(locale);
                _a.label = 2;
            case 2:
                currentLocale = locale;
                return [2];
        }
    });
}); };
exports.setLocale = setLocale;
var shortFormatter = function (number) {
    if (!number) {
        return String(number);
    }
    return globalize_1.default.numberFormatter({
        compact: 'short',
        minimumSignificantDigits: 1,
        maximumSignificantDigits: 3
    })(number);
};
exports.shortFormatter = shortFormatter;
var formatCurrency = function (num, _a) {
    var _b = _a === void 0 ? {} : _a, nDecimal = _b.nDecimal, _c = _b.currencyCode, currencyCode = _c === void 0 ? getDefaultCurrencyCode() : _c, compact = _b.compact, formatPattern = _b.formatPattern;
    currencyCode = _$1.upperCase(currencyCode);
    var options = {
        style: 'symbol',
        minimumFractionDigits: nDecimal || 0,
        maximumFractionDigits: nDecimal || 2,
    };
    if (!!compact) {
        options.compact = compact;
    }
    else if (!!formatPattern) {
        var formattedVal = defaultFormatter(num, {
            nDecimal: nDecimal,
            formatPattern: formatPattern
        });
        var currencyFormattedVal = globalize_1.default.currencyFormatter(currencyCode, options)(num);
        return combineCurrencyAndFormatPattern(currencyFormattedVal, formattedVal);
    }
    return globalize_1.default.currencyFormatter(currencyCode, options)(num);
};
exports.formatCurrency = formatCurrency;
var defaultFormatter = function (num, _a) {
    var _b = _a === void 0 ? {} : _a, nDecimal = _b.nDecimal, formatPattern = _b.formatPattern, isPercent = _b.isPercent, isDouble = _b.isDouble;
    var options = {
        style: isPercent ? numberFormatStyle.PERCENT : numberFormatStyle.DECIMAL,
    };
    if (!_$1.isUndefined(nDecimal)) {
        options.minimumFractionDigits = nDecimal || 0;
        options.maximumFractionDigits = nDecimal || (isDouble ? 2 : 0);
    }
    else if (!!formatPattern) {
        var sanitizedPattern = sanitizeFormat(formatPattern);
        if (isPercent && sanitizedPattern.indexOf('%') < 0) {
            sanitizedPattern += '%';
        }
        if (validateNumberFormat(sanitizedPattern)) {
            options.raw = sanitizedPattern;
        }
    }
    return globalize_1.default.numberFormatter(options)(num);
};
exports.defaultFormatter = defaultFormatter;
var numberFormatStyle = {
    PERCENT: 'percent',
    DECIMAL: 'decimal'
};
exports.numberFormatStyle = numberFormatStyle;
var parseFloat = function (numString, options) {
    return globalize_1.default.numberParser(options)(numString);
};
exports.parseFloat = parseFloat;
var validateNumberFormat = function (format) {
    try {
        globalize_1.default.numberFormatter({ raw: sanitizeFormat(format) })(123);
    }
    catch (e) {
        _logger.log('Format pattern validator error', format, e);
        return false;
    }
    return true;
};
exports.validateNumberFormat = validateNumberFormat;
var getSupportedCurrencyISOCodes = function () {
    var languageId = _$1.get(globalize_1.default, 'cldr.attributes.minLanguageId', 'en');
    var currencies = cachedCurrenciesJson.main[languageId].numbers.currencies;
    return Object.keys(currencies).filter(function (symbol) {
        return currencies[symbol].displayName.indexOf('(') < 0;
    });
};
exports.getSupportedCurrencyISOCodes = getSupportedCurrencyISOCodes;

});

unwrapExports(numberFormat);
var numberFormat_1 = numberFormat.getDefaultCurrencyCode;
var numberFormat_2 = numberFormat.initialize;
var numberFormat_3 = numberFormat.setLocale;
var numberFormat_4 = numberFormat.shortFormatter;
var numberFormat_5 = numberFormat.formatCurrency;
var numberFormat_6 = numberFormat.defaultFormatter;
var numberFormat_7 = numberFormat.numberFormatStyle;
var numberFormat_8 = numberFormat.parseFloat;
var numberFormat_9 = numberFormat.validateNumberFormat;
var numberFormat_10 = numberFormat.getSupportedCurrencyISOCodes;

var numberUtil = createCommonjsModule(function (module, exports) {
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a, _b;
var globalize_1 = __importDefault(globalize);
var specialDataValueFormat$1 = __importStar(specialDataValueFormat);
var _$1 = __importStar(_);
var numeral_1 = __importDefault(numeral);

exports.initialize = numberFormat.initialize;
exports.getSupportedCurrencyISOCodes = numberFormat.getSupportedCurrencyISOCodes;
exports.getDefaultCurrencyCode = numberFormat.getDefaultCurrencyCode;
exports.parseFloat = numberFormat.parseFloat;
exports.setLocale = numberFormat.setLocale;
var tsProto = __importStar(protoRoot);
var FormatConfig = tsProto.blink.numberFormatConfig.FormatConfig;
var DEFAULT_DECIMAL_PRECISION = 2;
var DEFAULT_COMPACT_SCIENTIFIC_NUMBER_SUFFIX_MAP = {
    3: 'K',
    6: 'M',
    9: 'G',
    12: 'T'
};
var UnitEnums = FormatConfig.Unit;
var UNITS_TO_DIVIDING_FACTOR = (_a = {},
    _a[UnitEnums.NONE] = 1,
    _a[UnitEnums.THOUSANDS] = 1000,
    _a[UnitEnums.MILLION] = 1000 * 1000,
    _a[UnitEnums.BILLION] = 1000 * 1000 * 1000,
    _a);
var UNITS_TO_SUFFIX = (_b = {},
    _b[UnitEnums.NONE] = '',
    _b[UnitEnums.THOUSANDS] = 'K',
    _b[UnitEnums.MILLION] = 'M',
    _b[UnitEnums.BILLION] = 'B',
    _b);
function applyNegativeFormat(formattedValue, negativeFormat) {
    switch (negativeFormat) {
        case FormatConfig.NegativeValueFormat.PREFIX_DASH:
            return "-" + formattedValue;
        case FormatConfig.NegativeValueFormat.SUFFIX_DASH:
            return formattedValue + "-";
        case FormatConfig.NegativeValueFormat.BRACES_NODASH:
            return "(" + formattedValue + ")";
        default:
            return "-" + formattedValue;
    }
}
exports.formatDataValue = function (value, options) {
    var _a;
    if (options === void 0) { options = {}; }
    if (!('noShorten' in options)) {
        options.noShorten = true;
    }
    var specialVal = specialDataValueFormat$1.getSpecialFormatData(value);
    if (!!specialVal) {
        return specialVal;
    }
    if (options.checkOnlySpecialFormat) {
        return value;
    }
    if (isNaN(value)) {
        return value;
    }
    value = +value;
    var isPercent = !!options.isPercent;
    var isCurrency = !!options.isCurrency;
    var needBusinessFormatting = !options.noShorten && !isPercent;
    if (needBusinessFormatting && !isCurrency) {
        return formatBusinessNumber(value);
    }
    var formatPattern = options.formatPattern;
    var isDouble = (_a = options.isDouble, _a === void 0 ? false : _a);
    var nDecimal = options.nDecimal;
    if ((nDecimal === void 0 || nDecimal < 0)
        && !formatPattern
        && isDouble) {
        nDecimal = DEFAULT_DECIMAL_PRECISION;
    }
    if (isCurrency && !isPercent) {
        return numberFormat.formatCurrency(value, {
            compact: needBusinessFormatting ? 'short' : void 0,
            currencyCode: options.currencyCode,
            nDecimal: nDecimal,
            formatPattern: formatPattern
        });
    }
    return numberFormat.defaultFormatter(value, { nDecimal: nDecimal, formatPattern: formatPattern, isPercent: isPercent, isDouble: isDouble });
};
function formatNumber(value, isDouble, formatPattern) {
    return numberFormat.defaultFormatter(value, { formatPattern: formatPattern, isDouble: isDouble });
}
exports.formatNumber = formatNumber;
function formatNumericArray(inputArr, fmt) {
    return inputArr.map(function (num) {
        return numberFormat.defaultFormatter(num, { formatPattern: fmt });
    });
}
exports.formatNumericArray = formatNumericArray;
exports.isValidNumberFormat = numberFormat.validateNumberFormat;
function formatCompactScientificNumber(num) {
    var suffixMap = DEFAULT_COMPACT_SCIENTIFIC_NUMBER_SUFFIX_MAP;
    var specialValue = specialDataValueFormat$1.getSpecialFormatData(num);
    if (!!specialValue) {
        return specialValue;
    }
    if (isNaN(num)) {
        return num;
    }
    num = +num;
    var absNum = Math.abs(num), powersOfTen = [12, 9, 6, 3];
    for (var i = 0; i < powersOfTen.length; i++) {
        var powerOfTen = powersOfTen[i];
        if (!_$1.has(suffixMap, powerOfTen)) {
            continue;
        }
        var base = Math.pow(10, powerOfTen);
        if (absNum >= base) {
            var suffix = suffixMap[powerOfTen];
            return toFixedNoTrailingZero(num / base, 1) + suffix;
        }
    }
    return toFixedNoTrailingZero(num, 1);
}
exports.formatCompactScientificNumber = formatCompactScientificNumber;
function formatBusinessNumber(num) {
    var specialValue = specialDataValueFormat$1.getSpecialFormatData(num);
    if (!!specialValue) {
        return specialValue;
    }
    if (isNaN(num)) {
        return num;
    }
    return numberFormat.shortFormatter(num);
}
exports.formatBusinessNumber = formatBusinessNumber;
function parseBusinessNumber(formattedNumber) {
    if (!/^(\-){0,1}[0-9.,]+(T|B|M|K){0,1}$/i.test(formattedNumber)) {
        return Number.NaN;
    }
    return numeral_1.default().unformat(formattedNumber.toLowerCase());
}
exports.parseBusinessNumber = parseBusinessNumber;
function scientificFormat(num, placesAfterDecimal, isPercent) {
    var specialValue = specialDataValueFormat$1.getSpecialFormatData(num);
    if (!!specialValue) {
        return specialValue;
    }
    if (isNaN(num)) {
        return num;
    }
    if (isPercent) {
        num *= 100;
    }
    num = +num;
    placesAfterDecimal = placesAfterDecimal || DEFAULT_DECIMAL_PRECISION;
    var formattedValue = (num).toExponential(placesAfterDecimal);
    if (isPercent) {
        formattedValue += '%';
    }
    return formattedValue;
}
exports.scientificFormat = scientificFormat;
function toFixedNoTrailingZero(num, nDecimal) {
    var formattedNum = num.toFixed(nDecimal);
    var arr = formattedNum.split('.');
    if (arr[1] === '0') {
        return arr[0];
    }
    return formattedNum;
}
function getValueFormattedByConfig(value, formatConfig) {
    var absFloatValue = Math.abs(value);
    if (formatConfig.category === FormatConfig.CategoryType.NUMBER) {
        var configDetails = formatConfig.numberFormatConfig;
        var compactValue = absFloatValue / UNITS_TO_DIVIDING_FACTOR[configDetails.unit];
        var suffix = UNITS_TO_SUFFIX[configDetails.unit];
        var formatter = globalize_1.default.numberFormatter({
            style: 'decimal',
            maximumFractionDigits: configDetails.decimals,
            minimumFractionDigits: configDetails.decimals,
            useGrouping: configDetails.toSeparateThousands,
        });
        var formattedValue = formatter(compactValue);
        var absFormattedValue = "" + formattedValue + suffix;
        if (value !== absFloatValue) {
            return applyNegativeFormat(absFormattedValue, configDetails.negativeValueFormat);
        }
        return absFormattedValue;
    }
    if (formatConfig.category === FormatConfig.CategoryType.PERCENTAGE) {
        var configDetails = formatConfig.percentageFormatConfig;
        var formatter = globalize_1.default.numberFormatter({
            style: 'percent',
            maximumFractionDigits: configDetails.decimals,
            minimumFractionDigits: configDetails.decimals,
        });
        return formatter(absFloatValue / 100);
    }
    if (formatConfig.category === FormatConfig.CategoryType.CURRENCY) {
        var configDetails = formatConfig.currencyFormatConfig;
        var compactValue = value / UNITS_TO_DIVIDING_FACTOR[configDetails.unit];
        var suffix = UNITS_TO_SUFFIX[configDetails.unit];
        var formatter = globalize_1.default.currencyFormatter(configDetails.locale, {
            style: 'symbol',
            maximumFractionDigits: configDetails.decimals,
            minimumFractionDigits: configDetails.decimals,
            useGrouping: configDetails.toSeparateThousands,
        });
        var formattedValue = formatter(compactValue);
        return "" + formattedValue + suffix;
    }
}
exports.getValueFormattedByConfig = getValueFormattedByConfig;

});

var numberUtil$1 = unwrapExports(numberUtil);
var numberUtil_1 = numberUtil.initialize;
var numberUtil_2 = numberUtil.getSupportedCurrencyISOCodes;
var numberUtil_3 = numberUtil.getDefaultCurrencyCode;
var numberUtil_4 = numberUtil.parseFloat;
var numberUtil_5 = numberUtil.setLocale;
var numberUtil_6 = numberUtil.formatDataValue;
var numberUtil_7 = numberUtil.formatNumber;
var numberUtil_8 = numberUtil.formatNumericArray;
var numberUtil_9 = numberUtil.isValidNumberFormat;
var numberUtil_10 = numberUtil.formatCompactScientificNumber;
var numberUtil_11 = numberUtil.formatBusinessNumber;
var numberUtil_12 = numberUtil.parseBusinessNumber;
var numberUtil_13 = numberUtil.scientificFormat;
var numberUtil_14 = numberUtil.getValueFormattedByConfig;

var numberUtil$2 = /*#__PURE__*/Object.freeze({
'default': numberUtil$1,
__moduleExports: numberUtil,
initialize: numberUtil_1,
getSupportedCurrencyISOCodes: numberUtil_2,
getDefaultCurrencyCode: numberUtil_3,
parseFloat: numberUtil_4,
setLocale: numberUtil_5,
formatDataValue: numberUtil_6,
formatNumber: numberUtil_7,
formatNumericArray: numberUtil_8,
isValidNumberFormat: numberUtil_9,
formatCompactScientificNumber: numberUtil_10,
formatBusinessNumber: numberUtil_11,
parseBusinessNumber: numberUtil_12,
scientificFormat: numberUtil_13,
getValueFormattedByConfig: numberUtil_14
});

var jsonConstants = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonConstants = {
    DATA_KEY: 'data',
    CHART_DATA_KEY: 'chartData',
    ALL_COLUMNS_KEY: 'columns',
    ALL_RELATIONSHIPS_KEY: 'relationships',
    ALL_RELATIONSHIPS_WITHIN_KEY: 'relationshipsWithin',
    MULTIPLE_HEADER_KEY: 'headers',
    EFFECTIVE_CALENDAR_GUID: 'effectiveCalendarGuid',
    ERROR_CODE_KEY: 'errorCode',
    ENABLE_VIZ_DATA_EXPORT: 'enableVizDataExport',
    HEADER_KEY: 'header',
    ID_KEY: 'id',
    OWNER_KEY: 'owner',
    NAME_KEY: 'name',
    CREATED_KEY: 'created',
    NAMED_PROPERTIES_KEY: 'namedProperties',
    UNDERLYING_COLUMN_NAME_KEY: 'underlyingColumnName',
    DESCRIPTION_KEY: 'description',
    AUTHOR_KEY: 'author',
    AUTHOR_NAME: 'authorName',
    AUTHOR_DISPLAY_NAME: 'authorDisplayName',
    GENERATION_NUM_KEY: 'generationNum',
    IS_HIDDEN_KEY: 'isHidden',
    METRIC_DEFINITION_KEY: 'metricDefinition',
    METRICS: 'metrics',
    BASE_METRIC_DEFINITION_KEY: 'baseMetricDefinition',
    COMPLETION_RATIO: 'completionRatio',
    IS_AUTO_DELETE_KEY: 'isAutoDelete',
    IS_AUTO_CREATED_KEY: 'isAutoCreated',
    CURRENCY_TYPE_INFO_KEY: 'currencyTypeInfo',
    BASE_CURRENCY_TYPE_INFO_KEY: 'baseCurrencyTypeInfo',
    GEO_CONFIG_KEY: 'geoConfig',
    BASE_GEO_CONFIG_KEY: 'baseGeoConfig',
    REPORT_BOOK_METADATA_KEY: 'reportBookMetadata',
    REPORT_BOOK_CONTENT_KEY: 'reportContent',
    REPORT_BOOK_DATA_KEY: 'reportBookData',
    TOP_USERS: 'topUsers',
    REPORT_BOOK_RESOLVED_OBJECTS_KEY: 'resolvedObjects',
    SHEETS_KEY: 'sheets',
    FLOW_KEY: 'flow',
    DATA_SETS_KEY: 'dataSets',
    SHEETCONTENT_KEY: 'sheetContent',
    SHEET_CONTENT_TYPE_KEY: 'sheetContentType',
    QUESTION_KEY: 'question',
    EFFECTIVE_QUESTION_KEY: 'effectiveQuestion',
    QUESTION_RESOLVED_TOKEN_TEXT_KEY: 'resolvedText',
    SAGE_CONTEXT_PROTO_KEY: 'sageContextProto',
    SAGE_CONTEXT_INDEX_KEY: 'sageContextIndex',
    IS_CHASM_TRAP_QUERY_KEY: 'isChasmTrapQuery',
    INSIGHT_EXPLANATION: 'insightExplanation',
    VISUALIZATIONS_KEY: 'visualizations',
    REF_ANSWER_SHEET_KEY: 'refAnswerSheet',
    REF_ANSWER_BOOK_KEY: 'refAnswerBook',
    REF_ANSWER_SHEET_QUESTION_KEY: 'refAnswerSheetQuestion',
    REF_VIZ_ID_KEY: 'refVizId',
    REF_VIZ_IDS_KEY: 'refVizIds',
    WORKSHEET_KEY: 'worksheet',
    NATURAL_QUERY_KEY: 'naturalQuery',
    PINBOARD_A3_DETAILS_KEY: 'pinboardA3Details',
    A3_REQUEST_PROTO_KEY: 'a3RequestProto',
    A3_ANALYSIS_FACTS_PROTO_KEY: 'analysisFacts',
    VIZ_HEADER_KEY: 'header',
    VIZ_CONTENT_KEY: 'vizContent',
    VIZ_CONTAINER_KEY: 'vizContainer',
    VIZ_DATA_KEY: 'vizData',
    VIZ_LIST_KEY: 'vizList',
    VIZ_TYPE_KEY: 'vizType',
    VIZ_SUBTYPE_KEY: 'vizSubtype',
    VIZ_COMPLETE_KEY: 'complete',
    SCHEMA_VERSION: 'schemaVersion',
    TABLE_FILTER_RESOLVED_TEXT_KEY: 'resolvedTextProto',
    TABLE_FILTER_RESOLVED_TOKEN_KEY: 'resolvedTokenProto',
    HEADLINE_CHART_VIEWS_AREA: 'HEADLINE_CHART_VIEWS_AREA',
    TYPE_KEY: 'type',
    CLIENT_STATE_KEY: 'clientState',
    INFO_CARD_TIP: 'infoCardSeen',
    NAV_BAR_HELP_TIP: 'navBarHelpTip',
    COMMUNITY_LINK_TIP: 'communityLinkSeen',
    LEARN_LINK_TIP: 'learnLinkSeen',
    TRENDING_CARD_TIP: 'trendingCard',
    RECENTLY_VIEWED_CARD_TIP: 'recentlyViewedCard',
    ACTIVITY_CARD_TIP: 'activityCard',
    FAVORITE_CARD_TIP: 'favoriteCardTip',
    ENLITE_TOGGLE_TO_SEARCHIQ_TIP: 'enliteToggleToSearchIQTip',
    ENLITE_REFINEMENTS_MAPPED_TOKEN_TIP: 'enliteRefinementsMappedTokenTip',
    ENLITE_TOKEN_MAPPER_TIP: 'enliteTokenMapperTip',
    ASK_AN_EXPERT_TIP: 'askAnExpertTip',
    DELAYED_SEARCH_TIP: 'delayedSearchTip',
    MAF_PANEL_TIP: 'mafPanelTip',
    IS_STACKED_AS_PERCENT: 'yAxis.isStackedAsPercent',
    RESPONSIVE_LAYOUT_DISABLED: 'responsiveLayoutDisabled',
    MARKERS_ENABLED: 'markersEnabled',
    SHOW_LINEAR_REGRESSION_LINE: 'showLinearRegressionLine',
    IS_HEATMAP_OVERLAYED: 'isHeatmapOverlayed',
    SCRIPTABILITY_CONFIG: 'scriptabilityConfig',
    gridConfig: {
        WIDGET_STATE: 'widgetState',
        WIDTH_STATE: 'widthState',
        SHOW_GRID_SUMMARY: 'showGridSummary',
        WRAP_TABLE_HEADER: 'wrapTableHeader'
    },
    ORDERED_COLUMN_IDS: 'ordered_column_ids',
    pivotConfig: {
        PIVOT_STATE: 'pivotState',
        HIDE_PIVOT_SUMMARIES: 'hidePivotSummaries',
        SUMMARY_MODE: 'summaryMode',
        USE_FLAT_LAYOUT: 'useFlatLayout'
    },
    CONFIG_INFO_KEY: 'configInfo',
    MAX_COLUMN_LIMIT_FOR_LIGHT_COLUMNS: 'maxColumnLimitForLightColumns',
    DISABLE_WORKSHEET_SAMPLE_VALUES: 'disableWorksheetSampleValues',
    ENABLE_SAGE_USER_FEEBBACK: 'enableSageUserFeedback',
    MAX_FILTER_VALUES: 'maxFilterValues',
    HELP_CONFIG: 'blinkHelpConfigList',
    ACTION_CONFIG: 'blinkActionConfigList',
    QUERY_UPDATE_DEBOUNCE_THRESHOLD_MS: 'queryUpdateDebounceThresholdMS',
    USER_FILE_UPLOAD_SIZE: 'userFileUploadSizeLimit',
    ENABLE_LOCALIZATION: 'enableLocalization',
    AVAILABLE_CALENDARS: 'availableCalendars',
    HIDE_DATA_TAB_ON_NO_MANAGE_DATA_PERMISSION: 'hideDataTabOnNoManageDataPermission',
    ENABLE_WALKME: 'enableWalkme',
    WALKME_CONFIG: 'walkMeConfiguration',
    SIGNUP_CONFIG: 'signUpConfiguration',
    ONBOARDING_CONFIG: 'onboardingConfiguration',
    ONBOARDING_VIDEO_URL: 'onboardingVideoURL',
    MAX_NUM_DEFAULT_PINBOARD: 'maxNumDefaultPinboard',
    IS_FIRST_LOGIN: 'isFirstLogin',
    FIRST_LOGIN_DATE: 'firstLoginDate',
    DISABLE_WELCOME_EMAIL: 'disableWelcomeEmail',
    SUPOORT_EMAIL: 'supportEmail',
    USER_EMAIL: 'userEmail',
    ENABLE_SIGNUP_BTN: 'signUpEnabled',
    SIGNUP_BTN_TEXT: 'signUpButtonText',
    SIGNUP_BTN_LINK: 'signUpButtonLink',
    IS_EMBEDDED_USECASE: 'isEmbeddedUseCase',
    EMBRACE_CONFIG: 'embraceConfig',
    EMBRACE_ENABLED: 'enabled',
    SHOW_EMBRACE_STATS: 'showEmbraceStats',
    ENABLE_WALKME_TEST_ENV: 'enableTestEnvForWalkme',
    ENABLE_ROLE_SYSTEM_VARIABLE: 'enableRoleSystemVariable',
    ENABLE_WKS_VIEWER: 'enableSchemaViewer',
    ENABLE_BYPASS_RLS_PRIVILEGE: 'enableBypassRLSPrivilege',
    DISABLE_ANSWER: 'disableAnswer',
    FULL_EMBED_CONFIG: 'fullEmbedConfiguration',
    VIZ_EMBED_CONFIG: 'vizEmbedConfiguration',
    ENABLE_NPS_METRICS: 'enableNPSMetrics',
    ENABLE_WORKSHEET_OVER_AGGR_WKS: 'enableWorksheetOverAggrWorksheet',
    ENABLE_AGGR_WKS_TABLE_JOIN: 'enableAggrWsTableJoin',
    PRIMARY_NAV_HIDDEN: 'primaryNavHidden',
    ALERT_BAR_HIDDEN: 'alertBarHidden',
    DISABLE_TRANSFORMATIONS: 'disableTransformations',
    POWERED_FOOTER_HIDDEN: 'poweredFooterHidden',
    SCHEDULE_REPORTING_CONFIG: 'scheduledReportingConfig',
    SLACK_BOT_CONFIG: 'slackBotConfiguration',
    SCHEDULE_REPORTING_ENABLED: 'enabled',
    A3_CONFIG: 'a3Config',
    A3_ENABLED: 'a3LiveDataAnalysisEnabled',
    CUSTOM_R_ANALYSIS: 'customRAnalysis',
    ASK_EXPERT_ENABLED: 'askExpertEnabled',
    ENABLE_DELAYED_SEARCH: 'enableDelayedSearch',
    ENABLE_UNIVERSAL_SEARCH: 'enableUniversalSearch',
    ENABLE_SNAPSHOT_CAPTURE: 'enableSnapshotCapture',
    ENABLE_CUSTOM_R_IN_SEARCH_PAGE: 'enableCustomRInSearchPage',
    ENABLE_SEASONALITY_DETECTION: 'enableSeasonalityDetection',
    ENABLE_ANOMALY_EXPLANATION: 'enableAnomalyExplanation',
    ENABLE_FOLLOW_FEATURE: 'enableFollowFeature',
    INSTANT_INSIGHTS_FEEDBACK_ENABLED: 'instantInsightsFeedbackEnabled',
    INSTANT_INSIGHTS_ANALYSIS_DEPTH: 'instantInsightsAnalysisDepth',
    RELATED_TABLE_INSIGHTS_ANALYSIS_DEPTH: 'relatedTableInsightsAnalysisDepth',
    EXECUTIVE_SUMMARY_LEVEL: 'executiveSummaryLevel',
    PINBOARD_INSIGHTS_TIMEOUT_IN_SECONDS: 'pinboardInsightsTimeoutInSeconds',
    HOMEPAGE_INSIGHTS_ENABLED: 'homepageInsightsEnabled',
    PINBOARD_SPOTIQ_SNAPSHOT_ENABLED: 'pinboardSpotiqSnapshotEnabled',
    ANSWER_SPOTIQ_SNAPSHOT_ENABLED: 'answerSpotiqSnapshotEnabled',
    RELATED_QUERIES_ENABLED: 'relatedQueriesEnabled',
    EMPTY_SEARCH_PAGE_INSIGHTS_ENABLED: 'emptySearchPageInsightsEnabled',
    SEARCH_PAGE_INSIGHTS_ENABLED: 'instantInsightsOnSearchPageEnabled',
    INLINE_AUTO_ANALYSIS_ENABLED: 'inlineAutoAnalysisEnabled',
    A3_PINBOARD_EXPIRY_IN_SECONDS: 'a3PinboardExpiryInSeconds',
    A3_INSIGHT_KEY: 'insightKey',
    REQUEST_TYPE: 'requestType',
    LEARN_CONFIG: 'learnConfig',
    LEARN_PINBOARD_ID: 'learnPinboardId',
    TABLE_PRINT_DATA_BATCH_SIZE: 'tablePrintDataBatchSize',
    INSTALLED_SCHEMA_VERSION: 'installedSchemaVersion',
    CUSTOMER_ADMIN_EMAIL: 'customerAdminEmail',
    CUSTOMER_ADMIN_PHONE_NUMBER: 'customerAdminPhoneNumber',
    DISABLE_ANSWER_DISPLAY_MODE_PREFERENCE: 'disableAnswerDisplayModePreference',
    ENABLE_STYLE_CUSTOMIZATION: 'customBrandingEnabled',
    ENABLE_FONT_STYLE_CUSTOMIZATION: 'customBrandingFontCustomizationEnabled',
    ENABLE_FOOLSCAP_PDF_DOWNLOAD: 'foolscapPdfDownloadEnabled',
    ENABLE_METADATA_MIGRATION: 'metadataMigrationEnabled',
    LIST_SEARCH_DEBOUNCING_IN_MS: 'listSearchDebouncingInMS',
    EXPOSED_USER_PREFERENCES_KEY: 'userPreferences',
    USER_PREFERENCES_PROTO_KEY: 'preferenceProto',
    PREFERRED_LOCALE_KEY: 'preferredLocale',
    USER_SLACK_ID: 'slackId',
    CALENDARS_KEY: 'calendars',
    DEFAULT_CALENDAR_KEY: 'default',
    CALENDAR_QUARTER_START_MONTH_KEY: 'quarterStartMonth',
    CLIENT_STATE_ANSWER_MODE_KEY: 'answerMode',
    CLIENT_STATE_VIZ_SELECTION_ANSWER_MODE_KEY: 'vizSelectionAnswerMode',
    INFORMATICA_CONFIG: 'informaticaCloudConfig',
    INFORMATICA_EXPRESSION_ASSISTANT: 'expressionAssistantUrl',
    USE_TIMELY_SCHEDULING: 'useTimelyForScheduling',
    ACCEPT_LANGUAGE_CONFIG_KEY: 'acceptLanguage',
    CAN_CHANGE_PASSWORD: 'canChangePassword',
    ENABLE_MAP_TILES_CONFIG_KEY: 'enableMapTiles',
    GEO_MAP_CONFIG_KEY: 'geoMapConfig',
    DATA_BATCH_SIZE_KEY: 'dataBatchSize',
    MAX_CONCURRENT_DATA_CALLS: 'maxConcurrentDataCalls',
    samlConfig: {
        SAML_CONFIG: 'samlConfiguration',
        SAML_ENABLED: 'samlEnabled',
        SAML_LOGIN_PAGE_REDIRECT: 'samlLoginPageRedirect',
        LOGOUT_ENABLED: 'logoutEnabledInUI',
    },
    RESTRICT_SEARCH_HELP: 'restrictSearchHelp',
    DEFAULT_FILTER_NON_CASCADING: 'defaultFilterNonCascading',
    OPEN_VIZ_URL_IN_SAME_TAB: 'openVizUrlInSameTab',
    TRIAL_VERSION_CONFIG_KEY: 'trialVersionConfig',
    TRIAL_ENABLED_KEY: 'enableTrialVersion',
    SAGE_OUTPUT_COLUMN_ID_KEY: 'sageOutputColumnId',
    OUTPUT_IDS_WITH_MATCHING_LOGICAL_KEY: 'outputIdsWithMatchingLogicalKey',
    EFFECTIVE_COLUMN_ID_KEY: 'effectiveColumnGuid',
    VIZ_TYPE_PINBOARD: 'pinboard_viz',
    VIZ_TYPE_CHART: 'chart',
    VIZ_TYPE_HEADLINE: 'headline',
    VIZ_TYPE_TABLE: 'table',
    VIZ_TYPE_FILTER: 'filter',
    VIZ_TYPE_GENERIC: 'generic_viz',
    VIZ_TYPE_CLUSTER: 'CLUSTER_VIZ',
    VIZ_TYPE_R_ANALYSIS: 'r_analysis',
    VIZ_TITLE_KEY: 'title',
    VIZ_NAME_KEY: 'name',
    VALUE_KEY: 'value',
    VALUES_KEY: 'values',
    TEXT_KEY: 'text',
    MAIL_KEY: 'mail',
    LAYOUT_TILE_STATE_STANDARD: 'standard',
    LAYOUT_TILE_STATE_EXPANDED: 'expanded',
    ENLITE_ENABLED: 'enliteEnabled',
    ENLITE_PRIVILEGED: 'enlitePrivileged',
    ENLITE_METRICS_DISABLED: 'enliteMetricsDisabled',
    GLOBALLY_TRENDING: 'globallyTrending',
    RECENTLY_TRENDING: 'recentlyTrending',
    RECENTLY_VIEWED: 'objects',
    LOGICAL_TABLE_METADATA_KEY: 'tableMetadata',
    LOGICAL_TABLE_CONTENT_KEY: 'logicalTableContent',
    LOGICAL_TABLE_DATA_KEY: 'tableData',
    LOGICAL_TABLE_JOIN_TYPE: 'joinType',
    LOGICAL_TABLE_JOIN_TYPE_OVERRIDES: 'joinTypeOverrides',
    LOGICAL_TABLE_JOIN_OVERRIDES: 'joinOverrides',
    LOGICAL_TABLE_IS_OPTIMIZED: 'isOptimized',
    LOGICAL_TABLE_IS_ONE_TO_ONE: 'isOneToOneJoin',
    LOGICAL_TABLE_BYPASS_RLS: 'bypassRLS',
    WORKSHEET_TYPE: 'worksheetType',
    DEFAULT_DATA_SOURCE: 'Default',
    COMPLETE: 'complete',
    INCOMPLETE_DETAIL: 'incompleteDetail',
    GROWTH_KEY: 'growth',
    GROUP_BY_KEY: 'groupBy',
    MAX_SEARCH_IQ_PREFERRED_COLUMNS: 'maxNumSearchIQPreferredColumnsAllowed',
    MAX_SEARCH_IQ_PREFERRED_DATE_COLUMNS: 'maxNumSearchIQPreferredDateColumnsAllowed',
    queryJoinType: {
        INNER: 'INNER',
        LEFT_OUTER: 'LEFT_OUTER',
        RIGHT_OUTER: 'RIGHT_OUTER',
        FULL_OUTER: 'OUTER'
    },
    worksheetType: {
        CONTAINER: 'CONTAINER',
        VIEW: 'VIEW'
    },
    COMPOUND_INDICES_KEY: 'compoundRowIndices',
    IS_DERIVED_KEY: 'isDerived',
    DERIVATION_EXPRESSION: 'derivationExpr',
    DERIVATION_EXPR_TYPE: 'exprType',
    SOURCES_NODE_KEY: 'sources',
    metadataTypeSort: {
        AUTHOR: 'AUTHOR',
        CREATED: 'CREATED',
        DEFAULT: 'DEFAULT',
        MODIFIED: 'MODIFIED',
        MATERIALIZED: 'MATERIALIZED',
        NAME: 'NAME',
        DISPLAY_NAME: 'DISPLAY_NAME',
        STATUS: 'STATUS'
    },
    timelyJob: {
        NAME: 'name',
        CREATION_TIME: 'creation_time',
        LAST_MODIFICATION_TIME: 'last_modification_time'
    },
    pinboardType: {
        LEARN: 'LEARN',
        ADMIN: 'ADMIN',
        INSIGHT: 'INSIGHT',
        EMBED: 'EMBED',
        DEFAULT: 'DEFAULT',
        UNKNOWN: 'UNKNOWN'
    },
    materialize: {
        STATUS: 'status',
        LAST_REFRESH_TIME: 'lastRefreshTime',
    },
    metadataType: {
        LOGICAL_TABLE: 'LOGICAL_TABLE',
        LOGICAL_COLUMN: 'LOGICAL_COLUMN',
        LOGICAL_RELATIONSHIP: 'LOGICAL_RELATIONSHIP',
        IMPORTED_DATA: 'USER_DATA',
        QUESTION_ANSWER_BOOK: 'QUESTION_ANSWER_BOOK',
        DATA_SOURCE: 'DATA_SOURCE',
        REPORT_BOOK: 'REPORT_BOOK',
        PINBOARD_ANSWER_BOOK: 'PINBOARD_ANSWER_BOOK',
        TAG: 'TAG',
        VISUALIZATION: 'VISUALIZATION',
        TABLE_FILTER: 'TABLE_FILTER',
        USER: 'USER',
        GROUP: 'USER_GROUP',
        ROLE: 'USER_ROLE',
        RELATED_LINK: 'RELATED_LINK',
        R_TEMPLATE: 'R_TEMPLATE',
        USER_QUESTION: 'USER_QUESTION',
        subType: {
            WORKSHEET: 'WORKSHEET',
            PRIVATE_WORKSHEET: 'PRIVATE_WORKSHEET',
            IMPORTED_DATA: 'USER_DEFINED',
            SYSTEM_TABLE: 'ONE_TO_ONE_LOGICAL',
            DB_VIEW: 'DB_VIEW',
            VIEW: 'AGGR_WORKSHEET'
        },
        FILTER: 'FILTER'
    },
    privilegeType: {
        ADMINISTRATION: 'ADMINISTRATION',
        AUTHORING: 'AUTHORING',
        USERDATAUPLOADING: 'USERDATAUPLOADING',
        DATADOWNLOADING: 'DATADOWNLOADING',
        SHAREWITHALL: 'SHAREWITHALL',
        DATAMANAGEMENT: 'DATAMANAGEMENT',
        JOBSCHEDULING: 'JOBSCHEDULING',
        A3ANALYSIS: 'A3ANALYSIS',
        BYPASSRLS: 'BYPASSRLS',
        EXPERIMENTALFEATUREPRIVILEGE: 'EXPERIMENTALFEATUREPRIVILEGE',
        RANALYSIS: 'RANALYSIS'
    },
    dataSourceConfiguration: {
        PRE_SCRIPT_STATUS: 'PreScriptStatus',
        POST_SCRIPT_STATUS: 'PostScriptStatus'
    },
    relationshipMetadataType: {
        SYSTEM_RELATIONSHIP: 'PK_FK',
        GENERIC: 'GENERIC',
        USER_DEFINED: 'USER_DEFINED'
    },
    userSchemaErrorTypes: {
        validRows: 'VALID_ROWS',
        invalidRows: 'INVALID_ROWS',
        rowError: 'ROW_ERROR',
        invalidFile: 'INVALID_FILE',
        key: 'KEY',
        relationship: 'RELATIONSHIP',
        column: 'COLUMN'
    },
    category: {
        ALL: 'ALL',
        MY: 'MY',
        REQUESTED: 'REQUESTED',
        FAVORITE: 'FAVORITE'
    },
    tableTypes: {
        Imported: 'FalconUserDataSchema',
        Tables: 'falcon_default_schema'
    },
    permission: {
        NO_ACCESS: 'NO_ACCESS',
        READ_ONLY: 'READ_ONLY',
        MODIFY: 'MODIFY',
        VARIES: 'VARIES'
    },
    clientExpressionColumnType: {
        NONE: 'NONE',
        LOGICAL_COLUMN: 'LOGICAL_COLUMN',
        VIZ_COLUMN: 'VIZ_COLUMN'
    },
    metrics: {
        actionType: {
            NONE: 'NONE'
        }
    },
    vizType: {
        CHART: 'CHART',
        FILTER: 'FILTER',
        GENERIC_VIZ: 'GENERIC_VIZ',
        PINBOARD_VIZ: 'PINBOARD_VIZ',
        TABLE: 'TABLE',
        HEADLINE: 'HEADLINE',
        R_ANALYSIS: 'R_ANALYSIS',
    },
    genericVizSubtype: {
        SEARCH_SUMMARY_VIZ: 'SEARCH_SUMMARY_VIZ',
        SEARCH_DETAIL_TABLE_VIZ: 'SEARCH_DETAIL_TABLE_VIZ',
        SEARCH_DETAIL_NODE_VIZ: 'SEARCH_DETAIL_NODE_VIZ',
        DATABASE_SUMMARY_VIZ: 'DATABASE_SUMMARY_VIZ',
        DATABASE_DETAIL_VIZ: 'DATABASE_DETAIL_VIZ',
        CLUSTER_SUMMARY_VIZ: 'CLUSTER_SUMMARY_VIZ',
        CLUSTER_DETAIL_INFO_VIZ: 'CLUSTER_DETAIL_INFO_VIZ',
        CLUSTER_DETAIL_LOG_VIZ: 'CLUSTER_DETAIL_LOG_VIZ',
        CLUSTER_DETAIL_SNAPSHOT_VIZ: 'CLUSTER_DETAIL_SNAPSHOT_VIZ',
        ALERT_SUMMARY_VIZ: 'ALERT_SUMMARY_VIZ',
        EVENT_SUMMARY_VIZ: 'EVENT_SUMMARY_VIZ',
        ALERT_DETAIL_ALERTS_VIZ: 'ALERT_DETAIL_ALERTS_VIZ',
        ALERT_DETAIL_EVENTS_VIZ: 'ALERT_DETAIL_EVENTS_VIZ',
        ALERT_DETAIL_NOTIFICATIONS_VIZ: 'ALERT_DETAIL_NOTIFICATIONS_VIZ'
    },
    adminUI: {
        CLUSTER_NAME: 'cluster_name',
        RELEASE: 'release_name',
        NODE_INFO: 'node_info',
        LAST_SNAPSHOT_TIME: 'finish_timestamp_seconds',
        INFO_ALERT: 'INFO',
        WARNING_ALERT: 'WARNING',
        CRITICAL_ALERT: 'CRITICAL'
    },
    lightWeightDataCache: {
        LOAD_STATUS_SUCCESS: 'success',
        LOAD_STATUS_FAILED: 'failed'
    },
    currencyTypes: {
        FROM_USER_LOCALE: 'FROM_USER_LOCALE',
        FROM_COLUMN: 'FROM_COLUMN',
        FROM_ISO_CODE: 'FROM_ISO_CODE'
    },
    geoConfigType: {
        LATITUDE: 'LATITUDE',
        LONGITUDE: 'LONGITUDE',
        ZIP_CODE: 'ZIP_CODE',
        ADMIN_DIV_0: 'ADMIN_DIV_0',
        ADMIN_DIV_1: 'ADMIN_DIV_1',
        ADMIN_DIV_2: 'ADMIN_DIV_2',
        CUSTOM_REGION: 'CUSTOM_REGION',
        POINT: 'POINT'
    },
    queryInfo: {
        DATA: 'data'
    },
    scheduledJob: {
        PINBOARD_ID: 'pinboard_id'
    },
    SCHEDULER_CONFIG: 'scheduledReportingConfig',
    EMAIL_DOMAINS_WHITELIST: 'whitelistedDomains',
    vizColumn: {
        DATA_RECENCY: 'baseDataRecency'
    },
    filter: {
        FILTER_CONTENT: 'filterContent',
        ROWS: 'rows',
        filterValue: {
            KEY: 'key',
            SELECTED: 'selected',
            KEYNULL: 'keyNull'
        },
        COLUMN: 'column',
        SINGLE_OPERATOR_KEY: 'oper',
        MULTIPLE_OPERATORS_KEY: 'multiOperatorValues',
        MULTIPLE_OPERATOR: {
            OPERATOR: 'operator',
            VALUES: 'filterValues'
        },
        ROW_INDEX: 'rowIndex',
        NEGATION: 'negation',
        IS_EDITABLE: 'isEditable',
        LIST_FILTER_KEYS: {
            AUTHOR_FILTER: 'category'
        },
        SAVED_FILTERS: {
            AUTHOR_FILTER: 'savedAuthorFilter'
        }
    },
    visualizationModel: {
        VIZ_JSON: 'vizJson'
    },
    relatedLink: {
        DESTINATION_VIZ_ID: 'dstVizId',
        RELATED_LINKS: 'relatedLinks',
    },
    header: {
        ID: 'id',
        NAME: 'name',
        DESCRIPTION: 'description',
        OWNER: 'owner',
        AUTHOR: 'author',
        IS_HIDDEN: 'isHidden',
        IS_DELETED: 'isDeleted',
        IS_FAVORITE: 'isFavorite',
        IS_EXTERNAL_KEY: 'isExternal',
        MODIFIED: 'modified'
    },
    storable: {
        CONTENT: 'content'
    },
    a3: {
        SELECTION_INCLUDE: 'include',
        SELECTION_EXCLUDE: 'exclude'
    },
    a3Algorithms: {
        STDEV_MEAN: 'STDEV_MEAN',
        MAD_MEDIAN: 'MAD_MEDIAN',
        ANOMALY_EXPLANATION: 'ANOMALY_EXPLANATION',
        SHESD: 'SHESD',
        LINEAR_REGRESSION: 'LINEAR_REGRESSION',
        CUSTOM_SCRIPT: 'CUSTOM_SCRIPT',
        TREND_ANALYSIS: 'TREND_ANALYSIS',
        CROSS_CORRELATION: 'CROSS_CORRELATION',
        K_MEANS_CLUSTERING: 'K_MEANS_CLUSTERING'
    },
    chartClientStateKeys: {
        SYSTEM_SERIES_COLORS: 'systemSeriesColors',
        SERIES_COLORS: 'seriesColors',
        SYSTEM_MULTI_COLOR_SERIES_COLORS: 'systemMultiColorSeriesColors',
        MULTI_COLOR_SERIES_COLORS: 'multiColorSeriesColors'
    },
    paginationTabsState: {
        EMPTY: 'empty',
        SELECTED: 'selected'
    },
    mixpanel: {
        ENABLE_MIXPANEL_SERVICE: 'enableMixpanelService',
        MIXPANEL_ACCESS_TOKEN: 'mixpanelAccessToken'
    },
    systemR: {
        R_ANALYSIS_OUTPUT: 'ranalysisOutput',
        PNG_OUTPUT: 'PNG',
        CSV_OUTPUT: 'CSV',
        SAGE_OUTPUT_COLUMN_ID: 'sage_output_column_id',
        VARIABLE_NAME: 'variable_name',
        COLUMN_NAME: 'column_name'
    },
    timeBuckets: {
        'ABS_WEEK_AS_EPOCH': 'ABS_WEEK_AS_EPOCH',
        'WEEK_IN_YEAR_AS_EPOCH': 'WEEK_IN_YEAR_AS_EPOCH',
        'ABS_MONTH_AS_EPOCH': 'ABS_MONTH_AS_EPOCH',
        'ABS_QUARTER_AS_EPOCH': 'ABS_QUARTER_AS_EPOCH',
        'ABS_YEAR_AS_EPOCH': 'ABS_YEAR_AS_EPOCH',
        'ABS_DAY_AS_EPOCH': 'ABS_DAY_AS_EPOCH',
        'ABS_HOUR_AS_EPOCH': 'ABS_HOUR_AS_EPOCH',
        'HOUR_OF_DAY': 'HOUR_OF_DAY',
        'DAY_OF_WEEK': 'DAY_OF_WEEK',
        'DAY_OF_MONTH': 'DAY_OF_MONTH',
        'DAY_OF_QUARTER': 'DAY_OF_QUARTER',
        'DAY_OF_YEAR': 'DAY_OF_YEAR',
        'WEEK_OF_MONTH': 'WEEK_OF_MONTH',
        'WEEK_OF_QUARTER': 'WEEK_OF_QUARTER',
        'WEEK_OF_YEAR': 'WEEK_OF_YEAR_ISO',
        'MONTH_OF_QUARTER': 'MONTH_OF_QUARTER',
        'MONTH_OF_YEAR': 'MONTH_OF_YEAR',
        'QUARTER_OF_YEAR': 'QUARTER_OF_YEAR'
    },
    embedData: {
        NAME: 'name',
        COLUMN_NAMES: 'columnNames',
        SAMPLING_RATIO: 'samplingRatio',
        TOTAL_ROW_COUNT: 'totalRowCount',
        ROW_COUNT: 'rowCount',
        DATA: 'data',
        PAGE_SIZE: 'pageSize',
        OFFSET: 'offset',
    }
};

});

unwrapExports(jsonConstants);
var jsonConstants_1 = jsonConstants.jsonConstants;

var flags_const = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.COMMON_FLAGS = {
    ufs: {
        name: 'ufs',
        description: 'This flag tracks the utm first source',
        type: 'string',
        isListed: true,
        defaultValue: ''
    },
    ufm: {
        name: 'ufm',
        description: 'This flag tracks the utm first medium',
        type: 'string',
        isListed: true,
        defaultValue: ''
    }
};

});

unwrapExports(flags_const);
var flags_const_1 = flags_const.COMMON_FLAGS;

var envFlags = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


exports.FLAGS = {};
Object.assign(exports.FLAGS, flags_const.COMMON_FLAGS);
function convertToType(value, type) {
    switch (type) {
        case 'string':
            if (value === void 0 || value === null) {
                return value;
            }
            return '' + value;
        case 'number':
            return parseInt(value, 10);
        case 'boolean':
            if (value === 'true') {
                return true;
            }
            else if (value === 'false') {
                return false;
            }
            else if (_.isNull(value)) {
                return null;
            }
            return !!value;
    }
    return null;
}
exports.convertToType = convertToType;
exports.initEnvFlags = function (overideFlags) {
    Object.assign(exports.FLAGS, overideFlags);
};
exports.envFlags = {
    getValue: function (flagName) {
        if (!exports.FLAGS.hasOwnProperty(flagName)) {
            return null;
        }
        if (exports.FLAGS[flagName].overideValue !== undefined) {
            return exports.FLAGS[flagName].overideValue;
        }
        return exports.FLAGS[flagName].defaultValue;
    },
    setValue: function (flagName, value) {
        if (!exports.FLAGS.hasOwnProperty(flagName)) {
            return;
        }
        exports.FLAGS[flagName].overideValue = convertToType(value, exports.FLAGS[flagName].type);
    },
    resetValue: function (flagName) {
        delete exports.FLAGS[flagName].overideValue;
    }
};

});

unwrapExports(envFlags);
var envFlags_1 = envFlags.FLAGS;
var envFlags_2 = envFlags.convertToType;
var envFlags_3 = envFlags.initEnvFlags;
var envFlags_4 = envFlags.envFlags;

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }
};

var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

var merge = function merge(target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        } else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }

    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};

var encode = function encode(str, defaultEncoder, charset) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    compactQueue(queue);

    return value;
};

var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
    return [].concat(a, b);
};

var utils = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    merge: merge
};

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var formats = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

var has$1 = Object.prototype.hasOwnProperty;

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
        return prefix;
    }
};

var isArray$1 = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;

var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    formatter: formats.formatters[formats['default']],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify( // eslint-disable-line func-name-matching
    object,
    prefix,
    generateArrayPrefix,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    formatter,
    encodeValuesOnly,
    charset
) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
        obj = obj.join(',');
    }

    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (isArray$1(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (isArray$1(obj)) {
            pushToArray(values, stringify(
                obj[key],
                typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix,
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly,
                charset
            ));
        } else {
            pushToArray(values, stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly,
                charset
            ));
        }
    }

    return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has$1.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];

    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray$1(opts.filter)) {
        filter = opts.filter;
    }

    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

var stringify_1 = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);

    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (isArray$1(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    } else if (opts && 'indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (options.sort) {
        objKeys.sort(options.sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(
            obj[key],
            key,
            generateArrayPrefix,
            options.strictNullHandling,
            options.skipNulls,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.formatter,
            options.encodeValuesOnly,
            options.charset
        ));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        } else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }

    return joined.length > 0 ? prefix + joined : '';
};

var has$2 = Object.prototype.hasOwnProperty;

var defaults$1 = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};

var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                } else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }

    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults$1.decoder, charset);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults$1.decoder, charset);
            val = options.decoder(part.slice(pos + 1), defaults$1.decoder, charset);
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }

        if (val && options.comma && val.indexOf(',') > -1) {
            val = val.split(',');
        }

        if (has$2.call(obj, key)) {
            obj[key] = utils.combine(obj[key], val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options) {
    var leaf = val;

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
            obj = [].concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === '') {
                obj = { 0: leaf };
            } else if (
                !isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else {
                obj[cleanRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has$2.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has$2.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults$1;
    }

    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults$1.charset : opts.charset;

    return {
        allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$1.allowPrototypes,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$1.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$1.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$1.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults$1.delimiter,
        depth: typeof opts.depth === 'number' ? opts.depth : defaults$1.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$1.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$1.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$1.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
    };
};

var parse = function (str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};

var lib = {
    formats: formats,
    parse: parse,
    stringify: stringify_1
};

const blink_flags = {
    // Internal dev flags.
    /**
     * ALWAYS_SHOW_HELP_CALLOUTS
     */
    alwaysShowHelpCallouts: {
        name: 'alwaysShowHelpCallouts',
        description: 'If true, help callout bubbles are always shown',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * NEVER_SHOW_HELP_CALLOUTS
     */
    neverShowHelpCallouts: {
        name: 'neverShowHelpCallouts',
        description: 'If true, help callout bubbles are never shown',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * DEBUG_JOB
     */
    debugJob: {
        name: 'debugJob',
        description: 'Add a cron schedule for jobs',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * DISABLE_CHART_TOOLTIPS - mostly required for testing
     */
    disableChartTooltips: {
        name: 'disableChartTooltips',
        description: 'Disable chart tooltips',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * DISABLE_SAML_AUTO_REDIRECT
     */
    disableSAMLAutoRedirect: {
        name: 'disableSAMLAutoRedirect',
        description: 'Override the system configuration to auto redirect to SAML login',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * DISABLE_TRANSFORMATIONS_IN_VIZ_EMBEDS
     */
    disableTransformationsInVizEmbeds: {
        name: 'disableTransformationsInVizEmbeds',
        description: 'Override the system configuration to enable/disable transformations in ' +
            'embedded vizes and pinboards',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * EMBED_APP
     */
    embedApp: {
        name: 'embedApp',
        description: 'This flag enables full embed app',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_ANALYZE_MODE
     */
    enableAnalyzeMode: {
        name: 'enableAnalyzeMode',
        description: 'Whether to show analyze mode for objects like worksheet.',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_ANSWERS
     */
    enableAnswers: {
        name: 'enableAnswers',
        description: 'This flag enables saved answers behaviour',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * DELAYED_SEARCH
     */
    delayedSearch: {
        name: 'delayedSearch',
        description: 'This flag enables delayed search',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * OBJECT_SEARCH_RESULT
     */
    objectSearchResult: {
        name: 'objectSearchResult',
        description: 'This flag enables object search result',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * UNIVERSAL SEARCH FEDD
     */
    enableUniversalSearch: {
        name: 'enableUniversalSearch',
        description: 'This flag enables universal search page.',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * UNIVERSAL SEARCH FEDD - SNAPSHOT CAPTURE
     */
    enableSnapshotCapture: {
        name: 'enableSnapshotCapture',
        description: 'This flag enables snapshot capture for feed',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * PRIMARY_NAV_HIDDEN
     */
    primaryNavHidden: {
        name: 'primaryNavHidden',
        description: 'This flag shows primary nav',
        type: 'boolean',
        isListed: true,
        defaultValue: undefined
    },
    /**
     * ENABLE_CUSTOM_REGION
     */
    enableCustomRegion: {
        name: 'enableCustomRegion',
        description: 'Enables ability to select custom region in geo config setting',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_FORMULAE
     */
    enableFormulae: {
        name: 'enableFormulae',
        description: 'This flag enables formulae',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_PINBOARD_SNAPSHOTS
     */
    enablePinboardSnapshots: {
        name: 'enablePinboardSnapshots',
        description: 'This flag enables pinboard snapshotting in the UI',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_QOQ
     */
    enableQoQ: {
        name: 'enableQoQ',
        description: 'This flag enables query on query',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_ANSWERPAGE_INSIGHTS
     */
    enableAnswerPageInsights: {
        name: 'enableAnswerPageInsights',
        description: 'This flag enables Related Insights on the answer page',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_PINBOARD_METADATA_EXECUTIVE_SUMMARY
     */
    enablePinboardMetadataExecutiveSummary: {
        name: 'enablePinboardMetadataExecutiveSummary',
        description: 'This flag enables Executive Summary on the pinboard metadata',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_HOMEPAGE_INSIGHTS
     */
    enableHomepageInsights: {
        name: 'enableHomepageInsights',
        description: 'This flag enables Did you know? Insights on the homepage',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_INLINE_SPOTIQ
     */
    enableInlineSpotIq: {
        name: 'enableInlineSpotIq',
        description: 'This flag enables inline SpotIQ analysis on answer page',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_OUT_OF_SCOPE_MATCHES
     */
    enableOutOfScopeMatches: {
        name: 'enableOutOfScopeMatches',
        description: '',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_SAGE_USER_FEEDBACK
     */
    enableSageUserFeedback: {
        name: 'enableSageUserFeedback',
        description: 'This flag enables SageUserFeedback',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_TABLE_COLUMN_HEADER_MENU
     */
    enableTableColumnHeaderMenu: {
        name: 'enableTableColumnHeaderMenu',
        description: 'If true, user should see a table column header button which can be ' +
            'clicked to show a menu containing filters or other column level operations',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_TRACE
     */
    enableTraceDownloads: {
        name: 'enableTraceDownloads',
        description: 'enable trace download',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_WEB_GL_MAPS
     */
    enableWebGLMaps: {
        name: 'enableWebGLMaps',
        description: 'Enables option of WebGL geo maps.',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * FLAG_MATCH_VALUES
     */
    matchValues: {
        name: 'matchValues',
        description: 'returns boolean value, whether to send filter values to callosum ' +
            'for verification',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * GEO_TILE_SOURCE_ID
     */
    geoTileSourceId: {
        name: 'geoTileSourceId',
        description: 'This flag enables loading of image tiles in geomaps based on ' +
            'the value of the flag',
        type: 'string',
        isListed: true,
        defaultValue: null
    },
    /**
     * GEO_TILE_TYPE
     */
    geoTileType: {
        name: 'geoTileType',
        description: 'This flag sets the type of tile imager loaded from the source id ' +
            'specified via `geoTileSourceId` flag',
        type: 'string',
        isListed: true,
        defaultValue: null
    },
    /**
     * LOCALE
     */
    locale: {
        name: 'locale',
        description: 'This flag overrides any preferred locales',
        type: 'string',
        isListed: true,
        defaultValue: ''
    },
    /**
     * METADATA_PAGE_SIZE
     */
    metadataBatchSize: {
        name: 'metadataBatchSize',
        description: 'Size of each page on metadata list pages',
        type: 'number',
        isListed: true,
        defaultValue: 20
    },
    /**
     * QUERY_UPDATE_DEBOUNCE_THRESHOLD
     */
    queryUpdateDebounceThreshold: {
        name: 'queryUpdateDebounceThreshold',
        description: 'Threshold to wait for query changes to settle ' +
            'before system tries to fetch answer',
        type: 'number',
        isListed: true,
        defaultValue: undefined
    },
    /**
     * RESTRICT_SEARCH_HELP
     */
    restrictSearchHelp: {
        name: 'restrictSearchHelp',
        description: 'Test flag to set/unset this cluster state',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * OPEN_VIZ_URL_IN_SAME_TAB
     */
    openVizUrlInSameTab: {
        name: 'openVizUrlInSameTab',
        description: 'Opens formatted url in data viz in the same tab',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * MAX_CONCURRENT_DATA_CALLS
     */
    maxConcurrentDataCalls: {
        name: 'maxConcurrentDataCalls',
        description: 'Number of concurrent data calls on a pinboard page',
        type: 'number',
        isListed: true,
        defaultValue: null
    },
    /**
     * SAGE_SNAPSHOT_REQUEST
     */
    sageSnapshotRequest: {
        name: 'sageSnapshotRequest',
        description: 'This flag enables writing of snapshot file for a request',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * SCREENSHOT_MODE
     */
    screenshotMode: {
        name: 'screenshotMode',
        description: 'This flag enables snapshot mode',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * SHOW_RELATED_ITEMS
     */
    showRelatedItems: {
        name: 'showRelatedItems',
        description: 'Whether to show related Items',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * SHOW_RELATED_LINKS
     */
    showRelatedLinks: {
        name: 'showRelatedLinks',
        description: 'Whether to show related Links only',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * SUPPRESS_NA_HEADLINES
     */
    suppressNaHeadlines: {
        name: 'suppressNaHeadlines',
        description: 'If true, anytime there is a N/A headline it will be suppressed',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * TEST_NPS
     */
    testNPS: {
        name: 'testNPS',
        description: 'Add a flag that enables wootric for testing',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * TRACK_PERFORMANCE
     */
    trackPerformance: {
        name: 'trackPerformance',
        description: 'Enables performance metric tracking when set to true',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * USE_BACH_WORKSHEET_MODEL
     */
    useBachWorksheetModel: {
        name: 'useBachWorksheetModel',
        description: 'use bach worksheet model',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * USE_LOGICAL_TABLE_PREVIEW
     */
    useLogicalTablePreview: {
        name: 'useLogicalTablePreview',
        description: 'use logical table preview and bach APIs',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_HELP
     */
    enableHelp: {
        name: 'enableHelp',
        description: 'This flag enables help',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_SEARCH_HISTORY
     */
    enableSearchHistory: {
        name: 'enableSearchHistory',
        description: 'This flag enables search history',
        type: 'boolean',
        isListed: true,
        defaultValue: undefined
    },
    /**
     * ENABLE_PERFORMANCE_CAPTURE
     */
    enablePerformanceCapture: {
        name: 'enablePerformanceCapture',
        description: 'This flag enables the UI to capture performance',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_WOOTRIC
     */
    enableWootric: {
        name: 'enableWootric',
        description: 'This flag enables Wootric',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * ENABLE_SESSION_RECORDING
     */
    enableSessionRecording: {
        name: 'enableSessionRecording',
        description: 'This flag enables video recording the user session',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_EMPTY_SEARCH_PAGE_INSIGHTS
     */
    enableEmptySearchPageInsights: {
        name: 'enableEmptySearchPageInsights',
        description: 'This flag enables insights on empty search page',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_ADMIN_PORTAL
     */
    adminPortal: {
        name: 'adminPortal',
        description: 'This flag redirects Admin tab to managementportal',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_ENLITE
     */
    enableEnlite: {
        name: 'enableEnlite',
        description: 'This flag enables natural language querying',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * Enable explore view in pinboards
     */
    enableExplore: {
        name: 'enableExplore',
        description: 'Allows the user to expand a pinboard card and perform incremental changes',
        type: 'boolean',
        isListed: true,
        defaultValue: undefined
    },
    /**
     * DISABLE_UBR
     */
    disableUBR: {
        name: 'disableUBR',
        description: 'This flag disables UBR for enlite queries',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * ENABLE_WORKSHEET_FILTERS
     */
    enableWorksheetFilters: {
        name: 'enableWorksheetFilters',
        description: 'This flag turns on the worksheet filters features',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    /**
     * VIZ_SNAPSHOT_ENABLED
     */
    vizSnapshotEnabled: {
        name: 'vizSnapshotEnabled',
        description: 'This flag enable/disable viz snapshot feature',
        type: 'boolean',
        isListed: true,
        defaultValue: null
    },
    // SCAL-31849
    /**
     * HIDE_DATA_TAB
     */
    hideDataTabOnNoManageDataPermission: {
        name: 'hideDataTabOnNoManageDataPermission',
        description: 'This flag hides data tab when user ' +
            'does not have permission to manage data',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /* ENABLE_WALKME  */
    isWalkmeEnabled: {
        name: 'isWalkmeEnabled',
        description: 'This flag enables walkme for the user',
        type: 'boolean',
        isListed: true,
        defaultValue: undefined
    },
    /* ENABLE_WALKME_TEST_ENV  */
    enableTestEnvForWalkme: {
        name: 'enableTestEnvForWalkme',
        description: 'This flag enables walkme TEST Env for the user',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /* ENABLE_SIGNUP_BTN  */
    signUpEnabled: {
        name: 'signUpEnabled',
        description: 'This flag enables Sign up Button',
        type: 'boolean',
        isListed: true,
        defaultValue: null
    },
    /* SIGNUP_BTN_LINK  */
    signUpButtonLink: {
        name: 'signUpButtonLink',
        description: 'This flag configures the endpoint of Sign Up Button',
        type: 'string',
        isListed: true,
        defaultValue: null
    },
    /* SIGNUP_BTN_TEXT  */
    signUpButtonText: {
        name: 'signUpButtonText',
        description: 'This flag configures the Sign Up Button Text',
        type: 'string',
        isListed: true,
        defaultValue: null
    },
    // Customer exposed flags.
    /**
     * DATA_BATCH_SIZE
     * This flag allows user to control the number of data points plotted on a
     * visualization. NOTE: Changing this can have performance implications so
     * this needs to be handled with caution.
     * Type: Number
     isListed: true,
     */
    dataBatchSize: {
        name: 'dataBatchSize',
        description: 'Max number of data points to fetch in callosum data api call',
        type: 'number',
        isListed: true,
        defaultValue: 0
    },
    /**
     * USER_GROUP_COUNT
     */
    userGroupCount: {
        name: 'userGroupCount',
        description: 'Number of groups to be displayed for a user',
        type: 'number',
        isListed: true,
        defaultValue: 100
    },
    // SCAL-31645: Stack chart need more data values ... (Apple)
    /**
     * MAX_CHART_LEGEND_CARDINALITY
     */
    maxChartLegendCardinality: {
        name: 'maxChartLegendCardinality',
        description: 'Maximum number distinct data values supported in charts',
        type: 'number',
        isListed: true,
        defaultValue: 40
    },
    /**
     * TABLE_AGGREGATE
     */
    tableAggregate: {
        name: 'tableAggregate',
        description: 'Add Table Aggregate option to headline',
        type: 'number',
        isListed: true,
        defaultValue: 0
    },
    /**
     * SCRIPTABILITY
     */
    scriptability: {
        name: 'scriptability',
        description: 'Allow user to import/export of TSML',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     *  CHART_ANIMATIONS
     */
    chartAnimations: {
        name: 'chartAnimations',
        description: 'Should chart show animation while rendering',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /**
     * CHART CONFIG V2
     */
    enableChartConfigV2: {
        name: 'enableChartConfigV2',
        description: 'Show new chart configurator',
        type: 'boolean',
        isListed: true,
        defaultValue: false
    },
    /***********************************************************
     *              UNLISTED FLAGS (PREVIOUSLY ENV)
     ***********************************************************/
    /**
     * DISABLE_RANDOM_COLOR
     * this flag is set to true when we take screenshots, this ensures that
     * colors stay consistent between screenshots
     */
    disableRandomColor: {
        name: 'disableRandomColor',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * E2E_TEST
     * true for e2e test mode. in this mode we should disable delays in the
     * code to keep the e2e tests as fast as possible.
     */
    e2eTest: {
        name: 'e2eTest',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * FAKE_API
     * if true, then we get data from a local file like foo.bar.json instead of calling /foo/bar api
     */
    fakeApi: {
        name: 'fakeApi',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * CALLOSUM_BASE_PATH
     * callosum path info. this is a prefix, more params are added
     * after this to make the complete path.
     */
    callosumBasePath: {
        name: 'callosumBasePath',
        description: '',
        type: 'string',
        isListed: false,
        defaultValue: '/callosum/v1'
    },
    /**
     * SAGE_BASE_PATH
     * sage path info. the trailing slash is very important.
     */
    sageBasePath: {
        name: 'sageBasePath',
        description: '',
        type: 'string',
        isListed: false,
        defaultValue: '/sage/'
    },
    /**
     * SAGE_BASE_PATH_V2
     * sage path info. the trailing slash is very important.
     */
    sageBasePathV2: {
        name: 'sageBasePathV2',
        description: '',
        type: 'string',
        isListed: false,
        defaultValue: '/complete/'
    },
    /**
     * BATCH_SIZE
     * Batch Size for Callosum API
     */
    batchSize: {
        name: 'batchSize',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: ''
    },
    /**
     * TABLE_VIZ_ONLY
     * for callosum api - flag to indicate if only table viz is to be generated in answer generation
     * this helps in debugging performance with Falcon
     */
    tableVizOnly: {
        name: 'tableVizOnly',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * DEADLINE_MS
     * for callosum api - deadline in ms. If the query does not complete before
     * the deadline, returns with either
     * no results or with partial results depending on the allowPartialResults
     * flag below. Deadline of -1 implies
     * no deadline.
     */
    deadlineMs: {
        name: 'deadlineMs',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 60000
    },
    /**
     * QUERY_DEADLINE_MS
     */
    queryDeadlineMs: {
        name: 'queryDeadlineMs',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 60000
    },
    /**
     * DEADLINE_EXPLORER_MS
     * for callosum data explorer api - deadline in ms. We use higher deadline for
     * data explorer.
     */
    deadlineExplorerMs: {
        name: 'deadlineExplorerMs',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 300000
    },
    /**
     * ALLOW_PARTITAL_RESULTS
     * used in association with deadlineMs. If a deadline is set,
     * this flag determines if partial results are
     * returned to the client when the deadline is hit
     */
    allowPartialResults: {
        name: 'allowPartialResults',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     * ALLOW_PARTIAL_RESULTS_EXPORER
     * used in association with deadlineExplorerMs. If a deadline is set,
     * this flag determines if partial results
     * are returned to the client when the deadline is hit
     */
    allowPartialResultsExplorer: {
        name: 'allowPartialResultsExplorer',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     * MAX_ITEMS_IN_SAGE_CACHE
     * to prevent boundless growth of the sage cache, limit to a max number of states it can hold
     */
    maxItemsInSageCache: {
        name: 'maxItemsInSageCache',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 5
    },
    /**
     * MAX_SAGE_COMPLETIONS
     * max number of tokens to get from sage
     */
    maxSageCompletions: {
        name: 'maxSageCompletions',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 20
    },
    /**
     * SAGE_TIMEOUT
     * Number of milliseconds, thrift autocomplete client will
     * wait before calling the error callback.
     */
    sageTimeout: {
        name: 'sageTimeout',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 20000
    },
    /**
     * A3_TIMEOUT
     * Timeout for the a3 service queries.
     */
    a3Timeout: {
        name: 'a3Timeout',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 300000
    },
    /**
     * SAGE_NETWORK_BUDGET
     * Number of milliseconds we expect sage rpc to spend on network. This is just an estimate to
     * provide a reasonable time budget to the server.
     */
    sageNetworkBudget: {
        name: 'sageNetworkBudget',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 200
    },
    /**
     * CALLOSUM_TIMEOUT
     * number of milliseconds before callosum call will be canceled
     */
    callosumTimeout: {
        name: 'callosumTimeout',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 300000
    },
    /**
     * DISABLE_RESPONSIVE_TILES
     * If true, the viz tiles do not have any size specific rendering decisions.
     */
    disableResponsiveTiles: {
        name: 'disableResponsiveTiles',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: false
    },
    /**
     * ON_DEMAND_FILTER
     * If true, the filter data is not fetched with reportbook until needed. (perf tweak).
     */
    onDemandFilter: {
        name: 'onDemandFilter',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     * DISABLE_SUCCESS_NOTIFICATION_AUTO_HIDE
     * Disables hiding success notifications automatically, needed for tests
     */
    disableSuccessNotificationAutoHide: {
        name: 'disableSuccessNotificationAutoHide',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * SUCCESS_ALERT_HIDING_DELAY
     * Set to 0 in e2e to make the tests not wait for the alert to disappear.
     */
    successAlertHidingDelay: {
        name: 'successAlertHidingDelay',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 4000
    },
    /**
     * confirmPinboardVizRemoval
     */
    confirmPinboardVizRemoval: {
        name: 'confirmPinboardVizRemoval',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     * MIN_TABLE_COLUMN_WIDTH
     * Minimum width for each table column
     */
    minTableColumnWidth: {
        name: 'minTableColumnWidth',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 120
    },
    /**
     * attributeFilterMaxValues
     */
    attributeFilterMaxValues: {
        name: 'attributeFilterMaxValues',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 100
    },
    /**
     * attributeFilterSearchDelay
     */
    attributeFilterSearchDelay: {
        name: 'attributeFilterSearchDelay',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 100
    },
    /**
     * BASIC_MODE
     * When true, the user is limited to a smaller set of keywords to keep things simpler.
     */
    basicMode: {
        name: 'basicMode',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * keywordCompletions
     */
    keywordCompletions: {
        name: 'keywordCompletions',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * disableAppTourOnOlderIE
     */
    disableAppTourOnOlderIE: {
        name: 'disableAppTourOnOlderIE',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     * enableAppTour
     */
    enableAppTour: {
        name: 'enableAppTour',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * clientLogLevel
     */
    clientLogLevel: {
        name: 'clientLogLevel',
        description: '',
        type: 'string',
        isListed: false,
        defaultValue: 'WARN'
    },
    /**
     * CURRENT_EPOCH_OVERRIDE_MD
     * In /answer calls, Callosum provides an option to specify the "instant"
     * to use when computing filter
     * time ranges for date functions e.g. 'revenue yesterday' by default will
     * use the current system time to
     * determine the time range for yesterday; if a value is set for this parameter,
     * Callosum will use this
     * as the instant instead of the current system time. The value for this
     * parameter is Epoch in milli-seconds.
     */
    currentEpochOverrideMs: {
        name: 'currentEpochOverrideMs',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 0
    },
    /**
     * ENABLE_SAGE_REQUEST_PROFILE
     * Enables profiling of request in sage.
     */
    enableSageRequestProfile: {
        name: 'enableSageRequestProfile',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * NUM_TOKENS_THRESHOLD_FOR_SMALL_DROPDOWN
     * Number of tokens in sage bar after which user will always
     * see small dropdown (single token suggestions).
     */
    numTokensThresholdForSmallDropdown: {
        name: 'numTokensThresholdForSmallDropdown',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 3
    },
    /**
     * MAX_NUM_COMPLETIONS_IN_SAGE
     * Limits the number of suggestions in sage bar.
     */
    maxNumCompletionsInSage: {
        name: 'maxNumCompletionsInSage',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 5
    },
    /**
     * SHOW_VIEW_MORE_OPTION_IN_DROPDOWN
     * The option controls whether to show "View more" button when clamping sage suggestions.
     */
    showViewMoreOptionInDropdown: {
        name: 'showViewMoreOptionInDropdown',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * minWaitTimeBeforeRendering
     */
    minWaitTimeBeforeRendering: {
        name: 'minWaitTimeBeforeRendering',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 500
    },
    /**
     * filterThrottlingDelay
     */
    filterThrottlingDelay: {
        name: 'filterThrottlingDelay',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 750
    },
    /**
     * enableFilterSlider
     */
    enableFilterSlider: {
        name: 'enableFilterSlider',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * maxColumnsAllowedInQuery
     */
    maxColumnsAllowedInQuery: {
        name: 'maxColumnsAllowedInQuery',
        description: '',
        type: 'number',
        isListed: false,
        defaultValue: 100
    },
    /**
     * FORCE_WORKSHEET_UPGRADE
     * a flag to force worksheets to go into an auto upgrade cycle on open
     * regardless of whether anything was broken. this is a one shot flag
     * which is turned off once used. this is done to avoid getting into
     * upgrade loop.
     */
    forceWorksheetUpgrade: {
        name: 'forceWorksheetUpgrade',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * defaultLocale
     */
    defaultLocale: {
        name: 'defaultLocale',
        description: '',
        // KURIEN TODO: Confirm.
        type: 'string',
        isListed: false,
        defaultValue: void 0
    },
    /**
     * customBrandingEnabled
     */
    customBrandingEnabled: {
        name: 'customBrandingEnabled',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * customBrandingFontCustomizationEnabled
     */
    customBrandingFontCustomizationEnabled: {
        name: 'customBrandingFontCustomizationEnabled',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * ignoreCache
     */
    ignoreCache: {
        name: 'ignoreCache',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     *  Enable Home Dashboard
     */
    enableHomeDashboard: {
        name: 'enableHomeDashboard',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     *  Scenarios (is running E2E Test)
     */
    scenarios: {
        name: 'scenarios',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: undefined
    },
    /**
     *  Dev
     */
    dev: {
        name: 'dev',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    /**
     * Enable Unsaved Changes Alert
     */
    enableUnsavedChangesAlert: {
        name: 'enableUnsavedChangesAlert',
        description: '',
        type: 'boolean',
        isListed: false,
        defaultValue: undefined
    },
    /**
     * Answer Display Mode
     */
    answerDisplayMode: {
        name: 'answerDisplayMode',
        description: '',
        type: 'string',
        isListed: false,
        defaultValue: undefined
    },
    downloadAnnotationText: {
        name: 'downloadAnnotationText',
        description: 'String to control the download object annotations.',
        type: 'string',
        isListed: true,
        defaultValue: undefined
    },
    addNullFilterSuggestion: {
        name: 'addNullFilterSuggestion',
        description: 'Add null filter value suggestion on filter modal',
        type: 'boolean',
        isListed: true,
        defaultValue: undefined
    },
    showPinboardPdfExportDialog: {
        name: 'showPinboardPdfExportDialog',
        description: 'Shows export dialog while exporting pinboard to pdf',
        type: 'boolean',
        isListed: false,
        defaultValue: true
    },
    showOnboarding: {
        name: 'showOnboarding',
        description: 'Takes the user through on-boarding after they are log in',
        type: 'boolean',
        isListed: true,
        defaultValue: undefined
    },
    isFirstLogin: {
        name: 'isFirstLogin',
        description: 'flag to determine if this the first login of the user',
        type: 'boolean',
        isListed: false,
        defaultValue: undefined
    },
    /**
     * Enable Joins Schema Graph Viewer
     */
    enableJoinsSchemaGraphViewer: {
        name: 'enableJoinsSchemaGraphViewer',
        description: 'Show joins schema graph viewer side by side with joins',
        type: 'boolean',
        isListed: true,
        defaultValue: true
    },
    enableColumnRename: {
        name: 'enableColumnRename',
        description: 'Enable rename option for columns in charts/tables',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * ENABLE_TABLE_RAMDISK_STATS
     */
    showRamdisk: {
        name: 'showRamdisk',
        description: 'This flag enables ramdisk column for table-view in adminUI',
        type: 'boolean',
        isListed: false,
        defaultValue: false
    },
    /**
     * Disable TS logo in cover page of PDF exports
     */
    disableTSBrandingInPdf: {
        name: 'disableTSBrandingInPdf',
        description: 'This flag disables TS logo in cover page of PDF export',
        type: 'boolean',
        isListed: false,
        defaultValue: undefined
    }
};

/**
 * Copyright: ThoughtSpot Inc. 2012-2019
 * Author: Vibhor Nanavati (vibhor@thoughtspot.com)
 *         Kurien Zacharia (kurien.zacharia@thoughtspot.com)
 *
 * @fileoverview This file extends the capabilities of the env-flags npm package
 * with blink specific flags.
 *
 * The number and value of flags are calculate in the below order:
 *
 * 1. env-flags package defined all COMMON flags (for blink & mobile). These flags have a
 *    defaultValue assigned to them, and no overideValue is defined.
 * 2. New Blink specific flags / blink specific overrides to COMMON flags are defined in
 *    flags-const.ts. Again these flags have a defaultValue, but no overideValue
 * 3. Any { key: value } pairs defined in blink.env are converted to flags with defaultValue
 * 4. Any flags passed as query params, will set the overideValue for the corresponding flags
 *    provided a flags with the name exists, otherwise its a no op.
 */
const FLAGS_LISTING_COLUMN_PADDING = 30;
let queryParams = {};
/**
 * Getter for query parameters.
 */
function getQueryParameters() {
    return queryParams;
}
/**
 * Infer type from variable.
 * @param variable
 */
function inferType(variable) {
    let jsType = typeof (variable);
    // If type is string try to infer other types from it
    if (jsType === 'string') {
        if (variable.toLowerCase() === 'true' || variable.toLowerCase() === 'false') {
            return 'boolean';
        }
        else if (!isNaN(Number.parseInt(variable))) {
            return 'number';
        }
    }
    return jsType;
}
/**
 * Utility to convert a simple Json to well formed IFlag object.
 * @param json Simple Json of type {flagName: value}
 */
function convertSimpleJsonToFlag(json, override = false) {
    let flags = {};
    for (let flag in json) {
        if (!!override) {
            // Ensure the flag already exists
            if (envFlags_1.hasOwnProperty(flag)) {
                flags[flag] = Object.assign({}, envFlags_1[flag], {
                    overideValue: envFlags_2(json[flag], envFlags_1[flag].type)
                });
            }
        }
        else {
            flags[flag] = {
                name: flag,
                description: '',
                defaultValue: envFlags_2(json[flag], inferType(json[flag])),
                type: inferType((json[flag])),
                isListed: false
            };
        }
    }
    return flags;
}
/**
 * Flags object with function for manipulating flags.
 */
const flags = {
    getValue: envFlags_4.getValue,
    setValue: envFlags_4.setValue,
    resetValue: envFlags_4.resetValue,
    isOverridden: function (flagName) {
        if (!envFlags_1.hasOwnProperty(flagName)) {
            return;
        }
        return envFlags_1[flagName].overideValue !== undefined;
    },
    BLINK_FLAGS: envFlags_1,
    help: function () {
        let helpString = generateFlagsHelpText(envFlags_1);
        let logger = logger_3('flags');
        logger.warn(helpString);
    }
};
/**
 * Generate Help text for available flags.
 * @param flags .
 */
function generateFlagsHelpText(flags) {
    const getFlagPadding = (flag) => ' '.repeat(Math.abs(FLAGS_LISTING_COLUMN_PADDING - flag.name.length));
    const getFlagEmptySpace = (flag) => ' '.repeat(flag.name.length);
    let helpString = 'Available flags:\n\n';
    helpString += 'Flag                            Description\n';
    for (let name in flags) {
        if (flags[name] && flags[name].isListed) {
            let flag = flags[name];
            helpString += `\n${flag.name} ${getFlagPadding(flag)} ` +
                `${flag.description} \n` +
                `${getFlagEmptySpace(flag)} ${getFlagPadding(flag)} ` +
                `(default: ${flag.defaultValue})`;
        }
    }
    helpString += '\n\nFlag can be overridden using url query parameter.';
    return helpString;
}
/**************************************************************
 *                      COMPUTED FLAGS
 **************************************************************/
/**
 * Define flags that require some computation.
 */
function generateComputedFlags() {
    let flags = {};
    // Is App Tour Enabled Flag
    if (!!envFlags_4.getValue(envFlags_1.enableAppTour.name)) {
        flags['enableAppTour'] = true;
    }
    // DEBUG log level
    if (queryParams.hasOwnProperty('debug')) {
        flags['clientLogLevel'] = 'DEBUG';
    }
    else if (queryParams.hasOwnProperty('trace')) {
        flags['clientLogLevel'] = 'TRACE';
    }
    return flags;
}
/**
 * Init flags.
 *
 * Merge flags from URL query params, blink.env and blink defined flags and do init.
 */
function initFlags() {
    // Get blink.env and convert to flags
    const blinkEnvFlags = convertSimpleJsonToFlag(blink.env);
    // Merge all flags together
    const merged_flags = Object.assign({}, blink_flags, blinkEnvFlags);
    // Call Init from the env-flags package with blink specific flags.
    envFlags_3(merged_flags);
    // Get query params
    queryParams = lib.parse(window.location.search.substr(1));
    // Convert to flags as override values, not defaultValues like the above.
    const queryFlags = convertSimpleJsonToFlag(queryParams, true);
    // Call init with queryFlags, init is called again here, since we have to override
    // the existing flags, so all Flags should have already been init'ed.
    envFlags_3(queryFlags);
    // Get computed flags
    const computedFlags = convertSimpleJsonToFlag(generateComputedFlags());
    // We call init again with the computed flags, because computed flags depend
    // on other flags to be already init'ed. initEnvFlags can be called multiple
    // times as its just merging the passed flags to the list of flags
    envFlags_3(computedFlags);
    window.flags = flags;
}
initFlags();
Provide('flags')(flags);
Provide('env')({
    getQueryParameters
});

var DATE_SHORT = "MM/dd/yyyy";
var DATE_SHORT_2_DIGIT_YEAR = "MM/dd/yy";
var DATE_SHORT_WITH_HOUR = "MM/dd/yyyy hh a";
var DATE_SHORT_WITH_HOUR_24 = "MM/dd/yy HH";
var DATE_SHORT_WITH_HOUR_24_WITHOUT_YEAR = "MM/dd HH";
var DATETIME_SHORT = "MM/dd/yyyy hh:mm a";
var DATETIME_24_SHORT = "MM/dd/yy HH:mm";
var DATETIME_24_SHORT_WITH_MILLIS = "MM/dd/yyyy HH:mm:ss.S";
var DATETIME_24_SHORT_WITH_MILLIS_WITHOUT_YEAR = "MM/dd HH:mm:ss.S";
var DATETIME_SHORT_WITH_SECONDS = "MM/dd/yyyy HH:mm:ss";
var DATETIME_SHORT_WITH_SECONDS_WITHOUT_YEAR = "MM/dd HH:mm:ss";
var QUARTER_WITH_YEAR = "'Q'q yyyy";
var QUARTER_WITH_2_DIGIT_YEAR = "'Q'q yy";
var DEFAULT_TIME_FORMAT = "MMM dd, yyyy hh:mm:ss a ZZZZ";
var MONTH_WITH_YEAR = "MMM yyyy";
var MONTH_WITH_2_DIGIT_YEAR = "MMM yy";
var DAY_WITH_MONTH = "MMM dd";
var DAY_WITH_MONTH_NUM = "MM/dd";
var QUARTER = "'Q'q";
var dateFormatsEnUS = {
	DATE_SHORT: DATE_SHORT,
	DATE_SHORT_2_DIGIT_YEAR: DATE_SHORT_2_DIGIT_YEAR,
	DATE_SHORT_WITH_HOUR: DATE_SHORT_WITH_HOUR,
	DATE_SHORT_WITH_HOUR_24: DATE_SHORT_WITH_HOUR_24,
	DATE_SHORT_WITH_HOUR_24_WITHOUT_YEAR: DATE_SHORT_WITH_HOUR_24_WITHOUT_YEAR,
	DATETIME_SHORT: DATETIME_SHORT,
	DATETIME_24_SHORT: DATETIME_24_SHORT,
	DATETIME_24_SHORT_WITH_MILLIS: DATETIME_24_SHORT_WITH_MILLIS,
	DATETIME_24_SHORT_WITH_MILLIS_WITHOUT_YEAR: DATETIME_24_SHORT_WITH_MILLIS_WITHOUT_YEAR,
	DATETIME_SHORT_WITH_SECONDS: DATETIME_SHORT_WITH_SECONDS,
	DATETIME_SHORT_WITH_SECONDS_WITHOUT_YEAR: DATETIME_SHORT_WITH_SECONDS_WITHOUT_YEAR,
	QUARTER_WITH_YEAR: QUARTER_WITH_YEAR,
	QUARTER_WITH_2_DIGIT_YEAR: QUARTER_WITH_2_DIGIT_YEAR,
	DEFAULT_TIME_FORMAT: DEFAULT_TIME_FORMAT,
	MONTH_WITH_YEAR: MONTH_WITH_YEAR,
	MONTH_WITH_2_DIGIT_YEAR: MONTH_WITH_2_DIGIT_YEAR,
	DAY_WITH_MONTH: DAY_WITH_MONTH,
	DAY_WITH_MONTH_NUM: DAY_WITH_MONTH_NUM,
	QUARTER: QUARTER
};

var LOGIN = "Login";
var SIGN_UP = "Sign up";
var CONTACT_ADMINISTRATOR = "Please contact your administrator {adminEmail} to access ThoughtSpot.";
var PASSWORD = "Password";
var SIGN_IN = "Sign in";
var Remember_me = "Remember me";
var Page_title = "ThoughtSpot";
var WARNING = "Warning";
var TEACH = "Teach";
var SEND_WELCOME_EMAIL = "Use this link to send a welcome email to yourself.";
var ADD_EMAIL_ADDRESS = "Add your email address in the profile page.";
var SEND_WELCOME_EMAIL_MESSAGE = "Welcome email sent successfully.";
var ADMIN_RLS_WARNING = "Assigning this privilege will allow assigned users to bypass RLS rules and see all data.";
var A3infocard_summary = "SpotIQ performed {totalDrills} drills and discovered {totalInsights} insights. Showing {totalViz} out of {totalInsights} insights";
var Insights_text = "Showing {totalShown} out of {totalGenerated} insights";
var No_insights_text = "No insights discovered";
var Drills = "Drills";
var Drills_performed = "Drills Performed";
var algorithm = "Algorithm";
var Std_dev = "Std Dev";
var Mad_text = "Median Abs Dev";
var Mean_text = "Mean";
var Median_text = "Median";
var Stdev_mean = "StdDev Mean";
var Mad_median = "Median Absolute Deviation";
var Classification_text = "Classification";
var Classification = "Classification";
var Shesd = "Seasonal Hybrid ESD";
var Anomaly_explanation = "Anomaly Explanation";
var NEXT = "Next";
var PREVIOUS = "Previous";
var GOTO = "Go to";
var ERROR = "Error";
var ERROR_WHILE_OPENING = "Sorry, an Error occurred while opening this, please try again.";
var Linear_regression = "Linear Regression";
var Diff_explanation = "Diff Explanation";
var Trend_analysis = "Trend Analysis";
var Cross_correlation = "Cross Correlation";
var Multiplier = "Multiplier used for analysis";
var Score = "Score";
var P_value = "P Value";
var Decision_tree = "Decision Tree";
var Relative_difference = "Relative Difference";
var Upload_the_modeling_file = "Upload the modeling file (.xls, size < 50MB)";
var Upload_the_security_file = "Upload the security file (.xls, size < 50MB)";
var ADD_A_CONDITION = "add a condition";
var MULTI_CONDITIONS_CLARIFICATION = "Note: Results matching all the above conditions will be shown.";
var ADD_ANOTHER = "add another";
var VALUE = "value";
var MIN_VAL = "min value";
var MAX_VAL = "max value";
var GREATER_THAN = "is greater than";
var LESS_THAN = "is less than";
var GREATER_OF_EQUAL = "is greater than or equal to";
var LESS_OR_EQUAL = "is less than or equal to";
var IS_BETWEEN = "is between";
var IS_IN = "is in";
var IS_NOT_IN = "is not in";
var BULK_INPUT_PLACEHOLDER = "Enter value(s) separated by \";\"";
var FILL_ALL_CONDITIONS = "Please specify all the conditions, or remove them if not needed.";
var INVALID_NUMBER = "Please specify a numeric value.";
var INVALID_BULK_INPUT = "Please specify one or more numeric values separated by \";\".";
var No_runs = "No runs completed for this job";
var Are_you_sure = "Are you sure you want to remove this visualization from the pinboard?";
var Choose_the_worksheet = "Choose the worksheet join rule:";
var Cancel = "Cancel";
var Send = "Send";
var Both_passwords_need = "Both passwords need to match";
var Emails = "Emails";
var SubscribeEmail = "Email";
var Subscribe = "Follow";
var Unsubscribe = "Unfollow";
var SubscribeDialogTitle = "Follow this pinboard?";
var SubscribeConfirmDialogTitle = "You've followed the pinboard '{pinboardName}'.";
var SubscribeConfirmDialogMessage = "For easy access, it's now available from your home page.";
var metadataObjectMenuItems = {
	subscription: {
		label: "Follow"
	},
	save: {
		label: "Save"
	},
	update: {
		label: "Update",
		disabledTooltip: "Updating answer disabled because no matching headline found."
	},
	saveUntitled: {
		label: "Save"
	},
	saveAsView: {
		label: "Create view"
	},
	makeACopy: {
		label: "Make a copy"
	},
	editACopy: {
		label: "Copy and edit"
	},
	editTitle: {
		label: "Change Title"
	},
	snapshot: {
		label: "Snapshot"
	},
	pin: {
		label: "Pin"
	},
	analysisInfo: {
		label: "Analysis details"
	},
	copyLink: {
		label: "Copy link"
	},
	pinboardSnapshot: {
		label: "Snapshot"
	},
	resetLayout: {
		label: "Auto layout"
	},
	schedule: {
		label: "Schedule"
	},
	schedulesList: {
		label: "Manage schedules"
	},
	share: {
		label: "Share"
	},
	addFilter: {
		label: "Add filters"
	},
	addFormula: {
		label: "Add formula"
	},
	searchOnTop: {
		label: "Search on top"
	},
	spotIQAnalyze: {
		label: "SpotIQ analyze"
	},
	explainInsight: {
		label: "Explain insight"
	},
	replaySearch: {
		label: "Replay search"
	},
	showUnderlyingData: {
		label: "Show underlying data"
	},
	download: {
		label: "Download"
	},
	downloadAsPdf: {
		label: "Download as PDF",
		dropdownItemTooltip: "Please save your changes before downloading the PDF."
	},
	exportWorksheet: {
		label: "Export worksheet"
	},
	updateWorksheetFromFile: {
		label: "Update worksheet from file"
	},
	createWorksheetFromFile: {
		label: "Create worksheet from file"
	},
	downloadAsCsv: {
		label: "Download as CSV"
	},
	downloadAsXlsx: {
		label: "Download as XLSX"
	},
	downloadTrace: {
		label: "Download Trace"
	},
	presentation: {
		label: "Present"
	},
	edit: {
		label: "Edit"
	},
	editLong: {
		label: "Edit original answer"
	},
	remove: {
		label: "Delete"
	},
	ungroup: {
		label: "Ungroup"
	},
	customizeHeadlines: {
		label: "Customize summaries"
	},
	pinboardInfo: {
		label: "Pinboard Info"
	},
	sendAnswerFeedback: {
		label: "Send feedback"
	},
	customAction: {
		label: "Custom Action"
	},
	describe: {
		label: "Describe"
	},
	relate: {
		label: "Relate"
	}
};
var subscriptionToolTip = "Follow before editing the details.";
var EditSubscribeDialogBoxMessage = "Change when, and how often, you receive updates on this pinboard:";
var SubscribeDialogBoxMessage = "Stay on top of changes, with email updates weekly (or as often as you like).";
var EditSubscribeDialogTitle = "Follow";
var ValidEmailMessage = "Please provide a valid email address in order to follow.";
var Results_are_limited = "Results are limited to first";
var worksheetColumnSelector = {
	joinRules: "Join rules can be specified in the schema section of this worksheet."
};
var This_content_will = "This content will inherit red color from left-panel-content css rule.";
var Select_an = "Select an area";
var default_select_placeholder = "Select an option";
var select_interval_placeholder = "Select interval";
var select_hour_placeholder = "Select hour";
var select_minute_placeholder = "Select minute";
var select_weekdays_placeholder = "Select weekdays";
var select_days_placeholder = "Select days";
var minutes = "minutes";
var hours = "hours";
var on = "on";
var at = "at";
var every = "every";
var Show_Data = "Show Data Labels";
var Are_you_sure3 = "Are you sure you want remove this sticker?";
var Did_you2 = "Did you mean?";
var All = "All";
var Float_is_a = "Float is a CSS positioning property. Page elements with the CSS float property applied to them are just like the images in the print layout where the text flows around them. Floated elements remain a part of the flow of the web page.";
var Color = "/* Color */";
var onboarding = {
	"continue": "Continue",
	exit_homepage: "Exit to homepage",
	contact_admin: "Contact admin",
	stepper: {
		GET_STARTED: "Get started",
		DATASOURCE: "Confirm datasource",
		SELECT_PINBOARD: "Select a pinboard",
		VIEW_INSIGHTS: "View your insights"
	},
	welcome: {
		welcome_name: "Welcome, {name}",
		headline_complete: "Make smarter decisions in four easy steps.",
		headline_short: "Make smarter decisions.",
		happy_case_content: "Confirm your organization's recommended data source, select the pinboard that's best for you, then view your insights to inform and support your next business decision.",
		datasource_no_pinbaord: "Confirm your organization's recommended data source and start searching for insights to inform and support your next business decision.",
		no_datasource_no_pinboard_upload: "First, you’ll need some data to analyze. You can upload your own if you're comfortable, or ask your ThoughtSpot admin to do it for you.",
		no_datasource_pinboard: "Select the pinboard that's best for you, then view your insights to inform and support your next business decision.",
		no_datasource_no_pinboard: "First, youll need some data to analyze, ask your ThoughtSpot admin to do upload some data for you or give you permission to do this yourself."
	},
	datasource: {
		heading: "Recommended data source",
		content: "This data set determines what you can search, which pinboards you can create or interact with, and what answers and insights you’ll find. Your administrator has recommended the data source below."
	},
	pinboards: {
		heading: "Select a pinboard",
		content: "Discover insights and visualizations for better business decisions. Or, drill down to underlying data for a deeper understanding."
	},
	datasource1: {
		defaultDescription: "{name} has been selected by your administrator as the data source to start your onboarding experience.",
		avatar: {
			heading: "Data source users",
			subheading1: "Created by:",
			subheading2: "Used by:"
		}
	},
	pinboard1: {
		avatar: {
			heading: "Pinboard users"
		}
	},
	pinboardPage: {
		dialog: {
			heading: "Follow this pinboard?",
			message1: "Stay on top of changes, with email updates weekly (or as often as you like)"
		}
	}
};
var Pinboard_name = "Pinboard name:";
var Zoom_options = "Zoom options";
var want_to = "want to use it.";
var Set_the_column = "Set the column names and copy your data into the cells.";
var Granularity = "Granularity:";
var Existing_data = "Existing data";
var Update_my3 = "Update my preferences";
var preferred_locale = "Language";
var You_can_do = "You can do more complex searches in ThoughtSpot using keywords. Experimenting with these powerful keywords can give you interesting insights.";
var Update_my2 = "Update password";
var Type = "Type:";
var rows = "rows.";
var Javascript_class = "Javascript class name:";
var ThoughtSpot_Style = "ThoughtSpot Style Guide";
var Update_my = "Update my picture";
var Add_a_column = "Add a column with unique values in order to link the data. You may continue to analyze the uploaded data independently.";
var Logical_version = "Logical version:";
var Upload_your = "Upload your schema";
var Knowing_your_data = "Knowing your data better can help you get the answers you’re looking for. Use Columns in the Data panel to explore available columns in your data.";
var Used_when_we2 = "Used when we want to position an element relative to body(top left corner of the page). You use the positioning attributes top, left, bottom, and right to set the location. These values will be relative to the next parent element with relative (or absolute) positioning";
var No_values = "No values available";
var No_matches = "No matches";
var Upload_Picture = "Upload Picture";
var Other_tips = "Other tips and tricks:";
var clearfix = "clearfix";
var is_used = "is used on a";
var Formulas = "Formulas";
var FORMULA = "Formula";
var No_matched = "No matched data.";
var Profile = "Profile";
var View_Keywords = "View Keywords";
var Add_a = "Add a filter on";
var ADD_DEFINITION = "Add Definition";
var CHANGE_DEFINITION = "Change Definition";
var Memory_used = "Memory used:";
var Done = "Done";
var Selected = "Selected (";
var to = "to";
var Updating = "Updating ...";
var In_progress = "In progress";
var I_didnt = "I didn't get that.";
var Download_the2 = "Download the security file";
var No_sources = "No sources selected";
var did_you = "did you mean?";
var comments_are = "comments are loaded.";
var By_default_all = "By default all elements are static.";
var Still_need = "Still need help?";
var Static = "Static";
var Error_in = "Error in generating preview.";
var Positioning = "Positioning";
var incomplete = "incomplete";
var Advanced_settings = "Advanced settings";
var Click_on_the = "Click on the button to download the modeling file.";
var Share_with = "Share with Channel";
var pagination_footer = "{total} rows total";
var Did_you = "Did you mean:";
var Conditional_Formatting2 = "Conditional Formatting";
var You_have = "You have selected:";
var Scroll_down_to = "Scroll down to load comments.";
var attribute_description = "- a property, like name, address or id number.";
var Slack_TeamName = "Slack TeamName :";
var Select_All = "Select All";
var Clear_All = "Clear All";
var Users_or = "Users or groups";
var Yes = "Yes";
var Left = "Left";
var Text_colors = "Text colors:";
var Add_test_prefix = "Add 'test' prefix to all classes that are used only in javascript. Ex: .test-className";
var Installed_version = "Installed version:";
var over_successive = "over successive";
var Text_transformation = "Text transformation:";
var While_implementing_the = "While implementing the first approach, we try to group similar CSS property types together for readability purpose.";
var Drill_down = "Drill down";
var ApplyAsRuntimeFilter = "Apply as runtime filter";
var Integrate_Slack = "Integrate Slack";
var Fixed = "Fixed";
var only = "only";
var Use_unsecured = "Use unsecured";
var Create_a_pinboard = "Create a pinboard to have it appear here";
var more_columns = "more columns";
var Name2 = "Name";
var dib2 = ".dib;";
var more_metrics = "more metrics";
var After_your_file = "After your file is ready, just drag and drop it in the zone below or click on the button to get it.";
var Get_to_know = "Get to know your data.";
var We_try_to = "We try to avoid creating new css rules every time a new module is created. But there is always a case where we'll have to create a new rule. So, we use 2 ways to style any module.";
var Text_sizing = "Text sizing:";
var Name = "Name:";
var dib = "dib";
var Table = "Table";
var on_Pinboard = "on Pinboard";
var Float_right = "Float right this element";
var Absolute = "Absolute";
var Data_read = "Data read:";
var Clearfix = "Clearfix";
var Password = "New Password";
var Display2 = "/* Display & Box Model */";
var Phone = "Phone:";
var Email_me = "Email me sharing notifications";
var mam = ".mam;";
var Copied_to = "Copied to clipboard";
var Empty_Pinboard = "Empty Pinboard";
var Inline = "Inline";
var Explore_all = "Explore all data";
var Positioning3 = "/* Positioning */";
var Absolutely_positioned = "Absolutely positioned element";
var Positioning2 = "Positioning:";
var of = "of";
var Add_Derived = "Add Derived Column:";
var Maintain_the_order = "Maintain the order of elements in HTML as they appear visually in design";
var Unlink_Slack = "Unlink Slack";
var Add = "Add";
var SKIP = "Skip";
var never = "Never";
var Floats_the_element = "Floats the element to left.";
var DESTINATION_COLUMN = "DESTINATION COLUMN";
var Only_add_prefix = "Only add prefix to columns with conflicting names.";
var Help = "Help";
var Add_custom_menu_item = "Add custom menu item";
var Use_default_menu = "Use default menu";
var Help_menu_customization = "Help menu customization";
var Item_label = "Item Label";
var Item_url = "URL";
var Item_enabled = "Item Enabled";
var Item_default_icon = "Use Default Icon";
var Upload_custom_icon = "Custom Icon";
var Window_size = "Window size";
var Action_menu_customization = "Action menu customization";
var Add_custom_action_item = "Add custom action item";
var Overwrite = "Overwrite";
var element_when = "element when it's";
var Current_version = "Current version:";
var Connections = "Connections:";
var Block = "Block";
var Filter = "Filter:";
var rows_have = "rows have been imported.";
var top_0 = "top: 0;";
var Select_a = "Select a column";
var SELECT_A_COUNTRY = "Select a country";
var SELECT_A_CONDITION = "Select a Condition";
var It_took_too_long = "It took too long to complete the query. You are now looking at partially computed results.";
var Floats_the_element2 = "Floats the element to right.";
var Underlying_Data = "Underlying Data";
var Measure_or_attribute = "Measure or attribute";
var Only_show = "Only show";
var Schema = "Schema";
var Edited = "(Edited)";
var More = "More...";
var MORE = "more";
var N_MORE = "See {n} more...";
var Show_hidden = "Show hidden";
var Inline_block = "Inline block";
var Back2 = "...Back";
var Whats_your = "What’s your source?";
var TEST = "TEST";
var Its_positioned_relative = "It's positioned relative to the viewport, or the browser window itself. The viewport doesn't change when the window is scrolled.";
var Cannot_Deselect_Already = "Cannot Deselect. Already in use.";
var Other = "/* Other */";
var NO_DATA = "NO DATA";
var Data = "Data";
var CSS_templates = "CSS templates";
var Your_uploaded = "Your uploaded data";
var Apply = "Apply";
var Select_the_column = "Select the column you want to link with the data you are uploading.";
var Copy_to = "Copy to clipboard";
var tables_using = "tables using";
var Congratulations = "Congratulations!";
var Timeout = "Timeout:";
var Timeout_Error = "Data failed to load due to timeout";
var Resource_Exceeded_Error = "The system cannot process the query. Please try again later. If the problem continues, contact the ThoughtSpot administrator.";
var Configuration_Options = "Configuration Options";
var Examples = "Examples:";
var Reset_zoom = "Reset zoom";
var Existing_pinboards_answers = "Existing pinboards, answers, and data sources with this sticker will be affected.";
var You_dont_have = "You don't have access to any data.";
var Ready_for = "Ready for advanced searches?";
var To_begin_a = "To begin a new search, first select your data source using Choose Sources. Searches happen in the context of the selected data source. But don’t worry. ThoughtSpot will also make suggestions from other data sources for you, so you'll never miss a thing.";
var Slack_Integration = "Slack Integration";
var No_Pinboards = "No Pinboards";
var important_important_overrides = "!important: important overrides and other css rules defined for a particular element.";
var Browse = "Browse";
var Failed = "Failed";
var selector = ".selector {";
var Select_an_entity = "Select an entity above to see help";
var Refresh = "REFRESH";
var SOURCE_COLUMN = "SOURCE COLUMN";
var See_other = "See other \"";
var key_1_8005087008 = "+1 800-508-7008 Ext. 1";
var Support = "Support";
var cursor_pointer = "cursor: pointer;";
var No_prefix_required = "No prefix required here. Create a class name which best represents the component and the CSS rule.";
var Readonly = "Read-only";
var rows_here = "rows here.";
var right_0 = "right: 0;";
var Border = "Border:";
var Conditional_Formatting = "Conditional Formatting ...";
var zindex_10 = "z-index: 10;";
var Invalid_loginpassword = "Invalid login/password!";
var Physical_version = "Physical version:";
var Example2 = "Example:";
var No_suggestions_from = "No suggestions from the selected sources";
var Flex = "Flex";
var Could_not_reach = "Could not reach server. Try again later.";
var attribute = "attribute";
var I_didnt_get = "I didn't get that. Did you mean:";
var CSS = "CSS:";
var Confirm_Password = "Confirm Password";
var Totally_removes_the = "Totally removes the element from the page.";
var Used_when_we = "Used to position an element relative to its original position. Use the positioning attributes top, left, bottom, and right to set the location.";
var column_from_table = "\"{columnName}\" from \"{tableName}\"";
var Row_security = "Row Security";
var Worksheet_join_rule = "Worksheet join rule is set to:";
var worksheet = {
	table: {
		COLUMN_NAME: "Column Name",
		CHANGE_JOIN_MAPPING: "changeJoinMapping",
		SAMPLE_VALUE_1: "Sample Value 1",
		SAMPLE_VALUE_2: "Sample Value 2",
		SAMPLE_VALUE_3: "Sample Value 3"
	}
};
var pam = ".pam;";
var notin = "not in";
var CLICK_TO_RESET = "Click to reset";
var Call = "Call:";
var download_sage = "download sage metadata";
var Some_columns_names = "Some columns names are already present. You can add a prefix to the new columns you are adding.";
var measure = "measure";
var Data_written = "Data written:";
var noData = "No data to display";
var noAccessToTable = "No access to table";
var noAccessToColumn = "No access to column";
var noAccessToJoin = "No access to join";
var invalidData = "Invalid data";
var loadingData = "Loading data";
var dataError = "Invalid data";
var Chart_axes = "Chart axes";
var data_point_exceeded_message = "Showing the first {1} data points";
var has$3 = "has";
var Slack_Username = "Slack Username:";
var Description = "Description";
var Right = "Right";
var Top = "Top";
var Bottom = "Bottom";
var Oops_There_was = "Oops! There was an error in loading your data sources.";
var gitcommit = "git-commit:";
var rows_while = "rows while importing.";
var from_the = "from the pinboard?";
var child = "child";
var CSS_classname = "CSS classname nomenclature";
var Email = "Email:";
var Dependency = "Dependency:";
var Clear_Selections = "Clear Selections";
var Keyword = "Keyword";
var types = "\" types";
var parent = "parent";
var Add_js_prefix = "Add 'js' prefix to all classes that are used only in javascript. Ex: .js-className";
var gitbranch = "git-branch:";
var Please_contact_your = "Please contact your system administrator.";
var pa2 = ".pa;";
var measure_description = "- a numeric value that can be compared using math, like a count or measurement.";
var Aggregation = "Aggregation";
var Successful = "Successful";
var Style_class = "Style class name:";
var Tables = "Tables";
var No = "No";
var Oops_Sorry_there = "Oops! Sorry, there were some errors.";
var Confirm_Changes = "Confirm Changes";
var Inclusion_rule_is = "Inclusion rule is set to:";
var Formula_Name_Placeholder = "Enter formula name";
var Formula_Assistant = "Formula assistant";
var Append = "Append";
var Debug = "Debug";
var Incomplete_only = "Incomplete only";
var ADD = "ADD";
var Multiple_matches = "Multiple join paths. Select one:";
var Less = "...Less";
var Press_escape_to = "Press escape to exit replay";
var Display = "Display";
var Objects_count = "Objects count:";
var None = "None";
var Destination_Table = "Destination Table";
var from = "from";
var Chart_page = "Chart page";
var How_to_structure = "How to structure my LESS?";
var Search_memcache = "Search memcache:";
var Save = "Save";
var Float_left = "Float this element left";
var Grouping_of = "Grouping of css properties:";
var Headings = "Headings:";
var The_new_data = "The new data will not be linked to the existing data in ThoughtSpot.";
var Editing_Visualization = "Editing Visualization";
var SORT = "Sort";
var REMOVE = "Remove";
var RENAME = "Rename";
var GroupWith = "Group with";
var Ungroup = "Ungroup";
var Position = "Position";
var Are_you = "Are you new here?";
var Tip_In = "Tip: In most cases";
var Clear_cache = "Clear cache";
var Download_Trace = "Download Trace";
var Comment_List = "Comment List";
var Summary = "Summary";
var Columns = "Columns";
var Text = "/* Text */";
var colorreddefault = "color:@red-default";
var dn = "dn";
var Release_Notes = "Release Notes";
var There_is_no = "There is no data in the system yet.";
var di = "di";
var Back = "Back";
var db = "db";
var Click_on_the2 = "Click on the button to download the security file.";
var Which = "Which";
var questionText = "{questionText}";
var Showing_only = "Showing only";
var Buttons = "Buttons:";
var Show_me = "Show me";
var Example = "Example";
var a3$1 = {
	feedback: {
		dialog: {
			title: "Give quick feedback. Get better Insights."
		}
	},
	TRIGGER_MESSAGE: "Analysis request sent. You will be notified when it is complete.",
	ANALYSIS_ACCEPTED: "Analysis has begun.",
	Available_Columns: "Available Columns",
	Selected_Columns: "Selected Columns",
	rdataRenderingFailed: "Visualization data rendering failed.",
	customAnalysis: {
		provideMissingColumnName: "Please select at least one column for analysis. ",
		columnNotAvailable: "Cannot find column name: ",
		availableColumns: "Available column names: ",
		rScriptCannotBeEmpty: "R script cannot be empty.",
		rScriptInvalidFormat: "R script must contain the following line: {1}",
		columnNamesMissing: "Please provide column names list. Sample script content : \"{r script content}\",columnName1,columnName2"
	},
	Select_Columns_Analysis: "Select column(s) for R analysis",
	Select_Columns_Bindings: "Select column(s) for binding",
	AutoSelectedColumns: "SpotIQ will automatically select columns for you and you can continue to run an analysis!",
	showAllColumns: "Show all columns",
	showAllColumnsTooltip: "Showing only the top columns ordered by relevance. Please use search to find more columns. Click here to show all the columns ordered by names. Please note that showing all columns may be slow depending on the number of columns in the underlying tables.",
	showingAllColumns: "Show less columns",
	showingAllColumnsTooltip: "Showing all columns. Click to show top columns only.",
	OPEN_PINBOARD: "Click here to open pinboard.",
	OPEN_INSIGHTS: "Click here to open insights.",
	OPEN_ANALYSES: "Click for analyses status in SpotIQ tab.",
	ANALYSIS_FAILED: "Analysis failed.",
	tab: {
		COLUMNS: "Columns",
		ADVANCED: "Advanced"
	},
	customAnalysisTitle: "Customize analysis",
	customTableAnalysisTitle: "Click here to customize analysis of the {1} {2}",
	includeColumnsTitle: "Include columns for SpotIQ analysis",
	runSpotIQByDefault: {
		title: "Get instant insights with a click",
		info: "To get you started automatically, SpotIQ has pre-selected several columns. Or, make insights even more relevant by selecting columns yourself, to match your analysis strategy."
	},
	suggestedColumns: {
		title: "Suggested Columns",
		tooltip: "SpotIQ recommends these columns for you. For even more relevant insights, select the columns you’re most interested in."
	},
	selectAlgorithms: {
		title: "Customize for the way you work",
		info: "Tune SpotIQ’s algorithms and parameters for your ideal number and mix of insights. Every time you do, it learns more about what you need."
	},
	includeColumnsTabHeader: "Included columns",
	excludeColumnsTitle: "Exclude columns for SpotIQ analysis",
	excludeColumnsTabHeader: "Excluded columns",
	customizeTableAnalysisAlgorithmsTitle: "Customize algorithm",
	customizeAlgorithmsTabHeader: "Customize algorithms",
	customizeVizAnalysisAlgorithmsTitle: "Customize algorithm",
	Algorithm_Selection: "Select Algorithms",
	Algorithm_Selection_Tooltip: "SpotIQ recommends these algorithms for you. For even more relevant insights, customize them with Select Algorithms.",
	Refine_Parameters: "Refine Parameters",
	SelectColumnsForKMeans: "Select exactly two columns for K-Means",
	SelectColumnForClassification: "Select exactly one column for Classification",
	Refine_Parameters_Tooltip: "SpotIQ recommends these parameters for your algorithm. For even more relevant insights, adjust them as needed.",
	Insight_Count_Settings: "Insight Count Settings",
	Insight_Count_Settings_Tooltip: "SpotIQ recommends this mix of outlier, trend and correlation insights. For more or fewer of each, adjust your insight count limits.",
	Insight_Threshold_Settings: "Insight Threshold Settings",
	preferences: {
		communication: "Email preferences",
		dataOptions: "Data preferences",
		parameters: "Parameters for analysis"
	},
	Max_Anomaly_Insights: "Max Outlier Detection Insights",
	Max_Anomaly_Insights_Tooltip: "For the most relevant results, SpotIQ will show, at most, this many anomaly insights from the Outlier Detection algorithm.",
	Max_Seasonality_Detection_Anomaly_Insights: "Max Seasonality Detection Insights",
	Max_Seasonality_Detection_Anomaly_Insights_Tooltip: "For the most relevant results, SpotIQ will show, at most, this many anomaly insights from the Seasonality Detection algorithm.",
	Max_Anomaly_Explanation_Insights: "Max Anomaly Explanation Insights",
	Max_Anomaly_Explanation_Insights_Tooltip: "Limit the number of insights found through Anomaly Explanation.",
	Max_Linear_Regression_Anomaly_Insights: "Max Linear Regression Insights",
	Max_Linear_Regression_Anomaly_Insights_Tooltip: "For the most relevant results, SpotIQ will show, at most, this many anomaly insights from the Linear Regression algorithm.",
	Max_Trend_Insights: "Max Trend Insights",
	Max_Trend_Insights_Tooltip: "For the most relevant results, SpotIQ will show, at most, this many anomaly insights from the Trend Analysis algorithm.",
	Max_Cross_Correlation_Insights: "Max Cross-Correlation Insights",
	Max_Cross_Correlation_Insights_Tooltip: "For the most relevant results, SpotIQ will show, at most, this many anomaly insights from the Cross-Correlation algorithm.",
	Max_Measures: "Max Measure Columns",
	Max_Measures_Tooltip: "For the most relevant results, SpotIQ will analyze, at most, this many measure columns.",
	Max_Attributes: "Max Attribute Columns",
	Max_Attributes_Tooltip: "For the most relevant results, SpotIQ will analyze, at most, this many attribute columns.",
	All_Cross_Correlation_Pairs: "All Cross-Correlation Measure Pairs",
	All_Cross_Correlation_Pairs_Tooltip: "For Cross-Correlation analysis, try all pairs of selected measure columns.",
	Min_Rows: "Minimum rows required for analysis",
	Min_Rows_Tooltip: "SpotIQ will only analyze result sets with at least this many rows.",
	Min_Relative_Difference: "Minimum Relative Difference",
	Min_Relative_Difference_Tooltip: "SpotIQ will only show trend insights from linear models including at least this much percentage change.",
	Multiplier: "Multiplier for Outlier Detection",
	Multiplier_Tooltip: "SpotIQ will consider any value to be an outlier if it’s further from the mean by more than this number multiplied by standard deviation.",
	P_Value_Threshold: "Maximum P-Value",
	P_Value_Threshold_Tooltip: "SpotIQ will only show trend insights with a p-value lower than this number.",
	Correlation_Coefficient: "Minimum Correlation Coefficient",
	Max_Correlation_Coefficient: "Maximum Correlation Coefficient",
	Correlation_Coefficient_Tooltip: "For SpotIQ to count measures as correlated, they must be related at least this closely.",
	Max_Correlation_Coefficient_Tooltip: "For SpotIQ to generate a meaningful cross-correlation insight from two measures, they must be related no more closely than this.",
	Max_Lag: "Maximum Correlation Lag",
	Max_Lag_Tooltip: "SpotIQ will only find cross-correlation among measures occurring no further apart in time than this.",
	Min_Abs_Slope_Radians: "Minimum absolute slope (in radian)",
	Min_Abs_Slope_Radians_Tooltip: "Threshold below which we skip a trendline as an insight if its slope in radians is less than this value. Applies to Trend Analysis only.",
	R_Script_Placeholder: "Enter custom R script here...",
	R_Output_Filetype: "Output Filetype",
	PNG: "PNG",
	CSV: "CSV",
	Num_Clusters: "Number of Clusters",
	Num_Clusters_Tooltip: "SpotIQ will partition the data into this many clusters.",
	K_Means_Column_Tooltip: "Name of column to use in K-Means Clustering. Currently we only support two columns in K-Means Clustering",
	K_Means_Insufficient_Columns: "K-Means requires exactly two numeric columns",
	Classification_Invalid_Column_Count: "Classification requires exactly one column",
	STDEV_MEAN: "Standard Deviation Detection",
	MAD_MEDIAN: "Median Absolute Deviation Detection",
	SHESD: "Seasonality Detection",
	ANOMALY_EXPLANATION: "Anomaly Explanation using Discriminative Feature Analysis",
	LINEAR_REGRESSION: "Linear Regression",
	CUSTOM_SCRIPT: "Custom R Script",
	VIEW_SPOTIQ_ANALYSIS: "SpotIQ Analysis",
	TREND_ANALYSIS: "Trend Analysis",
	CROSS_CORRELATION: "Cross-Correlation Analysis",
	OUTLIER_DETECTION: "Outlier Detection",
	Z_SCORE_OUTLIER_DETECTION: "Outlier Detection using Z-Scores",
	MEDIAN_Z_SCORE_OUTLIER_DETECTION: "Outlier Detection using Median Z-Scores",
	SHESD_OUTLIER_DETECTION: "Outlier Detection using Seasonal Hybrid ESD",
	LINEAR_REGRESSION_OUTLIER_DETECTION: "Outlier Detection using Linear Regression",
	K_MEANS_CLUSTERING: "K-Means Clustering (2-Dimensional)",
	CHANGE_ANALYSIS: "Change Analysis",
	CLASSIFICATION: "Classification",
	customizeDiffAnalysisAlgorithmsTitle: "Customize algorithm for comparative analysis",
	Max_Diff_Elements: "Max Diff Elements",
	Max_Diff_Elements_Tooltip: "To explain this difference, SpotIQ will examine, at most, this many attribute values.",
	Max_Fraction: "Max Fraction",
	Max_Fraction_Tooltip: "For a set of attribute values to be used as a basis for explaining this difference, their total contribution to the measure should be no higher than this.",
	Min_Abs_Change_Ratio: "Min Abs Change Ratio",
	Min_Abs_Change_Ratio_Tooltip: "For a set of attribute values to be interesting enough to explain the difference, it must explain at least this much absolute change across all values.",
	Min_Change_Ratio: "Min Change Ratio",
	Min_Change_Ratio_Tooltip: "For a set of attribute values to be interesting, it must explain at least this much total change.",
	Invalid_Number_Input: "Invalid value for {1}",
	Invalid_Algorithm_Selection_Outlier_Detection: "Invalid algorithms selected, choose at most one outlier detection method.",
	triggerAnalysis: "Analyze",
	autoAnalyze: "Auto Analyze",
	visualizationAnalysisTitle: "Analysis for {1}",
	visualizationAnalysisType: "VISUALIZATION",
	tableAnalysis: "Click below to trigger comprehensive Auto or Custom Analysis of the {1} {2}",
	dataAnalysisTitle: "Analysis for {1} for groups {2}",
	dataAnalysisType: "DATA",
	tableAnalysisTitle: "Analysis for {1} {2}",
	tableAnalysisType: "TABLE",
	LAST_RUN_COMPLETED: "Last run {jobCompletionState} in {duration}.",
	JOB_RUNNING: "Running since {timeAgo}.",
	JOB_PROGRESS: "Progress: {percentage_done}%.",
	splash: {
		summary: "Find the outliers, trends and correlations that matter most to you. Or, drill down to discover the subtle differences between two key data points. Machine learning and an in-memory calculation engine make it all possible.",
		select_columns: "For greater relevance, choose your columns",
		select_columns_msg: "To start, SpotIQ serves up columns based on your own past choices, so you can use it instantly. But you’ll get even better and more relevant results by taking just a moment to customize them. Your active guidance ensures meaningful insights.",
		set_preferences: "The more you use it, the smarter it gets",
		set_preferences_msg: "With increased usage of the system, SpotIQ automatically learns what's important and tunes its algorithms to provide more relevant insights. You can use your own specific tuning parameters using Advanced option.",
		confirm: "Got It"
	},
	dashboard: {
		RESULTS_TAB: "Results",
		FOLLOW_TAB: "Follow",
		ANALYSIS_TAB: "Analyses",
		FEEDBACKS_TAB: "Feedback",
		PREFERENCES_TAB: "Preferences"
	},
	follow: {
		cardsTitle: "Follow",
		detailPageTitle: "Insights for '{followTitle}'",
		deleteFollowDialogDescription1: "Really delete \"{followTitle}\" ?",
		deleteFollowDialogDescription2: "You will stop follow on it and will not get email report.",
		failedToFetchFollowSubscriptions: "Failed to fetch your follow subscriptions. Please try again",
		failedToDeleteFollowSubscriptions: "Failed to delete your follow subscription(s). Please try again",
		subscriptionDeleted: "Follow subscription(s) successfully deleted",
		edit: {
			setPreference: "Set preference"
		}
	},
	watch: {
		failedToFetchWatchSnapshotDetail: "Failed to fetch the snapshot compare details. Please try again"
	},
	feedbacks: {
		failedToFetch: "Failed to fetch your insight feedbacks. Please try again",
		failedToDelete: "Failed to delete feedbacks. Please try again",
		deleteSuccess: "Removed feedback."
	},
	INSIGHT_COUNT: "We found {1} insights.",
	DRILL_COLUMNS_SUMMARY: "{1} columns selected as drill paths.",
	EXPLAIN_DRILL_COLUMN_SELECTION: "Auto analysis runs on frequently used drill paths. You can suggest columns the analysis should drill on.",
	CUSTOMIZE_ANALYSIS: "Customize analysis",
	SUMMARY_TITLE: "Analyzed on {1}",
	CHANGE_DESCRIPTION: "{1} changed from {3} to {2} ({4}%) between {6} and {5}.",
	SUMMARY_DESCRIPTION: "SpotIQ found {numInsights} insights by analyzing {numRows}+ rows in {duration}.",
	FEEDBACK_COLUMN_AND_FILTER_VALUE: "{columnName} and {filterValue}",
	FEEDBACK_QUESTION_ANOMALOUS_POINT_UNINTERESTING: "Which anomaly(s) are least meaningful?",
	FEEDBACK_STATEMENT_FOR_ANOMALOUS_POINT_UNINTERESTING: "{anomalous_point} was an obvious anomaly",
	FEEDBACK_QUESTION_COLUMN_UNINTERESTING: "Which column(s) are least meaningful for you?",
	FEEDBACK_STATEMENT_FOR_COLUMN_UNINTERESTING: "{column_name} was uninteresting",
	FEEDBACK_QUESTION_ATTRIBUTE_COLUMN_UNINTERESTING: "Is {attribute_column_name} uninteresting?",
	FEEDBACK_STATEMENT_FOR_ATTRIBUTE_COLUMN_UNINTERESTING: "{attribute_column_name} was uninteresting",
	FEEDBACK_QUESTION_FILTER_COLUMN_UNINTERESTING: "Which filter(s) are least meaningful?",
	FEEDBACK_QUESTION_FILTER_COLUMN_UNINTERESTING_TOOLTIP: "{filter_column_name} {filter_value}",
	FEEDBACK_STATEMENT_FOR_FILTER_COLUMN_UNINTERESTING: "{filter_column_name} {filter_value} was uninteresting",
	FEEDBACK_QUESTION_COLUMN_AND_FILTER_UNINTERESTING_TOOLTIP: "{measure_column_name} for {filter_column_name} {filter_value}",
	FEEDBACK_STATEMENT_FOR_COLUMN_AND_FILTER_UNINTERESTING: "{measure_column_name} for {filter_column_name} {filter_value} was uninteresting",
	FEEDBACK_QUESTION_CORRELATION_OBVIOUS: "Is the correlation between {measure1} and {measure2} obvious?",
	FEEDBACK_STATEMENT_FOR_CORRELATION_OBVIOUS: "Correlation between {measure1} and {measure2} was obvious",
	FEEDBACK_QUESTION_TREND_BETTER_DATE_ATTRIBUTE: "What data attribute(s) would be more meaningful than {date_attribute}?",
	FEEDBACK_STATEMENT_FOR_TREND_BETTER_DATE_ATTRIBUTE: "There is a better date attribute than {date_attribute}",
	FEEDBACK_QUESTION_ATTRIBUTE_FILTER_UNINTERESTING: "Is combination of {attribute} and {filter_column} {filter_value} uninteresting?",
	FEEDBACK_STATEMENT_FOR_ATTRIBUTE_FILTER_UNINTERESTING: "Combination of {attribute} and {filter_column} {filter_value} was uninteresting",
	FEEDBACK_QUESTION_ALL_ANOMALIES_OBVIOUS: "Are all anomaly points obvious?",
	FEEDBACK_STATEMENT_FOR_ALL_ANOMALIES_OBVIOUS: "All anomaly points were obvious",
	FEEDBACK_QUESTION_TREND_EXPECTED: "Is the trend expected?",
	FEEDBACK_STATEMENT_FOR_TREND_EXPECTED: "Trend was expected",
	FEEDBACK_QUESTION_BETTER_DATE_BUCKET: "Is there a better date bucket for {date_column_name}?",
	FEEDBACK_STATEMENT_FOR_BETTER_DATE_BUCKET: "There is a better date bucket for {date_column_name}",
	FEEDBACK_QUESTION_DIFF_VALUE_UNINTERESTING: "Is {diff_value} uninteresting?",
	FEEDBACK_STATEMENT_FOR_DIFF_VALUE_UNINTERESTING: "{diff_value} was uninteresting",
	FEEDBACK_QUESTION_DIFF_EXPECTED: "Is change in {diff_value} expected?",
	FEEDBACK_STATEMENT_FOR_DIFF_EXPECTED: "Change in {diff_value} was expected",
	FEEDBACK_QUESTION_ALL_CHANGES_EXPECTED: "Is change in all values of {attribute} between the two selected points expected?",
	FEEDBACK_STATEMENT_FOR_ALL_CHANGES_EXPECTED: "Change in all values of {attribute} between the two points was expected",
	FEEDBACK_QUESTION_DIFF_VALUES_UNINTERESTING: "Which of these values are least interesting for comparison?",
	FEEDBACK_QUESTION_DIFFS_EXPECTED: "Which of these values have expected changes?",
	CUSTOMIZE_ANALYSIS_TEXT: "Customize analysis",
	ORIGINAL_QUERY: "Original Query:",
	JOB: "Job",
	JOB_RESULT_SUMMARY: "Job {jobName} - Status: {jobRunStatus}, Duration: {duration}",
	SHOWING_INSIGHT: "showing insight",
	currentDataOnly: "Restrict analysis to the current result set only",
	insightVisualizationTitle: "Insight Visualization",
	homepageInsightVisualizationTitle: "Insight Visualization for {1}",
	editInsightButtonTooltip: "Click to edit or save this Insight Chart",
	R_Analysis_Infocard: {
		Title_Text: "R in ThoughtSpot",
		Script_Title: "Example K-means script for PNG output:",
		Script_Line1: "library(ggplot2);",
		Script_Line2: "set.seed(20);",
		Script_Line3: "df <- data.frame(.param0, .param1);",
		Script_Line4: "cluster <- kmeans(df[1:2], 3, nstart = 20);",
		Script_Line5: "png(file=#output_file#,width=400, height=350, res=72);",
		Script_Line6: "print(ggplot(df, aes(.param0, .param1, color = cluster$cluster)) + geom_point());",
		Col_Title: "Columns/Params Guide:",
		Col_Line1: "Param .param0 references the data in 'Income'",
		Col_Line2: "Param .param1 references the data in 'Age'",
		Output_Title: "Output Type Guide:",
		Output_Line1: "'#output_file#' must be in your R script, and only CSV and PNGouputs are supported from R.",
		Output_Line2: "For PNG output the following line should be added to generate a PNG from the dataframe:",
		Output_Line3: "png(file=#output_file#,width=400, height=350, res=72);",
		Output_Line4: "For CSV ouput the following line should be added to generate a CSV from the dataframe:",
		Output_Line5: "write.csv(df, file=#output_file#, row.names=FALSE);",
		Packages_Title: "New Packages Guide:",
		Packages_Line1: "To use a new package, contact your administrator to install it first."
	},
	customAnalysisTabs: {
		JOB_RUNS: "Job Runs",
		JOB_SCHEDULE: "Job Schedule",
		CUSTOMIZE: "Customize"
	}
};
var feedback = {
	thanksMessage: "Thank you for your feedback to help improve the quality of insights!",
	failMessage: "Failed to add feedback. ",
	dislikePlaceholder: "Send us your suggestions to improve the analysis!",
	isInsightUseful: "Is this insight useful ?",
	like: "Yes",
	dislike: "No",
	excludeHelp1: "Note: Click {1} to exclude one or more columns {2} from your future analysis.",
	footerNote: "Note: Use {1} option of {2} from {3} modelling tab to exclude any column {4} from all {5} analysis.",
	excludeHelp2: "permanently",
	likeDialog: {
		title: "Drill down further",
		description: "You can drill further on this insight by analyzing it",
		analyzeThisInsight: "Analyze this insight"
	},
	save: "Give feedback",
	saveAndRunAgain: "Save and run again",
	dislikeDialog: {
		closeButtonTooltip: "Click here to close without providing any feedback"
	},
	dislikeDescription: "Help us to improve analysis.",
	item: {
		excludeColumn1: "Exclude",
		excludeColumn2: "from my future analysis",
		lowerPriorityColumn: "Lower the priority of this column in my future analysis",
		excludeColumnValue1: "Exclude",
		excludeColumnValue2: "values from my future analysis"
	},
	comment: "Comment"
};
var future = "future";
var A3_Analysis = "Auto Analyze";
var BRANDED_SPOT_IQ_ANALYSIS = "SpotIQ Analyze";
var EXECUTIVE_SUMMARY_LINK = "Top {1} Insights";
var EXECUTIVE_SUMMARY_TITLE = "Showing selected {1} insights for the Pinboard - {2}";
var PINBOARD_VIZ_EXECUTIVE_SUMMARY_TITLE = "Found {1} insights for the visualization - {2}";
var PINBOARD_VIZ_NEW_INSIGHTS_TOOLTIP = "Found {insightCount} new insight(s) - click to view the details";
var PINBOARD_VIZ_SEEN_INSIGHTS_TOOLTIP = "Found {insightCount} previously viewed insight(s) - click to view the details";
var PINBOARD_VIZ_NO_INSIGHTS_TOOLTIP = "No insights were found";
var PINBOARD_VIZ_UNKNOWN_INSIGHTS_TOOLTIP = "Click to view insights for this visualization";
var PINBOARD_EXECUTIVE_SUMMARY_COMPUTE_INSIGHTS_TOOLTIP = "Run SpotIQ analysis on this pinboard";
var EXECUTIVE_SUMMARY_START_STATUS = "Running SpotIQ analysis...";
var EXECUTIVE_SUMMARY_PROGRESS_STATUS = "{analyzedVisualizationCount} of {totalVisualizationCount} visualizations analyzed...";
var EXECUTIVE_SUMMARY_COMPLETED_STATUS = "{insightCount} pinboard insights";
var customA3Analysis = "Custom Analyze";
var spotIQAnalyze = "SpotIQ analyze";
var analysisFeedback = "Analysis Feedback";
var customR = {
	runButton: "Run Analysis",
	selectRTemplate: "Select R Template",
	scriptContent: "R Script",
	stdOut: "Standard Output",
	stdErr: "Standard Error",
	rserveException: "Exception thrown in R",
	consoleTitle: "Failed to render custom R output.",
	dataNotPresent: "Custom R data is not present for R visualization",
	showBindings: "Show Bindings"
};
var classification = {
	showBindings: "Show Bindings"
};
var R_Analysis = "Analyze your data using R";
var Not_Searchable = "Not Searchable";
var This_content_will2 = "This content will inherit the red color from the font-red-default CSS rule. This approach is better, as we avoid creating any new CSS rules.";
var statements_were = "statements were executed.";
var built_on = "built on:";
var Floats = "Floats";
var Add_charts_or = "Add charts or tables to this pinboard";
var Primary_colors = "Primary Colors";
var Secondary_colors = "Secondary Colors";
var Disable_color_rotation = "Disable Color Rotation";
var Relative = "Relative";
var Preferences = "Preferences";
var ofhidden = ".of-hidden;";
var Add_a_prefix = "Add a prefix to the selected columns.";
var Similar_to_inline = "Similar to inline except that you can set a width and height.";
var and = "and";
var Version = "Version:";
var No_preview = "No preview available.";
var Download_the = "Download the modeling file";
var Add_to = "Add to search";
var sage_help_navigate = "to navigate";
var sage_help_select = "to select";
var sage_help_search = "to search";
var sage_help_dismiss = "to dismiss";
var Update_Password = "Update";
var E2E_and_Unit = "E2E and Unit class name:";
var Applied_on_the = "Applied on the parent element and uses CSS pseudo selector (:after) to clear floats.";
var Id = "Id:";
var Download_as = "Download as";
var Scroll_for = "Scroll for more suggestions";
var Background_colors = "Background colors & box model:";
var Class_name = "Class name -";
var complete = "complete";
var relation = "relation";
var Optional = "(Optional)";
var Clear = "Clear";
var Sources = "Sources";
var SOURCE_TYPE = "SOURCE TYPE:";
var Update_the = "Update the file";
var order = "order";
var This_video_shows = "This video shows how to get started with search. You’ll become an expert in the 2 1/2 minutes it takes to watch it.";
var scheduling_help_text = "Conditions for scheduled pinboards must be written as a boolean statement which returns a single value. When true, the pinboard will be sent at the scheduled time. For example: sum (revenue) > 100 would be a valid statement, but is_weekend (commit_date) would not.";
var Upload_your2 = "Upload your data";
var FILTER = "Filter...";
var This_filter_type = "This filter type can only be edited in the search bar.";
var Version_info = "Version info:";
var Layouts_templates = "Layouts templates";
var Show_underlying = "Show underlying data";
var Update_Preferences = "Update Preferences";
var Dependents = "Dependents";
var SpotIQ_insights = "SpotIQ Insights";
var sync = "Sync";
var SearchIQ = "SearchIQ";
var DATA_TAB_SPOTIQ_INSIGHTS_NOT_FOUND = "We did not find any SpotIQ Insights for this table";
var login = {
	GOOD_MORNING: "Good Morning",
	GOOD_AFTERNOON: "Good Afternoon",
	GOOD_EVENING: "Good Evening"
};
var HTML = "HTML:";
var Data_type = "Data type";
var INVALID_PRINT_CONFIGURATION_MESSAGE = "";
var SCHEDULE_PINBOARD_CREATE = "Add a schedule for ";
var SCHEDULE_PINBOARD_UPDATE = "Edit schedule {1} for pinboard ";
var jobStatusViewerTitle = "{1} Runs for job {2}";
var OBJECT = "object";
var PINBOARD = "Pinboard";
var GoToHomepage = "Go To Homepage";
var ANSWER = "Answer";
var Relationship = "Relationship";
var Rule = "Rule";
var Group = "Group";
var DocumentType = {
	VIEW: "View",
	WORKSHEET: "Worksheet",
	ANSWER: "Answer",
	PINBOARD: "Pinboard"
};
var TABLE = "Table";
var COLUMN = "Column";
var WIDTH = "width";
var VIEWS = "Views";
var WORKSHEETS = "Worksheets";
var IMPORTED_DATA = "Imported Data";
var TABLES = "Tables";
var UNTITLED_OBJECT_NAME = "Untitled";
var SEARCH = "search";
var SEARCHIQ = "SearchIQ";
var IQ = "IQ";
var enliteSourceSelector = {
	SEARCH: "Search",
	SUGGESTED_SOURCES: "Suggested Sources",
	SELECT_ALL: "Select source later",
	DIALOG_MESSAGE: "Changing sources will clear your search."
};
var CHART_VIZ_DISPLAY_NAME = "Chart";
var SUBMIT = "Submit";
var CANCEL = "Cancel";
var CREATE = "Create";
var help = {
	EXPERT_REQUESTS: "Expert requests",
	releaseNameComputationStatus: {
		DETERMINING_VERSION: "Determining version ...",
		NOT_RELEASE_CLUSTER: "Not a release cluster",
		ERROR: "There was an error determining the version."
	},
	helpWidgetUrl: {
		home: {
			TITLE: "How search works"
		},
		keywords: {
			TITLE: "Keywords"
		},
		releaseNotes: {
			TITLE: "Release notes"
		},
		documentation: {
			TITLE: "Documentation"
		},
		downloads: {
			TITLE: "Downloads"
		}
	},
	DEFAULT_PAGE_PATH: "home",
	noConnectionViewMessages: {
		TITLE: "Welcome to our Help Center",
		INFO_MESSAGE: "We’re not sure you’re online. To view the full help content, please connect to the Internet.",
		KEYWORD_TITLE: "Keywords",
		KEYWORD_DESCRIPTION: "Take a look at few examples of what you can type in the search bar"
	}
};
var CREATE_YOUR_WORKSHEET = "Create your worksheet";
var OK = "OK";
var ALL = "All";
var BY = "by";
var AND = "and";
var APPLY = "Apply";
var SAVE = "Save";
var SAVING = "Saving";
var MAKE_A_COPY = "Make a copy";
var EDIT_A_COPY = "Copy and edit";
var EDIT_TITLE = "Change title";
var EXPLORE = "Explore";
var COPY_OF = "Copy of {1}";
var YES = "Yes";
var NO = "No";
var UPDATE = "Update";
var DONE = "Done";
var TITLE = "Title";
var DESCRIPTION = "Description";
var COLLAPSE = "collapse";
var EDIT = "Edit";
var EDIT_ORIGINAL_ANSWER = "Edit original answer";
var REFRESH = "Refresh";
var DOWNLOAD = "Download";
var CHART_NOT_DOWNLOADABLE = "This chart is currently not downloadable";
var UPLOAD = "Upload";
var DOWNLOAD_TRACE = "Download Trace";
var REQUIRED_FIELD = "* Required field";
var BROWSE_YOUR_FILES = "Browse your files";
var MAX_FILE_SIZE_MESSAGE = "Maximum upload file size: {size}";
var BYTES = "BYTES";
var KB = "KB";
var MB = "MB";
var GB = "GB";
var MAX_FILE_SIZE_ERROR_MESSAGE = "File exceeds file size limit.";
var DELETE = "Delete";
var CONFIRM_DELETE = "Confirm delete";
var ADD_COLUMNS = "Add columns";
var IMPORT = "Import";
var BACK = "Back";
var CONFIRM = "Confirm";
var FILTERS = "Filters";
var CLOSE = "Close";
var ADD_AND_SAVE = "Add & Save";
var NEW_PINBOARD = "New pinboard";
var ACTIONS = "Actions";
var SEARCH_COLUMN = "Search columns";
var SEARCH_YOUR_DATA = "Search your data";
var UNIVERSAL_SEARCH_PLACEHOLDER = "Ask anything!";
var SEARCH_PLACEHOLDER = "Search...";
var WHAT_DID_YOU_MEAN_BY = "What did you mean by <span class='disambiguation-highlight'>{token}</span> :";
var DID_YOU_MEAN = "Did you mean:";
var DID_NOT_UNDERSTAND = "We could not get <span class='disambiguation-highlight'>{token}</span> :";
var NEXT_QUESTION = "Next question";
var DID_NOT_FIND_WHAT = "Did not find what you were looking for?";
var CLICK_HERE_TO_TEACH = "Please <a>click here</a> to teach us your language.";
var PAUSED_JOB = "Paused";
var SCHEDULED_JOB = "Scheduled";
var STOPPED_JOB = "Stopped";
var JOB = "Schedule";
var JOBS = "Schedules";
var JOB_LIST_TITLE = "{1} Jobs";
var NO_JOB = "No Schedule";
var READ_MORE = "Read Details";
var HIDE = "Hide";
var HIDE_DETAILS = "Hide Details";
var metadataListSearchPlaceholder = "Search";
var exploreDataTitle = "Explore Data";
var exploreAllData = "Explore all data";
var chooseSources = "Choose sources";
var alerts = {
	WHAT_HAPPENED: "What Happened?",
	unmatchedValues: "Unmatched filter values: {values}."
};
var primaryNavigation = {
	SEARCH: "Search",
	SEARCH_PLUS: "Search +",
	ANSWERS: "Answers",
	PINBOARDS: "Pinboards",
	INSIGHTS: "Insights",
	SPOT_IQ: "SpotIQ",
	MANAGE_DATA: "Data",
	ADMIN: "Admin",
	HELP: "Help",
	DISABLED_ANSWER_RELEASE_VERSION: "3.4",
	userMenu: {
		PROFILE: "Profile",
		SIGN_OUT: "Sign out"
	}
};
var helpMenuItems = {
	help: {
		label: "Help"
	},
	community: {
		label: "Community"
	},
	learn: {
		label: "Learn"
	}
};
var activityFeed = {
	VIEW_ACTIVITY: "View activity",
	RECENT_ACTIVITY: "Recent team activity",
	NO_ITEMS_TO_DISPLAY: "No items to display"
};
var related = {
	RELATED_ANSWERS_PINBOARDS: "Related answers and pinboards"
};
var trending = {
	RECENT: "Recently trending",
	GLOBAL: "All time popular",
	TITLE: "answers and pinboards"
};
var suggestedSearch = {
	TITLE: "Suggested Searches <i>{sourceName}</i>"
};
var recentlyViewed = {
	TITLE: "Recently viewed"
};
var homepageInsight = {
	TITLE: "Did you know?"
};
var favorite = {
	TITLE: "Favorites"
};
var spotIq = {
	minutesAgo: "{minutes}m ago",
	hoursAgo: "{hours}h ago",
	daysAgo: "{days}d ago",
	seenInsightMsg: " (*seen)",
	unseenInsightMsg: " (*new)"
};
var relatedItems = {
	TITLE: "You might be interested in"
};
var dataScope = {
	MATCHING_SOURCES: "Suggested sources which may contain your query: ",
	OTHER_SOURCES: "All sources",
	CREATED_TS: "Created",
	UPDATED_TS: "Updated"
};
var editPinboardDetails = "Edit pinboard details";
var pinboardInfo = "Pinboard Info";
var basicActionMessages = {
	OK: "OK"
};
var blinkList = {
	NAME: "NAME",
	AUTHOR: "AUTHOR",
	MODIFIED: "MODIFIED",
	DESCRIPTION: "DESCRIPTION"
};
var sageViewer = {
	legend: {
		TITLE: "Legend",
		FILTER: "Filter",
		ATTRIBUTE: "Attribute Column",
		MEASURE: "Measure Column",
		DATE: "Date Column",
		FOLDED: "Folded List",
		HISTORY: "History",
		SORTUP: "Sorted ascending",
		SORTDOWN: "Sorted descending"
	}
};
var materializeView = {
	explanation: {
		title: "Materialization",
		description: "When a view is materialized, all the data that makes up the view is stored in memory to improve query performance. ",
		url: "<a target='_blank' href='{url}'>Learn more</a>"
	},
	materialize: "Materialize",
	dematerialize: "Dematerialize",
	dialog: {
		editTitle: "Materialize View",
		viewTitle: "Materialization Details",
		materialize: "Materialize"
	}
};
var schemaViewer = {
	backToTables: "< BACK TO DATA MANAGEMENT",
	backToSchema: "< BACK TO SCHEMA VIEWER",
	HAS_ERRORS: "Something went wrong..",
	WKS_COLUMNS_TABLE_KEY: "WKSTABLECOLUMS",
	WKS_GROUP_KEY: "WKSGROUP",
	TITLE: "View Schema",
	LEGEND_TITLE: "Legend",
	CLOSE_LEGEND: "Hide Legend",
	SHOW_LEGEND: "Show Legend",
	TABLE_TITLE: "Table",
	WKS_TITLE: "Worksheet columns",
	ANSWER_TITLE: "ANSWER",
	tableType: {
		WORKSHEET: "Worksheet",
		USER_DEFINED: "Table",
		ONE_TO_ONE_LOGICAL: "Table",
		AGGR_WORKSHEET: "View"
	},
	relationships: {
		GENERIC: "Generic",
		PK_FK: "FK->PK",
		USER_DEFINED: "User Defined"
	},
	tooltip: {
		common: {
			NAME: "NAME",
			DESCRIPTION: "DESCRIPTION",
			SOURCE: "SOURCE",
			DATABASE: "DATABASE",
			SCHEMA: "SCHEMA",
			AUTHOR: "AUTHOR",
			TYPE: "TYPE",
			CREATED_AT: "CREATED AT",
			UPDATED_AT: "UPDATED AT",
			NO_DATA: "N/A",
			TABLE: "TABLE",
			ID: "ID"
		},
		join: {
			JOIN_TYPE: "JOIN_TYPE",
			DESTINATION_TABLE: "DESTINATION TABLE",
			TABLE_PLACEHOLDER: "Select Table",
			COLUMN_PLACEHOLDER: "Select a column",
			NO_DEST_TABLE_COLUMN_PLACEHOLDER: "Select a destination table first",
			NO_MATCHING_COLUMN_PLACEHOLDER: "No matching columns",
			NO_COLUMN_PLACEHOLDER: "No columns found",
			SOURCE_TABLE: "SOURCE TABLE",
			SOURCE_COLUMNS: "SOURCE COLUMNS",
			DESTINATION_COLUMNS: "DESTINATION COLUMNS",
			GENERIC_EXPRESSION: "GENERIC_EXPRESSION"
		},
		joinType: {
			INNER: "Inner join",
			LEFT_OUTER: "Left outer join",
			RIGHT_OUTER: "Right outer join",
			OUTER: "Full outer join"
		}
	}
};
var One_To_One_Join = "One to One";
var Many_To_One_Join = "Many to One";
var Join_Cardinality = "Join Cardinality";
var join = {
	type: {
		INNER: "Inner Join",
		LEFT_OUTER: "Left Outer Join",
		RIGHT_OUTER: "Right Outer Join",
		OUTER: "Full Outer Join",
		CROSS: "Cross Join",
		PKFK: "Primary Key/Foreign Key",
		GENERIC: "Generic",
		TITLE: "Join Type"
	},
	EDIT: "Edit Join",
	ADD: "Add Join",
	NAME: "Join Name",
	DESCRIPTION: "Join Description",
	relationship: {
		TYPE: "Join Type"
	},
	SOURCE_TABLE: "Source Table",
	DESTINATION_TABLE: "Destination Table",
	SOURCE_COLUMNS: "Source Columns",
	DESTINATION_COLUMNS: "Destination Columns",
	mapping: {
		TITLE: "Map Source to Destination",
		DESCRIPTION: "The source table should be the table on the many side of a many to one relationship. It typically has more rows than the destination table."
	},
	INCOMPLETE: "Not all fields have been specified or completed."
};
var joins = {
	within: {
		TITLE: "Joins within this {1}"
	},
	external: {
		TITLE: "Joins from this {1}",
		SECONDARY_TITLE: "Joins"
	},
	empty: {
		title: "There are no joins yet."
	},
	deleteConfirmMessage: "Are you sure you want to delete external join \"{1}\"?"
};
var metadataListPage = {
	headerTitle: {
		SCHEDULE: "Your schedules for {1}"
	},
	captions: {
		NAME: "Name",
		CRON_SCHEDULE: "Schedule",
		DESCRIPTION: "Description",
		DISPLAYED_NAME: "Display Name",
		CREATED_AT: "Created At",
		CREATED: "Created",
		DEFAULT_PINBOARDS: "Default pinboards",
		MODIFIED: "Modified",
		DATE: "Date",
		MY_REQUESTS: "My requests",
		REQUESTS_FOR_ME: "Requests for me",
		STATUS: "Status",
		EXPERTS: "Experts",
		REQUESTER: "Requester",
		A3_WATCH_MGMT_CHANGE: "Change",
		A3_WATCH_MGMT_LAST_RUN: "Last run",
		A3_WATCH_MGMT_FOLLOWING: "Following",
		MATERIALIZED: "Materialize Status",
		JOB_OPERATION: "Run History",
		AUTHOR: "Author",
		PROVIDED_BY: "Provided by",
		RECIPIENT: "Recipient",
		STICKERS: "Stickers",
		SOURCE: "Source",
		DATA_SOURCE_TYPE: "Type",
		DATA_SOURCE_SCHEDULED: "Scheduled",
		DATA_SOURCE_LOAD_STATUS: "Load Status",
		START_TIME: "Started at",
		END_TIME: "Ended at",
		STATE: "Status",
		STATUS_VIEWER_LOAD_STATUS: "Load Status",
		DATA_FILTER_TABLE: "Table",
		DATA_FILTER_COLUMN: "Column",
		DATA_FILTER_CONDITION: "Condition",
		DATA_FILTER_TEXT: "Value",
		TRANSFORMATION_EDITOR_COLUMN: "Column Name",
		TRANSFORMATION_EDITOR_TABLE: "Table Name",
		TRANSFORMATION_EDITOR_EXPRESSION: "Expression",
		A3_JOB_RESULT_SUMMARY: "Result",
		A3_JOB_RUN_RESULT_SUMMARY: "Result",
		A3_FEEDBACK_RATING: "Rating",
		A3_FEEDBACK: "Feedback",
		EMBRACE_SYNC_LIST_STATUS: "Status",
		EMBRACE_SYNC_LIST_LAST_UPDATED: "Last Updated",
		EMBRACE_SYNC_LIST_TYPE: "Sync Type",
		EMBRACE_HISTORY_SCHEDULED: "Scheduled On",
		EMBRACE_HISTORY_ROWS: "Rows Retrieved",
		EMBRACE_HISTORY_TIME_TAKEN: "Time Taken",
		EMBRACE_HISTORY_STATUS: "Status",
		CONNECTION_TYPE: "Connection Type",
		LAST_SYNCED: "Last Synced"
	},
	tabLabels: {
		REQUESTER: "I am Requester",
		EXPERT: "I am Expert"
	},
	users: {
		title: "Users",
		noItems: "No Users",
		listTitle: "Users {1}-{2}"
	},
	groups: {
		title: "Groups",
		noItems: "No Groups",
		listTitle: "Groups {1}-{2}"
	},
	roles: {
		title: "Roles",
		noItems: "No Roles",
		listTitle: "Roles {1}-{2}"
	},
	answers: {
		title: "Answers",
		noItems: "No Answers",
		listTitle: "Answers {1}-{2}",
		disableAnswerAlert: {
			TITLE: "Answers",
			MESSAGE: "Want to share or save your answer? Add it to a pinboard!",
			CONFIRM_BUTTON_LABEL: "Got it"
		}
	},
	pinboards: {
		title: "Pinboards",
		noItems: "No Pinboards",
		listTitle: "Pinboards {1}-{2}",
		button: {
			title: "Pinboard"
		}
	},
	relatedLinks: {
		title: "Related Links",
		noItems: "No Related Links",
		button: {
			title: "New Related Link"
		}
	},
	dataManagement: {
		title: "Data Management",
		tables: {
			tabHeader: "Tables",
			noItems: "No Tables",
			listTitle: "Tables {1}-{2}"
		},
		dataSources: {
			tabHeader: "Data Sources",
			disabledTooltipText: "Access to Data Sources is only available to users with Data Management permissions. To gain access, contact your system administrator.",
			noItems: "No Data Sources",
			listTitle: "Data Sources {1}-{2}"
		},
		embrace: {
			tabHeader: "Connections",
			listTitle: "Connections {1}-{2}",
			noItems: "No Embrace Connections",
			noConnection: "You have no connections yet.",
			connectionSuccess: "\"{connName}\" connection was created successfully.",
			noConnectionDesc: "Connections allow you to query external data sources.",
			addConnection: {
				tooltip: "Click to Add Connection"
			}
		}
	},
	jobs: {
		button: {
			title: "Schedule"
		},
		recipients: {
			one: "1 Recipient",
			more: "{1} Recipients"
		},
		noContentMessage: "Add a schedule to this pinboard"
	},
	actions: {
		share: {
			text: "Share"
		},
		"delete": {
			text: "Delete"
		},
		tag: {
			text: "Apply Sticker"
		},
		reset: {
			text: "Restart"
		},
		abort: {
			text: "Abort"
		},
		schedule: {
			text: "Schedule report"
		},
		pause: {
			text: "Pause"
		},
		resume: {
			text: "Resume"
		},
		"export": {
			text: "Export"
		},
		"import": {
			text: "Import"
		},
		download: {
			text: "Download"
		},
		sendEmail: {
			text: "Send by email"
		},
		time: {
			text: "Sync Now"
		}
	}
};
var VIEW_RESULTS = "View Results";
var NO_INSIGHTS = "No interesting insights found";
var sharableItem = {
	INVALID_ITEM_NAME_MESSAGE: "Name Invalid",
	SAVE_CHANGES: "Save changes"
};
var filterInputDataType = {
	DEFAULT_PLACE_HOLDER: "Enter value here",
	DATE: "MM/DD/YYYY",
	DATE_TIME: "MM/DD/YYYY HH24:MI:SS"
};
var walkMe = {
	deploymentTypes: {
		TRIAL: "trial",
		STANDARD: "standard"
	}
};
var replayAnswer = {
	REPLAY_TITLE: "Replay Search",
	REPLAY_SUCCESSFUL: "Replay finished successfully.",
	CANNOT_REPLAY_TITLE: "Cannot replay search",
	cannotReplay: {
		ON_PIN: "Cannot pin this answer to the Learn pinboard because it is not replayable.",
		DEFAULT: "Cannot replay search.",
		MISSING_UNDERLYING_ACCESS: "You might not have access to the underlying tables - check the answer to see.",
		HAS_FORMULAE: "Cannot replay answers with user-defined formulas.",
		HAS_METRICS: "Cannot replay answers with conditional formatting.",
		HAS_MULTIPLE_JOIN_PATH: "Cannot replay answers with multiple join paths.",
		HAS_BULK_FILTERS: "Cannot replay answers with bulk filters.",
		TOKEN_TYPES: "The search has unsupported token types"
	},
	sageBar: {
		operator: "operator",
		keyword: "keyword",
		number: "number"
	},
	CANNOT_REPLAY_CONFIRM: "Done",
	REPLAY_CONFIRM: "Start Replay",
	REPLAY_CANCEL: "Record Replay",
	REPLAY_CANCEL_TOOLTIP: "Administrator users on Firefox browsers can record.",
	REPLAY_CANCEL_TOOLTIP_ENABLED: "Download the video after replay, or press the escape key (esc) to stop early.",
	NAME_PREFIX: "ThoughtSpot tutorial ",
	FINISHED_TITLE: "Replay finished",
	RE_REPLAY: "Replay",
	CANCEL: "Cancel",
	NAME_LABEL: "Answer name",
	DESCRIPTION_LABEL: "Answer description",
	LAST_MODIFIED_LABEL: "Last modified",
	AUTHOR_LABEL: "Author",
	EXIT_WARNING_TITLE: "Replay in Progress",
	EXIT_WARNING_MESSAGE: "Are you sure you want to end the replay?",
	EXIT_WARNING_CONFIRM: "Yes, end replay",
	EXIT_WARNING_CANCEL: "Resume replay"
};
var screenRecorder = {
	PROCESSING_VIDEO: "Making video",
	DL_TITLE: "Download Tutorial",
	DL_MESSAGE: "Please download your video tutorial.",
	DL_CONFIRM: "Download",
	DL_CANCEL: "Delete Video",
	ERROR_TITLE: "Could not create video",
	ERROR_MESSAGE: "Terribly sorry - an error has occurred and your video could not be produced.",
	CANNOT_RECORD_TITLE: "Cannot record screen",
	CANNOT_RECORD_MESSAGE: "Please go to URL \"about:config\" and add the current domain (\"{1}\") to the \"media.getusermedia.screensharing.allowed_domains\" flag. This will allow Firefox to record your screen (it will still ask for your permission before recording).",
	DEFAULT_VIDEO_NAME: "ThoughtSpot screencast"
};
var metadataExplorer = {
	title: "Data management",
	selectValueMessage: "Select value",
	dataValidationErrorMessage: "Select a value for the unselected items",
	duplicateColumnNameValidationErrorMessage: "Column names should not contain duplicates",
	dataLoadingMessage: "Fetching Data",
	cannotToggleMessage: "Cannot toggle additive for this type",
	clickToEdit: "Click to edit",
	createWorksheet: "Create worksheet",
	viewWorksheet: "Go to worksheet",
	importData: "Upload data",
	newDataSource: "Data source",
	importPermissionTip: "You do not have permission to import data",
	createWorksheetTip: "You do not have permission to create a worksheet",
	cannotDeleteReason: "Your selection contains these system tables which cannot be deleted:",
	cannotDelete: "Cannot delete",
	cannotEdit: "Cannot Edit",
	rlsNeedsAdmin: "Access to row level security is only available to administrators.",
	rlsDisabledWS: "Row level security is not supported for Worksheets.",
	rlsDisabledView: "Row level security is not supported for Views.",
	profileDisabledWS: "Data profiling is not supported for Worksheets.",
	profileDisabledView: "Data profiling is not supported for Views.",
	needsUnderlyingAccess: "To edit the worksheet, ask your administrator for access to the underlying data",
	needsDataManagementPrivileges: "To edit data, ask your administrator to grant you the 'Can Manage Data' privilege",
	types: {
		USER_DEFINED: "Imported Table",
		WORKSHEET: "Worksheet",
		AGGR_WORKSHEET: "View",
		ONE_TO_ONE_LOGICAL: "System Table"
	},
	currencyEditor: {
		NONE: "None",
		FROM_BROWSER: "Infer From Browser",
		FROM_COLUMN: "From a column",
		FROM_ISO_CODE: "Specify ISO Code",
		SELECT_COLUMN: "Select a column",
		SELECT_ISO_CODE: "Select currency code",
		DIALOG_TITLE: "Specify Currency Type",
		CURRENCY_TYPE: "Currency Type"
	},
	geoConfigEditor: {
		GEO_CONFIG: "Geo Config",
		EDIT_GEO_CONFIG: "Specify Geographic Configuration",
		NONE: "None",
		LATITUDE: "Latitude",
		LONGITUDE: "Longitude",
		COUNTRY: "Country",
		CUSTOM_REGION: "Custom Region",
		NO_DEF_UPLOADED: "No definition uploaded",
		SUB_NATION: "Sub-nation region (State/County/Zip Code etc.)",
		SUB_DIVISION_NAME: {
			POSTAL_CODE: "Postal Code",
			PROVINCE: "Province and Territories",
			CENSUS_DIV: "Census Divisions",
			REGION: "Region",
			DEPARTMENT: "Department",
			STATE: "State",
			COUNTY: "County",
			PREFECTURE: "Prefecture",
			CITY: "City",
			PMC: "PMC",
			SUBURB: "Suburb",
			MUNICIPALITY: "Municipality",
			DISTRICT: "District",
			ZIP_CODE: "Zip Code",
			UK_FIRST_LEVEL: "County and Unitary Authority",
			UK_SECOND_LEVEL: "Local Authority District"
		},
		ADMIN_LEVEL_1: "First level subdivision",
		ADMIN_LEVEL_2: "Second level subdivision"
	}
};
var privilegesLabels = {
	ADMINISTRATION: "Can administer ThoughtSpot",
	USERDATAUPLOADING: "Can upload user data",
	DATADOWNLOADING: "Can download data",
	SHAREWITHALL: "Can share with all users",
	DATAMANAGEMENT: "Can manage data",
	EXPERIMENTALFEATUREPRIVILEGE: "Can use experimental features",
	JOBSCHEDULING: "Can schedule pinboards",
	A3ANALYSIS: "Has SpotIQ privilege",
	RANALYSIS: "Can invoke Custom R Analysis",
	BYPASSRLS: "Can administer and bypass RLS"
};
var listFilterLabels = {
	TAG_LABEL_UI_NAME: "sticker",
	selectStickerMessage: "Select sticker",
	tableTypeFilterLabel: "Type",
	tableTypeFilterValueAll: "All types",
	tableTypeFilterValueImported: "Imported",
	tableTypeFilterValueTables: "Tables",
	tableTypeFilterValueWorksheets: "Worksheets",
	tableTypeFilterValueViews: "Views",
	authorFilterLabel: "Created By",
	authorFilterValueAll: "All",
	authorFilterValueYou: "Yours",
	authorFilterValueFavorites: "Favorites",
	myRequests: "My requests",
	requestsForMe: "Requests for me",
	statusAll: "All",
	statusResolved: "Resolved",
	statusUnresolved: "Unresolved"
};
var sticker = {
	MenuItemType: {
		EDIT_NAME: "Edit name",
		REMOVE_LABEL: "Remove {1}"
	}
};
var dataSources = {
	USER_DEFINED: "Imported",
	ONE_TO_ONE_LOGICAL: "Default"
};
var disabledChartTypeSelectorTooltips = {
	BAR: "Your search needs at least 1 attribute and 1 measure.",
	COLUMN: "Your search needs at least 1 attribute and 1 measure.",
	STACKED_COLUMN: "Your search needs at least 2 attributes and 1 measure.",
	STACKED_BAR: "Your search needs at least 2 attributes and 1 measure.",
	PARETO: "Your search needs at least 1 attribute and 1 measure.",
	LINE: "Your search needs at least 1 attribute and 1 measure.",
	AREA: "Your search needs at least 1 attribute and 1 measure.",
	SCATTER: "Your search needs at least 1 attribute and 1 measure.",
	BUBBLE: "Your search needs at least 1 attribute and 2 measures.",
	PIE: "Your search needs at least 1 attribute and 1 measure.",
	GEO_AREA: "Your search needs 1 Geographical column of granularity higher than Zip Code.",
	GEO_BUBBLE: "Your search needs 1 Geographical column or a pair of latitude and longitude columns.",
	GEO_HEATMAP: "Your search needs 1 Geographical column or a pair of latitude and longitude columns.",
	HEATMAP: "Your search needs at least 2 attributes and 1 measure",
	TREEMAP: "Your search needs at least 1 attribute and 2 measures ",
	WATERFALL: "Your search needs at least 1 attribute and 1 measure.",
	STACKED_AREA: "Your search needs at least 2 attributes and 1 measure.",
	LINE_COLUMN: "Your search needs at least 1 attribute and 2 measures.",
	FUNNEL: "Your search needs at least 1 attribute and 1 measure.",
	SPIDER_WEB: "Your search needs at least 1 attribute and 1 measure.",
	LINE_STACKED_COLUMN: "Your search needs at least 2 attributes and 2 measures.",
	PIVOT_TABLE: "Your search needs at least 1 attribute and 1 measure, variance and standard deviation are not allowed.",
	SANKEY: "Your search needs at least 2 attributes and 1 measure",
	GRID_TABLE: "Your search needs at least 2 attributes and 1 measure",
	CANDLESTICK: "Your search needs at least 1 attribute and 4 measures"
};
var dataDisabledChartExplanation = {
	PARETO: "Your search needs at least one measure where the smallest value is greater than zero.",
	CARDINALITY: "Your search needs an attribute containing {1} or less values.",
	SANKEY_CARDINALITY: "One of your x-axis attribute contains too many values. X-axis attributes can contain at most {1} values.",
	LOW_CARDINALITY: "Your search needs an attribute containing {1} or more values.",
	UNIQUE_X_VALUES_PER_SERIES: "Your search needs to have unique y-axis values for each series of data shown on the x-axis.",
	UNIQUE_X_VALUES_ALL_DATA: "Your search needs to have unique y-axis values for each x-axis value.",
	ONLY_ONE_Y_AXIS_COLUMN_SUPPORTED: "Your search may have only one column on the y-axis.",
	NON_NEGATIVE_VALUES_NEEDED: "Your search result has negative values that are not supported by this chart type.",
	SD_AND_VARIANCE_PIVOT: "Standard deviation and variance are not supported by pivot table.",
	DATA_INCOMPLETE_PIVOT: "The search returned too many results. Please filter to enable pivot table."
};
var chartEditorErrorExplanation = {
	ATLEAST_ONE_AXIS_COLUMN: "At least one {axis} column is required.",
	SIZE_REQUIRED: "You must specify the column size.",
	NON_NUMERIC_Y_AXIS_LINKING: "Cannot share with attributes",
	MULTIPLE_NON_NUMERIC_ON_Y: "Non numeric column is not allowed when there are multiple columns on the y-axis.",
	ONLY_ATTRIBUTES_ON_LEGEND: "Only attributes are allowed in the legend.",
	UNSUPPORTED_LEGEND_WITH_MULTIPLE_Y: "When there are multiple columns on the y-axis, you cannot add a legend.",
	COLUMN_ALREADY_ON_X: "{1} is already an x-axis column.",
	COLUMN_ALREADY_ON_Y: "{1} is already a y-axis column.",
	NUMERIC_SIZE_COLUMN: "Size column must be numeric.",
	COLUMN_ALREADY_USED: "{1} is already in use.",
	NEEDS_CURRENCY_COLUMN: "One of the columns is missing currency information.",
	INVALID_AXIS_SHARING: "Columns with different currency settings cannot share y-axis."
};
var smartCheckboxCollection = {
	NO_MATCHES: "No matches for {1}.",
	CLEAR_SELECTED_ITEMS: "Clear all",
	SELECT_ALL_ITEMS: "Select all",
	CHECKBOX_SEARCH_PLACEHOLDER: "Search by name",
	SEARCH_TO_REFINE_ITEMS_FURTHER: "Continue typing to refine further.",
	SEARCH_TO_FIND_MORE_READ_ONLY_ITEMS: "Search to refine items.",
	SEARCH_TO_FIND_MORE_ITEMS: "Search to refine items.",
	SEARCH_TO_FIND_MORE_SELECTED_ITEMS: "Search to refine items."
};
var SAVE_DOCUMENT_DIALOG_TITLE = "Save {documentType}";
var NAME_BEFORE_SHARING_DIALOG_TITLE = "Name the {1} before sharing";
var LOADING_MSG = "Loading";
var LOADING_FAILED_MSG = "Loading Failed";
var UPLOADING_MSG = "Uploading";
var NO_MATCH_MSG = "No matches found";
var MORE_ITEMS_MSG = "Please refine your search...";
var UPGRADING_ANSWER_MSG = "Upgrading answer";
var CALLOSUM_CODE_CANCELED = "CANCELLED";
var DRILL_TYPE_VIZ_LEVEL = "viz-level";
var dataPanel = {
	SOURCES_TITLE: "Sources",
	COLUMNS_TITLE: "Columns",
	FILTERS_TITLE: "Filters",
	FORMULAE_TITLE: "Formulas",
	SELECTED_SOURCES: "Selected Sources",
	SELECTED_SUBTITLE: "{1} selected",
	TOO_MANY_COLUMNS: "This search has hit the limit for maximum number of columns.To add more columns, first remove some columns from the search bar, then add new ones.",
	NO_COLUMNS_SELECTED: "Please select a column from the sources list to add to your search.",
	COMPLEX_QUERY: "Nice looking search! It's too complicated for +Add Columns, but you can still type in the search bar.",
	MISSING_UNDERLYING_ACCESS: "To edit the question, ask your administrator for access to the underlying data.",
	CREATE_FORMULA_TOOLTIP: "Create a new formula",
	TITLE: "Data",
	popover: {
		DONT_SHOW_AGAIN: "Don't show me this again.",
		ADD_SOURCES: "Add sources to start",
		SELECT_DATA_SOURCES: "Select data sources to explore"
	},
	SAMPLE_VALUES: "Sample values:",
	SAMPLE_VALUES_UNAVAILABLE: "Unavailable"
};
var dataProfile = {
	metrics: {
		NULL: "Null values"
	},
	NOT_AVAILABLE: "N/A"
};
var expressionEditorPanel = {
	EXPRESSION_VALID: "Good to go!",
	EXPRESSION_INCOMPLETE: "Expression is incomplete"
};
var formulaEditor = {
	FORMULA_ASSISTANT: "Formula Assistant"
};
var rlsRuleEditor = {
	RULES: "Rules",
	ADD_RULE: "Add row security",
	RULE_ASSISTANT: "Rule assistant",
	RULE_NAME_PLACEHOLDER: "Enter Rule name",
	EDIT_JOIN_PATH: "Change how the join rule affects Row Level Security.",
	RLS_DESCRIPTION: "Provide access to rows of this table if <b>any</b> of the following rules are met.",
	EXPLAIN_RLS: "With row level security, control which groups have access to specific rows.",
	EXAMPLE1: "<b>Example</b><br><br>Type an expression to apply data from a column to a group.<br><br>For example, let's say you have a group called \"EastSales\" and a Group called \"WestSales\". You only want users in these groups to see rows with \"East\" and \"West\" respectively.<br>Therefore, you would type:<br><br><span class=\"font-blue-default\">concat</span>(<span class=\"font-purple-default\">region</span>, \"Sales\") = ts_groups<br><br>This way, any row with \"East\" in the data will be seen if user belongs to \"EastSales\",\"West\" will be seen if the user belong to \"WestSales\"... etc.<br>",
	saveBtnDisabled: "You must enter a formula and name to save the RLS rule."
};
var queryJoinType = {
	labels: {
		INNER: "Exclude empty rows",
		LEFT_OUTER: "Apply left outer join",
		RIGHT_OUTER: "Apply right outer join",
		FULL_OUTER: "Apply full outer join"
	},
	descriptions: {
		INNER: "Inner join",
		LEFT_OUTER: "Left outer join",
		RIGHT_OUTER: "Right outer join",
		FULL_OUTER: "Full outer join"
	}
};
var worksheetType = {
	labels: {
		VIEW: "Apply all joins",
		CONTAINER: "Apply joins progressively (recommended for most cases)"
	}
};
var worksheets = {
	ADD_PREFIX: "Add prefix",
	MULTIPLE_COL_SAME_NAME_WARNING: "This worksheet has multiple columns with the same names. All column names must be unique.",
	SAME_COLUMNS_ADDED_WITH_NEW_COLS_WARNING: "Some of the columns you are about to add already exist in this worksheet.",
	SAME_COLUMNS_ADDED_NO_NEW_COLS_WARNING: "The columns you want to add already exist in this worksheet.",
	corruptWorksheetWarning: {
		PREFIX: "Underlying columns for the highlighted worksheet columns are not accessible. Please",
		LINK_ACTION: "remove",
		SUFFIX: "these worksheet columns."
	},
	upgrade: {
		UPGRADE_IN_PROGRESS_MESSAGE: "upgrading",
		UPGRADE_FAILURE_MESSAGE: "Error in worksheet upgrade, sage refresh failed ({errorCode})"
	},
	updating: "updating",
	verifying: "verifying",
	source: "Source",
	sources: "Sources",
	noSources: "This column has no sources",
	brokenColumnDeleteDialog: {
		title: "Really delete broken columns?",
		message: "Deleting broken columns will fix the worksheet. To fix the worksheet without deleting broken columns please contact your administrator."
	}
};
var vizContext = {
	title: "Edit",
	NO_MATCHING_HEADLINE: "Updating answer disabled because no matching headline was found."
};
var naturalQuery = {
	aggregateMetricMeasures: "and {length} more metrics",
	groupingClause: "and {length} more columns",
	ThoughtSpot_computed: "Computed",
	for_each: "for each",
	combination_of: "combination of",
	for_each_combination_of: "For each combination of",
	ThoughtSpot_compiled_a: "ThoughtSpot compiled a list of",
	filtered_on: "filtered on",
	sorted_by: "sorted by",
	And_then: "and then picked",
	by: "by",
	ranked_by: "ranked by",
	And_then_determined: "and then determined {bucketing} growth of",
	by_linking: "by linking information from",
	query_viewer: "Query visualizer",
	and: "and",
	tables_using: "tables using",
	relation: "relation",
	"in": "in",
	order: "in {order} order",
	columnMeasures: "and {length} more columns",
	regionCount: "And then picked {topKeyword} {topCount}",
	more_columns: "more columns",
	over_successive_year: "over successive year"
};
var tokenPanel = {
	emptySectionPlaceholder: "Drag fields here",
	InfoTitle: "Info",
	StyleTitle: "Style",
	ConfigTitle: "Config",
	NotVisualized: "Not Visualized",
	topN: "Top {count}"
};
var DataExplorerVisibleDependents = {
	PINBOARD_ANSWER_BOOK: "Pinboard",
	INSIGHT_ANSWER_BOOK: "Insight",
	QUESTION_ANSWER_BOOK: "Answer",
	LOGICAL_TABLE: {
		WORKSHEET: "Worksheet",
		AGGR_WORKSHEET: "View",
		ONE_TO_ONE_LOGICAL: "Table",
		USER_DEFINED: "Table"
	}
};
var metricsRangeValidationErrorMessages = {
	NON_NUMERIC_RANGE_BOUNDARY: "Range min/max values must be numbers.",
	OVERLAPPING_RANGES: "Ranges may not overlap.",
	INVALID_RANGE: "Range's min should be smaller than the max."
};
var NO_METRICS_DEFINED_YET_MESSAGE = "No formatting conditions defined yet. Create a new one.";
var METRIC_PLOT_AS_BAND = "Fill chart";
var NULL_VALUE_PLACEHOLDER_LABEL = "{Null}";
var EMPTY_VALUE_PLACEHOLDER_LABEL = "{Empty}";
var OTHER_VALUE_PLACEHOLDER_LABEL = "{Other}";
var UNAVAILABLE_COLUMN_SAMPLE_VALUE = "N/A";
var sageDropdownSelectEvent = {
	TAB_ON_INPUT: "TAB_ON_INPUT",
	ENTER_ON_INPUT: "ENTER_ON_INPUT"
};
var joinWorkflow = {
	titles: {
		DEFINE_MAPPING: "Define mapping",
		JOIN_MAPPING: "Join Mapping",
		EDIT_MAPPING: "Edit mapping"
	}
};
var pivotTable = {
	OTHER_LABEL: "{Other}",
	UNDEFINED_RESULT: "Undefined",
	COLLAPSE_ALL: "Collapse All",
	EXPAND_ALL: "Expand All",
	REMOVE_ALL_SORTING: "Remove All Sorting",
	SORT_COLUMN: "Sort {0} by This Column",
	SORT_ROW: "Sort {0} by This Row",
	TOTAL: "{0} Total",
	COLUMN_FIELD_AREA: "Drop Column Fields Here",
	DATA_FIELD_AREA: "Drop Data Fields Here",
	ROW_FIELD_AREA: "Drop Row Fields Here",
	summaryModeLabel: "Show Values As",
	summaryMode: {
		None: "No Calculation",
		percentOfRowTotal: "% of Row Total",
		percentOfColumnTotal: "% of Column Total",
		percentOfRowGrandTotal: "% of Row Grand Total",
		percentOfColumnGrandTotal: "% of Column Grand Total",
		percentOfGrandTotal: "% of Grand Total"
	}
};
var searchDoctor = {
	SIMILAR_SEARCHES_MESSAGE: "View similar saved searches",
	EXPLORE_SEARCHES_MESSAGE: "Explore some saved searches"
};
var userPropertiesKeys = {
	EMAIL: "mail"
};
var sharePanel = {
	ADD_USER_OR_GROUPS: "Add users or groups",
	CLICK_TO_SAVE: "Click save to save your changes",
	ENTIRE_TABLE: "Entire Table",
	FETCHING_PERMISSIONS: "Fetching permissions...",
	IS_OWNER: "Is owner",
	SPECIFIC_COLUMN: "Specific Columns",
	TITLE: "Share",
	RLS_WARNING: "Row level security is disabled for this worksheet. Users with access to the worksheet can see all the data it contains.",
	WHO_ACCESS: "Who has access",
	READ_ONLY: "Can View",
	MODIFY: "Can Edit",
	VARIES: "Varies"
};
var loginConstants = {
	LOGIN_WITH_SAML_MESSAGE: "Login using Single Sign On"
};
var contextMenu = {
	RELATED_ITEMS: "Related items"
};
var importData = {
	NAME_DESCRIPTION_ERROR: "Name/Description cannot be empty.",
	CONNECTION_ERROR: "No connection was chosen.",
	TABLE_ERROR: "Select at least one table",
	BASIC_INFO: "Basic Info",
	SELECT_TABLES: "Select Tables",
	FILTERS_TRANSFORMS: "Transformations",
	SAVE: "Save Changes",
	LOAD_DATA: "Load Data",
	EDIT_WORKSHEET: "Edit Worksheet",
	EDIT: "Edit View",
	ABORT_DATA_IMPORT: "Abort new data source import",
	ABORT_CONFIRMATION_MESSAGE: "Are you sure you want to abort the new data source import?",
	CANCEL_BTN_LABEL: "Stay here",
	CONFIRM_BTN_LABEL: "Yes, abort",
	NEXT: "Next",
	EDIT_SCHEMA_TEXT: "DDL Commands",
	DEFAULT_DS_NAME: "Default",
	SUCCESSFUL_STATUS: "Successful",
	FAILED_STATUS: "Failed",
	DB_SCHEMA_NAME: "InformaticaDataBase.InformaticaSchema.",
	TRUNCATE_TABLES: "Truncate data in the existing tables.",
	ENABLE_EMAILS: "Enable email notifications for data load tasks",
	DELETE_TABLES: "Delete tables associated with selected data source(s)?",
	SCHEDULE: "Schedule",
	AVAILABLE_TABLES: "Available Tables",
	DELETE_DATASOURCE: {
		TITLE: "Confirm delete"
	},
	SELECTED_TABLES: "Selected Tables",
	SELECT_CONNECTION_TYPE: "Select connection type",
	OPTIONAL_STEP: "(Optional)",
	CREATING_DS: "Creating data source",
	EXECUTING_DDL: "Creating Schemas",
	LOADING_DATA: "Loading data",
	IMPORT_DISABLED_TIP: "Enter a name for the data source",
	DATATYPE_NOT_SUPPORTED_TIP: "Data type is not supported",
	IMPORT_TIP: "Click here to start importing",
	CLICK_TO_EDIT_SCHEMA: "Click <span class=\"bk-text-clickable\"><b>here</b></span> to edit Schema, or click <b>Load</b> to load the tables.",
	NO_SCHEMA_TO_EDIT: "No schema to edit. Click <b>Load</b> to load data.",
	EDIT_SCHEMA: "Edit Schema",
	STATUS_PREFIX: "Loading status for the item is: ",
	TITLE_NAME: "NAME",
	LAST_LOAD: "LAST LOAD",
	LOAD_STATUS: "LOAD STATUS",
	SELECT_CONN: "Select connection",
	CREATE_CONN: "Create connection",
	CONN_NAME: "Connection name",
	DELETE_CONN: "Delete connection",
	EDIT_CONN: "Edit connection",
	CANNOT_DELETE: "Cannot delete",
	CANNOT_DELETE_TRANSFORMATION: "Cannot delete existing transformations.",
	TABLE_CONTAINS_UNSUPPORTED_COL: {
		SINGLE_TABLE: "Selected table {1} contains columns with unsupported data types, which will be automatically removed.",
		MULTIPLE_TABLES: "The following tables selected for import contain columns with unsupported data types."
	},
	TABLE_CONTAINS_NO_COL: {
		SINGLE_TABLE: "Selected table {1} contains no columns selected. Please select at least one column or remove the table from the selected tables",
		MULTIPLE_TABLES: "The following tables selected for import have no columns selected.Please select at least one column or remove the tables below from the selected tables"
	},
	NO_COLUMNS_SELECTED: "No columns selected",
	CONN_DIALOG: {
		TEST_AND_EDIT: "Test & Edit",
		TEST_AND_CREATE: "Test & Create"
	},
	UNSUPPORTED_COLUMN: "Unsupported column data type",
	LINK_TO_EXISTING_DATA: "Link to existing data",
	ASK_A_QUESTION: "Ask a question",
	TRY_OVER_AGAIN: "Try again",
	SUCCESS: "Success",
	FAILED: "Failed",
	INPROGRESS: "In Progress",
	SCHEDULED: "Scheduled",
	ETL_DISABLED: "Currently disabled by your administrator.",
	SESSION_LOG_CLICK_TEXT: "View session logs",
	PRE_SCRIPT_STATUS: "Pre-script status",
	POST_SCRIPT_STATUS: "Post-script status",
	ACCORDION: {
		PRE_SCRIPT: {
			TITLE: "Add pre-script",
			DESCRIPTION: "Add a TQL script that will run before data upload (optional)"
		},
		POST_SCRIPT: {
			TITLE: "Add post-script",
			DESCRIPTION: "Add a TQL script that will run after data upload (optional)"
		},
		SCHEDULE: {
			TITLE: "Set schedule"
		}
	}
};
var importWizard = {
	HEADER_QUESTION: "Are the column names already defined in the file header?",
	DROP_APPEND_QUESTION: "Do you want to append to the existing data or overwrite it?",
	FIELD_SEPARATOR_QUESTION: "Are the fields separated by?",
	fieldSeparators: {
		COMMA: "Comma(,)",
		SEMICOLON: "Semicolon(;)",
		PIPE: "Pipe(|)",
		SPACE: "Space",
		TAB: "Tab"
	},
	SELECT_TYPE: "Select type"
};
var transformationEditor = {
	TRANSFORM_ASSISTANT: "Expression assistant",
	TRANSFORMATION: "Expressions",
	ADD_EXPRESSION: "Add expression",
	ADD_COLUMN: "Add column",
	VALIDATE_COLUMN: "Validate",
	NO_TRANSFORMATIONS_DEFINED: "No expressions are defined, click Add to add one.",
	CANNOT_SAVE: "Please make sure you have picked a table and given it a name.",
	TYPE_MISMATCH: "Type mismatch, Expected {1} got {2}",
	ADD_NEW_COLUMN: "Add new column",
	SELECT_COLUMN: "Select existing column",
	SELECT_TABLE: "Select a table"
};
var SAGE_SERVER_NAME = "ThoughtSpot";
var CALLOSUM_SERVER_NAME = "ThoughtSpot";
var SAGE_AND_CALLOSUM_SERVER_NAME = "ThoughtSpot";
var viewPermissionColName = "Your permissions only allow you to view this column's name";
var VIZ_CORRUPTED_TITLE_NOT_EDITABLE_MESSAGE = "The title of a corrupted visualization may not be changed.";
var profilePic = {
	UPLOAD_INSTRUCTIONS: "Upload a .png or .jpg file (less than 4MB). It should be in a square format (e.g. 100x100)."
};
var apiErrorMessage = {
	detail: "Detail",
	errorCode: "Code",
	incidentId: "Incident Id",
	downloadTrace: "Download Trace",
	reportProblem: "Report Problem"
};
var dataDownload = {
	DOWNLOAD: "Download {vizType}",
	DOWNLOAD_INSUFFICIENT_PERMISSION: "To download {vizType} ask the administrator for download privileges.",
	DOWNLOAD_MORE: "Download more?",
	DOWNLOAD_MORE_INSUFFICIENT_PERMISSION: "Download more? Ask the administrator for download privileges."
};
var worksheetLeftPanel = {
	removeFormula: "Remove Formula",
	CLICK_PLUS_TO_ADD_FORMULAE: "Click + to add new formula",
	CLICK_PLUS_TO_ADD_FILTERS: "Click + to add new filter"
};
var answerFeedback = {
	title: "Send feedback",
	message: "Your comments, positive or negative, are valuable and can help us improve. Any feedback is sent anonymously."
};
var SEND = "SEND";
var CUSTOMIZE_HEADLINES_DISPLAY = "Customize Summaries";
var customSummary = {
	message: "Select which summaries you would like to display"
};
var ungroup = {
	message: "Are you sure you want to ungroup <span class=\"bk-text-gray\"><b>${vizTitle}</b></span> from the pinboard?",
	title: "Confirm ungroup"
};
var adminSection = {
	userManagement: {
		group: {
			NoDelete: "The Administration Group cannot be deleted."
		},
		addUserButtonLabel: "Add User",
		addGroupButtonLabel: "Add Group",
		addRoleButtonLabel: "Add Role",
		tabHeader: "User Management",
		tabUsers: {
			name: "Users"
		},
		tabGroups: {
			name: "Groups"
		},
		tabRoles: {
			name: "Roles"
		},
		errors: {
			emailNotValid: "Email is not valid",
			passwordNotMatching: "Both passwords need to match"
		},
		privilegesLabel: "Privileges"
	},
	dataManagement: {
		tabHeader: "Data Management",
		tabBusinessDataModel: {
			name: "Business Data Model"
		},
		tabNLMappings: {
			name: "Language Mappings"
		},
		tabDataSecurity: {
			name: "Data Security"
		}
	},
	healthManagement: {
		tabHeader: "System Health",
		tabOverview: {
			name: "Overview"
		},
		tabData: {
			name: "Data"
		},
		tabDatabase: {
			name: "Datacache Detail"
		},
		tabAlert: {
			name: "Alerts & Events"
		},
		tabCluster: {
			name: "Cluster Manager"
		},
		tabEmbrace: {
			name: "Embrace"
		}
	},
	styleCustomization: {
		tabHeader: "Style Customization",
		tabRules: {
			name: "Rules"
		},
		tabResources: {
			name: "Resources"
		}
	},
	helpCustomization: {
		tabHeader: "Help Customization"
	},
	actionCustomization: {
		tabHeader: "Action Customization"
	},
	jobManagement: {
		tabHeader: "Jobs Management",
		noRun: "There are no runs for this job."
	}
};
var alertService = {
	DOWNLOAD_TRACE: "Trace File",
	SEND: "Send Email",
	REPORT: "Report"
};
var alertDialog = {
	errorDetails: {
		HEADER: "Error Details",
		SERVER_RESPONSE: "Server Response"
	},
	textArea: {
		HEADER: "Add a comment for the administrator",
		MESSAGE: "Please share any useful information such as steps to reproduce the issue that might help fix this problem."
	}
};
var adminUI = {
	tooltip: {
		DELETE_USER: "Delete Users",
		ADD_USER_TO_GROUP: "Add users to groups"
	},
	messages: {
		NOT_AVAILABLE_MESSAGE: "N/A",
		SEARCH_READY: "READY",
		SEARCH_BUILDING_READY: "BUILDING AND READY",
		SEARCH_BUILDING_NOT_READY: "BUILDING AND NOT READY",
		SEARCH_ERROR: "ERROR",
		EVENT_TITLE: "Configuration Events",
		ALERT_TITLE: "Critical Alerts",
		ALERT_DETAIL_TITLE: "Alerts",
		EVENT_DETAIL_TITLE: "Configuration Events",
		NOTIFICATION_DETAIL_TITLE: "Notification Events",
		DATABASE_DETAIL_TITLE: "Datacache Detail",
		CLUSTER_DETAIL_INFO_TITLE: "Cluster Details",
		CLUSTER_DETAIL_LOG_TITLE: "Cluster Logs",
		CLUSTER_DETAIL_SNAPSHOT_TITLE: "List of Snapshots",
		PERIODIC_SNAPSHOT_FULL_MODE: "full",
		PERIODIC_SNAPSHOT_DISABLED: "disabled",
		SEARCH_DETAIL_TABLE_TITLE: "Table Information",
		SEARCH_DETAIL_NODE_TITLE: "Node Information"
	},
	captions: {
		CREATED_AT: "CREATED AT",
		NO_GROUPS: "No Groups",
		NO_ROLES: "No Roles",
		GROUPS_TITLE: "{1} Group{2}",
		NO_USERS: "No Users",
		USERS_TITLE: "{1} User{2}",
		ROLES_TITLE: "{1} Role{2}",
		USER_MENU: "User management",
		GROUP_MENU: "Group management",
		DATA_MENU: "Data management",
		USER_LABEL: "Users",
		GROUP_LABEL: "Groups",
		FILE_UPLOAD_METADATA_LABEL: "Business Data Model",
		FILE_UPLOAD_SECURITY_LABEL: "Data security",
		ADD_GROUP: "Add Group",
		ADD_USER: "Add User",
		ADD_ROLE: "Add Role",
		ADD_USER_TO_GROUP: "Add users to group",
		EDIT_USER: "Edit User",
		ADD_NEW_USER: "Add a new user",
		ADD_NEW_GROUP: "Add a new group",
		ADD_NEW_ROLE: "Add a new role",
		EDIT_GROUP: "Edit group",
		SEARCH: "Search by name",
		SEARCH_LIST: "Search the list",
		ALL: "all",
		GROUPS_IN_GROUP: {
			"0": "No Groups in Group",
			"1": "1 Group in Group",
			n: "{1} Groups in Group"
		},
		PINBOARD_IN_GROUP: {
			"0": "No Default Pinboard in Group",
			"1": "1 Default Pinboard in Group",
			n: "{1} Default Pinboards in Group"
		},
		USERS_IN_GROUP: {
			"0": "No User in Group",
			"1": "1 User in Group",
			n: "{1} Users in Group"
		},
		ROLES_IN_GROUP: {
			"0": "No Role assigned to Group",
			"1": "1 Role assigned to Group",
			n: "{1} Roles assigned to Group"
		},
		GROUPS_IN_ROLE: {
			"0": "No Group assigned to Role",
			"1": "1 Group assigned to Role",
			n: "{1} Groups assigned to Role"
		},
		USERS_IN_ROLE: {
			"0": "No User assigned to Role",
			"1": "1 User assigned to Role",
			n: "{1} Users assigned to Role"
		},
		GROUPS_IN_USER: {
			"0": "No Group assigned to User",
			"1": "1 Group assigned to User",
			n: "{1} Groups assigned to User"
		},
		ROLES_IN_USER: {
			"0": "No Roles assigned to User",
			"1": "1 Role assigned to User",
			n: "{1} Users assigned to User"
		},
		MANAGE_GROUPS_TAB: "Groups",
		MANAGE_USERS_TAB: "Users",
		MANAGE_ROLES_TAB: "Roles",
		MANAGE_PINBOARDS_TAB: "Default Pinboards",
		SELECT_DEFAULT_PINBOARDS: "Select default pinboards",
		SELECT_DEFAULT_PINBOARDS_TOOLTIP: "Default pinboards will be used to onboard new users in this group. The user-selected pinboard will be marked as a favorite, and its data source will be used for search.",
		DEFAULT_PINBOARD_INTRODUCTION_1: "Steps to setup default pinboards for this group:<br><br>1. Create this group<br>2. Share existing or new Pinboards with this group<br>3. Edit this group and assign default Pinboards<br>",
		DEFAULT_PINBOARD_ADMIN_GROUP_ERROR_MESSAGE: "Default Pinboards are not allowed for Administrator Group.",
		PREVIEW_ONBOARDING_LINK: "Preview onboarding",
		WELCOME_EMAIL: "Test welcome email",
		NAME: "Username",
		GROUP_NAME: "Group name",
		USERNAME: "Username",
		DISPLAYED_NAME: "Display name",
		VISIBILITY: "Sharing visibility",
		DESCRIPTION: "Description",
		NEW_PASSWORD: "Password",
		PASSWORD: "Change password",
		PASSWORD_CONFIRMATION: "Confirm password",
		EMAIL: "Email",
		SEND_EMAIL: "",
		SEND_EMAIL_LABEL: "Send a welcome email",
		SEND_MESSAGE: "",
		SEND_MESSAGE_PLACEHOLDER: "Add message (optional)",
		EDIT_ROLE: "Edit Role",
		PRIVILEGES: "Privileges",
		PROPERTY: "Property",
		CONTENT: "Content",
		CLUSTER_NAME: "Cluster Name",
		CLUSTER_ID: "Cluster ID",
		RELEASE: "Release",
		LAST_UPDATE_TIME: "Last Update Time",
		ZOOKEEPER_SERVERS: "Zookeeper Servers",
		HDFS_NAME_NODES: "HDFS Name Nodes",
		CLUSTER_ALERT_EMAIL: "Cluster Alert Email",
		SERVICE_ALERT_EMAIL: "Service Alert Email",
		PERIODIC_SNAPSHOT_MODE: "Periodic Snapshot Mode",
		EVENT_TYPE: "Type",
		EVENT_TIMESTAMP: "Time",
		EVENT_RELEASE: "Release",
		EVENT_USER: "User",
		EVENT_MESSAGE: "Message",
		EVENT_SUMMARY: "Summary",
		SNAPSHOT_NAME: "Name",
		SNAPSHOT_REASON: "Reason",
		SNAPSHOT_FINISH_TIME: "Time",
		SNAPSHOT_SIZE: "Size",
		DATABASE_NAME: "Database",
		USER_SCHEMA_NAME: "User Schema",
		DATABASE_TABLE_GUID: "GUID",
		DATABASE_TABLE_NAME: "Name",
		DATABASE_TABLE_STATUS: "Database Status",
		DATABASE_SERVING_TIMESTAMP: "Serving Timestamp",
		DATABASE_SCHEMA_VERSION: "Schema Version",
		DATABASE_DATA_VERSION: "Data Version",
		DATABASE_CREATED_ON: "Last Updated Time",
		DATABASE_NUM_ROWS: "Total Row Count",
		DATABASE_ROW_SKEW: "Row Count Skew",
		DATABASE_NUM_DELETED_ROWS: "Deleted Rows",
		DATABASE_APPROXIMATE_SIZE_MB: "Estimated Size (MB)",
		DATABASE_APPROXIMATE_SIZE_MB_SKEW: "Estimated Size (MB) Skew",
		DATABASE_REPLICATED: "Replicated",
		DATABASE_TOTAL_SHARDS: "Total Shards",
		DATABASE_USED_CSV_CAPACITY: "Used CSV Capacity (MB)",
		DATABASE_USED_RAMDISK_CAPACITY: "Used Ramdisk Capacity (MB)",
		DATABASE_CLUSTER_SPACE_USED: "Cluster Space Used (MB)",
		DATABASE_LAST_UPDATED_TIME: "Last Updated Timestamp",
		SEARCH_TABLE_GUID: "GUID",
		SEARCH_TABLE_NAME: "Name",
		SEARCH_TABLE_STATUS: "Search Status",
		NODE_IP: "Node IP",
		RAMDISK_USAGE: "Ramdisk usage (MB)",
		CAPACITY: "Capacity",
		SEARCH_DATABASE_VERSION: "Database Version",
		SEARCH_BUILDING_VERSION: "Building Version",
		SEARCH_SERVING_VERSION: "Serving Version",
		SEARCH_LAST_BUILD_DURATION: "Last Index Build Duration"
	},
	clusterSummaryViz: {
		CLUSTER_TITLE: "Cluster Summary",
		CLUSTER_NAME: "CLUSTER NAME",
		RELEASE: "RELEASE",
		NUMBER_OF_NODES: "NUMBER OF NODES",
		LAST_SNAPSHOT_TIME: "LAST SNAPSHOT TIME"
	},
	databaseSummaryViz: {
		DATABASE_TITLE: "Relational Data Cache",
		LAST_DATA_UPDATE: "Last data update",
		CONTENT_TITLES: {
			TABLES_LOADED: "TABLES LOADED",
			TABLES_BEING_UPDATED: "TABLES BEING UPDATED",
			NEW_TABLES_BEING_LOADED: "NEW TABLES BEING LOADED",
			ROWS: "ROWS"
		}
	},
	searchSummaryViz: {
		SEARCH_TITLE: "Relational Search Engine",
		LAST_INDEXED: "Last indexed",
		CONTENT_TITLES: {
			TABLES_SEARCHABLE: "TABLES SEARCHABLE",
			TABLES_BEING_INDEXED: "TABLES BEING INDEXED",
			NEW_TABLES_BEING_INDEXED: "NEW TABLES BEING INDEXED",
			TOKENS_SEARCHABLE: "TOKENS SEARCHABLE"
		}
	},
	visibility: {
		options: {
			DEFAULT: {
				caption: "SHARABLE",
				tooltip: "Allows other users to share items with this user/group"
			},
			NON_SHARABLE: {
				caption: "NOT SHARABLE",
				tooltip: "Prevents other users (except administrators) from sharing items with this user/group"
			}
		}
	}
};
var filtersPermission = {
	READONLY: "readonly",
	EDITABLE: "editable"
};
var filtersMessages = {
	READONLY: "You can only view these filters",
	ADD_FORMATTING: "Add formatting",
	CONFIGURE: "Change configuration",
	checkboxFilter: {
		DISALLOW_SELECT_ALL: "'Select all' is disabled for a large number of values. Please use 'Add values in bulk' option."
	},
	valuePreview: {
		CLICK_TO_SEE_FILTER: "Click to see filter"
	}
};
var bulkFilters = {
	ADD_VALUES_IN_BULK: "Add values in bulk",
	TEXT_AREA_PLACEHOLDER: "You can use , ; newline tab to separate values. E.g., red, blue, green.",
	MATCH_ERROR: "We couldn't find these values in the column you're filtering. {1} errors.",
	EXCEEDED_ONE_TIME_ADDITION: "We can only add up to {1} values at a time.",
	EXCEEDED_OVERALL_FILTER_VALUES: "Bulk filtering only supports up to {1} values."
};
var createSchema = {
	UNKNOWN_ERROR: "Unknown error",
	CREATE_SCHEMA_DISABLED_TIP: "Only administrators are allowed to import schemas",
	EXECUTE: "Execute",
	EXECUTE_TIP: "Execute the SQL commands in order",
	CONTINUE: "Continue",
	CONTINUE_TIP: "Successful commands will not be re-executed",
	RESET: "Reset",
	CREATE_SCHEMA: "Upload schema",
	SAVE_COMMANDS: "Save commands",
	SAVE_COMMANDS_TIP: "Original file will NOT be overwritten",
	VIEW_TABLES: "View Tables",
	WRITE_TQL: "Write TQL"
};
var scheduler$1 = {
	SCHEDULE_OPTIONS: "Schedule Options",
	STARTS: "Starts:",
	AT: "at",
	COLON: ":",
	TIMEZONE: "Timezone:",
	REPEATS: "Repeats",
	EVERY_N_MINUTS: "Repeat Frequency Options : Every N Minutes",
	RUN_EVERY: "Run the task every",
	MINUTES_ON: "minutes on:",
	TIME_RANGE: "Time Range:",
	ALL_DAY: "All day",
	BETWEEN: "Between",
	AND: "and",
	EACH_DAY: "each day",
	REPEAT_OPTIONS: "Repeat Options:",
	REPEAT_INDEFINITELY: "Repeat Indefinitely",
	REPEAT_UNTIL: "Repeat until",
	HOURLY: "Repeat Frequency Options : Hourly",
	HOURS_ON: "hour(s) on:",
	DAILY: "Repeat Frequency Options : Daily",
	RUN_THE_TASK: "Run the task",
	EVERY_DAY: "Every day",
	EVERY_WEEKDAY: "Every weekday",
	WEEKLY: "Repeat Frequency Options : Weekly",
	RUN_WEEK: "Run the task every week on",
	MONTHLY: "Repeat Frequency Options : Monthly",
	RUN_ON: "Run the task on",
	DAY: "Day",
	OF_EVERY_MONTH: "of every month",
	THE: "The",
	intervals: {
		NONE: "Does Not Repeat",
		MINUTELY: "Every N Minutes",
		HOURLY: "Hourly",
		DAILY: "Daily",
		WEEKLY: "Weekly",
		MONTHLY: "Monthly"
	},
	START_TIME_NULL_MSG: "Start time cannot be null.",
	START_TIME_ERROR: "Start time cannot be set before current time.",
	END_TIME_ERROR: "Start time cannot be set after end time.",
	SCHEDULE_INCORRECTLY_SET: "Please fill all mandatory fields in the schedule configuration"
};
var statusViewer = {
	STATUS_VIEWER: "Status",
	DISABLE_SCHEDULE: "Disable schedule"
};
var dataFilter = {
	NO_FILTER_TEXT: "To define a data filter, select an object, select a field, select an operator, and then enter a filter value. Click OK to add the data filter to the task.",
	OBJECT: "Table :",
	FILTER: "Filter by :",
	ROW_LIMIT: "Row Limit",
	PROCESS_ALL_ROWS: "Process All Rows",
	PROCESS_ONLY_THE_FIRST: "Process only the first",
	DATA_FILTERS: "Data Filters",
	CONFIRM_FILTER: "Done",
	ROWS: "Rows",
	CREATE_FILTER_TEXT: "There are no filters defined. The task will process all data from the source.",
	FILTER_TYPES: {
		EQUALS: {
			display: "EQUALS"
		},
		NOT_EQUALS: {
			display: "NOT EQUALS"
		},
		LESS_THAN: {
			display: "LESS THAN"
		},
		LESS_THAN_OR_EQUALS: {
			display: "LESS THAN OR EQUALS"
		},
		GREATER_THAN: {
			display: "GREATER THAN"
		},
		GREATER_THAN_OR_EQUALS: {
			display: "GREATER THAN OR EQUALS"
		},
		STARTS_WITH: {
			display: "STARTS WITH"
		},
		ENDS_WITH: {
			display: "ENDS WITH"
		},
		CONTAINS: {
			display: "CONTAINS"
		},
		IS_NULL: {
			display: "IS NULL"
		},
		IS_NOT_NULL: {
			display: "IS NOT NULL"
		}
	}
};
var Filters_Select_Column = "Filter - Choose a column";
var contactSupport = {
	CONTACT_SUPPORT: "Contact support."
};
var debug = {
	IS_ROOT: "is root"
};
var debugging = {
	messages: {
		DEBUG_INFO_DOWNLOAD_LINK_MESSAGE_PREFIX: "Please download the debug log by clicking",
		DEBUG_INFO_DOWNLOAD_LINK_MESSAGE_SUFFIX: "here"
	}
};
var embed = {
	embeddedObjectType: {
		VISUALIZATION: "Visualization",
		PINBOARD: "Pinboard"
	},
	INVALID_EMBED_CONFIGURATION_MESSAGE: "The configuration for this ThoughtSpot visualization is incorrect. Please contact the administrator to fix it.",
	EMBED_CONTROL_ACTION_MESSAGE: "Copy the text below to get a direct link to the {embeddedObjectType}.",
	MISSING_VISUALIZATIONS_MESSAGE: "One or more visualizations in the Pinboard were not found. Please contact the administrator to fix it.",
	control: {
		TITLE: "Copy link"
	}
};
var print = {
	INVALID_PRINT_CONFIGURATION_MESSAGE: "Print configuration is incorrect. Please verify the parameters."
};
var TIME_BUCKET = "Time Bucket";
var timeBucketLabels = {
	ms: "Detailed",
	h: "Hourly",
	d: "Daily",
	w: "Weekly",
	M: "Monthly",
	Q: "Quarterly",
	y: "Yearly",
	dow: "Day of Week",
	dom: "Day of Month",
	doq: "Day of Quarter",
	doy: "Day of Year",
	wom: "Week of Month",
	woq: "Week of Quarter",
	woy: "Week of Year",
	moq: "Month of Quarter",
	moy: "Month of Year",
	qoy: "Quarter of Year"
};
var timeBucketCategory = {
	ms: "No bucket",
	d: "Day",
	w: "Week",
	M: "Month",
	h: "Hour",
	Q: "Quarter",
	y: "Year"
};
var RELATED_QUERIES_TITLE = "Related searches";
var RELATED_QUERIES_DESCRIPTION = "Other topics from this data source that you may be interested in";
var RELATED_INSIGHTS_TITLE = "SpotIQ Insights";
var RELATED_TABLE_INSIGHTS_TITLE = "Showing {1} SpotIQ insight(s) for the {2} {3}";
var RELATED_INSIGHTS_DID_KNOW = "Did you know ?";
var RELATED_INSIGHTS_DESCRIPTION = "SpotIQ generated {1} instant insights. For more please invoke Auto Analyze or Custom Analyze from the Actions menu of the visualization.";
var RELATED_OBJECTS_TITLE = "Related Answers";
var sample = {
	Transform: "Transform"
};
var HOURS_COUNT = "{numHours} hours";
var MINUTES_COUNT = "{numMinutes} minutes";
var SECONDS_COUNT = "{numSeconds} seconds";
var actionMenu = {
	SPOT_IQ: "SpotIQ",
	BETA: "BETA",
	Custom: "Custom"
};
var SPOT_IQ = "SpotIQ";
var appInitialization = {
	APP_INITIALIZATION_FAILURE_MESSAGE: "ThoughtSpot initialization failed. Please try reloading the page or contact the administrator if the issue persists."
};
var rangeSelect = {
	ENTER_A_VALUE: "Enter a value",
	ENTER_MIN_VALUE: "Enter min value",
	ENTER_MAX_VALUE: "Enter max value"
};
var checkboxFilter = {
	emptyFilterTextPlaceholder: "(Select)",
	TYPE_A_VALUE: "Type a value",
	ALL: "ALL",
	SELECTED: "SELECTED",
	NO_SELECTED_FILTER: "No selected filter",
	SHOW_RELEVANT: "Relevant",
	SHOW_ALL: "All",
	THINKING: "Shh. I'm thinking over here.",
	TRY_REDUCING_VALUES: "{1}+ values. Type to reduce",
	KEEP_TRYING: "Still too many... Keep Typing!",
	SAMPLE_VALUES: "Sample Values",
	NO_MATCHES: "No matched values."
};
var pinboardFilter = {
	ADD_FILTER: "Add filters",
	NO_SOURCES_PLACEHOLDER: "Adding filters is only supported for worksheets. Data sources are auto selected based on the visualizations in the pinboard."
};
var sageUserFeedback = {
	DIALOG_TITLE: "Query Suggestions Feedback",
	SELECT_A_RATING: "Select suggestions rating",
	ENTER_DESCRIPTION_PLACEHOLDER: "Sorry for the inconvenience. Please describe the problem."
};
var suggestions = {
	ADDITIONAL_SOURCES: "Suggestions from additional sources",
	SYNONYMS: "Suggestions from synonyms",
	SEARCH_HISTORY: "Suggestions from search history",
	INCOMPLETE_INDEX: "Showing partial results"
};
var fontPreview = {
	PREVIEW_TEXT: "The quick brown fox jumps over the lazy dog",
	NO_FONT_FACE_MESSAGE: "Please upload a font file.",
	fontProperties: {
		FAMILY: "Name",
		WEIGHT: "Weight",
		STYLE: "Style",
		SIZE: "Size (px)",
		UNICODE_RANGE: "Unicode Range",
		VARIANT: "Variant",
		STRETCH: "Stretch",
		COLOR: "Color"
	}
};
var fontSelector = {
	EDIT_FONT_BUTTON_LABEL: "Edit Font",
	ADD_NEW_FONT_BUTTON_LABEL: "Add Font"
};
var fontEditor = {
	DEFAULT_FONT_FAMILY_NAME: "Custom Font",
	fontFaceWeight: {
		NORMAL: "Normal",
		BOLD: "Bold",
		LIGHT: "Light"
	},
	fontFaceStyle: {
		NORMAL: "Normal",
		ITALIC: "Italic",
		OBLIQUE: "Oblique"
	}
};
var customizableStyleProperties = {
	FONT_FACE: "Font",
	BACKGROUND_COLOR: "Background Color",
	BACKGROUND_IMAGE: "Background Image"
};
var styleCustomizer = {
	resetButton: {
		LABEL: "Reset"
	},
	appLogoSelector: {
		HEADER: "Application Logo (Default) & Favicon",
		SUBTEXT: "Recommended size: 140px x 140px. Refresh to view changes."
	},
	wideAppLogoSelector: {
		HEADER: "Application Logo (Wide)",
		SUBTEXT: "Recommended size: 440px x 100px"
	},
	chartFontSelector: {
		HEADER: "Chart Visualization Fonts",
		NO_SELECTION_PLACEHOLDER_MESSAGE: "Select a font"
	},
	tableFontSelector: {
		HEADER: "Table Visualization Fonts",
		NO_SELECTION_PLACEHOLDER_MESSAGE: "Select a font"
	},
	appBackgroundSelector: {
		HEADER: "Embedded Application Background"
	},
	chartColorPaletteEditor: {
		HEADER: "Chart Color Palettes"
	},
	customizableFeatures: {
		table: {
			CELL: "Table Value Cells"
		},
		chart: {
			X_AXIS_LABEL: "X Axis Labels",
			X_AXIS_TITLE: "X Axis Title",
			Y_AXIS_LABEL: "Y Axis Labels",
			Y_AXIS_TITLE: "Y Axis Title",
			TOOLTIP: "Tooltip",
			SCATTER_CHART: "Scatter Chart Data Labels",
			PIE_CHART: "Pie Chart Data Labels",
			LINE_CHART: "Line Chart Data Labels",
			COLUMN_CHART: "Column Chart Data Labels",
			BAR_CHART: "Bar Chart Data Labels",
			AREA_CHART: "Area Chart Data Labels"
		}
	},
	footerText: {
		HEADER: "Footer text"
	},
	pageTitle: {
		HEADER: "Page title",
		SUBTEXT: "Refresh to view changes."
	}
};
var textBoxConfigurator = {
	PLACEHOLDER: "Enter text"
};
var pageTitleConfigurator = {
	PLACEHOLDER: "Enter page title text"
};
var blobUploadService = {
	blobTypeNames: {
		FONT: "font",
		IMAGE: "image",
		GENERIC: "generic file"
	},
	invalidFileMessages: {
		INVALID_TYPE: "The selected file is not a valid {fileType}."
	}
};
var blobUploader = {
	UPLOAD_NEW_FILE_BUTTON_LABEL: "Upload a new file"
};
var tables = {
	tableEditor: {
		SHOW_SUMMARY: "Show column summary",
		WRAP_TABLE_HEADER: "Wrap header and rows"
	}
};
var charts = {
	chartSelector: {
		CHART_LOCKING: "Autoselect my chart"
	},
	chartEditor: {
		FORMAT_LABEL: "Formatter",
		numberFormat: {
			INVALID_INPUT: "Invalid Input",
			NUMBER_CATEGORY: "Number",
			PERCENTAGE_CATEGORY: "Percentage",
			CURRENCY_CATEGORY: "Currency",
			DATE_CATEGORY: "Date",
			TIME_CATEGORY: "Time",
			DATE_TIME_CATEGORY: "Date and Time",
			CUSTOM_CATEGORY: "Custom",
			DEFAULT_CATEGORY: "Default",
			NONE_UNIT: "None",
			THOUSAND_UNIT: "Thousand (K)",
			MILLION_UNIT: "Million (M)",
			BILLION_UNIT: "Billion (B)",
			CATEGORY_LABEL: "Category",
			FORMAT_LABEL: "Format",
			LOCALE_LABEL: "Locale",
			THOUSANDS_SEPARATOR_LABEL: "Thousands Separator",
			NEGATIVE_FORMAT_LABEL: "Negative Values",
			DECIMAL_LABEL: "Decimals",
			UNIT_LABEL: "Unit"
		},
		RESET_COLORS: "Reset",
		COLOR: "Color",
		X_AXIS_GRID_LINE: "X Axis Gridlines",
		Y_AXIS_GRID_LINE: "Y Axis Gridlines",
		SHOW_Y_AXIS_AS_PERCENT: "Y-Axis as %",
		SHOW_X_AXIS_AS_PERCENT: "X-Axis as %",
		SHOW_DATA_LABELS: "Data Labels",
		SHOW_TOTAL_LABELS: "Total Labels",
		SHOW_DETAILED_LABELS: "Detail Labels",
		SHOW_ROUNDED_NUMBERS: "Rounded Numbers",
		SHOW_REGRESSION_LINE: "Regression Line",
		RESPONSIVE_LAYOUT: "Fit To Screen",
		ENABLE_MARKERS: "Data Markers",
		pivot: {
			SHOW_SUMMARIES: "Pivot Summaries",
			COMPACT_LAYOUT: "Compact Row Headers"
		},
		OVERLAY_HEATMAP: "Heatmap mode",
		Y_AXIS_RANGE: "Y-Axis Range",
		X_AXIS_RANGE: "X-Axis Range",
		ZOOM_DISABLED: "Zoom functionality is unavailable with custom Y Axis range. "
	},
	seriesType: {
		LINE: "line"
	}
};
var migration = {
	"export": {
		TITLE: "Export {pageType}s",
		EXPORT_URL: "URL to export to",
		IMPORT_URL_LINK_TEXT: "Destination URL",
		STEP: {
			ONE: "Step 1",
			TWO: "Step 2",
			THREE: "Step 3"
		},
		STEP_INFO: {
			ONE: "Navigate to ",
			TWO: "Click on import button",
			THREE: "Copy and paste "
		}
	},
	"import": {
		TITLE: "Import {pageType}s",
		IMPORT_FILE: "Paste file name",
		STATUS_LABEL: {
			SUMMARY: "Summary",
			IMPORTED: "Imported {pageType}s",
			UNIMPORTED: "Unimported {pageType}s",
			NONE: "None"
		},
		SUMMARY_INFO: "{importedCount} of {totalCount} successfully imported. {genInfo}",
		GENERIC_INFO: "All relevant data sources and relationships in the target system must be identical to the source system."
	}
};
var visualizationPinner = {
	trigger: {
		ADD_TO_PINBOARD: "Pin"
	},
	modal: {
		TITLE: "Add to pinboard",
		SEARCH_PLACEHOLDER: "Search a pinboard",
		ADD_PINBOARD: "ADD",
		CREATE_NEW_PINBOARD: "Create new pinboard",
		NEW_PINBOARD_NAME_PLACEHOLDER: "New pinboard name"
	}
};
var report = {
	jobStateString: {
		SCHEDULED: "Scheduled",
		PAUSED: "Paused",
		STOPPED: "Done"
	},
	jobRunStateString: {
		DEFAULT: "Default",
		RUNNING: "Running",
		FAILED: "Failed",
		SUCCESS: "Success",
		DEADLINE: "Deadline",
		DOES_NOT_EXIST: "Does not exist"
	},
	jobRunStateDisplayString: {
		DEFAULT: "is in default state",
		RUNNING: "Running",
		FAILED: "failed",
		SUCCESS: "succeeded",
		DEADLINE: "exceeded time limit",
		DOES_NOT_EXIST: "Does not exist"
	},
	csvEnabledMessage: "CSV files will be sent only for the tables in this pinboard.",
	csvDisabledMessage: "You cannot send raw data because this pinboard contains no data tables.",
	name: "Name",
	serverTimeZone: "Server time zone",
	description: "Description",
	type: "Type",
	id: "Id",
	gating: "Gating condition",
	addGating: "Add condition",
	editGating: "Edit condition",
	schedule: "Schedule",
	save: "Save",
	cancel: "Cancel",
	recipients: "Recipients",
	nextOccurence: "Next occurrence",
	noDetail: "",
	startedAt: "Job started at {1}",
	noPermission: "You do not have permission to schedule pinboards. Please reach out to your administrator for help."
};
var addRecipients = "Add Recipients";
var dataSourcePreview = {
	FOOTER_TEXT: "and {1} more."
};
var pinboardSnapshots = {
	SEARCH_PLACEHOLDER: "Search snapshots",
	TAKE_SNAPSHOT: "Take Snapshot",
	NEW_SNAPSHOT_NAME_PLACEHOLDER: "New snapshot name",
	NEW_SNAPSHOT_DESCRIPTION_PLACEHOLDER: "New snapshot description",
	CREATE_NEW_SNAPSHOT: "Create New Snapshot"
};
var DATE = "Date";
var printPinboard = {
	FILTER_HEADING: "Filters",
	EMPTY_FILTER_VALUE: "Unspecified",
	FILTER_NAME: "Filter",
	FILTER_VALUE: "Value",
	FILTER_SOURCE: "Data Source"
};
var pinboardPage = {
	PINBOARD_TAB: "Pinboard",
	INSIGHTS_TAB: "Insights",
	AUTHOR_LABEL: "Created By {authorName}"
};
var answerPage = {
	vizTypeSelector: {
		TABLE_SELECTOR_TOOLTIP: "Data view"
	}
};
var documentUnsavedChangesAlert = {
	GENERIC_MESSAGE: "You have unsaved changes. Are you sure you want to discard them?",
	MESSAGE: "Do you want to save changes made to this {1}? Your changes will be lost if you don't save them.",
	UNSAVED_CHANGES: "Unsaved changes",
	STAY_HERE: "Stay Here",
	DISCARD: "Discard changes",
	SAVE: "Save"
};
var msg_code = {
	"100": {
		summary: "Success. {1} has been added to {2}."
	},
	"101": {
		summary: "Failure adding {1} to {2}.",
		detail: "The visualization could not be added to {2}."
	},
	"102": {
		summary: "Failure adding {1} to {2} due to corruption.",
		detail: "{1} could not be added to {2}, because the pinboard has one or more invalid visualizations.",
		action: "Please try again after removing the invalid visualization(s) from {2}"
	},
	"103": {
		summary: "Success. {1} from {2}."
	},
	"104": {
		detail: "The visualization could not be deleted from the pinboard.",
		summary: "Failure deleting visual from {1}"
	},
	"105": {
		summary: "Failed to delete visual from {1} because it is corrupted.",
		detail: "The visualization could not be deleted from {1} because the pinboard has one or more invalid visualizations.",
		action: "Please try again after removing the invalid visualization(s) from the pinboard"
	},
	"106": {
		summary: "{1} created successfully."
	},
	"107": {
		summary: "{1} could not be created."
	},
	"108": {
		summary: "Sticker created successfully."
	},
	"109": {
		summary: "The sticker could not be created."
	},
	"110": {
		summary: "Sticker deleted successfully."
	},
	"111": {
		summary: "The sticker could not be deleted"
	},
	"112": {
		summary: "Pinboards deleted successfully."
	},
	"113": {
		summary: "The pinboards could not be deleted."
	},
	"114": {
		summary: "Answers deleted successfully."
	},
	"115": {
		summary: "The answers could not be deleted."
	},
	"116": {
		summary: "Tables deleted successfully."
	},
	"117": {
		summary: "The tables could not be deleted."
	},
	"118": {
		summary: "join created successfully."
	},
	"119": {
		summary: "The join could not be created."
	},
	"120": {
		summary: "join updated successfully."
	},
	"121": {
		summary: "The join could not be updated."
	},
	"122": {
		summary: "join deleted successfully."
	},
	"123": {
		summary: "The join could not be deleted."
	},
	"124": {
		summary: "There was a failure fetching details for the table."
	},
	"125": {
		summary: "Failed to fetch details for the tables."
	},
	"126": {
		summary: "There was a failure fetching details for the data source."
	},
	"127": {
		summary: "There was a failure fetching details for data sources."
	},
	"128": {
		summary: "There was a failure fetching details for the metadata items."
	},
	"129": {
		summary: "The answer could not be opened."
	},
	"130": {
		summary: "The pinboard could not be opened."
	},
	"131": {
		summary: "Failure opening the worksheet"
	},
	"132": {
		summary: "Table saved successfully."
	},
	"133": {
		summary: "There was a problem saving the table."
	},
	"134": {
		summary: "Visualization update successfully."
	},
	"135": {
		summary: "The visualization failed to update."
	},
	"136": {
		summary: "{1} saved."
	},
	"137": {
		summary: "{1} could not be saved."
	},
	"138": {
		summary: "{1} saved."
	},
	"139": {
		summary: "{1} could not be saved."
	},
	"140": {
		summary: "{1} saved."
	},
	"141": {
		summary: "{1} could not be saved."
	},
	"142": {
		summary: "{1} saved."
	},
	"143": {
		summary: "{1} could not be saved."
	},
	"144": {
		summary: "{1} saved."
	},
	"145": {
		summary: "{1} could not be saved."
	},
	"146": {
		summary: "Worksheet saved."
	},
	"147": {
		summary: "The worksheet could not be saved."
	},
	"148": {
		summary: "Sticker updated."
	},
	"149": {
		summary: "The sticker could not be updated."
	},
	"150": {
		summary: "Successfully assigned sticker."
	},
	"151": {
		summary: "The sticker could not be assigned."
	},
	"152": {
		summary: "Successfully unassigned sticker."
	},
	"153": {
		summary: "The sticker could not be unassigned."
	},
	"154": {
		summary: "The list of metadata could not be retrieved."
	},
	"155": {
		summary: "The list of tables could not be retrieved."
	},
	"156": {
		summary: "The list of joins could not be retrieved."
	},
	"157": {
		summary: "The list of answers could not be retrieved."
	},
	"158": {
		summary: "The list of pinboards could not be retrieved."
	},
	"159": {
		summary: "The list of worksheets could not be retrieved."
	},
	"160": {
		summary: "The list of aggregated worksheets could not be retrieved."
	},
	"161": {
		summary: "The list of imported data could not be retrieved."
	},
	"162": {
		summary: "The list of system tables could not be retrieved."
	},
	"163": {
		summary: "The list of database views could not be retrieved."
	},
	"164": {
		summary: "The list of data sources could not be retrieved."
	},
	"165": {
		summary: "The list of columns could not be retrieved."
	},
	"166": {
		summary: "The list of stickers could not be retrieved."
	},
	"167": {
		summary: "The answer could not be retrieved."
	},
	"168": {
		summary: "The worksheet could not be retrieved."
	},
	"169": {
		summary: "View {1} created."
	},
	"170": {
		summary: "The View could not be created."
	},
	"171": {
		summary: "{1} updated."
	},
	"172": {
		summary: "{1} could not be updated."
	},
	"173": {
		summary: "{1} could not be updated."
	},
	"174": {
		summary: "The comments could not be retrieved.",
		detail: "Failed to save client state"
	},
	"175": {
		summary: "The comment cannot be created"
	},
	"176": {
		summary: "The comment was could not be updated."
	},
	"177": {
		summary: "The comment cannot be deleted"
	},
	"178": {
		summary: "Rule saved successfully."
	},
	"179": {
		summary: "Rule could not be saved."
	},
	"180": {
		summary: "Rule deleted successfully."
	},
	"181": {
		summary: "Rule could not be deleted."
	},
	"182": {
		summary: "Item has been successfully deleted."
	},
	"183": {
		summary: "The item could not be deleted."
	},
	"184": {
		summary: "Related link created successfully."
	},
	"185": {
		summary: "Related link could not be created."
	},
	"186": {
		summary: "Related link updated successfully."
	},
	"187": {
		summary: "Related link could not be updated."
	},
	"188": {
		summary: "Related link deleted successfully."
	},
	"189": {
		summary: "Related link could not be deleted."
	},
	"190": {
		summary: "Related link detail retrieved successfully."
	},
	"191": {
		summary: "Related link detail could not be retrieved."
	},
	"192": {
		summary: "Answer filter retrieved successfully."
	},
	"193": {
		summary: "The answer filter could not be retrieved."
	},
	"194": {
		summary: "Pinboard retrieved successfully."
	},
	"195": {
		summary: "The pinboard could not be retrieved."
	},
	"196": {
		summary: "Answer aggregated worksheet retrieved successfully."
	},
	"197": {
		summary: "The answer aggregated worksheet could not be retrieved."
	},
	"198": {
		summary: "The answer could not be opened."
	},
	"199": {
		summary: "The formula could not be created."
	},
	"200": {
		summary: "{type} \"{itemName}\" has been successfully deleted."
	},
	"201": {
		summary: "{type} \"{itemName}\" could not be deleted."
	},
	"202": {
		summary: "Title and description saved."
	},
	"203": {
		summary: "Item marked favorite."
	},
	"204": {
		summary: "Item could not be marked favorite."
	},
	"205": {
		summary: "Item marked unfavorite."
	},
	"206": {
		summary: "Item could not be marked favorite."
	},
	"207": {
		summary: "You're following {itemName}."
	},
	"208": {
		summary: "You could not follow {itemName}."
	},
	"209": {
		summary: "You've unfollowed from {itemName}."
	},
	"210": {
		summary: "You could not unfollow from {itemName}."
	},
	"211": {
		summary: "Follow details updated for {itemName}."
	},
	"212": {
		summary: "Follow details could not be updated for {itemName}."
	},
	"213": {
		summary: "Email Id updated successfully."
	},
	"500": {
		summary: "The leaf level data could not be retrieved."
	},
	"501": {
		summary: "The data could not be retrieved."
	},
	"502": {
		summary: "The visualization data could not be retrieved."
	},
	"503": {
		summary: "The visualization data could not be retrieved."
	},
	"504": {
		summary: "The chart data could not be retrieved."
	},
	"505": {
		summary: "The table data could not be retrieved."
	},
	"506": {
		summary: "The worksheet data could not be retrieved."
	},
	"507": {
		summary: "The filter data could not be retrieved."
	},
	"508": {
		summary: "The headline data could not be retrieved."
	},
	"509": {
		summary: "The natural language query could not be retrieved."
	},
	"510": {
		summary: "File upload successful."
	},
	"511": {
		summary: "The file failed to upload."
	},
	"512": {
		summary: "The pinboard data could not be exported to PDF."
	},
	"700": {
		summary: "The table's dependents could not be retrieved."
	},
	"701": {
		summary: "The column's dependents could not be retrieved."
	},
	"702": {
		summary: "The incomplete items could not be retrieved."
	},
	"800": {
		summary: "The MemCache states could not be retrieved."
	},
	"801": {
		summary: "The MemCache could not be cleared."
	},
	"802": {
		summary: "The MemCache could not be searched."
	},
	"803": {
		summary: "The Loggers could not be retrieved."
	},
	"804": {
		summary: "The LogLevel could not be set."
	},
	"805": {
		summary: "The debug info could not be retrieved."
	},
	"806": {
		summary: "Memcache cleared successfully."
	},
	"807": {
		summary: "Log level set successfully."
	},
	"808": {
		summary: "Failed to send error to {adminEmail}."
	},
	"809": {
		summary: "Error has been successfully sent to {adminEmail}."
	},
	"900": {
		summary: "The table permissions could not be retrieved."
	},
	"901": {
		summary: "The answer permissions could not be retrieved."
	},
	"902": {
		summary: "The pinboard permissions could not be retrieved."
	},
	"903": {
		summary: "The metadata permissions could not be retrieved."
	},
	"1000": {
		summary: "The Data caching was unsuccessful."
	},
	"1001": {
		summary: "The columns could not be read."
	},
	"1002": {
		summary: "The keys could not be read."
	},
	"1003": {
		summary: "The relationships could not be read."
	},
	"1004": {
		summary: "The data failed to load."
	},
	"1005": {
		summary: "The table could not be created."
	},
	"1006": {
		summary: "The data rows could not be retrieved."
	},
	"1007": {
		summary: "The files could not be deleted."
	},
	"1008": {
		summary: "The table creation could not be canceled."
	},
	"1009": {
		summary: "The schema could not be created."
	},
	"1010": {
		summary: "The table models could not be retrieved."
	},
	"1011": {
		summary: "The sample values could not be retrieved."
	},
	"1100": {
		summary: "The list of jobs."
	},
	"1110": {
		summary: "Successfully created job."
	},
	"1111": {
		summary: "The job could not be created."
	},
	"1112": {
		summary: "Successfully updated job."
	},
	"1113": {
		summary: "The job could not be updated."
	},
	"1114": {
		summary: "Successfully deleted jobs."
	},
	"1115": {
		summary: "The job could not be deleted."
	},
	"1116": {
		summary: "The job was paused."
	},
	"1117": {
		summary: "The job could not be paused"
	},
	"1118": {
		summary: "The job was resumed."
	},
	"1119": {
		summary: "The job could not be resume."
	},
	"1200": {
		summary: "The user list could not be retrieved."
	},
	"1201": {
		summary: "The groups list could not be retrieved."
	},
	"1202": {
		summary: "The users and groups list could not be retrieved."
	},
	"1203": {
		summary: "Successfully created user."
	},
	"1204": {
		summary: "The user could not be created."
	},
	"1205": {
		summary: "Successfully created group."
	},
	"1206": {
		summary: "The group could not be created."
	},
	"1207": {
		summary: "Successfully updated user."
	},
	"1208": {
		summary: "The user could not be updated."
	},
	"1209": {
		summary: "Successfully updated users."
	},
	"1210": {
		summary: "The users could not be updated."
	},
	"1211": {
		summary: "Successfully updated group."
	},
	"1212": {
		summary: "The group could not be updated."
	},
	"1213": {
		summary: "Successfully updated password."
	},
	"1214": {
		summary: "The password could not be updated."
	},
	"1215": {
		summary: "Successfully deleted users."
	},
	"1216": {
		summary: "The users could not be deleted."
	},
	"1217": {
		summary: "Successfully deleted groups."
	},
	"1218": {
		summary: "The groups could not be deleted."
	},
	"1219": {
		summary: "Successfully assigned users to groups."
	},
	"1220": {
		summary: "The users could not be assigned to groups."
	},
	"1221": {
		summary: "The profile picture could not be retrieved."
	},
	"1222": {
		summary: "Successfully uploaded the profile picture."
	},
	"1223": {
		summary: "The profile picture could not be uploaded."
	},
	"1224": {
		detail: "Failed to assign user to group.",
		summary: "Successfully assigned groups to group"
	},
	"1228": {
		detail: "Successfully created role.",
		summary: "Successfully created role"
	},
	"1229": {
		summary: "Failed to create role.",
		detail: "Failed to create role"
	},
	"1230": {
		summary: "Successfully deleted role.",
		detail: "Successfully deleted role."
	},
	"1231": {
		summary: "Failed to delete role.",
		detail: "Failed to delete role"
	},
	"1232": {
		detail: "Successfully updated role.",
		summary: "Successfully updated role."
	},
	"1233": {
		detail: "Failed to update role",
		summary: "Failed to update role"
	},
	"1234": {
		detail: "Successfully updated preferences.",
		summary: "Successfully updated preferences."
	},
	"1235": {
		detail: "Failed to update preferences.",
		summary: "Failed to update preferences."
	},
	"1236": {
		summary: "Share settings updated"
	},
	"1237": {
		summary: "Could not update share settings"
	},
	"1238": {
		detail: "Successfully updated Configuration.",
		summary: "Successfully updated the style."
	},
	"1239": {
		detail: "Failed to update the configuration.",
		summary: "Failed to update style configuration."
	},
	"1240": {
		detail: "Successfully updated preferences.",
		summary: "Successfully updated preferences."
	},
	"1241": {
		detail: "Failed to update preferences.",
		summary: "Failed to update preferences."
	},
	"1400": {
		summary: "The session info could not be retrieved."
	},
	"1401": {
		summary: "Login was unsuccessful."
	},
	"1402": {
		summary: "Logging out was unsuccessful."
	},
	"1403": {
		summary: "The client state could not be saved."
	},
	"1404": {
		summary: "The login configuration could not be retrieved."
	},
	"1405": {
		summary: "The Slack configuration could not be retrieved."
	},
	"1406": {
		summary: "The health check was unsuccessful."
	},
	"1407": {
		summary: "The health portal token could not be retrieved."
	},
	"1408": {
		summary: "The health portal release name could not be retrieved."
	},
	"1600": {
		summary: "The data source types could not be retrieved."
	},
	"1601": {
		summary: "The data source sample values could not be retrieved."
	},
	"1602": {
		summary: "The data source could not be deleted."
	},
	"1603": {
		summary: "The DDL could not be executed."
	},
	"1604": {
		summary: "The schedule could not be updated."
	},
	"1605": {
		summary: "The tasks could not be reloaded"
	},
	"1606": {
		summary: "The tasks could not be stopped."
	},
	"1607": {
		summary: "The creation DDL could not be retrieved."
	},
	"1608": {
		summary: "The load from the data source was unsuccessful."
	},
	"1609": {
		summary: "The data source connection could not be created."
	},
	"1610": {
		summary: "The data source could not be created."
	},
	"1611": {
		summary: "The data source connection was unsuccessful."
	},
	"1612": {
		summary: "The data source connection field info could not be retrieved."
	},
	"1613": {
		detail: "Failed to get connection list for data source",
		summary: "The data source connection list could not be retrieved."
	},
	"1614": {
		summary: "The data source connection attributes could not be retrieved."
	},
	"1615": {
		summary: "The data source connections could not be retrieved."
	},
	"1616": {
		summary: "The data source configuration could not be retrieved."
	},
	"1617": {
		summary: "The SQL could not be parsed."
	},
	"1618": {
		summary: "The SQL could not be executed."
	},
	"1619": {
		summary: "Successfully created data source connection"
	},
	"1620": {
		summary: "Successfully updated data upload schedule"
	},
	"1621": {
		summary: "The SQL failed to execute.",
		detail: "Please check the failing command, executed {1} statements successfully."
	},
	"1622": {
		summary: "The lightweight data cache is disabled."
	},
	"1623": {
		summary: "Selected tables are queued for loading."
	},
	"1624": {
		detail: "No mapping found for source datatype to ThoughtSpot datatype.",
		summary: "DataType conversion error."
	},
	"1625": {
		summary: "Load task(s) restarted successfully."
	},
	"1626": {
		summary: "Successfully connected to data source."
	},
	"1627": {
		summary: "Successfully created data source."
	},
	"1628": {
		summary: "Successfully stopped the tasks."
	},
	"1629": {
		summary: "Successfully deleted the connection."
	},
	"1630": {
		summary: "There was an error deleting this connection."
	},
	"1631": {
		summary: "Successfully executed the DDL"
	},
	"1800": {
		summary: "The cluster information from search service could not be retrieved."
	},
	"1801": {
		summary: "The table detail information could not be retrieved from search service."
	},
	"1802": {
		summary: "The cluster information from database service could not be retrieved."
	},
	"1803": {
		summary: "The table detail information from the database service could not be retrieved."
	},
	"1804": {
		summary: "The cluster information from the cluster management service could not be retrieved."
	},
	"1805": {
		summary: "The detail information from the cluster management service could not be retrieved."
	},
	"1806": {
		summary: "The log from cluster management service could not be retrieved."
	},
	"1807": {
		summary: "The snapshot list could not be retrieved from cluster management service."
	},
	"1808": {
		summary: "The cluster information from alert management service could not be retrieved."
	},
	"1809": {
		summary: "The cluster information from the event service could not be retrieved."
	},
	"1810": {
		summary: "The alerts information could not be retrieved from alert management service."
	},
	"1811": {
		summary: "The events information from alert management service could not be retrieved."
	},
	"1812": {
		summary: "Thanks for your feedback!"
	},
	"1813": {
		summary: "Failed to submit the feedback."
	},
	"1814": {
		summary: "Successfully exported objects. File can be found at {1}."
	},
	"1815": {
		summary: "Failed to export objects."
	},
	"1816": {
		summary: "Successfully imported objects."
	},
	"1817": {
		summary: "Failed to import objects."
	},
	"1818": {
		summary: "Successfully deleted data source object(s)."
	},
	"2000": {
		summary: "Materialize view request queued."
	},
	"2001": {
		summary: "Failed to materialize view."
	},
	"2002": {
		summary: "Materialized view refresh request queued."
	},
	"2003": {
		summary: "Failed to refresh materialize view."
	},
	"2004": {
		summary: "View de-materialized successfully."
	},
	"2005": {
		summary: "Failed to de-materialize view."
	},
	"2006": {
		summary: "Materialized view updated successfully."
	},
	"2007": {
		summary: "Failed to update materialized view."
	},
	"2008": {
		summary: "Successfully retrieved materialize view status."
	},
	"2009": {
		summary: "Failed to retrieve materialize view status."
	},
	"2010": {
		summary: "Retrieved materialization schedule successfully."
	},
	"2011": {
		summary: "Failed to retrieve materialization schedule."
	},
	"2012": {
		summary: "Added materialization schedule successfully."
	},
	"2013": {
		summary: "Failed to schedule materialization."
	},
	"2014": {
		summary: "Deleted materialization schedule."
	},
	"2015": {
		summary: "Failed to delete materialization schedule."
	},
	"2016": {
		summary: "Materialization schedule updated."
	},
	"2017": {
		summary: "Failed to update materialization schedule."
	},
	"2018": {
		summary: "Materialization schedule is now paused. Data will not be updated per schedule."
	},
	"2019": {
		summary: "Failed to pause materialization schedule. Data will continue to be updated per schedule."
	},
	"2020": {
		summary: "Materialization schedule is now resumed. Data will be updated per schedule."
	},
	"2021": {
		summary: "Failed to resume materialization schedule. Data will not be updated per schedule."
	},
	"2022": {
		summary: "Successfully added jobs to sync."
	},
	"2023": {
		summary: "Failed to sync the jobs."
	},
	"2024": {
		summary: "Successfully export worksheet to file {file}."
	},
	"2025": {
		summary: "Failed to export worksheet to file {file}."
	},
	"2026": {
		summary: "Successfully created worksheet {worksheet} from file {file}."
	},
	"2027": {
		summary: "Failed to import file {file}."
	},
	"2028": {
		summary: "Successfully updated worksheet {worksheet} from file {file}."
	},
	"2029": {
		summary: "Failed to update worksheet from file {file}."
	},
	"9000": {
		summary: "The data you are trying to delete has dependencies.",
		detail: "Some objects depend on the data you are trying to delete,",
		action: "Delete the dependencies before deleting this data."
	},
	"9001": {
		summary: "Connection to server failed."
	},
	"9002": {
		summary: "You do not have the correct permissions.",
		action: "Please contact the owner to get the correct permissions."
	},
	"9003": {
		summary: "Connection to server failed."
	},
	"9004": {
		summary: "Still loading data, please try later."
	},
	"9005": {
		summary: "Failed to retrieve data for this request."
	},
	"9006": {
		summary: "Failed to retrieve data for this request."
	},
	"9007": {
		summary: "Failed to get data for this request."
	},
	"9008": {
		summary: "Something went wrong with your search."
	},
	"9009": {
		summary: "ThoughtSpot is unreachable. Please try again."
	},
	"9010": {
		detail: "Object cannot be opened due to errors in some of its dependencies.",
		summary: "The object could not be opened."
	},
	"9500": {
		summary: "ThoughtSpot is unreachable. Please try again soon."
	},
	"9501": {
		summary: "ThoughtSpot has timed out. Please try again."
	},
	"9502": {
		summary: "Cannot connect to ThoughtSpot at this time. Please try again later."
	},
	"9503": {
		summary: "ThoughtSpot has timed out. Please try again."
	},
	"9504": {
		summary: "{1} cannot be opened because of dependency errors.",
		detail: "{1} cannot be opened due to errors in the following dependencies."
	},
	"9505": {
		summary: "Still indexing this data, please try again later."
	},
	"9506": {
		summary: "The object is not present in the system.",
		detail: "The {1} is not present in the system."
	},
	"9507": {
		summary: "ThoughtSpot is unreachable. Please try again soon."
	},
	"9508": {
		summary: "The underlying data model is missing data it depends on. {productName} cannot build the visualization.",
		detail: "The underlying data model is missing data it depends on. {productName} cannot build the visualization."
	},
	"10000": {
		summary: "A system error has occurred."
	},
	"10001": {
		detail: "The metadata store is not reachable.",
		action: "Please contact your administrator.",
		summary: "Failed to connect to metadata/data store."
	},
	"10002": {
		detail: "Input sent from client to server is invalid.",
		action: "Please contact your administrator",
		summary: "The input is invalid."
	},
	"10003": {
		summary: "You do not have the required permissions.",
		action: "Please request permissions from the owner or the administrator."
	},
	"10004": {
		action: "Please request access from your administrator.",
		summary: "The user could not be authorized.",
		detail: "User {0} is not authorized to perform {1}"
	},
	"10005": {
		summary: "The base object that an object references is missing.",
		detail: "An underlying object referenced by this object is missing.",
		action: "Please contact your administrator."
	},
	"10006": {
		summary: "The connection to Zookeeper has failed.",
		detail: "Cluster manager is not reachable.",
		action: "Please contact your administrator."
	},
	"10007": {
		action: "Please contact your administrator.",
		detail: "Invalid parameter values: {0}.",
		summary: "There's invalid parameter(s)."
	},
	"10008": {
		detail: "User {0} not found in store.",
		action: "Please contact your administrator.",
		summary: "The user cannot be found."
	},
	"10009": {
		summary: "Cannot add group because this group already belongs to the group you are trying to add."
	},
	"10601": {
		summary: "Server unavailable."
	},
	"10602": {
		summary: "Server failed to execute query."
	},
	"10603": {
		summary: "Server cancelled execution of query."
	},
	"10605": {
		summary: "Query execution was aborted."
	},
	"10607": {
		summary: "Falcon resource is busy."
	},
	"10608": {
		summary: "Internal Falcon error."
	},
	"10610": {
		summary: "Falcon load failed."
	},
	"10613": {
		summary: "Permission denied."
	},
	"10614": {
		summary: "Database request timed out."
	},
	"10615": {
		summary: "Database server is not ready."
	},
	"10616": {
		summary: "Insufficient database resources to serve the request."
	},
	"10618": {
		summary: "Server is unreachable."
	},
	"10620": {
		summary: "Database connection failed."
	},
	"10621": {
		summary: "Database socket timed out."
	},
	"10623": {
		summary: "Response returned by server is invalid."
	},
	"10624": {
		summary: "Database remote procedure call failed for an unknown cause."
	},
	"10627": {
		summary: "Failed to connect to database worker."
	},
	"10628": {
		summary: "There was a configuration error in materialization view."
	},
	"10629": {
		summary: "An internal error occured during materialization."
	},
	"10630": {
		summary: "A transient error occured during check pointing materialization state."
	},
	"11001": {
		summary: "Invalid row"
	},
	"11002": {
		summary: "Invalid table/query result set."
	},
	"11003": {
		summary: "Invalid column identifier"
	},
	"11004": {
		summary: "Invalid visualization identifier."
	},
	"11005": {
		summary: "No data",
		detail: "Query execution resulted in no data"
	},
	"11006": {
		detail: "Error in query execution to Falcon.",
		summary: "Query execution failed"
	},
	"11007": {
		detail: "Error in Answer data generation for search service input",
		summary: "Answer data generation failed"
	},
	"11008": {
		summary: "Data export failed."
	},
	"11009": {
		detail: "Error in data generation in the BI server.",
		summary: "Data generation failed"
	},
	"11012": {
		summary: "Table data cannot be displayed. This worksheet includes a chasm trap or fan trap."
	},
	"11014": {
		summary: "Materialization Error"
	},
	"11016": {
		summary: "Error refreshing Materialization View"
	},
	"11017": {
		summary: "Error getting Materialization status"
	},
	"11019": {
		detail: "Error message for when falcon admission control timeout during a batch request.",
		summary: "System Busy. Please try again later."
	},
	"12100": {
		summary: "Unsupported connection type."
	},
	"12101": {
		summary: "Supported connection type is currently disabled."
	},
	"12102": {
		summary: "Failure in creating connection with external database."
	},
	"12103": {
		summary: "Failure in fetching metadata from connection."
	},
	"12104": {
		summary: "No table selected for connection creation."
	},
	"12105": {
		summary: "SQL exception on table load."
	},
	"12108": {
		summary: "No table could be fetched for the specified connection."
	},
	"12700": {
		summary: "Error while exporting data file"
	},
	"12701": {
		summary: "Invalid input.",
		detail: "The definition of the job is invalid."
	},
	"12702": {
		summary: "No author provided"
	},
	"12703": {
		summary: "No pinboard provided."
	},
	"12704": {
		summary: "No recipients provided."
	},
	"12705": {
		summary: "This format is not supported"
	},
	"12706": {
		summary: "No job name provided"
	},
	"12707": {
		summary: "No job description was provided."
	},
	"12708": {
		summary: "Pinboard data export error."
	},
	"12709": {
		summary: "Visualization data export error"
	},
	"12710": {
		summary: "User data is unavailable."
	},
	"12711": {
		summary: "Configuration information unavailable"
	},
	"12712": {
		detail: "The max number of recipients is 1000.",
		summary: "There are too many recipients."
	},
	"12713": {
		summary: "Attachment size limit exceeded"
	},
	"12714": {
		summary: "Recipient domain is not whitelisted."
	},
	"13001": {
		detail: "Error creating database schema.",
		summary: "Schema creation failed."
	},
	"13002": {
		detail: "Error creating view",
		summary: "Failed to create views."
	},
	"13003": {
		summary: "The visualization could not be opened because of some missing dependencies.",
		detail: "The visualization could not be opened because of the following missing dependencies:"
	},
	"13004": {
		detail: "Object with Id: {0} of type: {1} in invalid state.",
		summary: "The object is in an invalid state."
	},
	"13005": {
		summary: "Object already exists.",
		detail: "Object with Id: {0} of type: {1} already exists."
	},
	"13006": {
		detail: "Invalid object type: {0} specified.",
		summary: "Invalid object type specified."
	},
	"13007": {
		summary: "Invalid Sage question",
		detail: "Insufficient or invalid input from the search engine: {0}"
	},
	"13008": {
		detail: "Input from Sage - missing columns of type: {0}",
		summary: "Invalid Sage question"
	},
	"13009": {
		summary: "Invalid Sage question.",
		detail: "Invalid input from Sage - invalid expression: {0}"
	},
	"13010": {
		detail: "Sending logical metadata to Sage failed due to: {0}",
		summary: "Failed to validate logical metadata sent to Sage."
	},
	"13011": {
		summary: "Answer generation failed",
		detail: "Answer generation failed due to: {0}"
	},
	"13012": {
		summary: "Failed to generate worksheet.",
		detail: "Worksheet generation failed due to: {0}"
	},
	"13013": {
		detail: "Service provider unavailable: {0}",
		summary: "Service provider unavailable"
	},
	"13015": {
		summary: "Physical model is not loaded."
	},
	"13016": {
		summary: "Invalid physical schema proto.",
		detail: "Inconsistency in physical schema from Falcon: {0}"
	},
	"13017": {
		detail: "Duplicate columns: {0}",
		summary: "Invalid duplicate columns."
	},
	"13018": {
		summary: "Cannot create a cyclic relationship.",
		detail: "Detected cycles: {0}"
	},
	"13019": {
		detail: "Schema update for older version: {0} received and ignored.",
		summary: "Older physical schema version received"
	},
	"13020": {
		detail: "Attempted to create invalid join: {0}",
		summary: "Invalid relationship"
	},
	"13022": {
		summary: "Invalid filter values: {values}."
	},
	"13023": {
		summary: "Failed to create join."
	},
	"13024": {
		summary: "Failed to delete schema."
	},
	"13025": {
		summary: "Expression validation failed."
	},
	"13026": {
		summary: "Load schedule successfully disabled."
	},
	"13027": {
		summary: "Load schedule could not be disabled."
	},
	"13028": {
		action: "To proceed with editing the data source, please edit the connection below to fetch valid source objects.",
		summary: "Objects fetched from the connection are invalid for editing the data source. "
	},
	"13029": {
		summary: "Successfully edited data source connection."
	},
	"13030": {
		summary: "Connection test failed. Please verify connection attributes."
	},
	"13031": {
		summary: "Invalid schedule configuration. {0}"
	},
	"13032": {
		summary: "Invalid user {0}"
	},
	"13033": {
		summary: "Invalid user group {0}"
	},
	"13034": {
		summary: "Invalid expression {0}"
	},
	"13035": {
		summary: "Invalid column {0}"
	},
	"13036": {
		summary: "Invalid role {0}"
	},
	"13037": {
		summary: "Failed to upgrade ACContext."
	},
	"13038": {
		summary: "Failed to upgrade ACFormula."
	},
	"13039": {
		summary: "Failed to upgrade table filter."
	},
	"13040": {
		summary: "Failed to upgrade logical table."
	},
	"13041": {
		summary: "Failed to upgrade report book."
	},
	"13042": {
		summary: "Invalid tenant."
	},
	"13047": {
		summary: "Please contact your Infrastructure or IT Administrator to increase the object limit."
	},
	"13048": {
		summary: "Enter a valid email id."
	},
	"13049": {
		summary: "Enter a white listed email id."
	},
	"13055": {
		summary: "Your changes could not be saved for the following reason: You can select up to {numCols} columns for use by SearchIQ. Please fix your selection and try again."
	},
	"13056": {
		summary: "Your changes could not be saved for the following reason: You can select at most {numDateCols} date column for use by SearchIQ. Please fix your selection and try again."
	},
	"14001": {
		summary: "Mapping saved successfully, thanks for teaching us!"
	},
	"14002": {
		summary: "Could not save the mapping."
	},
	"14003": {
		summary: "Thanks for letting us know!"
	},
	"30001": {
		summary: "Table being queried is currently offline."
	},
	"60000": {
		summary: "Failed to initialize"
	}
};
var vizDeleted = "The visualization has been deleted.";
var vizUngrouped = "The visualization group has been flattened.";
var folded_completion_subtitle = "({num_matches}+ matches)";
var help_result_subtitle = "Help Article";
var action_subtitle = "Shortcut";
var alert = {
	API_ERROR: "Error getting data from server!",
	INVALID_DATA_IN_WORKSHEET: "This worksheet is not accessible because the underlying data has been deleted.",
	SUCCESS_UPDATING_EXPOSED_PREFERENCES: "Preferences have been updated.",
	FAILURE_UPDATING_EXPOSED_PREFERENCES: "Preferences could not be updated.",
	SERVER_UNREACHABLE_COUNTDOWN: "ThoughtSpot unreachable. Retrying in {0} seconds.",
	SERVER_UNREACHABLE_CONNECTING: "ThoughtSpot unreachable. Connecting...",
	SERVER_UNREACHABLE_RETRY_TIMEOUT: "ThoughtSpot unreachable. Try connecting later or",
	TRY_NOW: "Try now",
	UNDO: "Undo",
	WE_ARE_BACK: "We're back!",
	FAILURE: "Error occured.",
	PICTURE_FILE_TOO_BIG: "File too large",
	GROUP_DELETE_DIALOG_TITLE: "Confirm delete",
	GROUP_DELETE_DIALOG_MESSAGE_SINGULAR: "Are you sure you want to delete group {1}?",
	GROUP_DELETE_DIALOG_MESSAGE_PLURAL: "Are you sure you want to delete groups?",
	USER_DELETE_DIALOG_TITLE: "Confirm delete",
	USER_DELETE_DIALOG_MESSAGE_SINGULAR: "Are you sure you want to delete user {1}?",
	USER_DELETE_DIALOG_MESSAGE_PLURAL: "Are you sure you want to delete users?",
	ROLE_DELETE_DIALOG_TITLE: "Confirm delete",
	ROLE_DELETE_DIALOG_MESSAGE_SINGULAR: "Are you sure you want to delete role {1}?",
	ROLE_DELETE_DIALOG_MESSAGE_PLURAL: "Are you sure you want to delete roles?",
	PARTIAL_TABLE_DOWNLOAD_COMPLETE: "Too many rows. A sample of about 50,000 rows provided.",
	TABLE_DOWNLOAD_COMPLETE: "Table downloaded.",
	FAILED_TO_BUILD_SEARCH_RESULT: "Failed to build search result.",
	FAILED_TO_SAVE_FORMULA: "Failed to save formula.",
	FAILED_TO_REMOVE_FORMULA: "Failed to remove formula.",
	AD_HOC_TRANSFORMATION_FAILED: "Ad Hoc Transformation Failed.",
	dataDeletionAlertMessages: {
		cannotDelete: "Cannot delete",
		confirmDelete: "Confirm delete",
		confirmBtnLabel: "Delete",
		withoutContent: {
			singular: "Really delete \"{itemName}\" ?",
			plural: "Really delete these selected {itemType}s ?"
		},
		withoutDependents: {
			singular: "Really delete \"{itemName}\" and all of its contents?",
			plural: "Really delete these {itemType}s and all of their contents?"
		},
		withDependents: {
			singular: "The following object(s) depend on \"{itemName}\". You must delete them to delete \"{itemName}\".",
			plural: "The following object(s) depend on these {itemType}s. You must delete them to delete these {itemType}s."
		}
	},
	dataLoadMessages: {
		SUCCESS_CREATE_CONN: "Connection created successfully",
		SUCCESS_CREATE_SCHEMA: "Schema creation successful",
		SUCCESS_LOAD_DATA: "Selected tables were queued for loading",
		SUCCESS_UPDATE_SCHEDULER: "Schedule updated successfully"
	},
	recoveryMessages: {
		RECOVER_OBJECT: "Recover {1}"
	},
	dataSourceAlertMessages: {
		alertText: "Removing {sourceText} will clear your {clearedEntityName}.",
		actionButtonText: "OK",
		cancelButtonText: {
			singular: "Keep it",
			plural: "Keep them"
		}
	},
	statusViewer: {
		SUCCESS_RESTART: "Selected tasks queued for restart.",
		SUCCESS_ABORT: "Selected tasks queued to abort."
	},
	worksheetBuilderFailedUserActions: {
		transformationFailed: "{userAction} failed due to server error.",
		userActions: {
			addColumn: "Column addition",
			editJoinPath: "Change in column mapping",
			deleteColumn: "Column deletion",
			addPrefix: "Prefixing name"
		}
	},
	sage: {
		thriftConnectionErrors: {
			timeout: "Server connection timed out.",
			error: "Unknown connection error with server.",
			abort: "Server connection aborted.",
			parsererror: "Protocol error occurred when parsing server response."
		},
		queryUpdates: {
			tenSecondsMessage: "Still working...",
			fortySecondsMessage: "This is taking a long time. Will give it another 20 seconds...",
			sixtySecondsMessage: "This is taking too long. Abandoning this search."
		}
	},
	errorCause: {
		NOT_AUTHORIZED: "You do not have the required permissions.",
		NOT_FOUND: "Requested resource was not found.",
		BAD_CLIENT_REQUEST: "Client made a request that the server did not understand.",
		SERVER_ERROR: "Server encountered an error completing the request.",
		NETWORK_ERROR: "There was no response from the server.",
		PROXY_ERROR: "There was a problem with a network proxy.",
		TIMED_OUT: "Request timed out before it could complete.",
		REQUEST_CANCELLED: "Action was cancelled",
		UNKNOWN: "There was an unknown failure.",
		INVALID_FORMAT: "Failed to convert server response to a valid object.",
		INCOMPLETE_DATA: "Data was incomplete."
	},
	NO_ITEMS: "No items found.",
	FAILED_TO_FETCH_DATA: "Failed to fetch data.",
	FAILED_TO_EXPORT: "Failed to export {1}.",
	INVALID_VIZ_TYPE: "Invalid visualization type {1}",
	INVALID_VIZ_DATA_FORMAT: "Invalid data format for viz id {1} {2}.",
	labelAlertMessages: {
		labelNameEmpty: "Empty name not allowed.",
		duplicateLabelName: "Label name already exists."
	},
	importWizardAlertMessages: {
		serverErrorCodeToMessage: {
			"10002": "This file seems to be invalid. It may be empty or in an unacceptable format.",
			"12503": "The data type cannot be identified from the values in this column.",
			"12512": "This file has fewer columns than the data being updated. Please add the missing column(s) and restart the import.",
			"12513": "This file has more columns than the data being updated. Please remove the extra column(s) and restart the import.",
			"13005": "A file with the same name already exists. Please rename the file or upload a different file.",
			DATE_FORMAT_INVALID: "Can't assign the date format for this column. Make sure it doesn't contain multiple date formats or only null values",
			DATE_FORMAT_AMBIGUOUS: "Can't figure out which date format to use by looking at these values. More than one format could work here."
		},
		NO_FILE_UPLOAD_ERROR: "No file found! Please upload a file before proceeding.",
		NO_HEADER_QUES_ANSWERED_ERROR: "Please complete the option highlighted in red before continuing.",
		INVALID_COL_NAMES_ERROR: "Please update the invalid columns highlighted in red before continuing. Column names must be non-empty and unique.",
		EMPTY_COL_TYPES_ERROR: "Please specify the type for each column highlighted in red before continuing.",
		INVALID_COL_TYPES_ERROR: "Inconsistencies between the column data and its type have been detected. Change the column type or modify the data to be uploaded before continuing.",
		INVALID_COL_DATA_ERROR: "Please hover over the cells marked in red to view more details. You may make changes to the data and restart the import. If you choose to continue the erroneous rows will be excluded.",
		IRRECOVERABLE_ERROR: "Irrecoverable errors found. Please start again.",
		MISSING_COLUMN_IN_ROW: "This row does not have any values for this column."
	},
	callosumErrorMessages: {
		NO_JOIN_PATH: "Unable to join tables.",
		OBJECT_NOT_FOUND: "Object not found.",
		NO_DATA: "No data found.",
		SAGE_INVALID_QUESTION: "Question has inconsistencies.",
		RESOURCE_EXCEEDED: "This search is too big to fit in memory.",
		CYCLIC_RELATIONSHIP: "Cannot create this link because it conflicts with an existing link."
	},
	leftPanel: {
		COLUMN_ADDITION_NOT_ALLOWED: "We are sorry. Column addition is not allowed",
		TOO_MANY_COLUMNS: "This search has hit the limit for maximum number of columns.To add more columns, first remove some columns in the search bar, then add new ones.",
		COMPLEX_QUERY: "You are using a complex query that can only be edited in search bar."
	},
	createSchema: {
		FAILED_TO_EXECUTE: "Some commands failed to execute, please check them and continue.",
		LOAD_SUCCESSFULL: "{1} commands loaded successfully.",
		EXECUTION_SUCCESSFUL: "All commands executed successfully."
	},
	FAILURE_UPLOADING_FILE: "File could not be uploaded.",
	pinboard: {
		cannotDelete: {
			title: "Object dependency",
			message: {
				singular: "To delete {itemName}, you must first remove {itemName} as default pinboard of the following group.",
				plural: "To delete {itemType}s, you must first remove these {itemType}s as default pinboards of the following groups."
			}
		}
	}
};
var displayRowNumber = "( showing rows {topRow} - {bottomRow} of {totalRows}";
var getModelDataRowInfo = "Showing only {modelDataLen} rows here.";
var resultsRowLimit = "Results are limited to first {maxRows} rows.";
var otherTokenForEditMapping = "\"{tokenForEditMapping}\" join path already selected.";
var selectAnother = "Select another";
var rowsSkipped = "We skipped {NumErrorRows} rows while importing.";
var gitcommit2 = "git-commit: {commit_Id}";
var gitbranch2 = "git-branch: {git_Branch}";
var built_on2 = "built on: {timeStamp}";
var terminalToken_confirmation = "Which {terminal_Token} did you mean?";
var Download_as2 = "Download as {item_id}";
var Chart_page2 = "Chart page {pageNumber}";
var SelectedSourcesCount = "Selected ({getCount})";
var search_by_name = "search by name";
var Source_column = "Source column";
var Destination_column = "Destination column";
var Enter_prefix = "Enter prefix";
var Add_comment = "Add your comment here";
var Search_table_name = "Search table name";
var Source_name = "'Source name'";
var Select_a_connection = "Select a connection";
var new_column_name = "'Enter new column name'";
var Memory_usage = "Memory usage";
var Efficiency = "Efficiency";
var Filter_by_ID = "Filter by ID";
var formula_name = "'Enter formula name'";
var Search_Columns = "Search Columns";
var Filter_by_Name = "Filter by Name";
var Search_sources = "Search sources";
var Add_a_comment = "Add a comment";
var import_error_msg = "Try the import again by clicking the button below. If it still doesn't work, check your file. There might be some errors in the file.";
var column_name = "'Enter column name'";
var x_axis_columns = "select column(s) for x-axis";
var y_axis_columns = "select column(s) for y-axis";
var legend_columns = "select column(s) for legend";
var Chart_Type = "Select Chart Type";
var tooltip = {
	NAME: "Name",
	SOURCE: "Data source",
	UPDATED: "Updated",
	AGGREGATION: "Aggregation",
	DESCRIPTION: "Description",
	DATATYPE: "Data type"
};
var update = {
	success: "Updated",
	failed: "Failed to update. Please try again"
};
var CHANGE_VISUALIZATION = "Change visualization";
var VIEW_TABLE = "View table";
var VIEW_R_ANALYSIS = "View R analysis";
var VIEW_SPOTIQ = "SpotIQ Analysis";
var EDIT_CHART_CONFIGURATION = "Edit chart configuration";
var EDIT_CHART_STYLE = "Edit chart style";
var chart = {
	CONFIG_ERROR: "Failed to load the chart.",
	chartEditor: {
		chartAxisLocker: {
			ICON_TOOLTIP: "lock/unlock chart configuration"
		},
		chartAxisConfigurator: {
			X_AXIS: "X-Axis",
			Y_AXIS: "Y-Axis",
			LEGEND: "Legend",
			RADIAL: "Size",
			COLOR: "Color",
			CATEGORY: "Category",
			SIZE: "Size",
			X_AXIS_PLACEHOLDER: "select column(s) for x-axis",
			Y_AXIS_PLACEHOLDER: "select column(s) for y-axis",
			LEGEND_AXIS_PLACEHOLDER: "select column(s) for legend",
			RADIAL_AXIS_PLACEHOLDER: "select column for size",
			LINK_Y_AXIS: "enable/disable shared y-axis",
			Y_AXIS_CANDLESTICK: "Open, High, Low, Close",
			CONFIG_INVALID_FOR_CHART_TYPE: "This configuration is invalid for the current chart type."
		},
		DISABLED_REGRESSION_LINE_MULTI_SERIES: "Regression line only supported for single series",
		chartConfigurator: {
			SELECT_AN_AREA: "Select an area",
			RESET_ZOOM: "Reset zoom"
		},
		customColorConfigurator: {
			candlestick: {
				UP_COLOR: "Up Color",
				DOWN_COLOR: "Down Color"
			}
		}
	}
};
var slack = {
	thanks_for_registering: "Thanks for registering as a Slack user. Happy chatting with @spot.",
	user_exists: "Slack user exists",
	confirm_override_user: "You are already associated with a Slack account. Are you sure you want change it ?"
};
var Configure_Chart = "Configure Chart";
var Zoom_into_chart = "Zoom into chart";
var No_zoom_allowed = "No zoom allowed";
var Change_chart_config = "Change chart configuration";
var Config_change_not_allowed = "Configuration change not allowed";
var XAxis = "X-Axis";
var YAxis = "Y-Axis";
var Size = "Size";
var Legend = "Legend";
var Confirm_removal = "Confirm removal";
var Are_you_sure2 = "Are you sure you want to remove <span class=\"bk-text-gray\"><b>${vizTitle}</b></span> from the pinboard?";
var chartTypes = {
	WHISKER_SCATTER: "Whisker Scatter",
	SANKEY: "Sankey",
	GRID_TABLE: "Grid Table",
	BAR: "Bar",
	COLUMN: "Column",
	STACKED_COLUMN: "Stacked Column",
	STACKED_BAR: "Stacked Bar",
	PARETO: "Pareto",
	LINE: "Line",
	AREA: "Area",
	SCATTER: "Scatter",
	BUBBLE: "Bubble",
	PIE: "Pie",
	GEO_AREA: "Geo Area",
	GEO_BUBBLE: "Geo Bubble",
	GEO_HEATMAP: "Geo Heatmap",
	GEO_EARTH_AREA: "Geo Earth Area",
	GEO_EARTH_BUBBLE: "Geo Earth Bubble",
	GEO_EARTH_BAR: "Geo Earth Bar",
	GEO_EARTH_HEATMAP: "Geo Earth Heatmap",
	GEO_EARTH_GRAPH: "Geo Earth Graph",
	WATERFALL: "Waterfall",
	TREEMAP: "Treemap",
	HEATMAP: "Heatmap",
	STACKED_AREA: "Stacked Area",
	LINE_COLUMN: "Line Column",
	FUNNEL: "Funnel",
	SPIDER_WEB: "Radar",
	PIVOT_TABLE: "Pivot Table",
	LINE_STACKED_COLUMN: "Line Stacked Column",
	CANDLESTICK: "Candlestick"
};
var Administration_Group = "Administration Group";
var infoCard = {
	TITLE: "What am I looking at ?",
	CLOSE: "CLOSE"
};
var Abort_data_import = "Abort data import";
var abort_confirmation = "Are you sure you want to abort the data import?";
var Stay_here = "Stay here";
var Yes_abort = "Yes, abort";
var Attention = "Attention!";
var Overwrite_confirmation = "You have chosen to overwrite your existing data. This cannot be undone. Are you sure?";
var Upload_your_file = "Upload your file";
var Set_column_names = "Set column names";
var Upload_csv_to_proceed = "To proceed, please upload a CSV file containing your data.";
var contains_col_name = "Success! Now indicate whether the uploaded file contains column names.";
var name_unique_col = "Name the columns in the uploaded file. Remember, the column names must be unique.";
var confirm_ignore_val_errors = "You have chosen to ignore data validation errors. This can not be undone. Are you sure you want to proceed anyway?";
var Preview_and_import = "Preview & import data";
var Add_to_existing = "Add the new data to the existing data";
var Irrecoverable_errors_msg = "Irrecoverable errors found. Please start again.";
var address_errors_before_proceeding = "Please address the errors before proceeding";
var confirm_errors_and_proceed = "You have chosen to ignore data validation errors and proceed further. This can not be undone. Are you sure?";
var Set_column_types = "Set column types";
var Determine_column_interruption = "Determine how each column value should be interpreted.";
var Invalid_file_type_error = "Invalid file type. We only support the following types: ";
var Showing_underlying_data = "Showing underlying data";
var SUMMARY = "Summary";
var aggregateTypes = {
	SUM: "Total",
	AVERAGE: "Avg",
	MIN: "Min",
	MAX: "Max",
	COUNT: "Total Count",
	COUNT_DISTINCT: "Unique Count",
	STD_DEVIATION: "Std Deviation",
	TABLE_AGGR: "Table Aggregate",
	VARIANCE: "Variance"
};
var cumulativePercent = "Cumulative Percent";
var datatype_Text = "Text";
var datatype_Date = "Date";
var datatype_Datetime = "Datetime";
var datatype_Time = "Time";
var datatype_Numeric = "Numeric";
var datatype_Decimal = "Decimal";
var Can_View = "Can View";
var Can_Edit = "Can Edit";
var Varies = "Varies";
var start = "Start";
var end = "End";
var Untitled_Formula = "Untitled Formula";
var start_point = "start typing your formula here";
var data_type = "data type";
var column_type = "column type";
var Additive = "Additive";
var aggregation2 = "aggregation";
var hidden = "hidden";
var Synonyms = "Synonyms";
var Index_Type = "Index Type";
var SpotIQ_Preference = "SpotIQ Preference";
var Custom_Calendar_Type = "Calendar Type";
var Geo_type = "Geo type";
var Index_Priority = "Index Priority";
var Format_Pattern = "Format Pattern";
var Attribution_Dimension = "Attribution Dimension";
var Entity_Category = "Entity Category";
var SearchIQ_Enabled = "SearchIQ Enabled";
var Column_Name = "Column Name";
var Dependent_Name = "Dependent Name";
var Type2 = "Type";
var View_More = "'View More'";
var View_All = "'View All'";
var lock_unlock_chart_config = {
	duh: "lock/unlock chart configuration"
};
var Returns_the_date = "Returns the date portion of a given date.";
var smith = "'smith'";
var units = "units";
var diffdays = "diff_days";
var complaint = "complaint";
var atan = "atan";
var cumulativesum = "cumulative_sum";
var cumulativemin = "cumulative_min";
var pow = "pow";
var hello_world = "'hello world'";
var emailed = "emailed";
var tobool = "to_bool";
var oregon = "'oregon'";
var Returns_the_hour = "Returns the hour of the day for a given date.";
var retail_price = "retail price";
var sum = "sum";
var min = "min";
var todouble = "to_double";
var difftime = "diff_time";
var editdistance = "edit_distance";
var Returns_the_largest = "Returns the largest previous integer.";
var Returns_the_logarithm2 = "Returns the logarithm with base 2, or binary logarithm.";
var cube = "cube";
var Returns_the_year = "Returns the year from a given date. Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01. Per standard convention, the fiscal year is defined by the year-end date.)";
var product = "product";
var log10 = "log10";
var drafted_by = "drafted by";
var movingsum = "moving_sum";
var movingmin = "moving_min";
var Takes_a_measure14 = "Takes a measure, two integers to define the window to aggregate over, and one or more attributes. Returns the maximum of the measure over the given window. The attributes are the ordering columns used to compute the moving maximum. The window is (current - Num1...Current + Num2) with both end points being included in the window. For example, \"1,1\" will have a window size of 3. To see periods in the past, use a negative number for the second endpoint, as in the example \"moving_max(sales, 1, -1, date)\".";
var Takes_a_measure13 = "Takes a measure, two integers to define the window to aggregate over, and one or more attributes. Returns the minimum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum. The window is (current - Num1...Current + Num2) with both end points being included in the window. For example, \"1,1\" will have a window size of 3. To see periods in the past, use a negative number for the second endpoint, as in the example \"moving_min(sales, 1, -1, date)\".";
var latitude = "latitude";
var Takes_a_measure12 = "Takes a measure, two integers to define the window to aggregate over, and one or more attributes. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average. The window is (current - Num1...Current + Num2) with both end points being included in the window. For example, \"1,1\" will have a window size of 3. To see periods in the past, use a negative number for the second endpoint, as in the example \"moving_average(sales, 1, -1, date)\".";
var Takes_a_measure11 = "Takes a measure, two integers to define the window to aggregate over, and one or more attributes. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving sum. The window is (current - Num1...Current + Num2) with both end points being included in the window. For example, \"1,1\" will have a window size of 3. To see periods in the past, use a negative number for the second endpoint, as in the example \"moving_sum(sales, 1, -1, date)\".";
var strpos = "strpos";
var Takes_a_measure10 = "Takes a measure and one or more attributes. Returns the maximum of the measure, accumulated by the attribute(s) in the order specified.";
var groupcount = "group_count";
var exp2 = "exp2";
var similarity = "similarity";
var shipped = "shipped";
var safedivide = "safe_divide";
var Returns_1_if = "Returns +1 if the number is greater than zero, -1 if less than zero, 0 if zero.";
var customer_region = "customer region";
var state = "state";
var Returns_the_smallest = "Returns the smallest following integer.";
var phone = "phone";
var cumulativeaverage = "cumulative_average";
var soundslike = "sounds_like";
var Takes_a_column2 = "Takes a column name and one or more attributes. Returns the number of unique values in a column, grouped by the attribute(s).";
var Returns_the_square = "Returns the square of a numeric value.";
var pokemon_go = "'pokemon go'";
var Accepts_a_document = "Accepts a document text string and a search text string. Returns the relevance score (0-100) of the search string with respect to the document. Relevance is based on edit distance, number of words in the query, and length of words in the query which are present in the document. If the two strings are an exact match, returns 100.";
var revenue = "revenue";
var Returns_Eulers_number = "Returns Euler's number (~2.718) raised to a power.";
var store_name = "store name";
var serviced = "serviced";
var hourofday = "hour_of_day";
var shipping = "shipping";
var Returns_the_smaller = "Returns the smaller of the values.";
var groupmax = "group_max";
var cbrt = "cbrt";
var variance = "variance";
var startofweek = "start_of_week";
var sq = "sq";
var minecraft_pixelmon = "'minecraft pixelmon'";
var owner = "owner";
var Accepts_a_document2 = "Accepts a document text string and a search text string. Returns true if relevance score (0-100) of the search string with respect to the document is greater than or equal to 20. Relevance is based on edit distance, number of words in the query, and length of words in the query which are present in the document.";
var bigger = "'bigger'";
var lastname = "lastname";
var Returns_the_month = "Returns the month from a given date.";
var tostring = "to_string";
var joined = "joined";
var FY_2015 = "FY 2015";
var atty = "'atty'";
var Returns_the_inverse = "Returns the inverse sine in degrees.";
var Returns_the = "Returns the square root.";
var end_latitude = "end latitude";
var least = "least";
var Returns_the_length = "Returns the length of the text.";
var Returns_the_portion = "Returns the portion of the given string, beginning at the location specified (starting from 0), and of the given length.";
var Returns_the_left = "Returns the portion of the given string of given length, beginning from the left hand side of the string.";
var left = "left";
var Returns_the_right = "Returns the portion of the given string of given length, ending at the right hand side of the string.";
var right = "right";
var q1_revenue = "q1 revenue";
var adddays = "add_days";
var addseconds = "add_seconds";
var Returns_the_inverse3 = "Returns the inverse tangent in degrees.";
var Returns_the_inverse2 = "Returns the inverse cosine in degrees.";
var January = "January";
var markup = "markup";
var startofmonth = "start_of_month";
var received = "received";
var Returns_the_minimum = "Returns the minimum value of a column.";
var formula = {
	assistant: {
		min_if: "Returns the minimum value among columns that meet a specified criteria.",
		stddev_if: "Returns a standard deviation values filtered to meet a specific criteria.",
		unique_count_if: "Returns the number of unique values of a column provided it meets a criteria.",
		count_if: "Returns the number of rows in the table containing the column.",
		month_number_of_quarter: "Returns the month (1-3) number for the given date in a quarter. Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)",
		day_number_of_quarter: "Returns the number of the day in a quarter for a given date.  Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)",
		average_if: "Returns the average of all the columns that meet a given criteria.",
		variance_if: "Returns the variance of all the values of a column provided it meets a given criteria.",
		group_aggregate: "Takes a measure and, optionally, attributes and filters. These can be used to aggregate measures with granularities and filters different from the terms/columns used in the search. Especially useful for comparison analysis. This formula takes the form: group_aggregate (> aggregation (measure) >, > groupings >, > filters >). Lists can be defined with {} and optional list functions query_groups or query_filters, which by default specify the lists or filters used in the original search. Plus (+) or (-) can be used to add or exclude specific columns for query groups.",
		rank: "Returns the rank for the current row. Identical values are assigned an identical rank. Takes an aggregate as input for the first argument. Use the second argument as either 'asc' | 'desc' to specify ascending or descending order.",
		rank_percentile: "Returns the percentile rank for the current row. Identical values are assigned an identical percentile rank. Taken an aggregate as input for the first argument. Use the second argument as either 'asc' | 'desc' to specify ascending or descending order.",
		max_if: "Returns the maximum value among columns that meet a given criteria.",
		quarter_number: "Returns the number (1-4) of the quarter associated with the given date. Add an optional second parameter to specify 'fiscal' or 'calendar' dates. Default is 'calendar'.  (In examples, start of fiscal year is set to May 01.)",
		week_number_of_month: "Returns the week number for the given date in a month.",
		week_number_of_quarter: "Returns the week number for the given date in a quarter.  Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)",
		week_number_of_year: "Returns the week number for the given date in a year.  Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)",
		sum_if: "Returns sum values filtered by a specific criteria."
	}
};
var promoter = "promoter";
var customer = "customer";
var Returns_2_raised = "Returns 2 raised to a power.";
var region = "region";
var stddev = "stddev";
var cos = "cos";
var daynumberofyear = "day_number_of_year";
var Takes_a_column = "Takes a column name and one or more attributes. Returns the total count of values in a column, grouped by the attribute(s).";
var Returns_the_remainder = "Returns the remainder of first number divided by the second number.";
var cumulativemax = "cumulative_max";
var lawyer = "'lawyer'";
var tointeger = "to_integer";
var max = "max";
var abs = "abs";
var time = "time";
var spellslike = "spells_like";
var tweet2 = "tweet2";
var width = "width";
var tweet1 = "tweet1";
var or = "or";
var dayofweek = "day_of_week";
var Returns_the_number6 = "Returns the number of unique values of a column.";
var Returns_the_number5 = "Returns the number of rows in the table containing the column.";
var Aggregate = "Aggregate";
var Used_to_calculate = "Used to calculate distance between two points on Earth, taking the Earth's spherical shape into account. Accepts two coordinates in the format spherical_distance (latitude_1, longitude_1, latitude_2, longitude_2). Returns the distance in meters between the two points.";
var Returns_the_number4 = "Returns the number (1-12) of the month from a given date. Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)";
var Returns_the_number3 = "Returns the number (1-366) of the day in a year from a given date. Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)";
var Returns_the_number2 = "Returns the number (1-7) of the day in a week from the given date with 1 being Monday and 7 being Sunday.";
var Returns_true_when = "Returns true when both conditions are true, otherwise returns false.";
var area = "area";
var help_text_add_months = "Returns the result of adding the specified number of months to the given date.";
var help_add_years = "Returns the result of adding the specified number of years to the given date.";
var help_add_seconds = "Returns the result of adding the specified number of seconds to the given date.";
var Returns_the_result6 = "Returns the result of adding the specified number of days to the given date.";
var Help_add_weeks = "Returns the result of adding the specified number of weeks to the given date.";
var Returns_add_minutes = "Returns the result of adding the specified number of minutes to input date/datetime/time.";
var Returns_the_result5 = "Returns the result of dividing the first number by the second. If the second number is 0, returns 0 ​instead of NaN (not a number).";
var Returns_the_result4 = "Returns the result of dividing the first number by the second. If the second number is 0, returns NaN (not a number).";
var Returns_the_result3 = "Returns the result of multiplying both numbers.";
var Returns_the_result2 = "Returns the result of subtracting the second number from the first.";
var Returns_the_cosine = "Returns the cosine of an angle (specified in degrees).";
var call_began = "call began";
var beam_angle = "beam angle";
var trial_version = "'trial version'";
var california = "'california'";
var attorney = "'attorney'";
var movingmax = "moving_max";
var tansatelliteangle = "tan-satellite-angle";
var married = "married";
var floor = "floor";
var sign = "sign";
var room = "'room'";
var clicked = "clicked";
var not_bigger = "'not bigger'";
var monthnumber = "month_number";
var supplier = "supplier";
var persnickety = "'persnickety'";
var exp = "exp";
var firstname = "first_name";
var Accepts_two_text4 = "Accepts two text strings. Returns true if they sound similar when spoken, and false if they do not.";
var Accepts_two_text3 = "Accepts two text strings. Returns true if they are spelled similarly and false if they are not. Works with strings under 1023 characters.";
var Accepts_two_text2 = "Accepts two text strings and an integer to specify the upper limit cap for the edit distance (minimum number of operations required to transform one string into the other). If the edit distance is less than or equal to the specified cap, returns the edit distance. If it is higher than the cap, returns the cap plus 1. Works with strings under 1023 characters.";
var month = "month";
var growth_rate = "growth rate";
var Returns_the_average = "Returns the average of all the values of a column.";
var taxrate = "taxrate";
var ln = "ln";
var Returns_the_tangent = "Returns the tangent of an angle (specified in degrees).";
var Accepts_an_integer = "Accepts an integer or text string, and a date format using strptime format. Returns the input as a date. Does not accept epoch formatted dates as input.";
var Friday = "Friday";
var Returns_the_cube = "Returns the cube of a number.";
var Returns_the_first4 = "Returns the first number rounded to the precision of the second number (1 by default).";
var Returns_the_first3 = "Returns the first number raised to the power of the second number.";
var Returns_the_first2 = "Returns the first number raised to the power of the second.";
var growth = "growth";
var movingaverage = "moving_average";
var Conditional_operator = "Conditional operator.";
var sin = "sin";
var purchased = "purchased";
var strlen = "strlen";
var now = "now";
var read = "'read'";
var substr = "substr";
var not = "not";
var groupuniquecount = "group_unique_count";
var Q3_FY = "Q3 FY 2015";
var campaign = "campaign";
var date = "date";
var UnsubscribeSnapshot = "Stop Watching";
var StartWatching = "Start watching";
var snapshotVizTitle = "Snapshot History";
var snapshotVizHeader = "Snapshot from ";
var snapshotVizOriginalQuestion = "See original answer";
var UpdateSnapshot = "Update Snapshot";
var SnapshotInsightsDiffTitle = "Insights for Store Inventory";
var SnapshotInsightsLongTermDiffTitle = "Long Term Diff Analysis";
var SnapshotDailyDiffTitle = "Daily Diff";
var snapshotCardDescriptions = {
	diffUp: "{measureName} for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span> is {changePercent}% higher from {dateRange}.",
	diffDown: "{measureName} for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span> is {changePercent}% lower from {dateRange}.",
	trendUp: "Trending upwards for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span>",
	trendDown: "Trending downwards for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span>",
	trendNone: "No trend for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span>",
	competitiveUp: "Contributed {changePercent}% of increase to <span class=\"bk-snapshot-insight-messure\">{measureName}</span>",
	competitiveDown: "Contributed {changePercent}% of decrease to <span class=\"bk-snapshot-insight-messure\">{measureName}</span>"
};
var snapshotForcastCardTemplateUp = "{measureName} for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span> is likely to increase by {changePercent}% {tillDate}.";
var snapshotForcastCardTemplateDown = "{measureName} for <span class=\"bk-snapshot-insight-attribute\">{attributeValueString}</span> is likely to decrease by {changePercent}% {tillDate}.";
var snapshotInsightsViewer = {
	todayInsights: "Today insight",
	yesterdayInsights: "Yesterday insight"
};
var snapshotInsightLabel = {
	diff: "Change analysis",
	trend: "Trend analysis",
	comparative: "comparative analysis",
	forcast: "Forecast analysis"
};
var FollowEnabled = "Follow Enabled";
var CannotEnableWatch = "Cannot enable Watch";
var WatchFeatureNotEnabled = "Watch feature is only enabled for pinboard and saved answers";
var PerUserSubscriptionLimitReached = "Per User Subscription Limit ({perUserSubscriptionLimit}) has been reached";
var complaints = "complaints";
var Returns_the_day = "Returns the day of the week for the given date.";
var approve = "'approve'";
var distributor = "distributor";
var Returns_true_if9 = "Returns true if the first value is less than or equal to the second value.";
var Subtracts_the_second2 = "Subtracts the second date from the first date and returns the result in number of seconds.";
var Returns_true_if8 = "Returns true if the first value is greater than or equal to the second value.";
var Returns_true_if7 = "Returns true if the first value is less than the second value.";
var Returns_the_standard = "Returns the standard deviation of all values of a column.";
var Returns_true_if6 = "Returns true if the first value is greater than the second value.";
var Returns_true_if5 = "Returns true if the first value is equal to the second value.";
var Returns_the_number = "Returns the number (1-31) of the day from a given date.";
var tax = "tax";
var Returns_true_if4 = "Returns true if the first string contains the second string, otherwise returns false.";
var Returns_true_if3 = "Returns true if the given date falls on a Saturday or Sunday.";
var totalcost = "total_cost";
var Returns_true_if2 = "Returns true if the value is null.";
var Returns_the_cube2 = "Returns the cube root of a number.";
var tan = "tan";
var length = "length";
var hello_swirl = "'hello swirl'";
var start_latitude = "start latitude";
var Jan_FY = "Jan FY 2015";
var Returns_the_sine = "Returns the sine of an angle (specified in degrees).";
var round = "round";
var hay = "'hay'";
var Returns_true_when2 = "Returns true when either condition is true, otherwise returns false.";
var Returns_true_for_in_when = "Takes a column name and a list of values. Returns true when the value of column is present in the list of values supplied.";
var start_longitude = "start longitude";
var count = "count";
var average = "average";
var texas = "'texas'";
var day = "day";
var year = "year";
var invoiced = "invoiced";
var Returns_the_two = "Returns the two values as a concatenated text string.";
var event$1 = "event";
var quantity = "quantity";
var thouhgtspot = "'thouhgtspot'";
var distance = "distance";
var haystack = "'haystack'";
var groupstddev = "group_stddev";
var burning_man = "'burning man'";
var startofyear = "start_of_year";
var haystackwithneedle = "'haystack_with_needle'";
var q2_revenue = "q2 revenue";
var todate = "to_date";
var price = "price";
var atan2 = "atan2";
var broomstick = "'broomstick'";
var order_date = "order date";
var Returns_the_variance = "Returns the variance of all the values of a column.";
var sold = "sold";
var Takes_a_measure9 = "Takes a measure and one or more attributes. Returns the minimum of the measure, accumulated by the attribute(s) in the order specified.";
var Takes_a_measure8 = "Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.";
var Takes_a_measure7 = "Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.";
var Takes_a_measure6 = "Takes a measure and one or more attributes. Returns the maximum of the measure grouped by the attribute(s).";
var Takes_a_measure5 = "Takes a measure and one or more attributes. Returns the minimum of the measure grouped by the attribute(s).";
var Takes_a_measure4 = "Takes a measure and one or more attributes. Returns the standard deviation of the measure grouped by the attribute(s).";
var ifnull = "ifnull";
var Takes_a_measure3 = "Takes a measure and one or more attributes. Returns the variance of the measure grouped by the attribute(s).";
var Takes_a_measure2 = "Takes a measure and one or more attributes. Returns the average of the measure grouped by the attribute(s).";
var Conversion = "Conversion";
var Returns_the4 = "Returns the current timestamp.";
var Returns_the3 = "Returns the natural logarithm.";
var Returns_the2 = "Returns the absolute value.";
var submitted = "submitted";
var acos = "acos";
var snicket = "'snicket'";
var Returns_the_maximum = "Returns the maximum value of a column.";
var Returns_the_logarithm = "Returns the logarithm with base 10.";
var Returns_the_first = "Returns the first value if it is not null, otherwise returns the second.";
var Returns_the_larger = "Returns the larger of the values.";
var Subtracts_the_second = "Subtracts the second date from the first date and returns the result in number of days, rounded down if not exact.";
var Returns_the_date5 = "Returns the date for the first day of the week for the given date.";
var Returns_the_date4 = "Returns the date for the first day of the month for the given date.";
var date_ordered = "date ordered";
var Returns_the_date3 = "Returns the date for the first day of the quarter for the given date. Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)";
var Returns_the_date2 = "Returns the date for the first day of the year for the given date. Add an optional second parameter to specify whether a 'fiscal' or 'calendar' year is used to calculate the result. Default is 'calendar'. (In examples, start of fiscal year is set to May 01.)";
var Returns_the_input = "Returns the input as a boolean (true or false).";
var Returns_a_random = "Returns a random number between 0 and 1.";
var Returns_the_time = "Returns the time portion of a given date.";
var Text2 = "Text";
var mod = "mod";
var Mixed = "Mixed";
var ceil = "ceil";
var Accepts_two_text = "Accepts two text strings. Returns the edit distance (minimum number of operations required to transform one string into the other) as an integer. Works with strings under 1023 characters.";
var unknown = "'unknown'";
var isweekend = "is_weekend";
var datesold = "date_sold";
var stack = "'stack'";
var groupvariance = "group_variance";
var isnull = "isnull";
var editdistancewithcap = "edit_distance_with_cap";
var Returns_true_if10 = "Returns true if the first value is not equal to the second value.";
var lastname2 = "last_name";
var flag = "'flag'";
var daynumberofweek = "day_number_of_week";
var color = "color";
var sinsatelliteangle = "sin-satellite-angle";
var Returns_the_numeric = "Returns the numeric position (starting from 0) of the first occurrence of the second string in the first string, or -1 if not found.";
var studio = "studio";
var cost = "cost";
var current_team = "current team";
var log2 = "log2";
var groupsum = "group_sum";
var groupmin = "group_min";
var end_longitude = "end longitude";
var cossatelliteangle = "cos-satellite-angle";
var Operators = "Operators";
var longitude = "longitude";
var volume = "volume";
var then = "then";
var home_visit = "home visit";
var Returns_the_input4 = "Returns the input as a text string. To convert a date or time, add a second parameter with the format to use in strptime. For example, to_string(12/01/2014, \"%y-%m-%d\") returns 14-12-01.";
var Returns_the_input3 = "Returns the input as an integer.";
var Returns_the_input2 = "Returns the input as a double.";
var sphericaldistance = "spherical_distance";
var Takes_a_measure = "Takes a measure and one or more attributes. Returns the sum of the measure grouped by the attribute(s).";
var key_05302015_Week = "05/30/2015 Week";
var greatest = "greatest";
var sales = "sales";
var unique_count = "unique count";
var defects = "defects";
var where_is_the = "'where is the burning man concert'";
var concat = "concat";
var groupaverage = "group_average";
var sqrt = "sqrt";
var Ymd = "'%Y-%m-%d'";
var red = "'red'";
var asin = "asin";
var Returns_true_if = "Returns true if the condition is false, otherwise returns false.";
var clicks = "clicks";
var needle = "'needle'";
var profit = "profit";
var contains = "contains";
var random = "random";
var similarto = "similar_to";
var Returns_the_sum = "Returns the sum of all the values of a column.";
var Returns_the_result = "Returns the result of adding both numbers.";
var startofquarter = "start_of_quarter";
var saved_ans_asked = "asked a question";
var saved_ans_edited = "edited a question";
var pinboard_created = "created a pinboard";
var pinboard_edited = "edited a pinboard";
var worksheet_created = "created a worksheet";
var worksheet_edited = "edited a worksheet";
var imported_some_data = "imported some data";
var imported_data_edited = "edited imported data";
var relatedLink = {
	Invalid_Configuration_Message: "The related link configuration has expired. Please start over again from source of the link.",
	Select_Row_As_Runtime_Filter: "Select a row to apply as runtime filter",
	relatedLinkName: "Related Link",
	onRelatedLink: "You are on Related Link",
	createLink: "New Related Link",
	relatedLinkEditor: "Related Link editor",
	relatedLinkViewer: "Related Links",
	destination: "Destination",
	selectVisualization: "Select Visualization",
	selectedVisualization: "Destination VisualizationId: ",
	destinationToolTip: "Id of the selected visualization in destination pinboard. All means all visualization will be shown instead of specific single visualization.",
	selectedRuntimeFilter: "Selected Filter: ",
	sourceColumn: "Source Column",
	destinationType: "Destination Type",
	operator: "Operator",
	destinationColumn: "Destination Column",
	action: "Action",
	title: "<span class=\"bk-header-title\"> {operation} of Visualization <span class=\"bk-element-name\">{vizName}</span> on {bookType} <span class=\"bk-element-name\">{reportModel}</span></span>",
	mappings: "Available Filter Mappings",
	mappingsFromSource: "Filters (generated from related link LinkName):",
	destinationOfLink: "Destination of Link:",
	addMapping: "Add Mapping",
	availableFilters: "Available Filters",
	generatedFrom: "generated from related link",
	selectRunTimeFilter: "A filter is not selected from available list. Please select one from available filters.",
	relatedLinksCount: " Related Links: ",
	relatedLinkHelpMessage: "Related link enables a user to 'drill across' pinboards. Select rows and right-click to follow a link. To create a link, please click 'Relate' button from visualization's action menu. ",
	relatedLinkCanvasLandingHelpMessage: "You are on destination of a Related link. Please select available filters to drill into this page. "
};
var Current_Password = "Current Password";
var Successful_password_update = "Successfully updated password";
var Unsuccessful_password_update = "Enter a valid password";
var localizationDisabled = "Contact your admin to view ThoughtSpot in your language.";
var RelatedLinkName = "Related Link Name: ";
var conditionalFormatting = {
	nonNumericColumn: "Conditional formatting can only be specified for numeric column."
};
var filters = {
	Go_To_Exclude: "Exclude Values",
	Go_To_Include: "Include Values",
	Exclude_Tab: "Exclude",
	Include_Tab: "Include",
	Show_All_Possible_Values: "Show all possible values",
	Show_All_Possible_Values_Tooltip: "View all values for this column in the system. Showing values that are valid based on other filter conditions in answer."
};
var poweredFooter = {
	logo_title_part1: "Thought",
	logo_title_part2: "Spot"
};
var materializeSchedule = {
	dialog: {
		title: "Schedule Data Updates",
		description: "Please specify a schedule to refresh view data.",
		createTitle: "Schedule",
		cancelTitle: "Setup Later"
	},
	pause: {
		tooltip: "Pause Schedule"
	},
	resume: {
		tooltip: "Resume Schedule"
	},
	"delete": {
		tooltip: "Delete Schedule"
	}
};
var schema = {
	materializeSection: {
		title: "Materialize",
		viewDetails: "Show Details",
		view: "Materialize View",
		update: "Update",
		keyHint: "Select keys",
		primaryKey: "Primary Key",
		shardingKey: "Sharding Key",
		noKey: "No key selected",
		numShards: "Number of Shards",
		remove: "Remove",
		removeView: "Remove Materialized View",
		shardRecommend: "These settings are important for optimizing performance on a large materialized view. If you do not set them, the view will be replicated on every node of your cluster. <a target='_blank' href='{url}'>Learn more</a>",
		dematerializeMessage: "Removing materialized view will also delete the data associated with the view from the memory. Do you want to remove it?",
		statusLabel: "Status",
		sharding: {
			title: "Sharding Details"
		},
		schedule: {
			title: "Schedule",
			text: "Update Schedule:"
		}
	},
	materializeStatus: {
		READY: "Materialized",
		QUEUED: "Queued",
		INPROGRESS: "In Progress",
		STALE: "Stale",
		ERROR: "Error",
		UNKNOWN: "Unknown",
		EMPTY: "Not Materialized",
		dematerializeWarning: "The view cannot be dematerialized when it's queued or in progress.",
		lastRefreshTime: "Data Last Updated: {lastRefreshTime}",
		refreshData: "Refresh Data",
		updateStatusLinkText: "Update Status",
		refreshDataModal: {
			message: "This will update the data from the underlining data sources. It can take up to several minutes based on the complexity of the query. Are you sure you want to continue?"
		}
	}
};
var analyze = {
	suggestions: "Review Suggestions ({numberOfSuggestions})",
	noSuggestions: "There are no suggestions on this table.",
	suggestionDescription: "Apply the changes below to improve the search experience of this table in ThoughtSpot.",
	saveHelp: "Save the changes made below",
	longTableNameAnalyzer: {
		title: "Long table name",
		description: "Shorten the table name to make it easier to search for it. The recommended character length is <="
	},
	longColumnNamesAnalyzer: {
		title: "Long column names",
		description: "Shorten these column names to make it easier to search for them. The recommended character length is <="
	},
	highColumnNumbersAnalyzer: {
		title: "High number of columns",
		description1: "This table has many columns. Consider analyzing its schema and need for so many columns. If possible, reduce the number of columns to <=",
		description2: " to improve search performance.",
		columns: "columns",
		indexedColumns: "indexed columns",
		indexedColumnsTitle: "High number of indexed columns",
		indexedColumnsDescription1: "This table has many indexed columns. Reduce the number of indexed columns to <=",
		indexedColumnsDescription2: " by changing the ",
		indexType: "index type ",
		indexedColumnsDescription3: " of appropriate columns to improve search experience."
	},
	systemKeywords: {
		title: "System keywords in column names",
		description1: "ThoughtSpot uses ",
		description2: "search keywords",
		description3: " like \"Top\" or \"Daily\" to craft search queries. Update the column name to not contain these keywords at a word boundary to improve accuracy of suggestions.",
		keywordsFound: "Keywords found: ",
		keywordsMatched: "keywords matched"
	},
	garbageWords: {
		title: "Column names contain words which ThoughtSpot does not understand.",
		description: "Update the column names to not contain any garbage words as their presence may affect usablity of natural language search bar.",
		garbageWordsFound: "Garbage word(s) found: ",
		garbageWordsMatched: "garbage word(s) found"
	},
	commonPrefix: {
		title: "Identical strings in multiple columns",
		description: "These columns have identical phrases or strings in them. Eliminate long (>20 character) duplicate strings to make search for columns easier.",
		identicalChars: "identical chars",
		identicalStrings: "Identical string:"
	},
	chasmTrapAnalyzer: {
		title: "Chasm trap",
		description1: "This worksheet may involve a ",
		description2chasmTrap: "chasm trap",
		description2chasmTrapUrl: "https://www.thoughtspot.com/blog/what-bleep-chasm-trap",
		description3: " depending on the query being executed. A chasm trap occurs when two 'Many to One' joins converge on a single table and the query includes measures from both the 'Many' ends of the joins. A chasm trap typically surfaces up as multiple rows or as over counting.",
		learnMore1: "Learn more",
		learnMore2: " about chasm traps.",
		help: "Learn more about chasm traps."
	},
	Results: "Results"
};
var screenshot = {
	tableTooWide: "This table is too wide to display properly, try using the ThoughtSpot web app"
};
var permission = {
	requestSavedAnswerAccess: "Please request permission to view this answer",
	requestUnderlyingDataAccess: "To perform this action please request access to data sources used to build this answer.",
	readonlyAccess: "To perform this action please request edit access.",
	aggrWorksheetSharingDisabled: "Please share the worksheet from data tab."
};
var vizContextMenu = {
	excludeValue: "Exclude \"{1}\"",
	includeValue: "Only include \"{1}\"",
	excludeValues: "Exclude selected values",
	includeValues: "Only include selected values",
	excludePoint: "Exclude this point",
	includePoint: "Only include selected point",
	disabledHelp: {
		requiresUnderlyingAccess: "This operation requires underlying data access",
		noMeasureDrillDown: "You should have a measure column in your query to drill down",
		noMeasureUnderlyingData: "You should have a measure column in your query to see underlying data",
		growthMeasureUnderlyingData: "Showing underlying data of a point involving a growth column is not supported",
		growthMeasureDrillDown: "Drilling down a point involving a growth column is not supported",
		dateColumn: "Exclusion on query involving bucketed date column is not supported",
		allFormula: "Show underlying data is not supported when all columns are formula columns",
		disabledExcludeInTable: "Please select a single attribute cell to exclude",
		disabledExcludeInChart: "Excluding a chart point is supported only when one attribute column is used",
		disabledInclude: "Please select one or more attributes in a single row to filter",
		underlyingDataMultipleRow: "Select one or more cells in a single row to show underlying data",
		drillDownMultipleRows: "Select one or more cells in a single row to drill down",
		noSageClient: "Click Edit to open this answer and enable this action"
	}
};
var expirationButton = {
	TIME_UNTIL_EXPIRES: "Expires in {1}d {2}h {3}min.",
	VIEW_HAS_EXPIRED: "View has expired.",
	insight: {
		toolTip: "Save insight under action menu to disable expiration."
	},
	SAVE: "Do not expire",
	SAVED: "Saved. Insight will not expire."
};
var dataViz = {
	headline: {
		AGGREGATED_HEADLINE_TITLE: "{1} of {2}",
		rangeSummary: "{minValue} - {maxValue}"
	},
	CORRUPT_VIZ: "The underlying data sources have been deleted. No data to display.",
	FAILED_DATA_LOAD: "Failed to load data."
};
var sage$1 = {
	ASSISTANT_CHANGE_ERROR: "EDIT",
	ASSISTANT_CHANGE_SCOPE: "CHANGE",
	ASSISTANT_CONFIRM: "CONFIRM",
	AMBIGUOUS_ERROR: "There are multiple matches for your phrase \"{1}\". We chose the column \"{2}\" from {3}.",
	AMBIGUOUS_ERROR_DEFAULT: "There were multiple matches for your phrase \"{1}\". We picked the first suggestion for you."
};
var disable_rls = "Disable row level security for worksheet";
var preferences = {
	a3: {
		title: "Update my SpotIQ preferences",
		rememberExcludeSettings: "Also exclude from all my future analysis",
		emailOnSuccess: "Email me analysis notification on success",
		emailOnFailure: "Email me analysis notification on failure",
		emailAddAttachment: "Email me analysis pinboard as attachment",
		excludeNull: "Exclude null values from my analysis",
		excludeNullTooltip: "Exclude null values from my analysis",
		excludeNullFromThisAnalysis: "Exclude null values from current analysis",
		excludeZeroMeasure: "Exclude zero measure values from my analysis",
		excludeZeroMeasureTooltip: "Exclude zero measure values from my analysis",
		excludeZeroMeasureFromThisAnalysis: "Exclude zero measure values from current analysis",
		autotuneDateBoundary: "Auto-tune date boundaries for my analysis",
		autotuneDateBoundaryTooltip: "Auto-tune date boundaries for my analysis",
		autotuneDateBoundaryFromThisAnalysis: "Auto-tune date boundaries for current analysis"
	}
};
var replay = {
	explainer: {
		CHOOSE_SOURCES: "By choosing a source, you refine your search to the data relevant to you.",
		LEFT_PANEL: "Open the left panel to browse all the fields available to search.",
		SAGE_SUGGESTIONS: "These are search suggestions. A lot of smarts go into these, and they get better over time. They are your best friend while building a search.",
		CHART_TYPES: "ThoughtSpot automatically picks a chart type based on your search. You can pick your own chart type here.",
		TABLE_VIEW: "...or you can see the raw data for this search.",
		CHART_CONFIG: "ThoughtSpot automatically configures a chart for you. You can configure it yourself here.",
		CHART_STYLE: "You can also change chart colors, labels, and other styling options here.",
		PINNING: "A Pinboard is where you keep collections of charts. You can pin your chart to a pinboard or even create a new pinboard here.",
		SAGE_BAR_DONE: "All done! Now try your own search."
	}
};
var colorPicker = {
	hexCodePlaceholder: "Hex code"
};
var tokenType = {
	TYPE: "Type",
	MEASURE: "Measure",
	ATTRIBUTE: "Attribute",
	FILTER: "Filter",
	KEYWORD: "Keyword",
	OPERATOR: "Operator",
	SUBSTRING_VALUE: "Substring value",
	POSITIVE_INT: "Number",
	PREFIX_VALUE: "Prefix",
	SUFFIX_VALUE: "Suffix",
	CONSTANT: "Constant",
	CALENDAR: "Calendar"
};
var sageAssistantItem = {
	PAGINATION: "(1 of {1})"
};
var titleDescriptionDialog = {
	TITLE: "Edit title and description"
};
var titleDescriptionWidget = {
	READ_ONLY: "Ask for edit privilege"
};
var sageTokenType = {
	FORMULA: "{1} (formula)"
};
var sageInfoCard = {
	TITLE: "Query details"
};
var a3Analysis = {
	TITLE: "Analysis details",
	queryType: "query",
	titleType: "title"
};
var emptyLearn = {
	MESSAGE: "Any visualizations added here by an admin can be replayed to learn how it was created."
};
var loginGfx = {
	CAPTION_NAME_1: "Armani King",
	CAPTION_TITLE_1: "Analyst",
	CAPTION_NAME_2: "Andrew Wagner",
	CAPTION_TITLE_2: "Product manager",
	CAPTION_NAME_3: "Kelly Richards",
	CAPTION_TITLE_3: "Product manager",
	CAPTION_NAME_4: "Amanda Niland",
	CAPTION_TITLE_4: "Senior analyst"
};
var HOUR_OF_DAY = "H{1}";
var DAY_OF_PERIOD = "D{1}";
var WEEK_OF_PERIOD = "W{1}";
var MONTH_OF_PERIOD = "M{1}";
var QUARTER_OF_YEAR = "Q{1}";
var pinboardViz = {
	FILTER_KEYWORD: "Filters:",
	EMPTY_FILTER_VALUE: ""
};
var cardTray = {
	SHOW_MORE: "Load more",
	SHOW_LESS: "Show less",
	EMPTY: "No items found. Start exploring!",
	ERROR: "Oops! Looks like an error. Try refreshing."
};
var feedProperties = {
	ASKED: "asked",
	CREATED: "created",
	EDITED: "edited",
	IMPORTED: "imported",
	savedAnswer: {
		createdMessage: "asked a question",
		editedMessage: "edited a question"
	},
	pinboard: {
		createdMessage: "created a pinboard",
		editedMessage: "edited a pinboard"
	},
	worksheet: {
		createdMessage: "created a worksheet",
		editedMessage: "edited a worksheet"
	},
	importedData: {
		createdMessage: "imported some data",
		editedMessage: "edited imported data"
	}
};
var FOR = "for";
var SELECT_ALL_SOURCES = "Select all sources";
var SHOW_MORE = "Show More ...";
var ALL_SOURCES = "All Sources";
var CLASSIC_SEARCH = "Switch to Search +";
var N_SOURCES = "{numSources} sources";
var pinboardCard = {
	OVERFLOW: "+{1}",
	exploreButtonText: "Explore"
};
var cardType = {
	Viz: "Visualization",
	Pinboard: "Pinboard",
	SpotIQPinboard: "SpotIQ Pinboard",
	Answer: "Answer",
	Activity: "Activity",
	DataScope: "Data source",
	SpotiqAnomaly: "SpotIQ Anomaly",
	SpotiqTrend: "SpotIQ Trend",
	SpotiqCorrelation: "SpotIQ Correlation",
	SpotiqFollow: "SpotIQ Follow"
};
var MY_PROFILE = "My Profile";
var helpCard = {
	confirm: "Got it",
	trending: "Check out all-time popular or recently trending answers and pinboards.",
	recentlyViewed: "For quick access, jump to any of the last few answers and pinboards you viewed.",
	follow: "Answers you follow will show up here.",
	favorite: "Answer and Pinboards you favorite will show up here.",
	activity: "Browse what other people in your groups are creating and editing."
};
var callouts = {
	toggleToSearchIq: {
		title: "SearchIQ understands your questions in plain English.",
		positiveButton: "Try now",
		negativeButton: "Later",
		subtext: "Please note that ThoughtSpot collects certain data in connection with your use of SearchIQ in order to improve the functionality of the software. Please review our <a class='learn-more-link' target='_blank' href='https://docs.thoughtspot.com/{releaseVersion}/end-user/search/about-searchiq.html'>documentation</a> for more details, or to learn more."
	},
	refinementsMappedToken: {
		title: "This is how we interpreted \"{nlText}\". You can change it here."
	},
	askExpert: {
		title: "If you are having trouble, you can request help with your search."
	}
};
var helpPopover = {
	enliteRefine: "Here is an explanation of how we understood your query.<br><br>You may click on these terms to alter their meaning.",
	enliteRefineConfirm: "Got it"
};
var enliteSearchPlacholder = "Try \"{query}\"";
var translation = "That means \"Good {1}\" in {2}.";
var enlite = {
	ribbon: {
		tab1: {
			text: "Interpretation"
		},
		tab2: {
			text: "Details"
		}
	},
	refinements: {
		stalenessWarning: "Since you made changes after your initial search, this interpretation is no longer relevant."
	},
	maf: {
		placeholder: "No query details are available."
	},
	cannotSwitch: "Cannot switch to SearchIQ",
	queryContainsMultipleSources: "Your query contains multiple data sources, which is not yet supported by Search IQ.",
	worksheetEnablement: {
		tips: {
			title: "Optimize this data source for SearchIQ",
			subtitle: "This quick process helps you prepare your data for use with SearchIQ. Steps 1 and 3 are required and Step 2 is strongly recommended.",
			header1: "Step 1. Do the following in the 'Columns' view under 'Data' for this data source:",
			body1: "- Select columns that should be SearchIQ Enabled. You can currently select up to {numCols} columns including at most {numDateCols} date column.<br>- Ensure these column names have at most 3 words and are named appropriately for business users.<br>- Avoid indexing 'Descriptive' columns - i.e. columns whose values contain more than 7 words and/or contain low information words like conjunctions & prepositions (e.g. 'and', 'or', 'of', etc).<br>- For any selected Formula columns with categorical values, set Indexing Type to PREFIX_AND_SUBSTRING.<br>- Set the Entity Category for these columns.<br>- Add Synonyms for these column names.",
			header2: "Step 2. Train 50 questions that users may ask",
			body2: "- Perform at least 50 natural language searches and teach the system relevant mappings.<br>- Use the 'Looks Good' button below the chart to help train SearchIQ for working queries.<br>- Use simple and short queries. For best results, queries should only contain exact column names and their synonyms, exact values from columns, search keywords and commonly used English words (e.g. 'and', 'of', 'what', 'who', 'the', etc).",
			link: "<a class='link' target='_blank' href='https://docs.thoughtspot.com/{releaseVersion}/end-user/search/searchiq-optimize.html'>Learn more</a>"
		},
		toggle: {
			header: "Step 3. Mark this source as optimized for SearchIQ",
			buttonText: "SearchIQ Optimized",
			unablePopup: {
				title: "Could not update",
				body: "You cannot mark a data source as SearchIQ Optimized without selecting columns as SearchIQ Enabled in the data explorer view. Please try again after making the selection. You can select up to {numCols} columns including at most {numDateCols} date column for use by SearchIQ."
			}
		},
		help: {
			title: "SearchIQ help",
			link1: "<a class='link' target='_blank' href='https://docs.thoughtspot.com/{releaseVersion}/end-user/search/about-searchiq.html'>What is SearchIQ?</a>",
			link2: "<a class='link' target='_blank' href='https://docs.thoughtspot.com/{releaseVersion}/end-user/search/searchiq-optimize.html'>Why should I optimize for SearchIQ?</a>"
		},
		answerPageWarning: "This source is not optimized for SearchIQ. Please contact {ownerName} to get it optimized.",
		answerPageWarningLink: "Learn more"
	}
};
var tokenMapper = {
	SLIDER_EXPLAIN: "Use the sliders to select word(s) to teach me",
	CUSTOM_TEXT_EXPLAIN: "Please type the text you want to map",
	TERM_EXPLAIN: "Type what <b>\"{term}\"</b> means below",
	WE_WILL_MAP: "When using this data source, <b>'{key}'</b> → <b>'{value}'</b>",
	TITLE: "Teach me your language",
	IGNORED_WORDS: "Ignored words"
};
var maf = {
	growthOf: "Growth of {measureColName}",
	prefixTexts: {
		attribute: "by",
		filter: "for",
		topN: "and then picked"
	},
	helpText: "This is how we computed your search. Any changes you made after the initial search will show up here too."
};
var objectCard = {
	authorNamePopover: "This {1} was created by {2}.",
	vizCountPopover: "This {1} contains {2} Answers.",
	viewsCountPopover: "This {1} has been viewed {2} times."
};
var enliteRefine = {
	disambiguationExplainer: "Please click on the dropdown to select a different one.",
	disambiguationExplainerTitle: "We're less certain about this match",
	unmatchedEntityTitle: "This might be important",
	unmatchedEntityText: "You may click on this to specify a meaning.",
	disambigTitle: "We made a few assumptions for your question.",
	title: "Here's how we interpreted your question.",
	acceptAll: "Accept all",
	define: "Define",
	valueInColumn: "<span class=value>{value}</span> <i>in</i> <span class=column>{columnName}</span>",
	inColumn: "<i>in</i> {columnName}",
	skipToken: "Ignore",
	dateBucket: "{column} <span class='date-bucket-name'>{bucket}</span>",
	other: "Other",
	CLICK_TO_DEFINE: "Click to define"
};
var enliteMappingFile = {
	Download_File_Title: "Download the mapping file",
	Download_File_Desc: "Click on the button to download the mapping file",
	Update_File_Desc: "Change the weights of the existing mappings or delete them.",
	Upload_File_Title: "Upload the Mapping file"
};
var DAYS_COUNT = "{1} days";
var WEEKS_COUNT = {
	SINGULAR: "{1} week",
	PLURAL: "{1} weeks"
};
var customREditorMenuItems = {
	load: {
		label: "Load"
	},
	saveas: {
		label: "Save As"
	},
	overwrite: {
		label: "Overwrite"
	},
	share: {
		label: "Share"
	}
};
var CUSTOM_R_BINDINGS_MESSAGE = "Bindings between columns and variable names in R. Ordering of these bindings can be changed by clicking the up and down arrows.";
var rTemplate = {
	OVERWRITE_ALERT: "Really overwrite template \"{template}\"?",
	systemTemplate: {
		LOGISTIC_REGRESSION: "Binomial Logistic Regression",
		K_MEANS_PNG: "K-Means Clustering Plot",
		K_MEANS_CSV: "K-Means Clustering Table",
		TS_OUTLIER: "Time Series Outlier Detection",
		TS_FORECAST: "Time Series Forecast"
	},
	EMPTY_DESCRIPTION: "No description"
};
var editPanel = {
	titles: {
		REFINEMENTS: "Refine",
		COLUMNS: "Data",
		CHART_SELECTOR: "Chart",
		VIZ_EDITOR: "Customize",
		VIZ_EDITOR_AXIS: "Edit Axis",
		VIZ_EDITOR_MEASURE: "Edit Measure",
		VIZ_STYLE_EDITOR: "Style",
		CUSTOM_R_EDITOR: "Analyze",
		SPOTIQ_ANALYZER: "SpotIQ Analyze",
		INFO_CARD: "Query details"
	},
	NOT_AVAILABLE_IN_TABLE: "Not available in data view",
	LIKE_TOOLTIP: "The result was good for my question.",
	DISLIKE_TOOLTIP: "My question was not answered."
};
var relatedAnswersAndPinboards = "Related SpotIQ, Answers and Pinboards";
var performanceDebugInfo = {
	reportTitle: "How would you like to report this debug information?",
	download: "Download Report",
	email: "Email Report",
	startCapture: "Start Capturing",
	stopCapture: "Stop Capturing"
};
var yesterday = "yesterday";
var today = "Today";
var weeksOfMonth = {
	first: "first",
	second: "second",
	third: "third",
	fourth: "fourth",
	last: "last"
};
var invalidColor = "Invalid Color";
var hexColor = "Hex color #";
var searchTip = {
	PRESS: "Press",
	TO_UPDATE_RESULTS: "to update results"
};
var bulkFilter = {
	parsedNoData: "Invalid filter values were provided.",
	parserError: "Parser error(s): {1}",
	unmatchedValues: "Umatched values: {1}"
};
var errorSaving = "Error in saving";
var worksheetFilter = {
	TRUE: "true",
	FALSE: "false"
};
var slideshow = {
	paginationText: "Slide {activeSlideIndex}",
	insightCount: "{activeInsightIndex}/{totalInsights} Insights"
};
var ADD_CONNECTION = "Add Connection";
var Set_Credentials = "Set Credentials";
var New_Connection = "New Connection";
var Edit_Connection = "Edit Connection";
var Add_Tables = "Add Tables";
var embrace = {
	table: {
		SAMPLE_ROW: "Sample row",
		Type: "Type"
	},
	connectionType: "Connection Type",
	setCredentials: "Set Credentials",
	selectTables: "Select Tables",
	createConnection: "Create Connection",
	selected: "Selected",
	chooseSource: "Please choose a source.",
	sync: {
		title: "Sync",
		desc: "Storing locally can help improve performance",
		REMOVE_SCHEDULE: "Remove Schedule",
		history: {
			title: "History",
			desc: "Record for the last 10 Sync"
		},
		popup: {
			title: "Sync table"
		},
		REMOVE_SCHEDULE_SUCCESS: "Schedule removed successfully.",
		REMOVE_SCHEDULE_ERROR: "Unable to remove schedule.",
		ADD_SCHEDULE_SUCCESS: "Schedule added successfully.",
		ADD_SCHEDULE_ERROR: "Unable add schedule.",
		UPDATE_SCHEDULE_SUCCESS: "Schedule updated successfully.",
		UPDATE_SCHEDULE_ERROR: "Unable to update schedule.",
		SCHEDULE_UNSYNC_SUCCESS: "Successfully scheduled unsync operation.",
		SCHEDULE_UNSYNC_ERROR: "Unable to schedule unsync operation.",
		SYNC_NOW_SUCCESS: "Successfully added job to sync.",
		SYNC_NOW_ERROR: "Failed to sync the job.",
		SYNC_HISTORY_ERROR: "Error fetching sync history data."
	},
	update: {
		msg: "Successfully updated connection"
	},
	schedule: {
		popup: {
			title: "Sync table schedule"
		}
	},
	unsync: {
		popup: {
			title: "Unsync Table",
			confirmText: "The data will be removed from the internal database. This action can’t be undone. Do you want to continue?"
		}
	},
	conditionalSync: {
		popup: {
			syncModeTitle: "Select Sync Mode",
			syncModeDesc: "Sync mode will decide whether to replace current data or add to it",
			append: "Append",
			overwrite: "Overwrite",
			addConditionTitle: "Add Condition (Optional)",
			addConditionDesc: "You can add conditions to be included in the sync query",
			showAdvancedSettings: "Show Advanced settings",
			primaryKey: "Primary Key (Optional)",
			shardingKey: "Sharding Key (Optional)",
			numberOfShards: "No. of Shards (Optional)"
		}
	},
	remapping: "Remapping",
	remappingFile: {
		Download_File_Title: "Download the mapping file",
		Download_File_Desc: "Click on the button to download the mapping file",
		Update_File_Desc: "Change the weights of the existing mappings or delete them.",
		Upload_File_Title: "Upload the Mapping file"
	},
	panel: {
		SOURCE: "Source",
		DETAILS: "Details",
		QUERY_TIME: "Query time",
		LIVE: "LIVE"
	}
};
var preview = "preview";
var synced = "Synced";
var linked = "Linked";
var unsync = "Unsync";
var syncNow = "Sync Now";
var schedule = "Schedule";
var updateSchedule = "Update Schedule";
var syncFail = "Sync Fail";
var learnWhy = "Learn Why";
var syncCompleted = "Sync Completed";
var syncFailed = "Sync Failed";
var syncing = "Syncing";
var unsynced = "Unsynced";
var unsyncFailed = "Unsync Failed";
var unsyncing = "Unsyncing";
var askExpert = {
	PROMPT_LOOKS_GOOD: "Looks Good",
	PROMPT_TEXT: "Not what you expected?",
	PROMPT_LINK: "Ask an expert",
	FORM_HEADER: "Ask an expert",
	FORM_DESCRIPTION_1: "{expertName} will get right back to you.",
	FORM_DESCRIPTION_2: "{expertName1} or {expertName2} will get right back to you.",
	FORM_DESCRIPTION_3: "{expertName1}, {expertName2} or {expertName3} will get right back to you.",
	FORM_DESCRIPTION_OVER_3: "{expertName1}, {expertName2}, {expertName3} or one of the {numAdditionalExperts} other experts will get right back to you.",
	VIEW_ALL_EXPERTS: "View all experts",
	EXPERTS_LIST_DIALOG_TITLE: "Experts for this data",
	SUCCESS_HEADER: "Thank you",
	SUCCESS_MESSAGE: "An expert will get back to you soon.",
	SUCCESS_MESSAGE_SINGLE_EXPERT: "{expertName} will get back to you soon.",
	form: {
		QUERY_HEADER: "What you searched for",
		QUESTION_1: "Can you explain in a little more detail?"
	},
	expertRequest: {
		EXPERT_RESOLVED: "Resolved request - {answerName}",
		EXPERT_UNRESOLVED: "Resolve this request <a class='link bk-learn-more-link' target='_blank' href='https://docs.thoughtspot.com/{releaseVersion}/end-user/search/answer-expert-question.html'>Learn more</a>",
		REQUESTER_MODE: "Your request for the expert ({status})",
		READ_ONLY_LABEL: "What the user was looking for"
	},
	markAnswered: {
		TITLE: "Mark as resolved",
		COPY_MESSAGE: "Share this answer with {authorName} before marking it as resolved",
		CONFIRM: "Mark as resolved",
		CANCEL: "Later",
		COPY_LINK: "Copy link"
	},
	addExperts: {
		LABEL: "Manage Experts",
		DESCRIPTION: "Add/remove experts who can help other people working with this data source"
	}
};
var externalQueryLoadingText = "Retrieving data from external source, Will take longer.";
var MIXPANEL_PROPS_LIMIT_ERROR_MESSAGE = "Breached Mixpanel Checks, Count Props > {mixpanelNumPropsLimit}. Event: {name}. ";
var MIXPANEL_STRING_PROP_SIZE_LIMIT_ERROR_MESSAGE = "Breached Mixpanel Checks, Prop Size > {mixpanelPropSizeLimit}. Event: {name} Prop: {key}. ";
var MIXPANEL_ARRAY_PROP_SIZE_LIMIT_ERROR_MESSAGE = "Breached Mixpanel Checks, Arary Prop Size > {mixpanelPropSizeLimit}. Event: {name} Prop: {key} Index: {index}. ";
var cake = {
	dropdown: {
		icon: {
			history: "History",
			measure: "Measure",
			attribute: "Attribute",
			filter: "Filter",
			date: "Date",
			folded: "Folded - click to expand"
		}
	}
};
var LOCAL = "Local";
var SNOWFLAKE = "Snowflake";
var THOUGHTSPOT = "ThoughtSpot";
var results = "Results";
var toggle_msg = "Show results from {source}.";
var toggle_support_msg = "Showing {sub} from {source}. ";
var expandedPinboardCard = {
	resetButtonText: "Reset"
};
var incrementalSearch = {
	explore: {
		title: "Explore this data",
		filters: {
			title: "Try these filters"
		},
		searchBoxHintText: "Search filters",
		actions: {
			title: "Try these actions"
		},
		groupBy: {
			breakBy: "Break by"
		},
		aggregation: {
			compareTo: "Compare to"
		},
		versus: {
			compare: "Compare",
			vs: "vs"
		},
		replaceColumn: {
			change: "Change",
			to: "to"
		},
		unsupportedSuggestionText: "(unsupported suggestion)",
		noSuggestionsText: "No suggestions found",
		showMoreButtonText: "Show more",
		editOriginalDialog: {
			title: "Edit answer",
			message: "Your modifications will be lost on the edit page. Do you want to edit the original answer?",
			confirmButton: "Edit original"
		}
	}
};
var pinboardExport = {
	layoutTypeLabel: {
		pinboard: "Pinboard",
		visualizations: "Visualizations"
	},
	orientationRadioLabel: {
		landscape: "Landscape",
		portrait: "Portrait"
	},
	sectionHeading: {
		layout: "Layout",
		format: "Format",
		view: "View"
	},
	dialogTitle: "Export pinboard",
	confirmButtonText: "Export"
};
var expertsList = {
	PLUS_ONE: "{expertName} + 1 other",
	PLUS_MULTIPLE: "{expertName} + {additional} others"
};
var expertRequestsList = {
	RESOLVED: "Resolved",
	UNRESOLVED: "Unresolved",
	DELETE_TITLE: "Delete request",
	DELETE_SINGLE: "Are you sure you want to delete \"{requestName}\"? This will also delete any answer associated with this request.",
	DELETE_MULTIPLE: "Are you sure you want to delete these requests? This will also delete any answers associated with them."
};
var showAll = "Show All";
var avatar = {
	singleError: "User",
	listError: "{numberOfUsers} user(s)"
};
var pinboardSchedule = {
	pdfConfig: {
		label: "Configure Layout Options",
		dialogTitle: "Pinboard Layout"
	}
};
var onboardingEmails = {
	welcomeEmail: {
		welcome: "Welcome <span id='email-welcome-user-name'>{recipientName}</span>,",
		TSIntroLine1: "Getting insights from your data should be so easy, it's almost Google-like. And now it can be, with ThoughtSpot.",
		TSIntroLine2: "ThoughtSpot lets you effortlessly search for data Answers, or get automatic Insights with one click. Even better, more you use it, smarter it gets.",
		usernameMessage: "Your ThoughtSpot username is:",
		otherActionsMessage: "Or you can:",
		learnMore: "Learn more",
		emailAdmin: "Email your admin",
		buttonGetStarted: "Get started now"
	},
	subscribedEmail: {
		welcome: "Hi <span id='email-welcome-user-name'>{recipientName}</span>,",
		pinboardNameAndMessage1: "The latest on your pinboard",
		pinboardNameAndMessage2: "is now available."
	},
	helpEmail1: "For help,",
	helpEmail2: "email",
	helpEmail3: "your administrator.",
	unsubscribeEmails1: "Unsubscribe",
	unsubscribeEmails2: "from emails like these.",
	buttonViewPinboard: "View pinboard",
	sharedEmail: {
		welcome: "Hi <span id='email-welcome-user-name'>{recipientName}</span>,",
		message1: "shared a pinboard,",
		message2: "with you."
	}
};
var browseFile = "Browse File";
var removeAndUploadNew = "Remove & Upload New File";
var ssl = {
	mapping: {
		Organization: "Organization",
		OrganizationUnit: "Organization Unit",
		CompanyName: "Company Name",
		State: "State",
		Country: "Country",
		Location: "Location",
		KeyType: "Key Type",
		signing_algorithm: "Signing Algorithm",
		ExpiryDate: "Expiry Date"
	},
	heading: "SSL",
	removeConfirmationDescription: "Do you really want to delete the current set of SSL certificates?",
	SslStatus: {
		Enable: "Enable",
		Disable: "Disable"
	},
	form: {
		heading: "Configure SSL",
		sslStatus: "SSL Status",
		rsaAlgorithm: "Choose RSA Algorithm",
		tlsVersion: "Choose Minimum TLS Version",
		privateKey: "Private Key",
		publicCertificate: "SSL certificate bundle"
	},
	Content: "Enable secure connection by using your company’s own SSL certificate for data transfer to and from ThoughtSpot.",
	helpLinkText: "Learn More",
	configured: {
		heading: "Installed Certificate Details"
	}
};
var removeConfirmationText = "Are you Sure?";
var status = {
	Enabled: "Enabled",
	Disabled: "Disabled",
	Configured: "Configured"
};
var error = {
	ssl: {
		rsaAlgorithm: "Please choose RSA Algorithm",
		tlsVersion: "Please choose TLS Version",
		privateKey: "Please select a private key",
		publicCertificate: "Please select a SSL certificate bundle",
		uploadBoth: "Please update both private key or SSL certificate bundle",
		fileSize: "File Size is larger then 1 Mb"
	},
	smtp: {
		relayHost: "Please Specify Relay Host",
		port: "Please Specify Port",
		isHostReachable: "Please choose if host is reachable",
		fromEmail: "Please Specify Email",
		fromName: "Please Specify name",
		username: "Please Enter Username",
		password: "Please Enter Password",
		noneSelectedSMTPAuth: "Please choose SMTP Authenication",
		noneSelectedHostReachable: "Please choose if Host is reachable"
	},
	saml: {
		ipOfServer: "Please Enter ThoughtSpot Service address",
		uniqueServiceName: "Please Enter Unique Service Name",
		skewTime: "Please Enter Skew Time",
		port: "Please Enter Port",
		protocol: "Please Enter Protocol",
		idpMetaDataXmlFile: "Please choose MetaData File",
		noneSelectedAddSamlUser: "Please choose Automatically add SAML users to ThoughtSpot upon first authentication"
	},
	reverseSsh: {
		noneSelectedTunnel: "Please whitelist tunnelrelay.thoughtspot.com before enabling SSH tunnel.",
		noSelectedTunnel: "Please confirm if you have whitelisted tunnelrelay.thoughtspot.com"
	},
	internalAuth: {
		noneSelectedInternalAuth: "Please choose Internal Auth status",
		adSamlNotConfigured: "Authentication: Internal can not be disabled until Active Directory or SAML is configured for authentication purpose"
	},
	ad: {
		url: "Please Enter URL",
		domain: "Please Enter Domain",
		searchBase: "Please Enter Search Base",
		sslCertificate: "Please Choose SSL Certificate",
		certificateAlias: "Please Enter Certificate Alias",
		noneSelectedSslRequired: "Please choose SSL Required",
		noneSelectedAddAdUser: "Please choose Automatically add AD users to ThoughtSpot upon first authentication"
	},
	nas: {
		mountType: "Please enter mount type",
		serverAddress: "Please Enter Server Address",
		pathOnServer: "Please Enter Path On Server",
		localMountPoint: "Please Enter Local Mount Point",
		mountParameters: "Please Enter Mount Parameters",
		noneSelectedMountTypeRequired: "Please Select Mount Type"
	},
	snapshot: {
		snapshotName: "Please Enter Snapshot Name",
		snapshotTimeToLive: "Please Enter Time to Live",
		snapshotPolicyStatus: "Please Choose Snapshot Policy Status"
	},
	backup: {
		backupName: "Please Enter BackUp Name",
		backupPolicyName: "Please Enter BackUp Policy Name",
		mode: "Please Choose Mode",
		directoryName: "Please Enter Directory Name",
		nasPath: "Please Select NAS Path",
		snapshot: "Please Choose Snapshot",
		periodicPolicy: "Please Enter Periodic Policy",
		retentionPolicy: "Please Enter Retention Policy",
		noneSelectedLocation: "Please choose location",
		noneSelectedBackupStyle: "Please Choose Backup Style"
	},
	validation: {
		"default": "Something went wrong",
		ipAddress: "Please Enter valid IP Address",
		port: "Please Enter valid Port",
		fromName: "Please Enter valid From Name",
		email: "Please Enter valid Email",
		ldapAddress: "Please Enter valid LDAP Address",
		domainName: "Please Enter valid Domain Name",
		serverAddress: "Please Enter valid Server Address",
		protocol: "Please Enter valid Protocol"
	},
	retry: "Retry",
	learnMore: "Details"
};
var smtp = {
	mapping: {
		RelayHost: "Relay Host",
		Port: "Port",
		IsHostReachable: "Is Host Reachable ?",
		FromEmail: "From Email",
		FromName: "From Name",
		SMTPAuthRequired: "SMTP Auth Required",
		UserName: "User Name",
		Password: "Password"
	},
	heading: "SMTP",
	menuItem: {
		SendTestMail: "Send Test Mail"
	},
	removeConfirmationDescription: "Do you really want to delete SMTP Configuration ?",
	configureHeading: "Configure SMTP",
	content: "Set up SMTP to send critical email notifications to ThoughtSpot Support.",
	helpLinkText: "Get help on SMTP configuration",
	configured: {
		heading: "SMTP Configuration Details"
	},
	form: {
		SMTPAuthenticationRequired: "SMTP Authentication Required"
	}
};
var saml = {
	mapping: {
		IPofServer: "ThoughtSpot Service address",
		UniqueServiceName: "Unique Service Name",
		SkewTimeinSeconds: "Skew Time in Seconds",
		Port: "Port",
		Protocol: "Protocol",
		MetaData: " Spring_saml_metadata.xml",
		UserAddedInThoughtSpot: "User Added In ThoughtSpot"
	},
	heading: "Authentication: SAML",
	removeConfirmationDescription: "Do you really want to delete SAML Configuration?",
	configureHeading: "Configure SAML",
	content: "Authenticate users on ThoughtSpot using SAML setup.",
	helpLinkText: "Get help on SAML configuration",
	configured: {
		heading: "Authentication: SAML Configuration Details"
	},
	form: {
		content: "Use this procedure to set up SAML on ThoughtSpot for user authentication.",
		IDPMetadataXMLFile: "IDP Metadata XML File",
		AutoAddSAMLUserinThoughtSpot: "Automatically add SAML users to ThoughtSpot upon first authentication",
		helptext: {
			IPofServer: "Domain name preferred, else use the publicly visible IP address of front-end for TS cluster",
			UniqueServiceName: "Unique service id will be used as IDP to identify client",
			SkewTimeinSeconds: "Suggested Skew time is 3600 seconds"
		}
	}
};
var reverseSsh = {
	heading: "Reverse SSH Tunnel",
	configureHeading: "Configure Reverse SSH Tunnel",
	content: "Enable secure SSH access to grant ThoughtSpot Support to troubleshoot your cluster.",
	helpLinkText: "Get help on Reverse SSH Tunnel",
	configured: {
		heading: "Reverse SSH Tunnel Configuration Details"
	},
	form: {
		content: "A relay host for SMTP traffic routes the alert and notification emails coming from ThoughtSpot through an SMTP email server.",
		tunnelRelayWhitelisted: "Have you whitelisted tunnelrelay.thoughtspot.com ?",
		reverseSshStatus: "Reverse SSH Tunnel"
	}
};
var internalAuth = {
	heading: "Authentication: Internal",
	configureHeading: "Configure Authentication: Internal",
	removeConfirmationDescription: "Do you really want to delete Internal Authentication Configuration?",
	status: "Internal Authentication Status",
	content: "Authenticate users using ThoughtSpot Internal Auth who are not available in the AD/SSO system.",
	helpLinkText: "Get help on ThoughtSpot Internal Authentication",
	configured: {
		heading: "Authenication: Internal Configuration"
	},
	form: {
		content: "Users not available in Active Directory / Single Sign-On service can be authenticated using ThoughtSpot Internal Autentication mechanism."
	}
};
var ad = {
	mapping: {
		URL: "URL",
		Domain: "Domain name preferred",
		SearchBase: "Search Base",
		AutoAddADUserinThoughtSpot: "Automatically add Active directory users to ThoughtSpot upon first successful authentication",
		SSLRequired: "SSL Required",
		SSLCertificate: "SSL Certificate",
		CertificateAlias: "Certificate Alias"
	},
	heading: "Authentication: Active Directory",
	removeConfirmationDescription: "Do you really want to delete the current Active Directory Configuration?",
	configureHeading: "Configure AD",
	content: "Authenticate users against your Active Directory",
	helpLinkText: "Get help on Active Directory Configuration",
	configured: {
		heading: "Authentication: Active Directory Configuration"
	},
	form: {
		content: "Use this procedure to set up AD on ThoughtSpot for user authentication."
	},
	test: {
		content: "Connect your active directory by entering your credentials. We don’t store your password. It’s just for the authentication purpose.",
		UserName: "User Name",
		Password: "Password",
		UserNamePlaceholder: "Type your user name",
		PasswordPlaceholder: "Type your password"
	}
};
var nas = {
	addPoint: "Add Mount Point",
	status: {
		configured: "Configured",
		error: "Error",
		inProgress: "Progress"
	},
	header: {
		title: "NAS Mount"
	},
	modal: {
		mountTitle: "Mount Type",
		serverAddress: "Server Address",
		pathOnServer: "Path on Server",
		localMountPoint: "Local Mount Point",
		optionalMountParameters: "Optional Mount Parameters",
		ompDescription: "Other command-line options are available to forward to the command.",
		mountType: {
			nfs: "NFS",
			cifs: "CIFS"
		},
		primaryBtn: "OK",
		secondaryBtn: "Cancel"
	},
	configure: {
		btnLabel: "Configure NAS Mount",
		help: "Get help on NAS File Systems",
		description: "Mount a NAS file system for storing or accessing large files."
	},
	name: "NAS"
};
var snapshot = {
	configure: {
		label: "Configure",
		title: "Configure Snapshot",
		description: "Take a manual and instant snapshot that persists within the cluster.",
		help: "Get help on Snapshot."
	},
	modal: {
		primaryBtn: "Save",
		secondaryBtn: "Cancel",
		snapshotName: {
			title: "Snapshot Name",
			description: "Name of the snapshot"
		},
		timeToLive: {
			title: "Time to Live",
			description: "Number of days after which the snapshot will automatically be deleted"
		}
	},
	title: "Snapshot",
	remove: "Remove",
	name: "SNAPSHOT",
	snapshotStyle: "Snapshot Style",
	snapshotPolicy: {
		modal: {
			btnText: "Configure Snapshot Policy",
			radio: {
				title: "Snapshot Policy"
			},
			period: {
				title: "Period"
			}
		}
	},
	periodicPolicy: "Periodic Policy",
	addRetentionPolicy: "Add Retention Policy"
};
var backup = {
	title: "Backup",
	configure: {
		label: "Configure",
		title: "Configure Backup",
		description: "Take manual and instant backup of your ThoughtSpot cluster.",
		help: "Get help on Backup."
	},
	edit: {
		title: "Edit Backup"
	},
	modal: {
		primaryBtn: "Save",
		backupName: {
			title: "Backup Name",
			subText: "Name of the backup"
		},
		location: {
			title: "Location",
			nas: "NAS",
			local: "Local"
		},
		nasPath: {
			title: "NAS Path",
			placeholder: "Select NAS Path or Create a NAS Mount"
		},
		nasMode: {
			title: "Mode",
			placeholder: "Select Backup Mode",
			full: "Full",
			lightWeight: "Light Weight",
			dataLess: "Dataless"
		},
		storageType: "Storage Type",
		directoryName: {
			title: "Directory Name",
			subText: "The location on the disk to place the backup."
		},
		backupStyle: {
			title: "Backup Style",
			manual: "Manual (One Time)",
			periodic: "Periodic"
		},
		snapshotType: {
			title: "Choose Snapshot",
			placeholder: "Select Snapshot or create a manual snapshot for taking backup"
		},
		retentionPolicy: {
			title: "Retention Policy",
			selectText: "Select Retention Policy"
		},
		periodic: {
			selectText: "Select Periodic Policy"
		},
		policy: {
			selectPlaceholder: "Enter Value",
			unit: {
				min: "Minutes",
				minute: "Minute",
				hr: "Hours",
				days: "Days"
			}
		},
		secondaryBtn: "Cancel"
	},
	backupPolicy: {
		description: "Create a policy to control the type, frequency, retention periods (FIFO), and the output location for a periodic backup."
	},
	id: "Backup ID",
	name: "BACKUP",
	remove: "Remove"
};
var backupPolicy = {
	title: "Backup Policy",
	configure: {
		title: "Configure Backup Policy",
		help: "Get help on Backup Policy."
	},
	modal: {
		backupName: {
			title: "Backup Policy Name"
		}
	},
	withCapacity: "with Capacity",
	name: "BACKUP_POLICY"
};
var configComponent = {
	title: {
		home: "Home",
		settings: "Settings",
		ssl: "SSL",
		internalAuthentication: "Authentication: Internal",
		activeDirectory: "Authentication: Active Directory",
		saml: "Authentication: SAML",
		nasMount: "NAS Mount",
		backup: "Backup",
		backupPolicy: "Backup Policy",
		snapshot: "Snapshot",
		smtp: "SMTP",
		reverseSshTunnel: "Reverse SSH Tunnel",
		blinkAdmin: "Admin"
	}
};
var configStatus = {
	notFound: "Not Found",
	enabled: "Enabled",
	disabled: "Disabled",
	configured: "Configured",
	notConfigured: "Not Configured",
	scheduled: "Scheduled",
	completed: "Completed",
	inProgress: "In Progress",
	error: "Error Occurred",
	status: "Status",
	finished: "Finished"
};
var feed = {
	resultsFound: "{results} results found",
	createNewAnswer: "Create a new Answer",
	objectSearch: {
		failedToFetch: "Failed to fetch search results. Please try again"
	}
};
var feedObjects = {
	AUTHOR_LABEL: "Author"
};
var axisname = {
	concatenator: {
		symbol: " & "
	}
};
var radiant = {
	chipTray: {
		showMoreButtonText: "Show more"
	}
};
var onboardingHeader = "New user onboarding";
var onboardingBody = "At anytime, you can revisit the new user onboarding experience.";
var onboardingButton = "Revisit";
var notifications = "Notifications";
var information = "Information";
var userPreferences = "Preferences";
var addEmailToolTip = "Enter a whitelisted email id.";
var profilePicFileTypeErrorMessage = "Profile pic could not be updated. The uploaded file type is invalid.";
var acceptAnswer = {
	TOAST: "Thanks! This question will be used to train SearchIQ."
};
var searchIQEnabled = {
	WARNING_MESSAGE: "This search query uses columns that are not enabled for SearchIQ. Please do not edit this query. You can create a new query that uses only enabled columns."
};
var upgrade = {
	AvailableUpgrades: "Available Updates",
	confirmation: "Are you sure about updating your cluster with new release? ",
	uptoDate: "You are upto date",
	uptoDateDescription: "We are working hard on new features. We will notify you when new version is available",
	title: "3. Update ThoughtSpot",
	description: "Update your cluster to the new release version. Always perform this under a scheduled maintenance period.",
	btnText: "Update",
	inProgess: {
		status: "Updating"
	},
	error: {
		status: "Update Failed"
	}
};
var download = {
	title: "1. Download Release",
	description: "Download ThoughtSpot release tarball from the ThoughtSpot release server.",
	btnText: "Download",
	inProgess: {
		status: "Downloading",
		description: "Download in progress"
	},
	success: {
		status: "Download Successful",
		description: "As a next step, you can run pre-update followed by update"
	},
	downloaded: "Downloaded",
	error: {
		status: "Download Failed",
		description: "Please fix the error and retry download"
	}
};
var upload = {
	title: "1. Upload Setup File",
	description: "Upload release tarball to Thoughtspot release server",
	btnText: "Upload"
};
var PREUPGRADE = "Pre-Update";
var preUpgrade = {
	started: "Started Pre-Update",
	title: "2. Pre-update checks",
	description: "Run a series of diagnostic tests to ensure the server readiness before the update.",
	content: "Usually takes 15 to 30 mins",
	btnTxt: "Pre-Update",
	inProgess: {
		status: "Pre updating"
	},
	success: {
		status: "Pre-Update Successfully Completed",
		description: "You can now Update."
	},
	error: {
		status: "Pre-Update Failed"
	}
};
var UPGRADE = "Update";
var errorOccured = "Error Occured";
var currentVersion = "Current Version";
var whiteListedDomains = "White listed domains: <br/>";
var uploadSuccessful = "Upload Successful";
var stringsEnUS = {
	LOGIN: LOGIN,
	SIGN_UP: SIGN_UP,
	CONTACT_ADMINISTRATOR: CONTACT_ADMINISTRATOR,
	PASSWORD: PASSWORD,
	SIGN_IN: SIGN_IN,
	Remember_me: Remember_me,
	Page_title: Page_title,
	WARNING: WARNING,
	TEACH: TEACH,
	SEND_WELCOME_EMAIL: SEND_WELCOME_EMAIL,
	ADD_EMAIL_ADDRESS: ADD_EMAIL_ADDRESS,
	SEND_WELCOME_EMAIL_MESSAGE: SEND_WELCOME_EMAIL_MESSAGE,
	ADMIN_RLS_WARNING: ADMIN_RLS_WARNING,
	A3infocard_summary: A3infocard_summary,
	Insights_text: Insights_text,
	No_insights_text: No_insights_text,
	Drills: Drills,
	Drills_performed: Drills_performed,
	algorithm: algorithm,
	Std_dev: Std_dev,
	Mad_text: Mad_text,
	Mean_text: Mean_text,
	Median_text: Median_text,
	Stdev_mean: Stdev_mean,
	Mad_median: Mad_median,
	Classification_text: Classification_text,
	Classification: Classification,
	Shesd: Shesd,
	Anomaly_explanation: Anomaly_explanation,
	NEXT: NEXT,
	PREVIOUS: PREVIOUS,
	GOTO: GOTO,
	ERROR: ERROR,
	ERROR_WHILE_OPENING: ERROR_WHILE_OPENING,
	Linear_regression: Linear_regression,
	Diff_explanation: Diff_explanation,
	Trend_analysis: Trend_analysis,
	Cross_correlation: Cross_correlation,
	Multiplier: Multiplier,
	Score: Score,
	P_value: P_value,
	Decision_tree: Decision_tree,
	Relative_difference: Relative_difference,
	Upload_the_modeling_file: Upload_the_modeling_file,
	Upload_the_security_file: Upload_the_security_file,
	ADD_A_CONDITION: ADD_A_CONDITION,
	MULTI_CONDITIONS_CLARIFICATION: MULTI_CONDITIONS_CLARIFICATION,
	ADD_ANOTHER: ADD_ANOTHER,
	VALUE: VALUE,
	MIN_VAL: MIN_VAL,
	MAX_VAL: MAX_VAL,
	GREATER_THAN: GREATER_THAN,
	LESS_THAN: LESS_THAN,
	GREATER_OF_EQUAL: GREATER_OF_EQUAL,
	LESS_OR_EQUAL: LESS_OR_EQUAL,
	IS_BETWEEN: IS_BETWEEN,
	IS_IN: IS_IN,
	IS_NOT_IN: IS_NOT_IN,
	BULK_INPUT_PLACEHOLDER: BULK_INPUT_PLACEHOLDER,
	FILL_ALL_CONDITIONS: FILL_ALL_CONDITIONS,
	INVALID_NUMBER: INVALID_NUMBER,
	INVALID_BULK_INPUT: INVALID_BULK_INPUT,
	No_runs: No_runs,
	Are_you_sure: Are_you_sure,
	Choose_the_worksheet: Choose_the_worksheet,
	Cancel: Cancel,
	Send: Send,
	Both_passwords_need: Both_passwords_need,
	Emails: Emails,
	SubscribeEmail: SubscribeEmail,
	Subscribe: Subscribe,
	Unsubscribe: Unsubscribe,
	SubscribeDialogTitle: SubscribeDialogTitle,
	SubscribeConfirmDialogTitle: SubscribeConfirmDialogTitle,
	SubscribeConfirmDialogMessage: SubscribeConfirmDialogMessage,
	metadataObjectMenuItems: metadataObjectMenuItems,
	subscriptionToolTip: subscriptionToolTip,
	EditSubscribeDialogBoxMessage: EditSubscribeDialogBoxMessage,
	SubscribeDialogBoxMessage: SubscribeDialogBoxMessage,
	EditSubscribeDialogTitle: EditSubscribeDialogTitle,
	ValidEmailMessage: ValidEmailMessage,
	Results_are_limited: Results_are_limited,
	worksheetColumnSelector: worksheetColumnSelector,
	This_content_will: This_content_will,
	Select_an: Select_an,
	default_select_placeholder: default_select_placeholder,
	select_interval_placeholder: select_interval_placeholder,
	select_hour_placeholder: select_hour_placeholder,
	select_minute_placeholder: select_minute_placeholder,
	select_weekdays_placeholder: select_weekdays_placeholder,
	select_days_placeholder: select_days_placeholder,
	minutes: minutes,
	hours: hours,
	on: on,
	at: at,
	every: every,
	Show_Data: Show_Data,
	Are_you_sure3: Are_you_sure3,
	Did_you2: Did_you2,
	All: All,
	Float_is_a: Float_is_a,
	Color: Color,
	onboarding: onboarding,
	Pinboard_name: Pinboard_name,
	Zoom_options: Zoom_options,
	want_to: want_to,
	Set_the_column: Set_the_column,
	Granularity: Granularity,
	Existing_data: Existing_data,
	Update_my3: Update_my3,
	preferred_locale: preferred_locale,
	You_can_do: You_can_do,
	Update_my2: Update_my2,
	Type: Type,
	rows: rows,
	Javascript_class: Javascript_class,
	ThoughtSpot_Style: ThoughtSpot_Style,
	Update_my: Update_my,
	Add_a_column: Add_a_column,
	Logical_version: Logical_version,
	Upload_your: Upload_your,
	Knowing_your_data: Knowing_your_data,
	Used_when_we2: Used_when_we2,
	No_values: No_values,
	No_matches: No_matches,
	Upload_Picture: Upload_Picture,
	Other_tips: Other_tips,
	clearfix: clearfix,
	is_used: is_used,
	Formulas: Formulas,
	FORMULA: FORMULA,
	No_matched: No_matched,
	Profile: Profile,
	View_Keywords: View_Keywords,
	Add_a: Add_a,
	ADD_DEFINITION: ADD_DEFINITION,
	CHANGE_DEFINITION: CHANGE_DEFINITION,
	Memory_used: Memory_used,
	Done: Done,
	Selected: Selected,
	to: to,
	Updating: Updating,
	In_progress: In_progress,
	I_didnt: I_didnt,
	Download_the2: Download_the2,
	No_sources: No_sources,
	did_you: did_you,
	comments_are: comments_are,
	By_default_all: By_default_all,
	Still_need: Still_need,
	Static: Static,
	Error_in: Error_in,
	Positioning: Positioning,
	incomplete: incomplete,
	Advanced_settings: Advanced_settings,
	Click_on_the: Click_on_the,
	Share_with: Share_with,
	pagination_footer: pagination_footer,
	Did_you: Did_you,
	Conditional_Formatting2: Conditional_Formatting2,
	You_have: You_have,
	Scroll_down_to: Scroll_down_to,
	attribute_description: attribute_description,
	Slack_TeamName: Slack_TeamName,
	Select_All: Select_All,
	Clear_All: Clear_All,
	Users_or: Users_or,
	Yes: Yes,
	Left: Left,
	Text_colors: Text_colors,
	Add_test_prefix: Add_test_prefix,
	Installed_version: Installed_version,
	over_successive: over_successive,
	Text_transformation: Text_transformation,
	While_implementing_the: While_implementing_the,
	Drill_down: Drill_down,
	ApplyAsRuntimeFilter: ApplyAsRuntimeFilter,
	Integrate_Slack: Integrate_Slack,
	Fixed: Fixed,
	only: only,
	Use_unsecured: Use_unsecured,
	Create_a_pinboard: Create_a_pinboard,
	more_columns: more_columns,
	Name2: Name2,
	dib2: dib2,
	more_metrics: more_metrics,
	After_your_file: After_your_file,
	Get_to_know: Get_to_know,
	We_try_to: We_try_to,
	Text_sizing: Text_sizing,
	Name: Name,
	dib: dib,
	Table: Table,
	on_Pinboard: on_Pinboard,
	Float_right: Float_right,
	Absolute: Absolute,
	Data_read: Data_read,
	Clearfix: Clearfix,
	Password: Password,
	Display2: Display2,
	Phone: Phone,
	Email_me: Email_me,
	mam: mam,
	Copied_to: Copied_to,
	Empty_Pinboard: Empty_Pinboard,
	Inline: Inline,
	Explore_all: Explore_all,
	Positioning3: Positioning3,
	Absolutely_positioned: Absolutely_positioned,
	Positioning2: Positioning2,
	of: of,
	Add_Derived: Add_Derived,
	Maintain_the_order: Maintain_the_order,
	Unlink_Slack: Unlink_Slack,
	Add: Add,
	SKIP: SKIP,
	never: never,
	Floats_the_element: Floats_the_element,
	DESTINATION_COLUMN: DESTINATION_COLUMN,
	Only_add_prefix: Only_add_prefix,
	Help: Help,
	Add_custom_menu_item: Add_custom_menu_item,
	Use_default_menu: Use_default_menu,
	Help_menu_customization: Help_menu_customization,
	Item_label: Item_label,
	Item_url: Item_url,
	Item_enabled: Item_enabled,
	Item_default_icon: Item_default_icon,
	Upload_custom_icon: Upload_custom_icon,
	Window_size: Window_size,
	Action_menu_customization: Action_menu_customization,
	Add_custom_action_item: Add_custom_action_item,
	Overwrite: Overwrite,
	element_when: element_when,
	Current_version: Current_version,
	Connections: Connections,
	Block: Block,
	Filter: Filter,
	rows_have: rows_have,
	top_0: top_0,
	Select_a: Select_a,
	SELECT_A_COUNTRY: SELECT_A_COUNTRY,
	SELECT_A_CONDITION: SELECT_A_CONDITION,
	It_took_too_long: It_took_too_long,
	Floats_the_element2: Floats_the_element2,
	Underlying_Data: Underlying_Data,
	Measure_or_attribute: Measure_or_attribute,
	Only_show: Only_show,
	Schema: Schema,
	Edited: Edited,
	More: More,
	MORE: MORE,
	N_MORE: N_MORE,
	Show_hidden: Show_hidden,
	Inline_block: Inline_block,
	Back2: Back2,
	Whats_your: Whats_your,
	TEST: TEST,
	Its_positioned_relative: Its_positioned_relative,
	Cannot_Deselect_Already: Cannot_Deselect_Already,
	Other: Other,
	NO_DATA: NO_DATA,
	Data: Data,
	CSS_templates: CSS_templates,
	Your_uploaded: Your_uploaded,
	Apply: Apply,
	Select_the_column: Select_the_column,
	Copy_to: Copy_to,
	tables_using: tables_using,
	Congratulations: Congratulations,
	Timeout: Timeout,
	Timeout_Error: Timeout_Error,
	Resource_Exceeded_Error: Resource_Exceeded_Error,
	Configuration_Options: Configuration_Options,
	Examples: Examples,
	Reset_zoom: Reset_zoom,
	Existing_pinboards_answers: Existing_pinboards_answers,
	You_dont_have: You_dont_have,
	Ready_for: Ready_for,
	To_begin_a: To_begin_a,
	Slack_Integration: Slack_Integration,
	No_Pinboards: No_Pinboards,
	important_important_overrides: important_important_overrides,
	Browse: Browse,
	Failed: Failed,
	selector: selector,
	Select_an_entity: Select_an_entity,
	Refresh: Refresh,
	SOURCE_COLUMN: SOURCE_COLUMN,
	See_other: See_other,
	key_1_8005087008: key_1_8005087008,
	Support: Support,
	cursor_pointer: cursor_pointer,
	No_prefix_required: No_prefix_required,
	Readonly: Readonly,
	rows_here: rows_here,
	right_0: right_0,
	Border: Border,
	Conditional_Formatting: Conditional_Formatting,
	zindex_10: zindex_10,
	Invalid_loginpassword: Invalid_loginpassword,
	Physical_version: Physical_version,
	Example2: Example2,
	No_suggestions_from: No_suggestions_from,
	Flex: Flex,
	Could_not_reach: Could_not_reach,
	attribute: attribute,
	I_didnt_get: I_didnt_get,
	CSS: CSS,
	Confirm_Password: Confirm_Password,
	Totally_removes_the: Totally_removes_the,
	Used_when_we: Used_when_we,
	column_from_table: column_from_table,
	Row_security: Row_security,
	Worksheet_join_rule: Worksheet_join_rule,
	worksheet: worksheet,
	pam: pam,
	"in": "in",
	notin: notin,
	CLICK_TO_RESET: CLICK_TO_RESET,
	Call: Call,
	download_sage: download_sage,
	Some_columns_names: Some_columns_names,
	measure: measure,
	Data_written: Data_written,
	noData: noData,
	noAccessToTable: noAccessToTable,
	noAccessToColumn: noAccessToColumn,
	noAccessToJoin: noAccessToJoin,
	invalidData: invalidData,
	loadingData: loadingData,
	dataError: dataError,
	Chart_axes: Chart_axes,
	data_point_exceeded_message: data_point_exceeded_message,
	has: has$3,
	Slack_Username: Slack_Username,
	Description: Description,
	Right: Right,
	Top: Top,
	Bottom: Bottom,
	Oops_There_was: Oops_There_was,
	gitcommit: gitcommit,
	rows_while: rows_while,
	from_the: from_the,
	child: child,
	CSS_classname: CSS_classname,
	Email: Email,
	Dependency: Dependency,
	Clear_Selections: Clear_Selections,
	Keyword: Keyword,
	types: types,
	parent: parent,
	Add_js_prefix: Add_js_prefix,
	gitbranch: gitbranch,
	Please_contact_your: Please_contact_your,
	pa2: pa2,
	measure_description: measure_description,
	Aggregation: Aggregation,
	Successful: Successful,
	Style_class: Style_class,
	Tables: Tables,
	No: No,
	Oops_Sorry_there: Oops_Sorry_there,
	Confirm_Changes: Confirm_Changes,
	Inclusion_rule_is: Inclusion_rule_is,
	Formula_Name_Placeholder: Formula_Name_Placeholder,
	Formula_Assistant: Formula_Assistant,
	Append: Append,
	Debug: Debug,
	Incomplete_only: Incomplete_only,
	ADD: ADD,
	Multiple_matches: Multiple_matches,
	Less: Less,
	Press_escape_to: Press_escape_to,
	Display: Display,
	Objects_count: Objects_count,
	None: None,
	Destination_Table: Destination_Table,
	from: from,
	Chart_page: Chart_page,
	How_to_structure: How_to_structure,
	Search_memcache: Search_memcache,
	Save: Save,
	Float_left: Float_left,
	Grouping_of: Grouping_of,
	Headings: Headings,
	The_new_data: The_new_data,
	Editing_Visualization: Editing_Visualization,
	SORT: SORT,
	REMOVE: REMOVE,
	RENAME: RENAME,
	GroupWith: GroupWith,
	Ungroup: Ungroup,
	Position: Position,
	Are_you: Are_you,
	Tip_In: Tip_In,
	Clear_cache: Clear_cache,
	Download_Trace: Download_Trace,
	Comment_List: Comment_List,
	Summary: Summary,
	Columns: Columns,
	Text: Text,
	colorreddefault: colorreddefault,
	dn: dn,
	Release_Notes: Release_Notes,
	There_is_no: There_is_no,
	di: di,
	Back: Back,
	db: db,
	Click_on_the2: Click_on_the2,
	Which: Which,
	questionText: questionText,
	Showing_only: Showing_only,
	Buttons: Buttons,
	Show_me: Show_me,
	Example: Example,
	a3: a3$1,
	feedback: feedback,
	future: future,
	A3_Analysis: A3_Analysis,
	BRANDED_SPOT_IQ_ANALYSIS: BRANDED_SPOT_IQ_ANALYSIS,
	EXECUTIVE_SUMMARY_LINK: EXECUTIVE_SUMMARY_LINK,
	EXECUTIVE_SUMMARY_TITLE: EXECUTIVE_SUMMARY_TITLE,
	PINBOARD_VIZ_EXECUTIVE_SUMMARY_TITLE: PINBOARD_VIZ_EXECUTIVE_SUMMARY_TITLE,
	PINBOARD_VIZ_NEW_INSIGHTS_TOOLTIP: PINBOARD_VIZ_NEW_INSIGHTS_TOOLTIP,
	PINBOARD_VIZ_SEEN_INSIGHTS_TOOLTIP: PINBOARD_VIZ_SEEN_INSIGHTS_TOOLTIP,
	PINBOARD_VIZ_NO_INSIGHTS_TOOLTIP: PINBOARD_VIZ_NO_INSIGHTS_TOOLTIP,
	PINBOARD_VIZ_UNKNOWN_INSIGHTS_TOOLTIP: PINBOARD_VIZ_UNKNOWN_INSIGHTS_TOOLTIP,
	PINBOARD_EXECUTIVE_SUMMARY_COMPUTE_INSIGHTS_TOOLTIP: PINBOARD_EXECUTIVE_SUMMARY_COMPUTE_INSIGHTS_TOOLTIP,
	EXECUTIVE_SUMMARY_START_STATUS: EXECUTIVE_SUMMARY_START_STATUS,
	EXECUTIVE_SUMMARY_PROGRESS_STATUS: EXECUTIVE_SUMMARY_PROGRESS_STATUS,
	EXECUTIVE_SUMMARY_COMPLETED_STATUS: EXECUTIVE_SUMMARY_COMPLETED_STATUS,
	customA3Analysis: customA3Analysis,
	spotIQAnalyze: spotIQAnalyze,
	analysisFeedback: analysisFeedback,
	customR: customR,
	classification: classification,
	R_Analysis: R_Analysis,
	Not_Searchable: Not_Searchable,
	This_content_will2: This_content_will2,
	statements_were: statements_were,
	built_on: built_on,
	Floats: Floats,
	Add_charts_or: Add_charts_or,
	Primary_colors: Primary_colors,
	Secondary_colors: Secondary_colors,
	Disable_color_rotation: Disable_color_rotation,
	Relative: Relative,
	Preferences: Preferences,
	ofhidden: ofhidden,
	Add_a_prefix: Add_a_prefix,
	Similar_to_inline: Similar_to_inline,
	and: and,
	Version: Version,
	No_preview: No_preview,
	Download_the: Download_the,
	Add_to: Add_to,
	sage_help_navigate: sage_help_navigate,
	sage_help_select: sage_help_select,
	sage_help_search: sage_help_search,
	sage_help_dismiss: sage_help_dismiss,
	Update_Password: Update_Password,
	E2E_and_Unit: E2E_and_Unit,
	Applied_on_the: Applied_on_the,
	Id: Id,
	Download_as: Download_as,
	Scroll_for: Scroll_for,
	Background_colors: Background_colors,
	Class_name: Class_name,
	complete: complete,
	relation: relation,
	Optional: Optional,
	Clear: Clear,
	Sources: Sources,
	SOURCE_TYPE: SOURCE_TYPE,
	Update_the: Update_the,
	order: order,
	This_video_shows: This_video_shows,
	scheduling_help_text: scheduling_help_text,
	Upload_your2: Upload_your2,
	FILTER: FILTER,
	This_filter_type: This_filter_type,
	Version_info: Version_info,
	Layouts_templates: Layouts_templates,
	Show_underlying: Show_underlying,
	Update_Preferences: Update_Preferences,
	Dependents: Dependents,
	SpotIQ_insights: SpotIQ_insights,
	sync: sync,
	SearchIQ: SearchIQ,
	DATA_TAB_SPOTIQ_INSIGHTS_NOT_FOUND: DATA_TAB_SPOTIQ_INSIGHTS_NOT_FOUND,
	login: login,
	HTML: HTML,
	Data_type: Data_type,
	INVALID_PRINT_CONFIGURATION_MESSAGE: INVALID_PRINT_CONFIGURATION_MESSAGE,
	SCHEDULE_PINBOARD_CREATE: SCHEDULE_PINBOARD_CREATE,
	SCHEDULE_PINBOARD_UPDATE: SCHEDULE_PINBOARD_UPDATE,
	jobStatusViewerTitle: jobStatusViewerTitle,
	OBJECT: OBJECT,
	PINBOARD: PINBOARD,
	GoToHomepage: GoToHomepage,
	ANSWER: ANSWER,
	Relationship: Relationship,
	Rule: Rule,
	Group: Group,
	DocumentType: DocumentType,
	TABLE: TABLE,
	COLUMN: COLUMN,
	WIDTH: WIDTH,
	VIEWS: VIEWS,
	WORKSHEETS: WORKSHEETS,
	IMPORTED_DATA: IMPORTED_DATA,
	TABLES: TABLES,
	UNTITLED_OBJECT_NAME: UNTITLED_OBJECT_NAME,
	SEARCH: SEARCH,
	SEARCHIQ: SEARCHIQ,
	IQ: IQ,
	enliteSourceSelector: enliteSourceSelector,
	CHART_VIZ_DISPLAY_NAME: CHART_VIZ_DISPLAY_NAME,
	SUBMIT: SUBMIT,
	CANCEL: CANCEL,
	CREATE: CREATE,
	help: help,
	CREATE_YOUR_WORKSHEET: CREATE_YOUR_WORKSHEET,
	OK: OK,
	ALL: ALL,
	BY: BY,
	AND: AND,
	APPLY: APPLY,
	SAVE: SAVE,
	SAVING: SAVING,
	MAKE_A_COPY: MAKE_A_COPY,
	EDIT_A_COPY: EDIT_A_COPY,
	EDIT_TITLE: EDIT_TITLE,
	EXPLORE: EXPLORE,
	COPY_OF: COPY_OF,
	YES: YES,
	NO: NO,
	UPDATE: UPDATE,
	DONE: DONE,
	TITLE: TITLE,
	DESCRIPTION: DESCRIPTION,
	COLLAPSE: COLLAPSE,
	EDIT: EDIT,
	EDIT_ORIGINAL_ANSWER: EDIT_ORIGINAL_ANSWER,
	REFRESH: REFRESH,
	DOWNLOAD: DOWNLOAD,
	CHART_NOT_DOWNLOADABLE: CHART_NOT_DOWNLOADABLE,
	UPLOAD: UPLOAD,
	DOWNLOAD_TRACE: DOWNLOAD_TRACE,
	REQUIRED_FIELD: REQUIRED_FIELD,
	BROWSE_YOUR_FILES: BROWSE_YOUR_FILES,
	MAX_FILE_SIZE_MESSAGE: MAX_FILE_SIZE_MESSAGE,
	BYTES: BYTES,
	KB: KB,
	MB: MB,
	GB: GB,
	MAX_FILE_SIZE_ERROR_MESSAGE: MAX_FILE_SIZE_ERROR_MESSAGE,
	DELETE: DELETE,
	CONFIRM_DELETE: CONFIRM_DELETE,
	ADD_COLUMNS: ADD_COLUMNS,
	IMPORT: IMPORT,
	BACK: BACK,
	CONFIRM: CONFIRM,
	FILTERS: FILTERS,
	CLOSE: CLOSE,
	ADD_AND_SAVE: ADD_AND_SAVE,
	NEW_PINBOARD: NEW_PINBOARD,
	ACTIONS: ACTIONS,
	SEARCH_COLUMN: SEARCH_COLUMN,
	SEARCH_YOUR_DATA: SEARCH_YOUR_DATA,
	UNIVERSAL_SEARCH_PLACEHOLDER: UNIVERSAL_SEARCH_PLACEHOLDER,
	SEARCH_PLACEHOLDER: SEARCH_PLACEHOLDER,
	WHAT_DID_YOU_MEAN_BY: WHAT_DID_YOU_MEAN_BY,
	DID_YOU_MEAN: DID_YOU_MEAN,
	DID_NOT_UNDERSTAND: DID_NOT_UNDERSTAND,
	NEXT_QUESTION: NEXT_QUESTION,
	DID_NOT_FIND_WHAT: DID_NOT_FIND_WHAT,
	CLICK_HERE_TO_TEACH: CLICK_HERE_TO_TEACH,
	PAUSED_JOB: PAUSED_JOB,
	SCHEDULED_JOB: SCHEDULED_JOB,
	STOPPED_JOB: STOPPED_JOB,
	JOB: JOB,
	JOBS: JOBS,
	JOB_LIST_TITLE: JOB_LIST_TITLE,
	NO_JOB: NO_JOB,
	READ_MORE: READ_MORE,
	HIDE: HIDE,
	HIDE_DETAILS: HIDE_DETAILS,
	metadataListSearchPlaceholder: metadataListSearchPlaceholder,
	exploreDataTitle: exploreDataTitle,
	exploreAllData: exploreAllData,
	chooseSources: chooseSources,
	alerts: alerts,
	primaryNavigation: primaryNavigation,
	helpMenuItems: helpMenuItems,
	activityFeed: activityFeed,
	related: related,
	trending: trending,
	suggestedSearch: suggestedSearch,
	recentlyViewed: recentlyViewed,
	homepageInsight: homepageInsight,
	favorite: favorite,
	spotIq: spotIq,
	relatedItems: relatedItems,
	dataScope: dataScope,
	editPinboardDetails: editPinboardDetails,
	pinboardInfo: pinboardInfo,
	basicActionMessages: basicActionMessages,
	blinkList: blinkList,
	sageViewer: sageViewer,
	materializeView: materializeView,
	schemaViewer: schemaViewer,
	One_To_One_Join: One_To_One_Join,
	Many_To_One_Join: Many_To_One_Join,
	Join_Cardinality: Join_Cardinality,
	join: join,
	joins: joins,
	metadataListPage: metadataListPage,
	VIEW_RESULTS: VIEW_RESULTS,
	NO_INSIGHTS: NO_INSIGHTS,
	sharableItem: sharableItem,
	filterInputDataType: filterInputDataType,
	walkMe: walkMe,
	replayAnswer: replayAnswer,
	screenRecorder: screenRecorder,
	metadataExplorer: metadataExplorer,
	privilegesLabels: privilegesLabels,
	listFilterLabels: listFilterLabels,
	sticker: sticker,
	dataSources: dataSources,
	disabledChartTypeSelectorTooltips: disabledChartTypeSelectorTooltips,
	dataDisabledChartExplanation: dataDisabledChartExplanation,
	chartEditorErrorExplanation: chartEditorErrorExplanation,
	smartCheckboxCollection: smartCheckboxCollection,
	SAVE_DOCUMENT_DIALOG_TITLE: SAVE_DOCUMENT_DIALOG_TITLE,
	NAME_BEFORE_SHARING_DIALOG_TITLE: NAME_BEFORE_SHARING_DIALOG_TITLE,
	LOADING_MSG: LOADING_MSG,
	LOADING_FAILED_MSG: LOADING_FAILED_MSG,
	UPLOADING_MSG: UPLOADING_MSG,
	NO_MATCH_MSG: NO_MATCH_MSG,
	MORE_ITEMS_MSG: MORE_ITEMS_MSG,
	UPGRADING_ANSWER_MSG: UPGRADING_ANSWER_MSG,
	CALLOSUM_CODE_CANCELED: CALLOSUM_CODE_CANCELED,
	DRILL_TYPE_VIZ_LEVEL: DRILL_TYPE_VIZ_LEVEL,
	dataPanel: dataPanel,
	dataProfile: dataProfile,
	expressionEditorPanel: expressionEditorPanel,
	formulaEditor: formulaEditor,
	rlsRuleEditor: rlsRuleEditor,
	queryJoinType: queryJoinType,
	worksheetType: worksheetType,
	worksheets: worksheets,
	vizContext: vizContext,
	naturalQuery: naturalQuery,
	tokenPanel: tokenPanel,
	DataExplorerVisibleDependents: DataExplorerVisibleDependents,
	metricsRangeValidationErrorMessages: metricsRangeValidationErrorMessages,
	NO_METRICS_DEFINED_YET_MESSAGE: NO_METRICS_DEFINED_YET_MESSAGE,
	METRIC_PLOT_AS_BAND: METRIC_PLOT_AS_BAND,
	NULL_VALUE_PLACEHOLDER_LABEL: NULL_VALUE_PLACEHOLDER_LABEL,
	EMPTY_VALUE_PLACEHOLDER_LABEL: EMPTY_VALUE_PLACEHOLDER_LABEL,
	OTHER_VALUE_PLACEHOLDER_LABEL: OTHER_VALUE_PLACEHOLDER_LABEL,
	UNAVAILABLE_COLUMN_SAMPLE_VALUE: UNAVAILABLE_COLUMN_SAMPLE_VALUE,
	sageDropdownSelectEvent: sageDropdownSelectEvent,
	joinWorkflow: joinWorkflow,
	pivotTable: pivotTable,
	searchDoctor: searchDoctor,
	userPropertiesKeys: userPropertiesKeys,
	sharePanel: sharePanel,
	loginConstants: loginConstants,
	contextMenu: contextMenu,
	importData: importData,
	importWizard: importWizard,
	transformationEditor: transformationEditor,
	SAGE_SERVER_NAME: SAGE_SERVER_NAME,
	CALLOSUM_SERVER_NAME: CALLOSUM_SERVER_NAME,
	SAGE_AND_CALLOSUM_SERVER_NAME: SAGE_AND_CALLOSUM_SERVER_NAME,
	viewPermissionColName: viewPermissionColName,
	VIZ_CORRUPTED_TITLE_NOT_EDITABLE_MESSAGE: VIZ_CORRUPTED_TITLE_NOT_EDITABLE_MESSAGE,
	profilePic: profilePic,
	apiErrorMessage: apiErrorMessage,
	dataDownload: dataDownload,
	worksheetLeftPanel: worksheetLeftPanel,
	answerFeedback: answerFeedback,
	SEND: SEND,
	CUSTOMIZE_HEADLINES_DISPLAY: CUSTOMIZE_HEADLINES_DISPLAY,
	customSummary: customSummary,
	ungroup: ungroup,
	adminSection: adminSection,
	alertService: alertService,
	alertDialog: alertDialog,
	adminUI: adminUI,
	filtersPermission: filtersPermission,
	filtersMessages: filtersMessages,
	bulkFilters: bulkFilters,
	createSchema: createSchema,
	scheduler: scheduler$1,
	statusViewer: statusViewer,
	dataFilter: dataFilter,
	Filters_Select_Column: Filters_Select_Column,
	contactSupport: contactSupport,
	debug: debug,
	debugging: debugging,
	embed: embed,
	print: print,
	TIME_BUCKET: TIME_BUCKET,
	timeBucketLabels: timeBucketLabels,
	timeBucketCategory: timeBucketCategory,
	RELATED_QUERIES_TITLE: RELATED_QUERIES_TITLE,
	RELATED_QUERIES_DESCRIPTION: RELATED_QUERIES_DESCRIPTION,
	RELATED_INSIGHTS_TITLE: RELATED_INSIGHTS_TITLE,
	RELATED_TABLE_INSIGHTS_TITLE: RELATED_TABLE_INSIGHTS_TITLE,
	RELATED_INSIGHTS_DID_KNOW: RELATED_INSIGHTS_DID_KNOW,
	RELATED_INSIGHTS_DESCRIPTION: RELATED_INSIGHTS_DESCRIPTION,
	RELATED_OBJECTS_TITLE: RELATED_OBJECTS_TITLE,
	sample: sample,
	HOURS_COUNT: HOURS_COUNT,
	MINUTES_COUNT: MINUTES_COUNT,
	SECONDS_COUNT: SECONDS_COUNT,
	actionMenu: actionMenu,
	SPOT_IQ: SPOT_IQ,
	appInitialization: appInitialization,
	rangeSelect: rangeSelect,
	checkboxFilter: checkboxFilter,
	pinboardFilter: pinboardFilter,
	sageUserFeedback: sageUserFeedback,
	suggestions: suggestions,
	fontPreview: fontPreview,
	fontSelector: fontSelector,
	fontEditor: fontEditor,
	customizableStyleProperties: customizableStyleProperties,
	styleCustomizer: styleCustomizer,
	textBoxConfigurator: textBoxConfigurator,
	pageTitleConfigurator: pageTitleConfigurator,
	blobUploadService: blobUploadService,
	blobUploader: blobUploader,
	tables: tables,
	charts: charts,
	migration: migration,
	visualizationPinner: visualizationPinner,
	report: report,
	addRecipients: addRecipients,
	dataSourcePreview: dataSourcePreview,
	pinboardSnapshots: pinboardSnapshots,
	DATE: DATE,
	printPinboard: printPinboard,
	pinboardPage: pinboardPage,
	answerPage: answerPage,
	documentUnsavedChangesAlert: documentUnsavedChangesAlert,
	msg_code: msg_code,
	vizDeleted: vizDeleted,
	vizUngrouped: vizUngrouped,
	folded_completion_subtitle: folded_completion_subtitle,
	help_result_subtitle: help_result_subtitle,
	action_subtitle: action_subtitle,
	alert: alert,
	displayRowNumber: displayRowNumber,
	getModelDataRowInfo: getModelDataRowInfo,
	resultsRowLimit: resultsRowLimit,
	otherTokenForEditMapping: otherTokenForEditMapping,
	selectAnother: selectAnother,
	rowsSkipped: rowsSkipped,
	gitcommit2: gitcommit2,
	gitbranch2: gitbranch2,
	built_on2: built_on2,
	terminalToken_confirmation: terminalToken_confirmation,
	Download_as2: Download_as2,
	Chart_page2: Chart_page2,
	SelectedSourcesCount: SelectedSourcesCount,
	search_by_name: search_by_name,
	Source_column: Source_column,
	Destination_column: Destination_column,
	Enter_prefix: Enter_prefix,
	Add_comment: Add_comment,
	Search_table_name: Search_table_name,
	Source_name: Source_name,
	Select_a_connection: Select_a_connection,
	new_column_name: new_column_name,
	Memory_usage: Memory_usage,
	Efficiency: Efficiency,
	Filter_by_ID: Filter_by_ID,
	formula_name: formula_name,
	Search_Columns: Search_Columns,
	Filter_by_Name: Filter_by_Name,
	Search_sources: Search_sources,
	Add_a_comment: Add_a_comment,
	import_error_msg: import_error_msg,
	column_name: column_name,
	x_axis_columns: x_axis_columns,
	y_axis_columns: y_axis_columns,
	legend_columns: legend_columns,
	Chart_Type: Chart_Type,
	tooltip: tooltip,
	update: update,
	CHANGE_VISUALIZATION: CHANGE_VISUALIZATION,
	VIEW_TABLE: VIEW_TABLE,
	VIEW_R_ANALYSIS: VIEW_R_ANALYSIS,
	VIEW_SPOTIQ: VIEW_SPOTIQ,
	EDIT_CHART_CONFIGURATION: EDIT_CHART_CONFIGURATION,
	EDIT_CHART_STYLE: EDIT_CHART_STYLE,
	chart: chart,
	slack: slack,
	Configure_Chart: Configure_Chart,
	Zoom_into_chart: Zoom_into_chart,
	No_zoom_allowed: No_zoom_allowed,
	Change_chart_config: Change_chart_config,
	Config_change_not_allowed: Config_change_not_allowed,
	XAxis: XAxis,
	YAxis: YAxis,
	Size: Size,
	Legend: Legend,
	Confirm_removal: Confirm_removal,
	Are_you_sure2: Are_you_sure2,
	chartTypes: chartTypes,
	Administration_Group: Administration_Group,
	infoCard: infoCard,
	Abort_data_import: Abort_data_import,
	abort_confirmation: abort_confirmation,
	Stay_here: Stay_here,
	Yes_abort: Yes_abort,
	Attention: Attention,
	Overwrite_confirmation: Overwrite_confirmation,
	Upload_your_file: Upload_your_file,
	Set_column_names: Set_column_names,
	Upload_csv_to_proceed: Upload_csv_to_proceed,
	contains_col_name: contains_col_name,
	name_unique_col: name_unique_col,
	confirm_ignore_val_errors: confirm_ignore_val_errors,
	Preview_and_import: Preview_and_import,
	Add_to_existing: Add_to_existing,
	Irrecoverable_errors_msg: Irrecoverable_errors_msg,
	address_errors_before_proceeding: address_errors_before_proceeding,
	confirm_errors_and_proceed: confirm_errors_and_proceed,
	Set_column_types: Set_column_types,
	Determine_column_interruption: Determine_column_interruption,
	Invalid_file_type_error: Invalid_file_type_error,
	Showing_underlying_data: Showing_underlying_data,
	SUMMARY: SUMMARY,
	aggregateTypes: aggregateTypes,
	cumulativePercent: cumulativePercent,
	datatype_Text: datatype_Text,
	datatype_Date: datatype_Date,
	datatype_Datetime: datatype_Datetime,
	datatype_Time: datatype_Time,
	datatype_Numeric: datatype_Numeric,
	datatype_Decimal: datatype_Decimal,
	Can_View: Can_View,
	Can_Edit: Can_Edit,
	Varies: Varies,
	start: start,
	end: end,
	Untitled_Formula: Untitled_Formula,
	start_point: start_point,
	data_type: data_type,
	column_type: column_type,
	Additive: Additive,
	aggregation2: aggregation2,
	hidden: hidden,
	Synonyms: Synonyms,
	Index_Type: Index_Type,
	SpotIQ_Preference: SpotIQ_Preference,
	Custom_Calendar_Type: Custom_Calendar_Type,
	Geo_type: Geo_type,
	Index_Priority: Index_Priority,
	Format_Pattern: Format_Pattern,
	Attribution_Dimension: Attribution_Dimension,
	Entity_Category: Entity_Category,
	SearchIQ_Enabled: SearchIQ_Enabled,
	Column_Name: Column_Name,
	Dependent_Name: Dependent_Name,
	Type2: Type2,
	View_More: View_More,
	View_All: View_All,
	lock_unlock_chart_config: lock_unlock_chart_config,
	Returns_the_date: Returns_the_date,
	smith: smith,
	units: units,
	diffdays: diffdays,
	complaint: complaint,
	atan: atan,
	cumulativesum: cumulativesum,
	cumulativemin: cumulativemin,
	pow: pow,
	hello_world: hello_world,
	emailed: emailed,
	tobool: tobool,
	oregon: oregon,
	Returns_the_hour: Returns_the_hour,
	retail_price: retail_price,
	sum: sum,
	min: min,
	todouble: todouble,
	difftime: difftime,
	editdistance: editdistance,
	Returns_the_largest: Returns_the_largest,
	Returns_the_logarithm2: Returns_the_logarithm2,
	cube: cube,
	Returns_the_year: Returns_the_year,
	product: product,
	log10: log10,
	drafted_by: drafted_by,
	movingsum: movingsum,
	movingmin: movingmin,
	Takes_a_measure14: Takes_a_measure14,
	Takes_a_measure13: Takes_a_measure13,
	latitude: latitude,
	Takes_a_measure12: Takes_a_measure12,
	Takes_a_measure11: Takes_a_measure11,
	strpos: strpos,
	Takes_a_measure10: Takes_a_measure10,
	groupcount: groupcount,
	exp2: exp2,
	similarity: similarity,
	shipped: shipped,
	safedivide: safedivide,
	Returns_1_if: Returns_1_if,
	customer_region: customer_region,
	state: state,
	Returns_the_smallest: Returns_the_smallest,
	phone: phone,
	cumulativeaverage: cumulativeaverage,
	soundslike: soundslike,
	Takes_a_column2: Takes_a_column2,
	Returns_the_square: Returns_the_square,
	pokemon_go: pokemon_go,
	Accepts_a_document: Accepts_a_document,
	revenue: revenue,
	Returns_Eulers_number: Returns_Eulers_number,
	store_name: store_name,
	serviced: serviced,
	hourofday: hourofday,
	shipping: shipping,
	Returns_the_smaller: Returns_the_smaller,
	groupmax: groupmax,
	cbrt: cbrt,
	variance: variance,
	startofweek: startofweek,
	sq: sq,
	minecraft_pixelmon: minecraft_pixelmon,
	owner: owner,
	Accepts_a_document2: Accepts_a_document2,
	bigger: bigger,
	lastname: lastname,
	Returns_the_month: Returns_the_month,
	tostring: tostring,
	joined: joined,
	FY_2015: FY_2015,
	atty: atty,
	Returns_the_inverse: Returns_the_inverse,
	Returns_the: Returns_the,
	end_latitude: end_latitude,
	least: least,
	Returns_the_length: Returns_the_length,
	Returns_the_portion: Returns_the_portion,
	Returns_the_left: Returns_the_left,
	left: left,
	Returns_the_right: Returns_the_right,
	right: right,
	q1_revenue: q1_revenue,
	adddays: adddays,
	addseconds: addseconds,
	"false": "false",
	Returns_the_inverse3: Returns_the_inverse3,
	Returns_the_inverse2: Returns_the_inverse2,
	January: January,
	markup: markup,
	startofmonth: startofmonth,
	received: received,
	Returns_the_minimum: Returns_the_minimum,
	formula: formula,
	promoter: promoter,
	customer: customer,
	Returns_2_raised: Returns_2_raised,
	region: region,
	stddev: stddev,
	cos: cos,
	daynumberofyear: daynumberofyear,
	Takes_a_column: Takes_a_column,
	Returns_the_remainder: Returns_the_remainder,
	cumulativemax: cumulativemax,
	lawyer: lawyer,
	tointeger: tointeger,
	max: max,
	abs: abs,
	time: time,
	spellslike: spellslike,
	tweet2: tweet2,
	width: width,
	tweet1: tweet1,
	or: or,
	dayofweek: dayofweek,
	Returns_the_number6: Returns_the_number6,
	Returns_the_number5: Returns_the_number5,
	Aggregate: Aggregate,
	Used_to_calculate: Used_to_calculate,
	Returns_the_number4: Returns_the_number4,
	Returns_the_number3: Returns_the_number3,
	Returns_the_number2: Returns_the_number2,
	Returns_true_when: Returns_true_when,
	area: area,
	help_text_add_months: help_text_add_months,
	help_add_years: help_add_years,
	help_add_seconds: help_add_seconds,
	Returns_the_result6: Returns_the_result6,
	Help_add_weeks: Help_add_weeks,
	Returns_add_minutes: Returns_add_minutes,
	Returns_the_result5: Returns_the_result5,
	Returns_the_result4: Returns_the_result4,
	Returns_the_result3: Returns_the_result3,
	Returns_the_result2: Returns_the_result2,
	Returns_the_cosine: Returns_the_cosine,
	call_began: call_began,
	beam_angle: beam_angle,
	trial_version: trial_version,
	california: california,
	attorney: attorney,
	movingmax: movingmax,
	tansatelliteangle: tansatelliteangle,
	married: married,
	floor: floor,
	sign: sign,
	room: room,
	clicked: clicked,
	not_bigger: not_bigger,
	monthnumber: monthnumber,
	supplier: supplier,
	"Number": "Number",
	persnickety: persnickety,
	exp: exp,
	"Date": "Date",
	firstname: firstname,
	Accepts_two_text4: Accepts_two_text4,
	Accepts_two_text3: Accepts_two_text3,
	Accepts_two_text2: Accepts_two_text2,
	month: month,
	growth_rate: growth_rate,
	Returns_the_average: Returns_the_average,
	taxrate: taxrate,
	ln: ln,
	Returns_the_tangent: Returns_the_tangent,
	Accepts_an_integer: Accepts_an_integer,
	Friday: Friday,
	Returns_the_cube: Returns_the_cube,
	Returns_the_first4: Returns_the_first4,
	Returns_the_first3: Returns_the_first3,
	Returns_the_first2: Returns_the_first2,
	growth: growth,
	movingaverage: movingaverage,
	Conditional_operator: Conditional_operator,
	sin: sin,
	purchased: purchased,
	strlen: strlen,
	now: now,
	read: read,
	substr: substr,
	not: not,
	groupuniquecount: groupuniquecount,
	Q3_FY: Q3_FY,
	campaign: campaign,
	date: date,
	UnsubscribeSnapshot: UnsubscribeSnapshot,
	StartWatching: StartWatching,
	snapshotVizTitle: snapshotVizTitle,
	snapshotVizHeader: snapshotVizHeader,
	snapshotVizOriginalQuestion: snapshotVizOriginalQuestion,
	UpdateSnapshot: UpdateSnapshot,
	SnapshotInsightsDiffTitle: SnapshotInsightsDiffTitle,
	SnapshotInsightsLongTermDiffTitle: SnapshotInsightsLongTermDiffTitle,
	SnapshotDailyDiffTitle: SnapshotDailyDiffTitle,
	snapshotCardDescriptions: snapshotCardDescriptions,
	snapshotForcastCardTemplateUp: snapshotForcastCardTemplateUp,
	snapshotForcastCardTemplateDown: snapshotForcastCardTemplateDown,
	snapshotInsightsViewer: snapshotInsightsViewer,
	snapshotInsightLabel: snapshotInsightLabel,
	FollowEnabled: FollowEnabled,
	CannotEnableWatch: CannotEnableWatch,
	WatchFeatureNotEnabled: WatchFeatureNotEnabled,
	PerUserSubscriptionLimitReached: PerUserSubscriptionLimitReached,
	complaints: complaints,
	Returns_the_day: Returns_the_day,
	approve: approve,
	distributor: distributor,
	Returns_true_if9: Returns_true_if9,
	Subtracts_the_second2: Subtracts_the_second2,
	Returns_true_if8: Returns_true_if8,
	Returns_true_if7: Returns_true_if7,
	Returns_the_standard: Returns_the_standard,
	Returns_true_if6: Returns_true_if6,
	Returns_true_if5: Returns_true_if5,
	Returns_the_number: Returns_the_number,
	tax: tax,
	Returns_true_if4: Returns_true_if4,
	Returns_true_if3: Returns_true_if3,
	totalcost: totalcost,
	Returns_true_if2: Returns_true_if2,
	Returns_the_cube2: Returns_the_cube2,
	tan: tan,
	length: length,
	hello_swirl: hello_swirl,
	start_latitude: start_latitude,
	Jan_FY: Jan_FY,
	Returns_the_sine: Returns_the_sine,
	round: round,
	hay: hay,
	Returns_true_when2: Returns_true_when2,
	Returns_true_for_in_when: Returns_true_for_in_when,
	start_longitude: start_longitude,
	"if": "if",
	count: count,
	average: average,
	texas: texas,
	day: day,
	year: year,
	invoiced: invoiced,
	Returns_the_two: Returns_the_two,
	event: event$1,
	quantity: quantity,
	thouhgtspot: thouhgtspot,
	distance: distance,
	haystack: haystack,
	groupstddev: groupstddev,
	burning_man: burning_man,
	startofyear: startofyear,
	haystackwithneedle: haystackwithneedle,
	q2_revenue: q2_revenue,
	todate: todate,
	price: price,
	atan2: atan2,
	broomstick: broomstick,
	order_date: order_date,
	Returns_the_variance: Returns_the_variance,
	sold: sold,
	Takes_a_measure9: Takes_a_measure9,
	Takes_a_measure8: Takes_a_measure8,
	Takes_a_measure7: Takes_a_measure7,
	Takes_a_measure6: Takes_a_measure6,
	Takes_a_measure5: Takes_a_measure5,
	Takes_a_measure4: Takes_a_measure4,
	ifnull: ifnull,
	Takes_a_measure3: Takes_a_measure3,
	Takes_a_measure2: Takes_a_measure2,
	Conversion: Conversion,
	Returns_the4: Returns_the4,
	Returns_the3: Returns_the3,
	Returns_the2: Returns_the2,
	submitted: submitted,
	acos: acos,
	snicket: snicket,
	"true": "true",
	Returns_the_maximum: Returns_the_maximum,
	Returns_the_logarithm: Returns_the_logarithm,
	Returns_the_first: Returns_the_first,
	Returns_the_larger: Returns_the_larger,
	Subtracts_the_second: Subtracts_the_second,
	Returns_the_date5: Returns_the_date5,
	Returns_the_date4: Returns_the_date4,
	date_ordered: date_ordered,
	Returns_the_date3: Returns_the_date3,
	Returns_the_date2: Returns_the_date2,
	Returns_the_input: Returns_the_input,
	Returns_a_random: Returns_a_random,
	Returns_the_time: Returns_the_time,
	Text2: Text2,
	mod: mod,
	Mixed: Mixed,
	ceil: ceil,
	Accepts_two_text: Accepts_two_text,
	unknown: unknown,
	isweekend: isweekend,
	datesold: datesold,
	stack: stack,
	groupvariance: groupvariance,
	isnull: isnull,
	editdistancewithcap: editdistancewithcap,
	Returns_true_if10: Returns_true_if10,
	lastname2: lastname2,
	flag: flag,
	daynumberofweek: daynumberofweek,
	color: color,
	sinsatelliteangle: sinsatelliteangle,
	Returns_the_numeric: Returns_the_numeric,
	studio: studio,
	cost: cost,
	current_team: current_team,
	log2: log2,
	groupsum: groupsum,
	groupmin: groupmin,
	end_longitude: end_longitude,
	cossatelliteangle: cossatelliteangle,
	Operators: Operators,
	longitude: longitude,
	volume: volume,
	then: then,
	home_visit: home_visit,
	Returns_the_input4: Returns_the_input4,
	Returns_the_input3: Returns_the_input3,
	Returns_the_input2: Returns_the_input2,
	sphericaldistance: sphericaldistance,
	Takes_a_measure: Takes_a_measure,
	key_05302015_Week: key_05302015_Week,
	greatest: greatest,
	sales: sales,
	unique_count: unique_count,
	defects: defects,
	where_is_the: where_is_the,
	concat: concat,
	groupaverage: groupaverage,
	sqrt: sqrt,
	Ymd: Ymd,
	red: red,
	asin: asin,
	Returns_true_if: Returns_true_if,
	clicks: clicks,
	needle: needle,
	"else": "else",
	profit: profit,
	contains: contains,
	random: random,
	similarto: similarto,
	Returns_the_sum: Returns_the_sum,
	Returns_the_result: Returns_the_result,
	startofquarter: startofquarter,
	saved_ans_asked: saved_ans_asked,
	saved_ans_edited: saved_ans_edited,
	pinboard_created: pinboard_created,
	pinboard_edited: pinboard_edited,
	worksheet_created: worksheet_created,
	worksheet_edited: worksheet_edited,
	imported_some_data: imported_some_data,
	imported_data_edited: imported_data_edited,
	relatedLink: relatedLink,
	Current_Password: Current_Password,
	Successful_password_update: Successful_password_update,
	Unsuccessful_password_update: Unsuccessful_password_update,
	localizationDisabled: localizationDisabled,
	RelatedLinkName: RelatedLinkName,
	conditionalFormatting: conditionalFormatting,
	filters: filters,
	poweredFooter: poweredFooter,
	materializeSchedule: materializeSchedule,
	schema: schema,
	analyze: analyze,
	screenshot: screenshot,
	permission: permission,
	vizContextMenu: vizContextMenu,
	expirationButton: expirationButton,
	dataViz: dataViz,
	sage: sage$1,
	disable_rls: disable_rls,
	preferences: preferences,
	replay: replay,
	colorPicker: colorPicker,
	tokenType: tokenType,
	sageAssistantItem: sageAssistantItem,
	titleDescriptionDialog: titleDescriptionDialog,
	titleDescriptionWidget: titleDescriptionWidget,
	sageTokenType: sageTokenType,
	sageInfoCard: sageInfoCard,
	a3Analysis: a3Analysis,
	emptyLearn: emptyLearn,
	loginGfx: loginGfx,
	HOUR_OF_DAY: HOUR_OF_DAY,
	DAY_OF_PERIOD: DAY_OF_PERIOD,
	WEEK_OF_PERIOD: WEEK_OF_PERIOD,
	MONTH_OF_PERIOD: MONTH_OF_PERIOD,
	QUARTER_OF_YEAR: QUARTER_OF_YEAR,
	pinboardViz: pinboardViz,
	cardTray: cardTray,
	feedProperties: feedProperties,
	FOR: FOR,
	SELECT_ALL_SOURCES: SELECT_ALL_SOURCES,
	SHOW_MORE: SHOW_MORE,
	ALL_SOURCES: ALL_SOURCES,
	CLASSIC_SEARCH: CLASSIC_SEARCH,
	N_SOURCES: N_SOURCES,
	pinboardCard: pinboardCard,
	cardType: cardType,
	MY_PROFILE: MY_PROFILE,
	helpCard: helpCard,
	callouts: callouts,
	helpPopover: helpPopover,
	enliteSearchPlacholder: enliteSearchPlacholder,
	translation: translation,
	enlite: enlite,
	tokenMapper: tokenMapper,
	maf: maf,
	objectCard: objectCard,
	enliteRefine: enliteRefine,
	enliteMappingFile: enliteMappingFile,
	DAYS_COUNT: DAYS_COUNT,
	WEEKS_COUNT: WEEKS_COUNT,
	customREditorMenuItems: customREditorMenuItems,
	CUSTOM_R_BINDINGS_MESSAGE: CUSTOM_R_BINDINGS_MESSAGE,
	rTemplate: rTemplate,
	editPanel: editPanel,
	relatedAnswersAndPinboards: relatedAnswersAndPinboards,
	performanceDebugInfo: performanceDebugInfo,
	yesterday: yesterday,
	today: today,
	weeksOfMonth: weeksOfMonth,
	invalidColor: invalidColor,
	hexColor: hexColor,
	searchTip: searchTip,
	bulkFilter: bulkFilter,
	errorSaving: errorSaving,
	worksheetFilter: worksheetFilter,
	slideshow: slideshow,
	ADD_CONNECTION: ADD_CONNECTION,
	Set_Credentials: Set_Credentials,
	New_Connection: New_Connection,
	Edit_Connection: Edit_Connection,
	Add_Tables: Add_Tables,
	embrace: embrace,
	preview: preview,
	synced: synced,
	linked: linked,
	unsync: unsync,
	syncNow: syncNow,
	schedule: schedule,
	updateSchedule: updateSchedule,
	syncFail: syncFail,
	learnWhy: learnWhy,
	syncCompleted: syncCompleted,
	syncFailed: syncFailed,
	syncing: syncing,
	unsynced: unsynced,
	unsyncFailed: unsyncFailed,
	unsyncing: unsyncing,
	askExpert: askExpert,
	externalQueryLoadingText: externalQueryLoadingText,
	MIXPANEL_PROPS_LIMIT_ERROR_MESSAGE: MIXPANEL_PROPS_LIMIT_ERROR_MESSAGE,
	MIXPANEL_STRING_PROP_SIZE_LIMIT_ERROR_MESSAGE: MIXPANEL_STRING_PROP_SIZE_LIMIT_ERROR_MESSAGE,
	MIXPANEL_ARRAY_PROP_SIZE_LIMIT_ERROR_MESSAGE: MIXPANEL_ARRAY_PROP_SIZE_LIMIT_ERROR_MESSAGE,
	cake: cake,
	LOCAL: LOCAL,
	SNOWFLAKE: SNOWFLAKE,
	THOUGHTSPOT: THOUGHTSPOT,
	results: results,
	toggle_msg: toggle_msg,
	toggle_support_msg: toggle_support_msg,
	expandedPinboardCard: expandedPinboardCard,
	incrementalSearch: incrementalSearch,
	pinboardExport: pinboardExport,
	expertsList: expertsList,
	expertRequestsList: expertRequestsList,
	showAll: showAll,
	avatar: avatar,
	pinboardSchedule: pinboardSchedule,
	onboardingEmails: onboardingEmails,
	browseFile: browseFile,
	removeAndUploadNew: removeAndUploadNew,
	ssl: ssl,
	removeConfirmationText: removeConfirmationText,
	status: status,
	error: error,
	smtp: smtp,
	saml: saml,
	reverseSsh: reverseSsh,
	internalAuth: internalAuth,
	ad: ad,
	nas: nas,
	snapshot: snapshot,
	backup: backup,
	backupPolicy: backupPolicy,
	configComponent: configComponent,
	configStatus: configStatus,
	feed: feed,
	feedObjects: feedObjects,
	axisname: axisname,
	radiant: radiant,
	onboardingHeader: onboardingHeader,
	onboardingBody: onboardingBody,
	onboardingButton: onboardingButton,
	notifications: notifications,
	information: information,
	userPreferences: userPreferences,
	addEmailToolTip: addEmailToolTip,
	profilePicFileTypeErrorMessage: profilePicFileTypeErrorMessage,
	acceptAnswer: acceptAnswer,
	searchIQEnabled: searchIQEnabled,
	upgrade: upgrade,
	download: download,
	upload: upload,
	PREUPGRADE: PREUPGRADE,
	preUpgrade: preUpgrade,
	UPGRADE: UPGRADE,
	errorOccured: errorOccured,
	currentVersion: currentVersion,
	whiteListedDomains: whiteListedDomains,
	uploadSuccessful: uploadSuccessful
};

/**
 * Copyright: ThoughtSpot Inc. 2016
 * Author: Supriya Kharade (supriya.kharade@thoughtspot.com)
 *
 * @fileoverview Module which manages strings/translations for the app.
 */
let $rootScope = ngRequire('$rootScope');
let providedBlinkConstants = ngRequire('blinkConstants');
let safeApply = ngRequire('safeApply');
let jsUtil = ngRequire('jsUtil');
const strings = translations_2;
const localizedDateFormats = translations_1;
translations_4(stringsEnUS);
translations_3(dateFormatsEnUS);
let currentStringLocale = 'en-US';
let logger$2 = logger_3('strings');
const blink$2 = window.blink;
const TRANSLATIONS_PATH = ''; //`${blink.depsPath}/@thoughtspot/translations/resources/`;
let onchangeHandlers = {};
function registerForStringChanges(onchangeHandler) {
    let id = jsUtil.generateUUID();
    onchangeHandlers[id] = onchangeHandler;
    return () => {
        delete onchangeHandlers[id];
    };
}
function loadResource(resourcePath) {
    resourcePath = resourcePath.toLowerCase();
    return new Promise((resolve, reject) => {
        let xhr = new XMLHttpRequest();
        xhr.withCredentials = true;
        xhr.onreadystatechange = function () {
            if (xhr.readyState < 4) {
                return;
            }
            if (xhr.status === 200) {
                let response = JSON.parse(xhr.responseText);
                resolve(response);
            }
            reject();
        };
        xhr.open('GET', resourcePath, true);
        xhr.send();
    });
}
function updateStrings(locale) {
    return new Promise((resolve, reject) => {
        locale = blink$2.supportedLocales[locale];
        if (!locale || locale === currentStringLocale) {
            return Promise.resolve();
        }
        let suffix = `${locale}${blink$2.localeSuffix}.json`;
        let resourcePath = `${TRANSLATIONS_PATH}strings/strings-${suffix}`;
        loadResource(resourcePath).then((response) => {
            translations_4(response);
            resolve();
        }, reject);
    });
}
function updateDateFormats(locale) {
    return new Promise((resolve, reject) => {
        locale = blink$2.supportedLocales[locale];
        if (!locale || locale === currentStringLocale) {
            return Promise.resolve();
        }
        let suffix = `${locale}${blink$2.localeSuffix}.json`;
        let resourcePath = `${TRANSLATIONS_PATH}date-formats/date-formats-${suffix}`;
        loadResource(resourcePath).then((response) => {
            translations_3(response);
            resolve();
        }, reject);
    });
}
async function updateResources(locale, dontApplyChanges) {
    locale = blink$2.supportedLocales[locale];
    if (!locale || locale === currentStringLocale) {
        return Promise.resolve();
    }
    try {
        await Promise.all([
            updateStrings(locale),
            updateDateFormats(locale)
        ]);
        currentStringLocale = locale;
        _.forEach(onchangeHandlers, (onchangeHandler) => {
            onchangeHandler();
        });
        // Trigger digest loop to apply changes.
        if (!dontApplyChanges) {
            _.merge(blinkConstants_1, strings);
            _.merge(providedBlinkConstants, strings);
            safeApply($rootScope);
        }
    }
    catch (e) {
        logger$2.error('New translation could not be loaded');
    }
}
Provide('strings')(strings);
Provide('localizedDateFormatString')(localizedDateFormats);
Provide('stringsService')({ registerForStringChanges: registerForStringChanges });

String.prototype.assign = (...args) => {
    return stringUtil_1(undefined.valueof(), ...args);
};
let me = {}, _logger = logger_3('util');
me.LoadStates = {
    UNINITIALIZED: 'UNINITIALIZED',
    INITIALIZING: 'INITIALIZING',
    INITIALIZED: 'INITIALIZED',
    INITIALIZATION_FAILED: 'INITIALIZATION_FAILED'
};
me.dataTypesToDisplayName = {
    BOOL: 'Text',
    CHAR: 'Text',
    VARCHAR: 'Text',
    DATE: 'Date',
    DATE_TIME: 'Datetime',
    TIME: 'Time',
    DATE_NUM: 'Numeric',
    INT32: 'Numeric',
    INT64: 'Numeric',
    DOUBLE: 'Decimal',
    FLOAT: 'Decimal'
};
me.displayNameToDataType = {
    Boolean: 'BOOL',
    Text: 'VARCHAR',
    Date: 'DATE',
    Datetime: 'DATE_TIME',
    Time: 'TIME',
    Numeric: 'INT64',
    Decimal: 'DOUBLE'
};
me.dataTypes = {
    BOOL: 'BOOL',
    CHAR: 'CHAR',
    VARCHAR: 'VARCHAR',
    DATE: 'DATE',
    DATE_TIME: 'DATE_TIME',
    TIME: 'TIME',
    DATE_NUM: 'DATE_NUM',
    INT32: 'INT32',
    INT64: 'INT64',
    DOUBLE: 'DOUBLE',
    FLOAT: 'FLOAT',
    UNKNOWN: 'UNKNOWN'
};
me.getConstantValue = function (value, type) {
    return '';
};
me.queryConstantValue = function (constantValue) {
    if (!constantValue) {
        return '';
    }
    if (constantValue.hasOwnProperty('stringVal')) {
        return constantValue.getStringVal();
    }
    if (constantValue.hasOwnProperty('dateVal')) {
        return constantValue.getDateVal();
    }
    if (constantValue.hasOwnProperty('boolVal')) {
        return constantValue.getBoolVal();
    }
    if (constantValue.hasOwnProperty('int64Val')) {
        return constantValue.getInt64Val();
    }
    if (constantValue.hasOwnProperty('int32Val')) {
        return constantValue.getInt32Val();
    }
    if (constantValue.hasOwnProperty('doubleVal')) {
        return constantValue.getDoubleVal();
    }
    if (constantValue.hasOwnProperty('floatVal')) {
        return constantValue.getFloatVal();
    }
    return '';
};
me.addEventListenersUseCapture = function (el, events, fn) {
    let evts = events.split(' ');
    evts.forEach(function (evt) {
        el.addEventListener(evt, fn, true);
    });
};
me.removeEventListenersUseCapture = function (el, events, fn) {
    let evts = events.split(' ');
    evts.forEach(function (evt) {
        el.removeEventListener(evt, fn, true);
    });
};
/**
 * Safely accesses nested properties of an object
 * @param {Object} obj
 * @param {Array | string} props    A string containing the properties separated by dots, or an array of properties
 * @return {*}                      Will return the value of the property if it exists, undefined otherwise
 *
 * Examples:
 * util.prop(viz, 'metaContent.title.value.text');
 * util.prop(viz, ['metaContent', 'title', 'value', 'text']);
 */
me.prop = function (obj, props) {
    let prop = obj;
    if (typeof props === 'string') {
        props = props.split('.');
    }
    for (let i = 0, l = props.length; i < l; i++) {
        if (!prop) {
            return;
        }
        prop = prop[props[i]];
        if (i === l - 1) { // This is the last property in the chain
            return prop;
        }
    }
    return obj;
};
/**
 * Safely writes to a nested property of an object.
 * Setting properties to undefined deletes the object.
 * @param {Object} obj
 * @param {Array | string} props    A string containing the properties separated by dots, or an array of properties
 * @return {*}                      Will return true if the property was found and successfully set
 *
 * Examples:
 * util.setProp(viz, 'metaContent.title.value.text', 'New Title');
 * util.setProp(viz, ['metaContent', 'title', 'value', 'text'], 'New Title');
 */
me.setProp = function (obj, props, val) {
    let prop = obj;
    if (typeof props === 'string') {
        props = props.split('.');
    }
    for (let i = 0, l = props.length; i < l; i++) {
        if (!prop) {
            return;
        }
        if (i === l - 1) { // This is the last property in the chain
            if (val === void 0) {
                delete prop[props[i]];
            }
            else {
                prop[props[i]] = val;
            }
            return true;
        }
        else {
            // Create an intermediate property in the chain if it does not exist.
            if (!prop.hasOwnProperty(props[i])) {
                prop[props[i]] = {};
            }
            prop = prop[props[i]];
        }
    }
};
/**
 * Deletes the property
 * @param {Object} obj
 * @param {Array | string} props    A string containing the properties separated by dots,
 * or an array of properties
 *
 * Examples:
 * util.prop(viz, 'metaContent.title.value.text');
 * util.prop(viz, ['metaContent', 'title', 'value', 'text']);
 */
me.deleteProp = function (obj, props) {
    me.setProp(obj, props, void 0);
};
/**
 * Whether an object has a certain value
 * @param {Object} obj
 * @return {boolean}
 */
me.hasValue = function (obj, value) {
    for (let key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === value) {
            return true;
        }
    }
    return false;
};
me.mapArrayToHash = function (array, mappingFunction, defaultValue) {
    let hash = {}, defaultValueIsFunction = _.isFunction(defaultValue);
    array.forEach(function (element, index) {
        let key = mappingFunction(element, index), value = element;
        if (!!defaultValue) {
            if (defaultValueIsFunction) {
                value = defaultValue(element, index);
            }
            else {
                value = defaultValue;
            }
        }
        hash[key] = value;
    });
    return hash;
};
/**
 * Wheter an array contains an object
 *
 * @param arr
 * @param obj
 *
 * @return {boolean}
 */
me.contains = function (arr, obj) {
    return arr.some(function (element) {
        return obj === element;
    });
};
/**
 * Truncates the string and appends three dots if the string is longer than maxLength
 * @param {string} str
 * @param {number} maxLength
 * @return {string}
 *
 * Example:
 * util.truncate('This is a long string', 18);
 * >> This is a long str…
 */
me.truncate = function (str, maxLength) {
    if (str.length > maxLength) {
        return str.substring(0, maxLength) + '…';
    }
    return str;
};
me.replaceAll = function (str, find, replace) {
    return str.replace(new RegExp(find, 'g'), replace);
};
/**
 * Returns true if a string is empty or contains only spaces, false otherwise.
 * @param {string} string
 * @return {boolean}
 */
me.isEmptyOrOnlySpaces = function (string) {
    return (!string || typeof string !== 'string' || string.trim().length === 0);
};
/**
 * Checks whether a GUID has a valid format
 * @param {string} string   The GUID to test
 * @return {boolean}
 */
me.isValidGuid = function (string) {
    let guidRegexp = /^[a-fA-F0-9]{8}-([a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}$/;
    if (!string || typeof string !== 'string' || !guidRegexp.test(string)) {
        return false;
    }
    return true;
};
/**
 * Example: If needle is ['sort', 'by'] and haystack is ['sort', 'by', ...] return true
 * @param {Array.<string>} needle
 * @param {Array.<string>} haystack
 */
me.isPrefixArray = function (needle, haystack) {
    if (needle.length > haystack.length) {
        return false;
    }
    for (let i = 0; i < needle.length; i++) {
        if (needle[i].toLowerCase() != haystack[i].toLowerCase()) {
            return false;
        }
    }
    return true;
};
/**
 * Example: If needle is ['part', 'name'] and haystack is [..., 'part', 'name'] return true
 * @param {Array.<string>} needle
 * @param {Array.<string>} haystack
 */
me.isPostfixArray = function (needle, haystack) {
    if (needle.length > haystack.length) {
        return false;
    }
    for (let i = needle.length - 1, j = haystack.length - 1; i >= 0; i--, j--) {
        if (needle[i].toLowerCase() != haystack[j].toLowerCase()) {
            return false;
        }
    }
    return true;
};
/**
 * Example: For input 'a, b, c' returns ['a', 'b', 'c']
 * @param {string} The string with comma-separated values
 */
me.getArrayFromCommaSeparatedString = function (input) {
    return input.trim().split(/\s*,\s*/)
        .filter(function (x) { return !!x; });
};
/**
 * Example: isPostfix('foo', 'barfoo') is true, isPostfix('foo', 'foo', true) is false.
 *
 * @param {string} needle
 * @param {string} haystack
 * @param {boolean=} isStrict true for when we want a strict postfix, that is needle is shorter than haystack
 */
me.isPostfix = function (needle, haystack, isStrict) {
    if (needle.length > haystack.length) {
        return false;
    }
    if (!!isStrict && needle.length === haystack.length) {
        return false;
    }
    return (haystack.lastIndexOf(needle) === (haystack.length - needle.length));
};
/**
 * ['foo', 'bar', '', ''] => ['foo', 'bar']
 *
 * @param {Array.<string>} arr
 */
me.arrayTrimRight = function (arr) {
    arr = arr.slice();
    while (arr.length > 0 && arr[arr.length - 1] === '') {
        arr.pop();
    }
    return arr;
};
/**
 * Finds the items in an array and removes them
 * The list of items removed are returned.
 *
 * @param arr
 * @param checkFn
 * @returns {Array.<T>}
 */
me.findAndRemoveAll = function (arr, checkFn) {
    let i = arr.length;
    let itemsDeleted = [];
    while (i--) {
        let item = arr[i];
        if (!!checkFn(item, i)) {
            arr.splice(i, 1);
            itemsDeleted.push(item);
        }
    }
    return itemsDeleted.reverse();
};
/**
 * merge two sorted Arrays into one.
 *
 * @param arr1
 * @param arr2
 * @param compareFn
 * @param doNotRemoveDupes
 * @returns {Array}
 */
me.mergeSortedArrays = function (arr1, arr2, compareFn, doNotRemoveDupes) {
    let i = 0, j = 0;
    let result = [];
    function compareWrapper(item1, item2) {
        if (i === arr1.length) {
            return 1;
        }
        if (j === arr2.length) {
            return -1;
        }
        return compareFn(item1, item2);
    }
    while (i < arr1.length || j < arr2.length) {
        let item1 = arr1[i], item2 = arr2[j];
        let comparison = compareWrapper(item1, item2);
        if (comparison < 0) {
            result.push(item1);
            i++;
        }
        else if (comparison > 0) {
            result.push(item2);
            j++;
        }
        else {
            result.push(item1);
            if (!doNotRemoveDupes) {
                i++;
                j++;
            }
            else {
                i++;
            }
        }
    }
    return result;
};
me.getTimeBucketizedTitle = function (title, timeBucket) {
    if (timeBucket === 'ms') {
        return title;
    }
    let bucketLabel = strings.timeBucketLabels[timeBucket];
    return bucketLabel ? _.capitalize(bucketLabel) + ' ' + title : title;
};
/**
 * Computes the placeholder value to be used as the +Infinity/-Infinity values
 * for chart axes.
 * @param min
 * @param max
 * @returns {number}
 */
me.computeAxisInfinityPlaceholderValue = function (min, max) {
    // the only case in which either of the ends can be +/- Inf is when
    // there are no non-special points in the data (i.e. all valid points
    // are +/- inf). In such cases any value can be used as a placeholder
    if ((min === Number.NEGATIVE_INFINITY || min === Number.POSITIVE_INFINITY)) {
        return 1;
    }
    // this can happen if all finite y-value points have the
    // same y-value
    if (min === max) {
        return (max + 1) * 10;
    }
    return Math.max(Math.abs(max), Math.abs(min)) + Math.abs(max - min);
};
/**
 * Casts a number to a string and pads it with leading zeros to a desired width
 * @param number (can be an integer, float, or string)
 * @param desiredWidth
 * @returns {string}
 */
me.padWithLeadingZeros = function (number, desiredWidth) {
    let numberAsStr = number.toString();
    let currentWidth = numberAsStr.length;
    if (numberAsStr.includes('.')) {
        // Width does not count the decimal point
        desiredWidth++;
    }
    if (currentWidth >= desiredWidth) {
        return numberAsStr;
    }
    return '0'.repeat(desiredWidth - currentWidth) + numberAsStr;
};
/**
 * Returns the width in pixels of the given string when rendered on a simple span in the body
 * @param {string} str
 * @param {string=} cssClass optional css class to apply on the temporary element for the correct font size and weight
 * @return {number}
 */
me.getPixelWidthOfString = function (str, cssClass) {
    str = _.escape(str);
    // NOTE: Display inline-table helps calculate the width. In case of flex container.
    // Span takes the full width by default.
    let $tmpEl = $(`<span style='display: inline-table; width: fit-content' class='` + (cssClass || '') + `>` + str.replace(/ /g, '&nbsp;') + '</span>').appendTo($('body'));
    let width = $tmpEl.width();
    $tmpEl.remove();
    return width;
};
/**
 * Uses canvas.measureText to compute and return the width of the given text of given font
 * in pixels.
 * Prefer this function over getPixelWidthOfString
 *
 * @param {String} text The text to be rendered.
 * @param {String} font The css font descriptor that text is to be rendered with
 * (e.g. 'bold 14px verdana').
 *
 * @see http://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393
 */
me.getPixelWidthOfStringUsingCanvas = function (text, font) {
    // re-use canvas context object for better performance
    let context = this._context ||
        (this._context = document.createElement('canvas').getContext('2d'));
    context.font = font;
    let metrics = context.measureText(text);
    return metrics.width;
};
/**
 * Return a 'wide' string of specified length. This will be used to determine max pixel width, given string length.
 * @param {number} len
 */
me.getStringOfLength = function (len) {
    let str = '';
    for (let i = 0; i < len; i++) {
        str += 'D'; // widest character
    }
    return str;
};
/**
 * Returns the innerText given an html fragment string.
 * @param html
 */
me.innerText = function (html) {
    html = html.replace(/&nbsp;/g, ' ');
    html = html.replace(/<(\/|br)*?>/gi, '\n');
    html = html.replace(/<div[^>]*>/gi, '\n');
    html = html.replace(/<(\/|.)*?>/gi, '');
    html = html.replace(/&#x2f;/g, '/');
    return html.trim();
};
me.zeroFill = function (number, width) {
    width -= number.toString().length;
    if (width > 0) {
        return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
    }
    return number + ''; // always return a string
};
/**
 * Takes an array of promises and returns a combined promise that will resolve once all original promises
 * are fulfilled, or be rejected if any of the original promises returns with an error.
 * @param  {Array}  promises  An array of promises
 * @return {Object}           The combined promise
 */
me.getAggregatedPromise = function (promises) {
    let deferred = $q.defer(), nbOfResolvedPromises = 0, resolveData = [];
    if (!promises.length) {
        deferred.resolve(resolveData);
    }
    promises.forEach(function (promise, index) {
        promise.then(function (data) {
            resolveData[index] = data;
            nbOfResolvedPromises++;
            if (nbOfResolvedPromises === promises.length) {
                deferred.resolve(resolveData);
            }
        }, function (error) {
            deferred.reject(error);
        });
    });
    return deferred.promise;
};
function generateDFA(keySequence) {
    function isRepeatable(key) {
        if (!key) {
            return false;
        }
        let lastchar = key.slice(-1);
        return lastchar === '+' || lastchar === '*';
    }
    function isSkippable(key) {
        if (!key) {
            return false;
        }
        let lastchar = key.slice(-1);
        return lastchar === '*';
    }
    function strip(key) {
        let lastchar = key.slice(-1);
        return (lastchar === '*' || lastchar === '+')
            ? key.slice(0, -1)
            : key;
    }
    let dfa = [];
    for (let i = 0; i < keySequence.length; i++) {
        let key = keySequence[i];
        let nextKey = keySequence[i + 1];
        let prevKey = keySequence[i - 1];
        let state = {};
        state[strip(key)] = i + 1;
        if (isSkippable(key)) {
            state[strip(nextKey)] = i + 2;
        }
        if (isRepeatable(prevKey)) {
            state[strip(prevKey)] = i;
        }
        dfa.push(state);
    }
    dfa.push({});
    return dfa;
}
/**
 * Generates a key sequence detector for a given key sequence
 * Does not support characters '+' and '*' as they are reserved.
 * Example usage: getKeySequenceDetector([';',' *','\n'], onSuccess)
 * The above will match ; followed by any number of spaces and a newline.
 *
 * @param keySequence
 * @param onSuccess
 * @returns {Function}
 */
me.getKeySequenceDetector = function (keySequence, onSuccess) {
    let currentState = 0;
    let dfa = generateDFA(keySequence);
    return function (key, event) {
        currentState = dfa[currentState][key] || 0;
        // If a key does not match any transition, but can start a new cycle
        // for e.g. (';',' ',';')
        if (currentState === 0) {
            currentState = dfa[currentState][key] || 0;
        }
        if (currentState === dfa.length - 1) {
            currentState = 0;
            onSuccess(event);
        }
    };
};
/**
 * From an array returns smallest number larger than the given number.
 *
 * @param array
 * @param number
 * @returns {*}
 */
me.getSmallestNumberLargerThan = function (array, number) {
    if (!array || array.length <= 0) {
        return void 0;
    }
    let result = void 0;
    array.forEach(function (item) {
        if (item > number) {
            if (!result) {
                result = item;
            }
            else {
                if (item < result) {
                    result = item;
                }
            }
        }
    });
    return result;
};
/**
 * From an array returns largest number smaller than the given number.
 *
 * @param array
 * @param number
 * @returns {*}
 */
me.getLargestNumberSmallerThan = function (array, number) {
    if (!array || array.length <= 0) {
        return void 0;
    }
    let result = void 0;
    array.forEach(function (item) {
        if (item < number) {
            if (!result) {
                result = item;
            }
            else {
                if (item > result) {
                    result = item;
                }
            }
        }
    });
    return result;
};
/**
 * Updates the properties of the target using the source object. Only the enumerable
 * own properties of target are updated and non existing properties are ignored.
 * @param {Object} target
 * @param {object} source
 * @param {boolean} deep
 * @param {boolean} strict - do type matching before overriding
 * @returns {Object}
 */
me.update = function (target, source, deep, strict) {
    let key, sourceIsObject, targetIsObject, sourceVal, targetVal, result;
    if (target) {
        for (key in source) {
            if (_.has(source, key) && _.has(target, key)) {
                sourceVal = source[key];
                targetVal = target[key];
                let sourceType = typeof sourceVal;
                let targetType = typeof targetVal;
                if (!!strict && sourceType !== targetType) {
                    _logger.warn('Type mismatch', key);
                    continue;
                }
                sourceIsObject = sourceType === 'object';
                targetIsObject = targetType === 'object';
                result = sourceVal;
                // Going deep
                if (deep && sourceIsObject && targetIsObject) {
                    me.update(target[key], sourceVal, deep, strict);
                    continue;
                }
                target[key] = result;
            }
        }
    }
    return target;
};
/**
 * Gets the next element to pick from fromList that is missing in the inList.
 *
 * @param {Array} fromList
 * @param {Array} inList
 */
me.getNextMissing = function (fromList, inList) {
    return fromList.filter(function (f) {
        return inList.indexOf(f) < 0;
    })[0];
};
let SAGE_TOKEN_COLORS = [
    'orange',
    'blue',
    'green',
    'yellow',
    'purple',
    'turquoise',
    'pink',
    'dark-blue',
    'red'
], usedColorIndexList = {}, colorMap = {};
function findNextFreeColorIndex() {
    for (let i = 0; i < SAGE_TOKEN_COLORS.length; ++i) {
        if (!usedColorIndexList[i]) {
            return i;
        }
    }
    usedColorIndexList = {};
    return 0;
}
me.getColorForGuid = function (guid) {
    if (!colorMap.hasOwnProperty(guid)) {
        let colorIndex = findNextFreeColorIndex();
        usedColorIndexList[colorIndex] = true;
        colorMap[guid] = { color: SAGE_TOKEN_COLORS[colorIndex], position: colorIndex };
    }
    return colorMap[guid].color;
};
me.resetColorMap = function () {
    colorMap = {};
    usedColorIndexList = {};
};
me.removeColorEntryForGuid = function (guid) {
    if (!colorMap.hasOwnProperty(guid)) {
        return;
    }
    usedColorIndexList[colorMap[guid].position] = false;
    delete colorMap[guid];
};
/**
 * Comapares the 2 given values. Here:
 * 1. null and undefined are treated as equal
 * 2. null and undefined are treated to be smaller than non-null values
 * 3. String comparison is case insensitive
 *
 * @param value1
 * @param value2
 */
me.comparator = function (value1, value2) {
    let result = 0;
    if (value1 == value2) {
        result = 0;
    }
    else if (value1 === undefined || value1 === null) {
        result = -1;
    }
    else if (value2 === undefined || value2 === null) {
        result = 1;
    }
    else if (typeof value1 === 'string' && typeof value2 === 'string') {
        let value1LwrCase = value1.toLowerCase(), value2LwrCase = value2.toLowerCase();
        result = (value1LwrCase === value2LwrCase ? 0 : (value1LwrCase > value2LwrCase ? 1 : -1));
    }
    else {
        result = (value1 > value2 ? 1 : -1);
    }
    return result;
};
/**
 * Returns true if both arrays represent the same unordered set. === is used as the array element equality function
 * @param array1
 * @param array2
 * @return {boolean}
 */
me.areArraysSameSet = function (array1, array2) {
    array1 = array1 || [];
    array2 = array2 || [];
    array1 = array1.unique();
    array2 = array2.unique();
    return array1.length === array2.length && array1.intersect(array2).length === array1.length;
};
/**
 *
 * @param {Array} array1
 * @param {Array} array2
 * @param {=Function} mappingFunction
 * @returns {boolean}
 */
me.areArraysEqual = function (array1, array2, mappingFunction) {
    if (array1.length !== array2.length) {
        return false;
    }
    for (let i = 0; i < array1.length; ++i) {
        let value1 = array1[i];
        let value2 = array2[i];
        if (!!mappingFunction) {
            value1 = mappingFunction(value1);
            value2 = mappingFunction(value2);
        }
        if (value1 !== value2) {
            return false;
        }
    }
    return true;
};
/**
 * Returns whether the current browser is firefox by looking at the user agent string
 * @return {boolean}
 */
me.isFirefox = function () {
    return !!navigator.userAgent.toLowerCase().match('firefox');
};
/**
 * executes the given function in the next event loop
 * @param func
 */
me.executeInNextEventLoop = function (func) {
    if (!func) {
        return;
    }
    $timeout(func, 0);
};
/**
 * Returns an array of size numRepeat that has all values set to value
 * @param value
 * @param numRepeat
 * @returns {Array}
 */
me.repeat = function (value, numRepeat) {
    if (numRepeat <= 0) {
        return [];
    }
    let array = [], i = 0;
    while (i < numRepeat) {
        array[i++] = value;
    }
    return array;
};
/**
 * Converts array into a hash map with key as the value returned by calling mappingFunction on each element
 * and value as defaultValue. If defaultValue is not specified, the element itself is used as the value
 * Caution (Shikhar) - Care should be taken in case of duplicates in the array. These can map to same key value
 * and only one of these values would be stored.
 * @param {Array} array
 * @param {Function} mappingFunction
 * @param {=*} defaultValue a value or a function to be used to get the value of the hash. if a function it is
 *                          invoked with the key and the return value used as the value in the hash for the key
 * @returns {Object}
 */
me.mapArrayToHash = function (array, mappingFunction, defaultValue) {
    let hash = {}, defaultValueIsFunction = _.isFunction(defaultValue);
    array.forEach(function (element, index) {
        let key = mappingFunction(element, index), value = element;
        if (!!defaultValue) {
            if (defaultValueIsFunction) {
                value = defaultValue(element, index);
            }
            else {
                value = defaultValue;
            }
        }
        hash[key] = value;
    });
    return hash;
};
/**
 * Maps array [a1, a2, a3....] to hash {a1: true, a2: true. a3: true....}
 * Caution (Shikhar) - Care should be taken in case of duplicates in the array. These can map to same key value
 * and only one of these values would be stored.
 * @param {Array} array
 * @param {=Function} valueToKeyFunction a function that maps values in array to keys used in the returned
 *                                       hash
 * @returns {*}
 */
me.mapArrayToBooleanHash = function (array, valueToKeyFunction) {
    if (!array) {
        return null;
    }
    if (!valueToKeyFunction) {
        valueToKeyFunction = _.identity;
    }
    let hash = {};
    array.forEach(function (item) {
        let key = valueToKeyFunction(item);
        hash[key] = true;
    });
    return hash;
};
/**
 * Generate a reordering map given two position hashs
 *
 * @param srcOrder e.g. {key1: 0, key2: 1, key3: 3, key4: 2}
 * @param tgtOrder e.g. {key1: 1, key2: 0, key3: 2, key4: 3}
 * @returns {*} e.g {0:1, 1:0, 3:2, 2:3}
 */
me.generateTransitiveMap = function (srcMap, tgtMap) {
    return Object.keys(srcMap).reduce(function (reordering, key) {
        let srcPos = srcMap[key];
        reordering[srcPos] = tgtMap[key];
        return reordering;
    }, {});
};
/**
 * Reorders an array given the reordering map.
 *
 * @param items
 * @param reordering
 * @returns {Array}
 */
me.reorderItems = function (items, reordering) {
    let newItems = [];
    items.forEach(function (item, idx) {
        let newIdx = reordering[idx];
        if (newIdx != void 0) {
            newItems[newIdx] = item;
        }
    });
    return newItems;
};
function copyArrayOfArrays(arrOArr) {
    if (arrOArr.length === 0) {
        return [];
    }
    let maxDepthReached = arrOArr[0].length === undefined;
    if (maxDepthReached) {
        return arrOArr.slice();
    }
    let rv = [];
    for (let i = 0; i < arrOArr.length; i++) {
        rv.push(copyArrayOfArrays(arrOArr[i]));
    }
    return rv;
}
/**
 * Returns an array with all possible splits of elements of __array__ into __numBuckets__ arrays.
 * Sample Input: [1, 2], 2, 0
 * Sample Output: [[[1,2],[]],[[2],[1]],[[1],[2]],[[],[1,2]],[[1],[]],[[],[1]],[[2],[]],[[],[2]],[[],[]]]
 *
 * WARNING(Handle with Care): The size of the output is exp(numBuckets, array.length). Hence the time taken by
 * the function can increase very fast.
 *
 * @param array
 * @param numBuckets
 * @param startIndex {=Number} index to start from in __array__ (defaults to 0)
 * @returns {Array}
 */
me.getAllSplits = function (array, numBuckets, startIndex) {
    startIndex = startIndex || 0;
    if (startIndex >= array.length) {
        return [me.repeat([], numBuckets)];
    }
    let newSplits = [], recursiveSplits = me.getAllSplits(array, numBuckets, startIndex + 1);
    recursiveSplits.forEach(function (recursiveSplit) {
        for (let i = 0; i < numBuckets; i++) {
            let split = copyArrayOfArrays(recursiveSplit);
            split[i].unshift(array[startIndex]);
            newSplits.push(split);
        }
    });
    return newSplits.concat(recursiveSplits);
};
me.getAllCombinationsOfSize = function (array, tupleSize) {
    let cache = {};
    let recursive = function (array, tupleSize, startIndex) {
        let cacheKey = tupleSize + ',' + startIndex;
        if (!cache.hasOwnProperty(cacheKey)) {
            let rv;
            if (tupleSize === 0) {
                rv = [[]];
            }
            else if (startIndex >= array.length) {
                rv = [];
            }
            else {
                let oneSizeLess = recursive(array, tupleSize - 1, startIndex + 1), sameSize = recursive(array, tupleSize, startIndex + 1);
                for (let j = 0; j < oneSizeLess.length; j++) {
                    oneSizeLess[j].unshift(array[startIndex]);
                }
                rv = oneSizeLess.concat(sameSize);
            }
            cache[cacheKey] = copyArrayOfArrays(rv);
        }
        return cache[cacheKey];
    };
    return recursive(array, tupleSize, 0);
};
/**
 * Removes all the properties on the given object. Deletes only those keys for which hasOwnProperty is true
 * @param object {Object}
 */
me.clearObject = function (object) {
    Object.keys(object).forEach(function (key) {
        delete object[key];
    });
};
/**
 * For an array of numbers returns the minimum number of decimal places
 * that each number can be rounded to without causing a duplicate.
 * For example [1.234, 1.245, 1.266] => 2 (after rounding [1.23, 1.24, 1.26].
 * The returned values is capped at __maxDecimalPlaces__.
 *
 * @param {Array.<Number>} values
 * @param {Number} maxDecimalPlaces
 * @returns {Number}
 */
me.getMinDifferentiatingPrecision = function (values, maxDecimalPlaces, minDecimalPlaces) {
    if (isNaN(minDecimalPlaces)) {
        minDecimalPlaces = 0;
    }
    if (values.length === 1) {
        return minDecimalPlaces;
    }
    values = values.compact().unique();
    // TODO (sunny): do a binary search
    for (let i = minDecimalPlaces; i < maxDecimalPlaces; i++) {
        let distinctValues = {}, duplicatesFound = false;
        for (let j = 0; j < values.length; j++) {
            let value = values[j], roundedValue = Math.round(value * Math.pow(10, i));
            if (_.has(distinctValues, roundedValue)) {
                duplicatesFound = true;
                break;
            }
            distinctValues[roundedValue] = true;
        }
        if (!duplicatesFound) {
            return i;
        }
    }
    return maxDecimalPlaces;
};
/**
 * Forces a DOM node to repaint. webkit DOM changes through JS seem to fail to repaint the affected nodes
 * in certain conditions. Refer to SCAL-3925 for an example.
 * Source: http://stackoverflow.com/a/3485654
 * @param node
 */
me.webkitForceRepaintNode = function (node) {
    let existingDisplay = node.style.display;
    node.style.display = 'none';
    let dummyVarForeslint = node.offsetHeight;
    node.style.display = existingDisplay;
};
me.getLocationOrigin = function (context) {
    context = context || window;
    if (!context.location) {
        _logger.error('Can not find location origin of a context without location property');
        _logger.debug(context);
        return;
    }
    if (context.location && context.location.origin) {
        return context.location.origin;
    }
    return context.location.protocol + '//' +
        context.location.hostname + (context.location.port ? ':' + context.location.port : '');
};
me.registerOneShotEventListener = function ($scope, eventName, callback, deregistrationChecker) {
    let deRegisterer, deRegistererCopy;
    deRegisterer = $scope.$on(eventName, function () {
        if (deregistrationChecker) {
            if (deregistrationChecker.apply(null, arguments)) {
                deRegistererCopy = deRegisterer;
                deRegisterer = null;
                deRegistererCopy();
                callback.apply(null, arguments);
            }
        }
        else {
            deRegistererCopy = deRegisterer;
            deRegisterer = null;
            deRegistererCopy();
            callback.apply(null, arguments);
        }
    });
    return function () {
        if (deRegisterer) {
            let deRegistererCopy = deRegisterer;
            deRegisterer = null;
            deRegistererCopy();
        }
    };
};
/**
 * Joins and array of names into a particular UI suitable format (refer to the examples below)
 * Examples:
 * ['Mahesh', 'Suresh'] => 'Mahesh and Suresh'
 * ['Mahesh', 'Suresh', 'Ramesh'] => 'Mahesh, Suresh and Ramesh'
 * ['Mahesh', 'Suresh', 'Ramesh'], maxIncluded = 2 => 'Mahesh, Suresh and 1 more'
 * ['Mahesh', 'Suresh', 'Ramesh'], maxIncluded = 2, entityName = 'person' => 'Mahesh, Suresh and 1 more person'
 * ['Mahesh', 'Suresh', 'Ramesh', 'Ganesh'], maxIncluded = 2, entityName = 'person' => 'Mahesh, Suresh and 2 more people'
 *
 * @param {Array}   names           The names to join
 * @param {=Number} maxIncluded     Maximum number of names to include (rest will be covered under and N more..)
 * @param {=String} entityName      The entity name to be used in case maxInclude < names.length. It is pluralized
 *                                  if the number of names not included is > 1
 * @returns {*}
 */
me.joinNames = function (names, maxIncluded, entityName) {
    if (isNaN(maxIncluded) || maxIncluded > names.length) {
        maxIncluded = names.length;
    }
    let count = names.length;
    if (count === 0 || maxIncluded <= 0) {
        return '';
    }
    if (count === 1) {
        return names[0];
    }
    let leftOver = count - maxIncluded;
    if (leftOver === 0) {
        return '{1} and {2}'.assign(names.slice(0, count - 1).join(', '), names[count - 1]);
    }
    else {
        let joinedName = '{1} and {2} more'.assign(names.slice(0, maxIncluded).join(', '), leftOver);
        if (!!entityName) {
            return '{1} {2}'.assign(joinedName, leftOver === 1 ? entityName : entityName.pluralize());
        }
        return joinedName;
    }
};
/**
 * Debounces the given function so that no two consecutive calls of the function will be within
 * minExecutionInterval of each other
 * @param func                      the function to debounce
 * @param minExecutionInterval      the debounce interval
 * @param context                   an object containing a timer field for the timer to be shared between multiple
 *                                  functions being debounced (e.g. this can be used to tie together debouncing
 *                                  of mouse-enter and mouse-leave events on a dom node)
 * @param applyChanges              true to apply changes when $timeout fn is processed.
 * @returns {Function}
 */
me.debounce = function (func, minExecutionInterval, context, applyChanges) {
    if (!context) {
        context = {};
    }
    if (!_.has(context, 'timer')) {
        context.timer = null;
    }
    return function () {
        if (context.timer) {
            $timeout.cancel(context.timer);
            context.timer = null;
        }
        let args = Array.prototype.slice.call(arguments), self = this;
        context.timer = $timeout(function () {
            func.apply(self, args);
        }, minExecutionInterval, !!applyChanges);
    };
};
// Wrapper on top of a promise to suppress the resolve/reject call if the caller cancels the promise
/**
 * @param {Promise} promise
 * @returns {Promise}
 */
me.cancelablePromise = function (promise) {
    _.merge(this, promise);
    let cancelResolutions = false;
    this.cancel = function () {
        cancelResolutions = true;
    };
    let self = this;
    self.then = function (resolveFn, rejectFn) {
        return new me.cancelablePromise(promise.then(function () {
            if (cancelResolutions) {
                return;
            }
            resolveFn.apply(self, arguments);
        }, function () {
            if (cancelResolutions) {
                return;
            }
            rejectFn.apply(self, arguments);
        }));
    };
};
me.splitArray = function (arr, splitterPredicateFunc) {
    let groups = [], currentGroup = [];
    Array.prototype.forEach.call(arr, function (item) {
        let isSplitter = splitterPredicateFunc(item);
        if (isSplitter) {
            groups.push(currentGroup);
            currentGroup = [];
        }
        else {
            currentGroup.push(item);
        }
    });
    groups.push(currentGroup);
    return groups;
};
/**
 *
 * @param {string} color
 * @param {number} amt Amount by which to increment each of R,G,B value.
 * @returns {string}
 */
me.lightenDarkenColor = function (color, amt) {
    // Normalize to hex
    color = (new $.colorpicker.Color(color)).toRGB();
    color.r = Number.prototype.clamp.call(color.r + amt, 0, 255);
    color.b = Number.prototype.clamp.call(color.b + amt, 0, 255);
    color.g = Number.prototype.clamp.call(color.g + amt, 0, 255);
    return (new $.colorpicker.Color('rgb({r}, {g}, {b})'.assign(color))).toHex();
};
/**
 * If percent parameter is positive, it will make color lighter.
 * If percent parameter is negative, it will make color darker.
 *
 * @param {string} color
 * @param {number} percent amount by which to increment each of R,G,B value.
 * @returns {string}
 */
me.getColorShade = function (color, percent) {
    /* eslint-disable */
    let colorDecimal = parseInt(color.slice(1), 16), maxVal = percent < 0 ? 0 : 255, red = colorDecimal >> 16, green = colorDecimal >> 8 & 0x00FF, blue = colorDecimal & 0x0000FF;
    /* eslint-enable */
    percent = percent < 0 ? percent * -1 : percent;
    return '#' + (0x1000000 +
        (Math.round((maxVal - red) * percent) + red) * 0x10000 +
        (Math.round((maxVal - green) * percent) + green) * 0x100 +
        (Math.round((maxVal - blue) * percent) + blue))
        .toString(16).slice(1);
};
me.convertToHex = function (color) {
    return new chroma(color).hex();
};
me.executeDeferredOnPromise = function (promise, deferred) {
    promise.then(function () {
        deferred.resolve.apply(deferred, arguments);
    }, function () {
        deferred.reject.apply(deferred, arguments);
    });
};
me.iterateObject = function (object, callback) {
    Object.keys(object).forEach(function (key) {
        callback(key, object[key]);
    });
};
/**
 * Given a map, creates a new map, mapping keys to function applied on key, value.
 *
 * @param {Object} object: Object to modified
 * @param {function} fn: Function to be applied to key, values of the Object.
 * @returns {Object}
 */
me.mapObjectValues = function (object, fn) {
    return Object.keys(object).reduce(function (map, key) {
        map[key] = fn(key, object[key]);
        return map;
    }, {});
};
/**
 * Performs a binary insertion.
 *
 * @param {VALUE} value  The value to be inserted
 * @param {Array<VALUE>} array  The array to be searched.
 * @param {function} comparator Function used to compare value against array object
 * @params {number} startVal  Used internally
 * @params {number} endVal  Used internally
 *
 * @return {boolean} true if a value was inserted, false if not
 */
me.binaryInsert = function (value, array, comparator, startVal, endVal) {
    let length = array.length;
    // Note(chab) endVal/startVal could be 0, so we don't use || syntax
    let start = startVal !== void 0 ? startVal : 0;
    let end = endVal !== void 0 ? endVal : length - 1;
    let midPoint = start + Math.floor((end - start) / 2);
    if (length === 0) {
        array.push(value);
        return true;
    }
    if (comparator(value, array[end]) > 0) {
        array.splice(end + 1, 0, value);
        return true;
    }
    if (comparator(value, array[start]) < 0) {
        array.splice(start, 0, value);
        return true;
    }
    if (start >= end) {
        _logger.warn('was unable to perform binary insertion');
        return false;
    }
    if (comparator(value, array[midPoint]) < 0) {
        return me.binaryInsert(value, array, comparator, start, midPoint - 1);
    }
    if (comparator(value, array[midPoint]) > 0) {
        return me.binaryInsert(value, array, comparator, midPoint + 1, end);
    }
    // we found an equal value, so we choose to insert there
    array.splice(start, 0, value);
    return true;
};
/**
 * Inverts an object so that for each pair of key value, the key becomes the value
 * and the value becomes the key. Does not modify the original object, returns a
 * new one.
 * Caveats:
 * 1. The object should be a 1-1 map. If it is not the last key for a value is used as the value for the value
 * 2. The values will be stringified to make them valid object keys
 * @param object
 */
me.invertObject = function (object) {
    let rv = {};
    me.iterateObject(object, function (key, value) {
        if (_.has(rv, value)) {
            _logger.warn('invertObject: object is not a 1-1 map, offending value:', value);
        }
        rv[value] = key;
    });
    return rv;
};
me.findIndexFromLast = function (array, predicate) {
    let predicateIsFunction = _.isFunction(predicate);
    for (let i = array.length - 1; i >= 0; i--) {
        // TODO (sunny): this will prevent searching for functions in an
        // array of functions
        if (predicateIsFunction) {
            if (predicate(array[i])) {
                return i;
            }
        }
        else {
            if (array[i] === predicate) {
                return i;
            }
        }
    }
    return -1;
};
/**
 * A method that polls for a certain condition to become true.
 *
 * @param {Function} func boolean function to wait for.
 *
 * @param {int} pollTime polling interval.
 *
 * @param {int} timeout timeout period.
 */
me.pollForCondition = function (func, pollTime, timeout) {
    pollTime = pollTime || 1000;
    timeout = timeout || 30000;
    let defered = $q.defer();
    let startTime = (new Date).getTime();
    function poller() {
        let out = func();
        if (out) {
            defered.resolve();
        }
        else {
            let currentTime = (new Date).getTime();
            if (currentTime - startTime > timeout) {
                defered.reject();
            }
            else {
                $timeout(poller, pollTime);
            }
        }
    }
    poller();
    return defered.promise;
};
/**
 * A helper method for asyncEach() that is called on each element.
 * The method is a recursive iterator on the the array.
 *
 * @param {Object} params
 *
 * @param {Deferred} params.finalDeferred The promise object to resolve when terminating the iteration.
 *
 * @param {Function} params.promiseFn The callback to call on each element of the array. It must
 *     return a promise that either resolves or rejects based on the caller criterion.
 *     The rejection handler can be passed in an object with a boolean property 'canContinue' that
 *     tells the iterator to continue forward while ignoring the rejection.
 *     The function itself must implement following signature:
 *     promiseFn(i_th_Element, i, resolvedValueSofar),
 *     where i is the current element index we are iterating on and resolvedValueSoFar is the cumulative result
 *     of calling promiseFn so far. The first call to promiseFn always passes null for the resolvedValueSofar.
 *
 * @param {Array} params.array The array to iterate on.
 *
 * @param {Object} resolvedValueSoFar The cumulative result of calling promiseFn() till i-th element of an array.
 *
 * @param {number} i The current array element index that we are iterating on.
 *
 */
function recursiveAsyncProcessor(params, resolvedValueSoFar, i) {
    let finalDeferred = params.finalDeferred, promiseFn = params.promiseFn, array = params.array;
    if (i < 0 || i >= array.length) {
        finalDeferred.resolve(resolvedValueSoFar);
        return;
    }
    promiseFn(array[i], i, resolvedValueSoFar).then(function (newResolvedValue) {
        recursiveAsyncProcessor(params, newResolvedValue, i + 1);
    }, function (e) {
        if (e.canContinue) {
            recursiveAsyncProcessor(params, resolvedValueSoFar, i + 1);
        }
        else {
            finalDeferred.reject({
                resolvedValueSoFar: resolvedValueSoFar,
                rejectionReason: e
            });
        }
    });
}
me.createDeferred = function () {
    return $q.defer();
};
me.asyncEach = function (array, promiseFn) {
    if (!array.length) {
        return $q.when(null);
    }
    let deferred = $q.defer();
    recursiveAsyncProcessor({
        promiseFn: promiseFn,
        finalDeferred: deferred,
        array: array
    }, null /* resolvedValueSoFar */, 0);
    return deferred.promise;
};
me.isClickOutside = function ($element, $event) {
    return !$element.is($event.target) && $element.has($event.target).length === 0;
};
me.copyTextToClipboard = function (text, onCopy) {
    if (!_.isString(text)) {
        return;
    }
    // this logic is 'inspired' by https://github.com/Celebio/SlickGrid
    let textArea = document.createElement('textarea');
    textArea.style.position = 'absolute';
    textArea.style.left = '-1000px';
    textArea.style.top = document.body.scrollTop + 'px';
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    textArea.focus();
    document.execCommand('copy');
    setTimeout(function () {
        textArea.parentNode.removeChild(textArea);
        if (onCopy) {
            onCopy();
        }
    }, 100);
};
me.NameValuePairs = function (defaultMap) {
    let nameValues = defaultMap || [];
    let textTemplate = _.template('${name}: ${value}');
    this.add = function (name, value) {
        nameValues.push({
            name: name,
            value: value
        });
    };
    this.getTemplate = function () {
        let template = '<div>';
        let templateLine = `<div class='bk-tooltip'><span class='bk-tooltip-key'>{1}: </span><span class='bk-tooltip-value'>{2}</span></div>`;
        nameValues.forEach(function (item) {
            if (!!item.name && !!item.value) {
                template += templateLine.assign(_.escape(item.name), _.escape(item.value));
            }
        });
        template += '</div>';
        return template;
    };
    this.getText = function () {
        return nameValues.
            map(function (item) {
            return textTemplate({
                name: _.escape(item.name),
                value: _.escape(item.value)
            });
        }).
            join('\n');
    };
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * Shamelessly copied from NodeJS (https://github.com/joyent/node/blob/master/lib/util.js)
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
me.inherits = function (ctor, superCtor) {
    ctor.__super = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
};
me.arrayHasDuplicates = function (arr, keyFunction) {
    let seenKeys = {}, keyFunctionAvailable = _.isFunction(keyFunction);
    for (let i = 0; i < arr.length; ++i) {
        let key = keyFunctionAvailable ? keyFunction(arr[i], i) : arr[i];
        if (_.has(seenKeys, key)) {
            return true;
        }
        seenKeys[key] = true;
    }
    return false;
};
me.launchIntoFullScreen = function (element) {
    if (element.requestFullscreen) {
        element.requestFullscreen();
    }
    else if (element.mozRequestFullScreen) {
        element.mozRequestFullScreen();
    }
    else if (element.webkitRequestFullscreen) {
        element.webkitRequestFullscreen();
    }
    else if (element.msRequestFullscreen) {
        element.msRequestFullscreen();
    }
};
/**
 * Method to return the first N elements of an Array that satisfy the given
 * conditionFn. If we are not able to find N elements, we return with whatever was found.
 * This also works for array like objects and strings
 * @param array input array
 * @param {Number} N
 * @param {Function} [conditionFn] condition callback adheres to the standard ES fn(elem, idx, array)
 * @param {Object} [thisArg]
 * @returns {Array}
 */
me.firstN = function (array, N, conditionFn /*, thisArg*/) {
    let arr = Object(array); // Converts primitives to wrapper Object, e.g. strings => indexed array
    // eslint-disable-next-line
    let len = arr.length >>> 0; // Gracefully converts non-integer lengths to 32bit UInt
    let n = 0;
    if (typeof conditionFn !== 'function') {
        if (N < 0) {
            N = 0;
        }
        return arr.slice(0, N);
    }
    let res = new Array(N);
    let thisArg = arguments.length >= 4 ? arguments[3] : void 0;
    for (let i = 0; n < N && i < len; i++) {
        if (i in arr) {
            let val = arr[i];
            if (conditionFn.call(thisArg, val, i, arr)) {
                res[n] = val;
                n++;
            }
        }
    }
    res.length = n;
    return res;
};
/**
 * This function helps get uniformly distributed samples from a collection.
 * @param {Array} allValues
 * @param {Number} samplesCount
 * @returns {Array}
 */
me.getSamples = function (allValues, samplesCount) {
    let sampleValues = [];
    if (allValues.length <= samplesCount) {
        sampleValues = allValues.slice();
    }
    else {
        let offset = Math.floor(allValues.length / samplesCount);
        let sampleIndex = 0;
        let sampleIndexInAllValues = 0;
        for (; sampleIndex < samplesCount; sampleIndex++, sampleIndexInAllValues += offset) {
            sampleValues.push(allValues[sampleIndexInAllValues]);
        }
    }
    return sampleValues;
};
/**
 * This function provides capability to transform strings like 'abc'
 * to '<b>a</b>bc' when string to match is 'a'.
 * We use this function when highlight matching text in search bar in the
 * available choices.
 * @param {string} originalText
 * @param {string} stringToMatch
 * @returns {*}
 */
me.boldMatchingText = function (originalText, stringToMatch) {
    if (!originalText || !stringToMatch) {
        return originalText;
    }
    let regex = new RegExp('(' + _.escapeRegExp(stringToMatch) + ')', 'gi');
    let value = originalText.replace(regex, '<b>$1</b>');
    if (!!value) {
        value = _.escape(value + '');
    }
    // NOTE: When the values are escaped here. The <b> and </b> tags also get transformed
    // So we correct the effect here.
    // Transform back all the <b> tags
    regex = new RegExp('(' + _.escapeRegExp('&lt;b&gt;') + ')', 'gi');
    value = value.replace(regex, '<b>');
    // Transform back all the </b> tags
    regex = new RegExp('(' + _.escapeRegExp('&lt;/b&gt;') + ')', 'gi');
    value = value.replace(regex, '</b>');
    return value;
};
me.getPluralizedMessage = function (messages, number) {
    if (messages[number]) {
        return messages[number];
    }
    return messages.n.assign(number);
};
me.getHoursMinutesFromEpoch = function (timeToLive) {
    this.toDays = function (timeToLive) {
        let daysCalc = Math.floor(timeToLive / (1000 * 60 * 60 * 24) % 365);
        return daysCalc;
    };
    this.toHours = function (timeToLive) {
        let hoursCalc = Math.floor(timeToLive / (1000 * 60 * 60) % 24);
        return (hoursCalc < 10) ? '0' + hoursCalc : hoursCalc;
    };
    this.toMinutes = function (timeToLive) {
        let minutesCalc = Math.floor(timeToLive / (1000 * 60) % 60);
        return (minutesCalc < 10) ? '0' + minutesCalc : minutesCalc;
    };
    let days = this.toDays(timeToLive);
    let hours = this.toHours(timeToLive);
    let minutes = this.toMinutes(timeToLive);
    return strings.expirationButton.TIME_UNTIL_EXPIRES.assign(days, hours, minutes);
};
me.isEqualWith = function (obj1, obj2, comparatorFn) {
    let areBothNull = obj1 === null && obj2 === null;
    let areBothUndefined = obj1 === void 0 && obj2 === void 0;
    if (areBothNull || areBothUndefined) {
        return true;
    }
    let areBothObjects = _.isObject(obj1) && _.isObject(obj2);
    if (!areBothObjects) {
        return false;
    }
    let areLeftKeysNotEqual = Object.keys(obj1).some(function (key) {
        let isEqual = comparatorFn(obj1[key], obj2[key], key);
        if (isEqual === void 0) {
            if (_.isObject(obj1[key]) && !_.isArray(obj1[key])) {
                return !me.isEqualWith(obj1[key], obj2[key], comparatorFn);
            }
            return !_.isEqual(obj1[key], obj2[key]);
        }
        return !isEqual;
    });
    let areRightKeysNotEqual = Object.keys(obj2).some(function (key) {
        let isEqual = comparatorFn(obj1[key], obj2[key], key);
        if (isEqual === void 0) {
            if (_.isObject(obj2[key]) && !_.isArray(obj2[key])) {
                return !me.isEqualWith(obj1[key], obj2[key], comparatorFn);
            }
            return !_.isEqual(obj1[key], obj2[key]);
        }
        return !isEqual;
    });
    return !areLeftKeysNotEqual && !areRightKeysNotEqual;
};
me.getSvgIconPath = function (icon) {
    // Do not change the syntax as the grunt cache bust replace the icon name only within the '';
    icon = icon ? '#' + icon : '';
    return (flags.getValue(flags.BLINK_FLAGS.dev.name)
        === false ? '../resources/img/svg-icons-sprite/svg-icons.svg' : '') + icon;
};
me.listContainsScrollbar = function (elem) {
    return elem ? elem.scrollHeight > elem.clientHeight : false;
};
_.merge(me, spclDateFormat, numberUtil$2);

/**
 * Copyright Thoughtspot Inc. 2016
 * Author: Ashish shubham (ashish.shubham@thoughtspot.com)
 */
/**
 * Creates a Proxy on the underlying dependency Object.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
 *
 * It intercepts gets/sets/constructs on the underlying object via handlers.
 * Since ng dependencies might not be available during load time, we return
 * a proxy initially. And when the first call to get a property on the dependency
 * is made, we use the injector to inject that dependency lazily.
 * @param dependencyName
 * @param getInjector
 * @returns {any}
 */
function createProxy(dependencyName, getInjector) {
    // ES6 Proxy support is in limited browsers only.
    let realDep;
    // _.isFunction fails on Safari 10 for window.Proxy, so we add this test
    if (_.isFunction(window.Proxy) || typeof window.Proxy === 'function') {
        return new Proxy(_.noop, {
            get: function (target, property) {
                if (dependencyName === 'util') {
                    return me[property];
                }
                if (dependencyName === 'Logger') {
                    return Logger[property];
                }
                if (dependencyName === '$q') {
                    Promise['when'] = Promise['resolve'];
                    return Promise[property];
                }
                return {};
                realDep = realDep || getRealDependency(getInjector, dependencyName);
                return property === '__real' ? realDep : realDep[property];
            },
            set: function (target, property, value) {
                realDep = realDep || getRealDependency(getInjector, dependencyName);
                realDep[property] = value;
                return true;
            },
            construct: function (target, args) {
                return {};
                realDep = realDep || getRealDependency(getInjector, dependencyName);
                return new realDep(...args);
            },
            apply: function (target, thisArg, argumentsList) {
                return {};
                realDep = realDep || getRealDependency(getInjector, dependencyName);
                return realDep.apply(thisArg, argumentsList);
            }
        });
    }
    else {
        let FakeProxy = function () {
            return FakeProxy.___super.apply(this, arguments);
        };
        runAfterAppReady(function () {
            realDep = getInjector().get(dependencyName);
            if (_.isFunction(realDep)) {
                inherits(FakeProxy, realDep);
            }
            _.assignIn(FakeProxy, realDep);
            FakeProxy.__real = realDep;
        });
        return FakeProxy;
    }
}
function getRealDependency(getInjector, dependencyName) {
    return getInjector().get(dependencyName);
}
function inherits(ctor, superCtor) {
    ctor.___super = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
}

/**
* Copyright: ThoughtSpot Inc. 2012-2016
* Author: Shashank Singh (sunny@thoughtspot.com)
*
* A library of typescript decorators used throughout the app.
*/
let pendingInits = [];
function runAfterAppReady(callback) {
    if (!!blink.app && !!blink.app.appReady) {
        callback();
    }
    else {
        pendingInits.push(callback);
    }
}
function getDependancy(dependencyName) {
    return getInjector().get(dependencyName);
}
function provide(providingFn) {
    if (!!blink.app
        && !!blink.app.provider
        && !!blink.app.compileProvider) {
        providingFn();
    }
}
function getInjector() {
    return blink.app.injector;
}
function ngRequire(dependencyName) {
    return createProxy(dependencyName, getInjector);
}
function Provide(name) {
    return function (definition) {
        return;
        provide(_.partial(makeFactory, name, definition));
    };
}
function makeFactory(name, definition) {
    return;
    blink.app.Provider.factory(name, function () {
        return definition;
    });
}
function decorateComponent($scope, componentInstance) {
    if (!componentInstance) {
        return;
    }
    // Set properties exposed to application.
    componentInstance.isLinked = true;
    if (_.isFunction(componentInstance.setScope)) {
        componentInstance.setScope($scope);
    }
}
function DynamicController($scope, $element) {
    let componentInstance;
    function handleComponentChange(newComponent) {
        if (!!componentInstance && componentInstance !== newComponent) {
            componentInstance.onDestroy($element);
            if (newComponent && newComponent.hasBeenAlreadyLinked) {
                newComponent.hasBeenAlreadyLinked($element);
            }
        }
        componentInstance = newComponent;
        $scope.$ctrl = componentInstance;
        decorateComponent($scope, componentInstance);
    }
    this.$onChanges = function (changes) {
        if (changes.bkCtrl) {
            handleComponentChange(changes.bkCtrl.currentValue);
        }
    };
    this.$onDestroy = function () {
        if (!!componentInstance && _.isFunction(componentInstance.onDestroy)) {
            componentInstance.onDestroy($element);
        }
    };
    this.$postLink = function () {
        if (!!componentInstance) {
            if (_.isFunction(componentInstance.uIPostLink)) {
                componentInstance.uIPostLink($element);
            }
        }
    };
}
DynamicController.$inject = ['$scope', '$element'];
function makeComponent(descriptor) {
    return;
    blink.app.compileProvider
        .component(descriptor.name, {
        bindings: {
            'bkCtrl': '<'
        },
        templateUrl: descriptor.templateUrl,
        template: descriptor.template,
        transclude: descriptor.transclude,
        require: descriptor.require || void 0,
        controller: DynamicController
    });
}
function Component(descriptor) {
    if (!descriptor.name.match(/^(bk|rd)[A-Z]/)) {
        throw new Error('components name must start with "bk" or "rd" followed by an upper case ' +
            'alphabet. e.g. \'bkMyExample\'. This will create a directive with the name ' +
            '\'bk-my-example\'. Component\'s class name in this case must be MyExampleComponent.');
    }
    let componentConstructorName = descriptor.name.replace(/^bk|^rd/, '') + 'Component';
    return function (constructor) {
        provide(_.partial(makeFactory, componentConstructorName, constructor));
        provide(_.partial(makeComponent, descriptor, constructor));
        constructor.componentName = descriptor.name;
        return constructor;
    };
}

/**
* Copyright: ThoughtSpot Inc. 2012-2016
* Author: Shashank Singh (sunny@thoughtspot.com)
*
* @fileoverview A model repsenting color palettes used in blink charts (and possibly
* other places too in the future).
*/
class ColorPalette {
    constructor(colors) {
        this.colors = colors;
    }
    static fromJson(json) {
        let colors = json.colors.map((color) => {
            return color;
        });
        return new ColorPalette(colors);
    }
    toJson() {
        let colors = this.colors.map((color) => {
            return color;
        });
        return {
            colors: colors
        };
    }
    getColors() {
        return this.colors;
    }
    setColors(colors) {
        this.colors = colors;
    }
    getCssColors() {
        return this.colors.map((color) => color);
    }
    // This updated the pallete to new size using default colors.
    // We try to retain as much we can.
    sanitizeColors(defaultColors) {
        if (!defaultColors) {
            return;
        }
        if (!!this.colors && this.colors.length >= defaultColors.length) {
            this.colors = this.colors.slice(0, defaultColors.length);
        }
        else {
            this.colors = defaultColors.slice(0);
        }
    }
}

/**
* Copyright: ThoughtSpot Inc. 2012-2016
* Author: Shashank Singh (sunny@thoughtspot.com)
*
* @fileoverview A service to allow uploading blobs of data in backend persistent storage.
*/
let Command = ngRequire('Command');
var BlobType;
(function (BlobType) {
    BlobType[BlobType["FONT_WOFF"] = 0] = "FONT_WOFF";
    BlobType[BlobType["IMAGE_JPEG"] = 1] = "IMAGE_JPEG";
    BlobType[BlobType["IMAGE_PNG"] = 2] = "IMAGE_PNG";
    BlobType[BlobType["IMAGE"] = 3] = "IMAGE";
    BlobType[BlobType["CSV"] = 4] = "CSV";
})(BlobType || (BlobType = {}));
class BlobService {
    static getBlobUrl(blobGuid) {
        return stringUtil_1(BlobService.BLOB_URL_PATTERN, {
            blobGuid: blobGuid
        });
    }
    static upload(blobGuid, file, blobType, blobCategory = BlobService.DEFAULT_BLOB_CATEGORY) {
        let mimeType = file.type || BlobService.getMimeTypeForBlobType(blobType);
        let command = new Command()
            .setPath(BlobService.API_END_POINT)
            .setIgnorable(false)
            .setPostMethod()
            .setIsMultipart(true)
            .setPostParams({
            id: blobGuid,
            content: file,
            category: blobCategory,
            'mime-type': mimeType
        });
        return command.execute();
    }
    static delete(blobGuid) {
        return new Command()
            .setPath('/file/deletefile/' + blobGuid)
            .setDeleteMethod()
            .execute();
    }
    static getFileHeadersForCategory(category) {
        let command = new Command()
            .setPath('/file/getheaders/' + category)
            .setIgnorable(false);
        return command.execute();
    }
    static validateFileForBlobType(file, blobType) {
        let isValid = BlobService.isValidFileForBlobType(file, blobType);
        if (isValid) {
            return null;
        }
        return BlobService.getInvalidFileTypeMessage(blobType);
    }
    static isValidFileForBlobType(file, blobType) {
        if (file.type) {
            let expectedMimeType = BlobService.getMimeTypeForBlobType(blobType);
            // mime-type not matching does not imply bad file type
            // e.g. for BlobType.IMAGE mimeType = image/* which would not
            // match image/png or image/jpeg.
            if (file.type.toLowerCase() === expectedMimeType.toLowerCase()) {
                return true;
            }
        }
        // mime-type is not always determined by the browser
        let fileName = file.name;
        let fileNameParts = fileName.split('.');
        if (fileNameParts.length <= 1) {
            return false;
        }
        let extension = _.last(fileNameParts).toUpperCase();
        switch (blobType) {
            case BlobType.FONT_WOFF:
                return extension === 'WOFF';
            case BlobType.IMAGE_JPEG:
                return ['JPEG', 'JPG'].includes(extension);
            case BlobType.IMAGE_PNG:
                return extension === 'PNG';
            case BlobType.IMAGE:
                return ['JPEG', 'JPG', 'PNG'].includes(extension);
            case BlobType.CSV:
                return extension === 'csv';
            default:
                return true;
        }
    }
    static getMimeTypeForBlobType(blobType) {
        switch (blobType) {
            case BlobType.FONT_WOFF:
                return 'application/font-woff';
            case BlobType.IMAGE_JPEG:
                return 'image/jpeg';
            case BlobType.IMAGE_PNG:
                return 'image/png';
            case BlobType.IMAGE:
                return 'image/*';
            case BlobType.CSV:
                return 'text/csv';
            default:
                return 'application/octet-stream';
        }
    }
    static getBlobTypeName(blobType) {
        switch (blobType) {
            case BlobType.FONT_WOFF:
                return strings
                    .blobUploadService
                    .blobTypeNames
                    .FONT;
            case BlobType.IMAGE_JPEG:
            case BlobType.IMAGE_PNG:
            case BlobType.IMAGE:
                return strings
                    .blobUploadService
                    .blobTypeNames
                    .IMAGE;
            case BlobType.CSV:
                return 'CSV';
            default:
                return strings
                    .blobUploadService
                    .blobTypeNames
                    .GENERIC;
        }
    }
    static getInvalidFileTypeMessage(blobType) {
        let template = strings
            .blobUploadService
            .invalidFileMessages.INVALID_TYPE;
        let fileType = BlobService.getBlobTypeName(blobType);
        return stringUtil_1(template, {
            fileType: fileType
        });
    }
}
BlobService.API_END_POINT = '/file/savefile';
BlobService.BLOB_URL_PATTERN = '/callosum/v1/file/getfile/{blobGuid}';
BlobService.DEFAULT_BLOB_CATEGORY = 'FILE';

/**
 * Copyright: ThoughtSpot Inc. 2012-2016
 * Author: Shashank Singh (sunny@thoughtspot.com)
 *
 * @fileoverview A model to represent a custom FontFace.
 */
let util$1 = ngRequire('util');
// Note (sunny): When extending these enums always add values
// to the list (and not remove/re-order) to avoid compatibility
// issues with older persisted configs.
var FontFaceFormat;
(function (FontFaceFormat) {
    FontFaceFormat[FontFaceFormat["WOFF"] = 0] = "WOFF";
    FontFaceFormat[FontFaceFormat["WOFF2"] = 1] = "WOFF2";
})(FontFaceFormat || (FontFaceFormat = {}));
var FontFaceStyle;
(function (FontFaceStyle) {
    FontFaceStyle[FontFaceStyle["NORMAL"] = 0] = "NORMAL";
    FontFaceStyle[FontFaceStyle["ITALIC"] = 1] = "ITALIC";
    FontFaceStyle[FontFaceStyle["OBLIQUE"] = 2] = "OBLIQUE";
})(FontFaceStyle || (FontFaceStyle = {}));
var FontFaceWeight;
(function (FontFaceWeight) {
    FontFaceWeight[FontFaceWeight["NORMAL"] = 400] = "NORMAL";
    FontFaceWeight[FontFaceWeight["LIGHT"] = 200] = "LIGHT";
    FontFaceWeight[FontFaceWeight["BOLD"] = 700] = "BOLD";
})(FontFaceWeight || (FontFaceWeight = {}));
class FontFace {
    constructor(guid, family, format, url = null, weight = null, style = null, size = NaN, unicodeRange = null, variant = null, stretch = null, color = null) {
        this.guid = guid;
        this.family = family;
        this.format = format;
        this.url = url;
        this.weight = weight;
        this.style = style;
        this.size = size;
        this.unicodeRange = unicodeRange;
        this.variant = variant;
        this.stretch = stretch;
        this.color = color;
    }
    static fromJson(json) {
        return new FontFace(json.guid, json.family, json.format, json.url, json.weight, json.style, json.size, json.unicodeRange, json.variant, json.strectch, json.color);
    }
    static convertFontFaceStyleToString(fontFaceStyle) {
        switch (fontFaceStyle) {
            case FontFaceStyle.ITALIC:
                return 'italic';
            case FontFaceStyle.OBLIQUE:
                return 'oblique';
            default:
                return 'normal';
        }
    }
    static convertFontFormatToString(fontFormat) {
        switch (fontFormat) {
            case FontFaceFormat.WOFF2:
                return 'WOFF2';
            default:
                return 'WOFF';
        }
    }
    static getQuotedFontFamilyName(fontFamily) {
        let familyNames = fontFamily.split(',');
        let quotedFamilyNames = familyNames.map(function (familyName) {
            familyName = familyName.trim();
            return `'${familyName}'`;
        });
        return quotedFamilyNames.join(',');
    }
    toJson() {
        return {
            guid: this.guid,
            family: this.family,
            format: this.format,
            url: this.url,
            weight: this.weight,
            style: this.style,
            size: this.size,
            unicodeRange: this.unicodeRange,
            variant: this.variant,
            stretch: this.stretch,
            color: this.color
        };
    }
    toStyle() {
        // TODO (sunny): Figure out a good pattern to cache
        // these values that works with updates without having
        // to declare getters and setter for all properties.
        return this.createStyle();
    }
    toHtml() {
        return this.createHtml();
    }
    toFontFaceRule() {
        let fontFaceRule = {
            fontFamily: FontFace.getQuotedFontFamilyName(this.family),
            fontUrl: this.url,
            fontFormat: FontFace.convertFontFormatToString(this.format)
        };
        fontFaceRule.fontStyle = this.style !== null
            ? FontFace.convertFontFaceStyleToString(this.style)
            : FontFace.convertFontFaceStyleToString(FontFace.FontFaceDefaultValues.STYLE);
        fontFaceRule.fontWeight = _.isNumber(this.weight)
            ? this.weight : FontFace.FontFaceDefaultValues.WEIGHT;
        fontFaceRule.unicodeRange = this.unicodeRange !== null
            ? this.unicodeRange : FontFace.FontFaceDefaultValues.UNICODE_RANGE;
        fontFaceRule.fontVariant = this.variant !== null
            ? this.variant : FontFace.FontFaceDefaultValues.VARIANT;
        fontFaceRule.fontStretch = this.stretch !== null
            ? this.stretch : FontFace.FontFaceDefaultValues.STRETCH;
        return fontFaceRule;
    }
    isLocal() {
        // if the font-doesn't have guid it is not backed by
        // a blob (this could be a FontFace representing a system
        // provided font or one loaded with the app)
        return !this.guid;
    }
    createStyle() {
        let style = {
            fontFamily: FontFace.getQuotedFontFamilyName(this.family)
        };
        if (_.isNumber(this.weight)) {
            style.fontWeight = this.weight;
        }
        else {
            style.fontWeight = 'inherit';
        }
        if (this.style !== null) {
            style.fontStyle = FontFace.convertFontFaceStyleToString(this.style);
        }
        else {
            style.fontStyle = 'inherit';
        }
        if (_.isNumber(this.size)) {
            style.fontSize = `${this.size}px`;
        }
        else {
            style.fontSize = 'inherit';
        }
        if (this.color !== null) {
            style.color = this.color;
        }
        else {
            style.color = 'inherit';
        }
        style.textShadow = 'none';
        style.textOutline = false;
        return style;
    }
    createHtml() {
        let propertyKeysRoot = strings.fontPreview.fontProperties;
        let tooltipData = new util$1.NameValuePairs();
        tooltipData.add(propertyKeysRoot.FAMILY, this.family);
        if (_.isNumber(this.weight)) {
            tooltipData.add(propertyKeysRoot.WEIGHT, FontFaceWeight[this.weight]);
        }
        if (!!this.style) {
            tooltipData.add(propertyKeysRoot.STYLE, FontFaceStyle[this.style]);
        }
        if (_.isNumber(this.size)) {
            tooltipData.add(propertyKeysRoot.SIZE, this.size.toString());
        }
        if (!!this.unicodeRange) {
            tooltipData.add(propertyKeysRoot.UNICODE_RANGE, this.unicodeRange);
        }
        if (!!this.variant) {
            tooltipData.add(propertyKeysRoot.VARIANT, this.variant);
        }
        if (!!this.stretch) {
            tooltipData.add(propertyKeysRoot.VARIANT, this.stretch);
        }
        if (!!this.color) {
            tooltipData.add(propertyKeysRoot.COLOR, this.color);
        }
        return tooltipData.getTemplate();
    }
}
FontFace.FontFaceDefaultValues = {
    VARIANT: 'normal',
    STRETCH: 'normal',
    WEIGHT: FontFaceWeight.NORMAL,
    STYLE: FontFaceStyle.NORMAL,
    UNICODE_RANGE: 'U+0-10FFFF'
};

/**
* Copyright: ThoughtSpot Inc. 2012-2016
* Author: Shashank Singh (sunny@thoughtspot.com)
*
* @fileoverview A model for custom style config stored in the backend.
*/
var CustomStylingConfig_1;
var AppLogoType;
(function (AppLogoType) {
    AppLogoType[AppLogoType["DEFAULT"] = 0] = "DEFAULT";
    AppLogoType[AppLogoType["GRAY"] = 1] = "GRAY";
    AppLogoType[AppLogoType["WIDE_BLACK"] = 2] = "WIDE_BLACK";
})(AppLogoType || (AppLogoType = {}));
var CustomizableChartFeature;
(function (CustomizableChartFeature) {
    CustomizableChartFeature[CustomizableChartFeature["X_AXIS_LABEL"] = 0] = "X_AXIS_LABEL";
    CustomizableChartFeature[CustomizableChartFeature["X_AXIS_TITLE"] = 1] = "X_AXIS_TITLE";
    CustomizableChartFeature[CustomizableChartFeature["Y_AXIS_LABEL"] = 2] = "Y_AXIS_LABEL";
    CustomizableChartFeature[CustomizableChartFeature["Y_AXIS_TITLE"] = 3] = "Y_AXIS_TITLE";
    CustomizableChartFeature[CustomizableChartFeature["TOOLTIP"] = 4] = "TOOLTIP";
    CustomizableChartFeature[CustomizableChartFeature["SCATTER_CHART"] = 5] = "SCATTER_CHART";
    CustomizableChartFeature[CustomizableChartFeature["PIE_CHART"] = 6] = "PIE_CHART";
    CustomizableChartFeature[CustomizableChartFeature["LINE_CHART"] = 7] = "LINE_CHART";
    CustomizableChartFeature[CustomizableChartFeature["COLUMN_CHART"] = 8] = "COLUMN_CHART";
    CustomizableChartFeature[CustomizableChartFeature["BAR_CHART"] = 9] = "BAR_CHART";
    CustomizableChartFeature[CustomizableChartFeature["AREA_CHART"] = 10] = "AREA_CHART";
    CustomizableChartFeature[CustomizableChartFeature["TAIL_FEATURE"] = 11] = "TAIL_FEATURE"; /* Not a real feature, used only for iteration over enum values */
})(CustomizableChartFeature || (CustomizableChartFeature = {}));
var CustomizableTableFeature;
(function (CustomizableTableFeature) {
    CustomizableTableFeature[CustomizableTableFeature["CELL"] = 0] = "CELL";
    CustomizableTableFeature[CustomizableTableFeature["TAIL_FEATURE"] = 1] = "TAIL_FEATURE"; /* Not a real feature, used only for iteration over enum values */
})(CustomizableTableFeature || (CustomizableTableFeature = {}));
class CustomStyleBackground {
    constructor(color) {
        this.color = color;
    }
    static fromJson(json) {
        let color = json.color;
        return new CustomStyleBackground(color);
    }
    toJson() {
        return {
            color: this.color
        };
    }
}
let CustomStylingConfig = CustomStylingConfig_1 = class CustomStylingConfig {
    constructor(version, customFontFaces, appLogoTypeToImage = {}, chartFeatureToFontGuid = {}, tableFeatureToFontGuid = {}, appBackground = null, footerText = null, chartColorPalettes = [], pageTitle = null, disableColorRotation = false) {
        this.version = version;
        this.customFontFaces = customFontFaces;
        this.appLogoTypeToImage = appLogoTypeToImage;
        this.chartFeatureToFontGuid = chartFeatureToFontGuid;
        this.tableFeatureToFontGuid = tableFeatureToFontGuid;
        this.appBackground = appBackground;
        this.footerText = footerText;
        this.chartColorPalettes = chartColorPalettes;
        this.pageTitle = pageTitle;
        this.disableColorRotation = disableColorRotation;
        this.tableFeatureToDefaultFontFace = {};
        this.chartFeatureToDefaultFontFace = {};
        this.defaultColors = null;
        // populate default fonts for all chart and table features
        CustomStylingConfig_1.getAllCustomizableTableFeatures().map((tableFeature) => {
            this.tableFeatureToDefaultFontFace[tableFeature]
                = CustomStylingConfig_1.createNewDefaultTableFontFace(tableFeature);
        });
        CustomStylingConfig_1.getAllCustomizableChartFeatures().map((chartFeature) => {
            this.chartFeatureToDefaultFontFace[chartFeature]
                = CustomStylingConfig_1.createNewDefaultChartFontFace(chartFeature);
        });
        let defaultColorCodes = [
            CustomStylingConfig_1.Defaults.Chart.ColorPalette.Large.COLORS
        ];
        this.defaultColors = defaultColorCodes.map((colorCodes) => {
            return colorCodes.map((colorCode) => colorCode);
        });
        CustomStylingConfig_1.sortChartColorPalettes(this.chartColorPalettes);
    }
    static getAllCustomizableTableFeatures() {
        let features = [];
        for (let feature = CustomizableTableFeature.CELL; feature < CustomizableTableFeature.TAIL_FEATURE; ++feature) {
            features.push(feature);
        }
        return features;
    }
    static getAllCustomizableChartFeatures() {
        let features = [];
        for (let feature = CustomizableChartFeature.X_AXIS_LABEL; feature < CustomizableChartFeature.TAIL_FEATURE; ++feature) {
            features.push(feature);
        }
        return features;
    }
    static fromJson(configJson) {
        let version = configJson.version;
        let appLogoTypeToGuid = configJson.appLogoTypeToImage || {};
        let customFontFaces = [];
        if (!!configJson.customFontFaces) {
            customFontFaces = configJson.customFontFaces.map((customFontFace) => FontFace.fromJson(customFontFace));
        }
        let chartFeatureToFontGuid = configJson.chartFeatureToFontGuid || {};
        let tableFeatureToFontGuid = configJson.tableFeatureToFontGuid || {};
        let appBackground = null;
        if (!!configJson.appBackground) {
            appBackground = CustomStyleBackground.fromJson(configJson.appBackground);
        }
        let footerText = '';
        if (!!configJson.footerText && !!configJson.footerText) {
            footerText = configJson.footerText;
        }
        let chartColorsPalettes = [];
        if (configJson.chartColorPalettes) {
            chartColorsPalettes = configJson.chartColorPalettes.map((colorPalette) => ColorPalette.fromJson(colorPalette));
        }
        let pageTitle = strings.Page_title;
        if (!!configJson.pageTitle) {
            pageTitle = configJson.pageTitle;
        }
        let disableColorRotation = false;
        if (configJson.disableColorRotation) {
            disableColorRotation = configJson.disableColorRotation;
        }
        return new CustomStylingConfig_1(version, customFontFaces, appLogoTypeToGuid, chartFeatureToFontGuid, tableFeatureToFontGuid, appBackground, footerText, chartColorsPalettes, pageTitle, disableColorRotation);
    }
    static convertChartFeatureToLabel(feature) {
        let constantsRoot = strings
            .styleCustomizer
            .customizableFeatures
            .chart;
        switch (feature) {
            case CustomizableChartFeature.X_AXIS_LABEL:
                return constantsRoot.X_AXIS_LABEL;
            case CustomizableChartFeature.X_AXIS_TITLE:
                return constantsRoot.X_AXIS_TITLE;
            case CustomizableChartFeature.Y_AXIS_LABEL:
                return constantsRoot.Y_AXIS_LABEL;
            case CustomizableChartFeature.Y_AXIS_TITLE:
                return constantsRoot.Y_AXIS_TITLE;
            case CustomizableChartFeature.TOOLTIP:
                return constantsRoot.TOOLTIP;
            case CustomizableChartFeature.SCATTER_CHART:
                return constantsRoot.SCATTER_CHART;
            case CustomizableChartFeature.PIE_CHART:
                return constantsRoot.PIE_CHART;
            case CustomizableChartFeature.LINE_CHART:
                return constantsRoot.LINE_CHART;
            case CustomizableChartFeature.COLUMN_CHART:
                return constantsRoot.COLUMN_CHART;
            case CustomizableChartFeature.BAR_CHART:
                return constantsRoot.BAR_CHART;
            case CustomizableChartFeature.AREA_CHART:
                return constantsRoot.AREA_CHART;
            default:
                return null;
        }
    }
    static covertTableFeatureToLabel(feature) {
        let constantsRoot = strings
            .styleCustomizer
            .customizableFeatures
            .table;
        switch (feature) {
            case CustomizableTableFeature.CELL:
                return constantsRoot.CELL;
            default:
                return null;
        }
    }
    static getPivotHeatmapColor(id) {
        // In case we run out of colors, we will cycle through
        id %= CustomStylingConfig_1.Defaults.Pivot.HEATMAP_COLORS.length;
        return CustomStylingConfig_1.Defaults.Pivot.HEATMAP_COLORS[id];
    }
    static getGeoBubbleColors() {
        return CustomStylingConfig_1.Defaults.Geo.COLORS.BUBBLE;
    }
    static getGeoAreaColors() {
        return CustomStylingConfig_1.Defaults.Geo.COLORS.AREA;
    }
    static createNewDefaultTableFontFace(tableFeature) {
        let fontFace = new FontFace(null, CustomStylingConfig_1.Defaults.Table.FONT_FAMILY, FontFaceFormat.WOFF, null);
        fontFace.size = CustomStylingConfig_1.Defaults.Table.FONT_SIZE;
        return fontFace;
    }
    static createNewDefaultChartFontFace(chartFeature) {
        let fontFace = new FontFace(null, CustomStylingConfig_1.Defaults.Chart.DEFAULT_FONT_FAMILY, FontFaceFormat.WOFF);
        fontFace.color = CustomStylingConfig_1.Defaults.Chart.DEFAULT_FONT_COLOR;
        fontFace.size = CustomStylingConfig_1.Defaults.Chart.DEFAULT_FONT_SIZE;
        switch (chartFeature) {
            case CustomizableChartFeature.TOOLTIP:
                fontFace.family = CustomStylingConfig_1.Defaults.Chart.LIGHT_FONT_FAMILY;
                fontFace.size = CustomStylingConfig_1.Defaults.Chart.TOOLTIP_FONT_SIZE;
                break;
            case CustomizableChartFeature.X_AXIS_TITLE:
            case CustomizableChartFeature.Y_AXIS_TITLE:
                fontFace.family = CustomStylingConfig_1.Defaults.Chart.LIGHT_FONT_FAMILY;
                fontFace.color = CustomStylingConfig_1.Defaults.Chart.AXIS_FONT_COLOR;
                fontFace.size = CustomStylingConfig_1.Defaults.Chart.AXIS_FONT_SIZE;
                break;
        }
        return fontFace;
    }
    static sortChartColorPalettes(colorPalettes) {
        colorPalettes.sort((colorPaletteA, colorPaletteB) => {
            return colorPaletteA.getColors().length
                - colorPaletteB.getColors().length;
        });
    }
    getAllCustomFontFaces() {
        return this.customFontFaces.slice(0);
    }
    getAppLogoImageGuid(appLogoType) {
        let customImage = this.appLogoTypeToImage[appLogoType];
        if (!!customImage) {
            return customImage.guid;
        }
        return null;
    }
    hasCustomImageLogo(appLogoType) {
        return !!this.appLogoTypeToImage[appLogoType];
    }
    getAppLogoUrl(appLogoType) {
        let customLogoImage = this.appLogoTypeToImage[appLogoType];
        if (!!customLogoImage) {
            return BlobService.getBlobUrl(customLogoImage.guid);
        }
        switch (appLogoType) {
            case AppLogoType.WIDE_BLACK:
                return CustomStylingConfig_1.Defaults.WIDE_APP_LOGO_URL;
            case AppLogoType.GRAY:
                return CustomStylingConfig_1.Defaults.APP_LOGO_GRAY_URL;
            default:
                return CustomStylingConfig_1.Defaults.APP_LOGO_URL;
        }
    }
    setAppLogoImageGuid(appLogoImageGuid, appLogoType) {
        this.appLogoTypeToImage[appLogoType] = {
            guid: appLogoImageGuid
        };
    }
    resetAppLogoImage(appLogoType) {
        delete this.appLogoTypeToImage[appLogoType];
    }
    getFaviconUrl(appLogoType) {
        let customLogoImage = this.appLogoTypeToImage[appLogoType];
        if (!!customLogoImage) {
            return BlobService.getBlobUrl(customLogoImage.guid);
        }
        return CustomStylingConfig_1.Defaults.APP_FAVICON;
    }
    getTableFontFace(tableFeature) {
        if (!!this.tableFeatureToFontGuid) {
            let fontGuid = this.tableFeatureToFontGuid[tableFeature];
            if (!!fontGuid) {
                return this.getFontFaceForGuid(fontGuid);
            }
        }
        return this.tableFeatureToDefaultFontFace[tableFeature];
    }
    setTableFont(fontFace, tableFeature) {
        if (!!fontFace.guid) {
            this.addOrUpdateFontFace(fontFace);
        }
        this.tableFeatureToFontGuid[tableFeature] = fontFace.guid;
    }
    resetTableFonts() {
        this.tableFeatureToFontGuid = {};
    }
    getChartFontFace(chartFeature) {
        if (!!this.chartFeatureToFontGuid) {
            let fontGuid = this.chartFeatureToFontGuid[chartFeature];
            if (!!fontGuid) {
                return this.getFontFaceForGuid(fontGuid);
            }
        }
        return this.chartFeatureToDefaultFontFace[chartFeature];
    }
    setChartFont(fontFace, chartFeature) {
        if (!!fontFace.guid) {
            this.addOrUpdateFontFace(fontFace);
        }
        this.chartFeatureToFontGuid[chartFeature] = fontFace.guid;
    }
    resetChartFonts() {
        this.chartFeatureToFontGuid = {};
    }
    addOrUpdateFontFace(fontFace) {
        // local default fonts can be available for the user
        // to choose but they are not persisted as custom
        // fonts.
        if (fontFace.isLocal()) {
            return;
        }
        _.remove(this.customFontFaces, function (existingFontFace) {
            return fontFace.guid === existingFontFace.guid;
        });
        this.customFontFaces.unshift(fontFace);
    }
    getAppBackground() {
        if (!!this.appBackground && !!this.appBackground.color) {
            return this.appBackground;
        }
        return CustomStyleBackground.fromJson({
            color: CustomStylingConfig_1.Defaults.AppBackground.COLOR
        });
    }
    setAppBackground(appBackground) {
        this.appBackground = appBackground;
    }
    resetAppBackground() {
        this.appBackground = null;
    }
    getFooterText() {
        return this.footerText;
    }
    setFooterText(footerText) {
        this.footerText = footerText;
    }
    resetFooterText() {
        this.footerText = '';
    }
    getChartColorPalettes() {
        // NOTE: We want to ensure that the colors used from custom template is always corrected to
        // the same size as the default template.
        if (this.chartColorPalettes && this.chartColorPalettes.length > 0) {
            // This is the case for older configs where we stored two palettes, where the
            // second palette was the large palette.
            // The callers are updated to work with an array with one large palette as the
            // only entry.
            let paletteToUse;
            if (this.chartColorPalettes.length === 2) {
                paletteToUse = this.chartColorPalettes[1];
            }
            else {
                paletteToUse = this.chartColorPalettes[0];
            }
            if (!paletteToUse) {
                return this.getDefaultColorPalettes();
            }
            paletteToUse.sanitizeColors(this.defaultColors[0]);
            this.chartColorPalettes = [paletteToUse];
            return this.chartColorPalettes;
        }
        return this.getDefaultColorPalettes();
    }
    setChartColorPalettes(colorPalettes) {
        this.chartColorPalettes = colorPalettes;
        CustomStylingConfig_1.sortChartColorPalettes(this.chartColorPalettes);
    }
    resetChartColorPalettes() {
        this.chartColorPalettes = [];
    }
    isColorRotationDisabled() {
        return this.disableColorRotation;
    }
    setColorRotationDisabled(disableColorRotation) {
        this.disableColorRotation = disableColorRotation;
    }
    resetColorRotation() {
        this.disableColorRotation = false;
    }
    getPageTitle() {
        return this.pageTitle;
    }
    setPageTitle(pageTitle) {
        this.pageTitle = pageTitle;
    }
    resetPageTitle() {
        this.pageTitle = strings.Page_title;
    }
    toJson() {
        let fontFaceJson = this.customFontFaces.map(function (customFontFace) {
            return customFontFace.toJson();
        });
        let chartColorPaletteJson = this.chartColorPalettes.map((chartColorPalette) => chartColorPalette.toJson());
        let appBackground = this.appBackground
            ? this.appBackground.toJson() : null;
        return {
            appLogoTypeToImage: this.appLogoTypeToImage,
            customFontFaces: fontFaceJson,
            chartFeatureToFontGuid: this.chartFeatureToFontGuid,
            tableFeatureToFontGuid: this.tableFeatureToFontGuid,
            appBackground: appBackground,
            footerText: this.footerText,
            chartColorPalettes: chartColorPaletteJson,
            disableColorRotation: this.disableColorRotation,
            pageTitle: this.pageTitle
        };
    }
    getDefaultColorPalettes() {
        return this.defaultColors.map((defaultColorList) => new ColorPalette(defaultColorList));
    }
    getFontFaceForGuid(guid) {
        if (!guid || !this.customFontFaces) {
            return null;
        }
        return this.customFontFaces.find(function (fontFace) {
            return fontFace.guid === guid;
        }) || null;
    }
};
// for upgrading configs on major structure changes
// private static CURRENT_CONFIG_VERSION: number = 1;
CustomStylingConfig.singleHueColors = [
    blinkConstants_1.defaultColorPalette.BLUE,
    blinkConstants_1.defaultColorPalette.TEAL,
    blinkConstants_1.defaultColorPalette.YELLOW,
    blinkConstants_1.defaultColorPalette.GREEN,
    blinkConstants_1.defaultColorPalette.PURPLE,
    blinkConstants_1.defaultColorPalette.ORANGE,
    blinkConstants_1.defaultColorPalette.GREY,
    blinkConstants_1.defaultColorPalette.RED,
];
CustomStylingConfig.primaryColors = [
    blinkConstants_1.defaultColorPalette.RED[blinkConstants_1.PRIMARY_COLOR_HUE_IDX],
    blinkConstants_1.defaultColorPalette.BLUE[blinkConstants_1.PRIMARY_COLOR_HUE_IDX],
    blinkConstants_1.defaultColorPalette.GREEN[blinkConstants_1.PRIMARY_COLOR_HUE_IDX],
    blinkConstants_1.defaultColorPalette.TEAL[blinkConstants_1.PRIMARY_COLOR_HUE_IDX],
    blinkConstants_1.defaultColorPalette.ORANGE[blinkConstants_1.PRIMARY_COLOR_HUE_IDX],
    blinkConstants_1.defaultColorPalette.PURPLE[blinkConstants_1.PRIMARY_COLOR_HUE_IDX],
    blinkConstants_1.defaultColorPalette.YELLOW[blinkConstants_1.PRIMARY_COLOR_HUE_IDX]
];
CustomStylingConfig.multiHueColors = [
    blinkConstants_1.multiHueColorsColorPalette.RED_YELLOW,
    blinkConstants_1.multiHueColorsColorPalette.BLUE,
    blinkConstants_1.multiHueColorsColorPalette.YELLOW_GREEN,
    blinkConstants_1.multiHueColorsColorPalette.PINK,
    blinkConstants_1.multiHueColorsColorPalette.YELLOW_GREEN_BLUE,
    blinkConstants_1.multiHueColorsColorPalette.REDS,
    blinkConstants_1.multiHueColorsColorPalette.PURPLES
];
CustomStylingConfig.Defaults = {
    APP_LOGO_URL: 'resources/img/logo/TS-logo-white-no-bg.svg',
    APP_LOGO_GRAY_URL: 'resources/img/logo/TS-logo-gray-no-bg.svg',
    WIDE_APP_LOGO_URL: 'resources/img/logo/TS-logo-login.svg',
    APP_FAVICON: 'resources/img/logo/favicon_3.ico',
    Table: {
        FONT_FAMILY: 'Optimo-Plain, Helvetica Neue, Helvetica, Arial, sans-serif',
        FONT_SIZE: 14
    },
    Pivot: {
        HEATMAP_COLORS: [
            blinkConstants_1.defaultColorPalette.TEAL[0],
            blinkConstants_1.defaultColorPalette.YELLOW[0],
            blinkConstants_1.defaultColorPalette.BLUE[0],
            blinkConstants_1.defaultColorPalette.RED[0],
            blinkConstants_1.defaultColorPalette.GREEN[0],
            blinkConstants_1.defaultColorPalette.PURPLE[0],
            blinkConstants_1.defaultColorPalette.ORANGE[0],
            blinkConstants_1.defaultColorPalette.GREY[0],
        ]
    },
    Geo: {
        COLORS: {
            BUBBLE: CustomStylingConfig_1.primaryColors,
            AREA: CustomStylingConfig_1.multiHueColors
        },
    },
    Chart: {
        DEFAULT_FONT_FAMILY: 'Optimo-Plain, Helvetica Neue, Helvetica, Arial, sans-serif',
        DEFAULT_FONT_SIZE: 12,
        DEFAULT_FONT_COLOR: '#5e5e5e',
        LIGHT_FONT_FAMILY: 'Optimo-Plain, Helvetica Neue, Helvetica, Arial, sans-serif',
        AXIS_FONT_SIZE: 12,
        AXIS_FONT_COLOR: '#5e5e5e',
        TOOLTIP_FONT_SIZE: 11,
        ColorPalette: {
            Large: {
                COLORS: _.flatten(CustomStylingConfig_1.singleHueColors)
            }
        }
    },
    AppBackground: {
        COLOR: '#eef1f4'
    }
};
CustomStylingConfig = CustomStylingConfig_1 = __decorate([
    Provide('CustomStylingConfig')
], CustomStylingConfig);

export { AppLogoType as A, falcon as B, CustomStylingConfig as C, numberUtil_4 as D, blink$1 as E, numberUtil_14 as F, numeral as G, CustomizableChartFeature as H, logger_1 as I, logger_2 as J, logger_5 as K, net as L, Component as M, Provide as P, _, protoRoot as a, specialDataValueFormat as b, blinkConstants as c, callosum as d, blinkConstants_1 as e, flags as f, getDependancy as g, stringUtil_1 as h, strings as i, jsonConstants_1 as j, numberUtil_5 as k, numberUtil_1 as l, CustomizableTableFeature as m, ngRequire as n, scheduler as o, protoRoot as p, sage as q, logger as r, stringUtil as s, translations as t, updateResources as u, stringUtil_2 as v, common as w, logger_3 as x, bach as y, atlas as z };
//# sourceMappingURL=chunk-68eb1584.js.map
